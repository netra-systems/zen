apiVersion: apps/v1
kind: Deployment
metadata:
  name: zen-secrets-manager
  namespace: zen-secrets
  labels:
    app.kubernetes.io/name: zen-secrets
    app.kubernetes.io/component: secret-management
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zen-secrets
      app.kubernetes.io/component: secret-management
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zen-secrets
        app.kubernetes.io/component: secret-management
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: zen-secrets-manager
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: zen-secrets-manager
        image: gcr.io/PROJECT_ID/zen-secrets:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ZEN_SECRETS_GCP_PROJECT_ID
          value: "PROJECT_ID"
        - name: ZEN_SECRETS_ENVIRONMENT
          value: "production"
        - name: ZEN_SECRETS_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ZEN_SECRETS_WORKLOAD_IDENTITY_ENABLED
          value: "true"
        - name: ZEN_SECRETS_MONITORING_ENABLED
          value: "true"
        - name: ZEN_SECRETS_AUDIT_LOGGING_ENABLED
          value: "true"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: zen-secrets
                  app.kubernetes.io/component: secret-management
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: zen-secrets-manager
  namespace: zen-secrets
  labels:
    app.kubernetes.io/name: zen-secrets
    app.kubernetes.io/component: secret-management
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app.kubernetes.io/name: zen-secrets
    app.kubernetes.io/component: secret-management
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: zen-secrets-manager
  namespace: zen-secrets
  labels:
    app.kubernetes.io/name: zen-secrets
    app.kubernetes.io/component: secret-management
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zen-secrets
      app.kubernetes.io/component: secret-management