# Alternative faster approach using pre-installed gcloud
# This example shows how to use the pre-installed gcloud SDK on GitHub runners
# which can save 20-26 seconds per run

name: Staging Environment (Fast Alternative)

on:
  pull_request:
    types: [opened, synchronize, closed, labeled, unlabeled]

env:
  GCP_PROJECT_ID: netra-staging
  GCP_REGION: us-central1

jobs:
  deploy-staging-fast:
    runs-on: warp-custom-default
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # METHOD 1: Use pre-installed gcloud (saves ~26 seconds)
      - name: Authenticate with pre-installed gcloud
        run: |
          # Write credentials to file
          echo '${{ secrets.GCP_STAGING_SA_KEY }}' > /tmp/gcp-key.json
          
          # Authenticate using the pre-installed gcloud
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          
          # Clean up credentials file
          rm /tmp/gcp-key.json

      # METHOD 2: Use workload identity federation (most secure, no keys needed)
      # Requires one-time setup in GCP console
      # - name: Authenticate via Workload Identity
      #   uses: google-github-actions/auth@v2
      #   with:
      #     workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/github/providers/my-repo'
      #     service_account: 'github-actions@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      # METHOD 3: Minimal setup-gcloud with version pinning
      # - name: Set up Cloud SDK (minimal)
      #   uses: google-github-actions/setup-gcloud@v2
      #   with:
      #     version: '457.0.0'  # Pin specific version for caching
      #     install_components: ''  # Don't install extra components

      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # Rest of your workflow continues here...