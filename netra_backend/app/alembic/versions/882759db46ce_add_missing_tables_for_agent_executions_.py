"""add missing tables for agent executions subscriptions and credit transactions

Revision ID: 882759db46ce
Revises: add_deleted_at_001
Create Date: 2025-09-08 11:03:32.303085

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '882759db46ce'
down_revision: Union[str, Sequence[str], None] = 'add_deleted_at_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agent_executions',
    sa.Column('id', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.String(length=50), nullable=False),
    sa.Column('agent_id', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('api_calls_made', sa.Integer(), nullable=True),
    sa.Column('cost_cents', sa.Integer(), nullable=True),
    sa.Column('thread_id', sa.String(length=50), nullable=True),
    sa.Column('workflow_id', sa.String(length=50), nullable=True),
    sa.Column('execution_context', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_executions_agent_id'), 'agent_executions', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_executions_status'), 'agent_executions', ['status'], unique=False)
    op.create_index(op.f('ix_agent_executions_thread_id'), 'agent_executions', ['thread_id'], unique=False)
    op.create_index(op.f('ix_agent_executions_user_id'), 'agent_executions', ['user_id'], unique=False)
    op.create_index(op.f('ix_agent_executions_workflow_id'), 'agent_executions', ['workflow_id'], unique=False)
    op.create_table('credit_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('transaction_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('plan_name', sa.String(length=100), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('ix_auth_audit_logs_created_at'), table_name='auth_audit_logs')
    op.drop_index(op.f('ix_auth_audit_logs_event_type'), table_name='auth_audit_logs')
    op.drop_index(op.f('ix_auth_audit_logs_user_id'), table_name='auth_audit_logs')
    op.drop_table('auth_audit_logs')
    op.drop_index(op.f('ix_auth_sessions_user_id'), table_name='auth_sessions')
    op.drop_table('auth_sessions')
    op.drop_index(op.f('ix_password_reset_tokens_email'), table_name='password_reset_tokens')
    op.drop_index(op.f('ix_password_reset_tokens_user_id'), table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_index(op.f('ix_auth_users_email'), table_name='auth_users')
    op.drop_table('auth_users')
    # Use raw SQL for PostgreSQL-compatible column type conversion
    # This fixes the casting issue by using proper array_to_json conversion
    op.execute("""
        ALTER TABLE assistants 
        ALTER COLUMN file_ids TYPE json 
        USING CASE 
            WHEN file_ids IS NULL THEN NULL
            WHEN array_length(file_ids, 1) IS NULL THEN '[]'::json
            ELSE array_to_json(file_ids)
        END;
    """)
    
    op.execute("""
        ALTER TABLE corpus_audit_logs 
        ALTER COLUMN compliance_flags TYPE json 
        USING CASE 
            WHEN compliance_flags IS NULL THEN NULL
            WHEN array_length(compliance_flags, 1) IS NULL THEN '[]'::json
            ELSE array_to_json(compliance_flags)
        END;
    """)
    
    op.execute("""
        ALTER TABLE messages 
        ALTER COLUMN file_ids TYPE json 
        USING CASE 
            WHEN file_ids IS NULL THEN NULL
            WHEN array_length(file_ids, 1) IS NULL THEN '[]'::json
            ELSE array_to_json(file_ids)
        END;
    """)
    
    op.execute("""
        ALTER TABLE runs 
        ALTER COLUMN file_ids TYPE json 
        USING CASE 
            WHEN file_ids IS NULL THEN NULL
            WHEN array_length(file_ids, 1) IS NULL THEN '[]'::json
            ELSE array_to_json(file_ids)
        END;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('runs', 'file_ids',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False,
               postgresql_using='array(select jsonb_array_elements_text(file_ids))')
    op.alter_column('messages', 'file_ids',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False,
               postgresql_using='array(select jsonb_array_elements_text(file_ids))')
    op.alter_column('corpus_audit_logs', 'compliance_flags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=True,
               postgresql_using='array(select jsonb_array_elements_text(compliance_flags))')
    op.alter_column('assistants', 'file_ids',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=False,
               postgresql_using='array(select jsonb_array_elements_text(file_ids))')
    op.create_table('auth_users',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('auth_provider', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('provider_user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('provider_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('failed_login_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_users_pkey'))
    )
    op.create_index(op.f('ix_auth_users_email'), 'auth_users', ['email'], unique=True)
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('token_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('password_reset_tokens_pkey')),
    sa.UniqueConstraint('token_hash', name=op.f('password_reset_tokens_token_hash_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_password_reset_tokens_user_id'), 'password_reset_tokens', ['user_id'], unique=False)
    op.create_index(op.f('ix_password_reset_tokens_email'), 'password_reset_tokens', ['email'], unique=False)
    op.create_table('auth_sessions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('refresh_token_hash', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_sessions_pkey'))
    )
    op.create_index(op.f('ix_auth_sessions_user_id'), 'auth_sessions', ['user_id'], unique=False)
    op.create_table('auth_audit_logs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('event_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('auth_audit_logs_pkey'))
    )
    op.create_index(op.f('ix_auth_audit_logs_user_id'), 'auth_audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_auth_audit_logs_event_type'), 'auth_audit_logs', ['event_type'], unique=False)
    op.create_index(op.f('ix_auth_audit_logs_created_at'), 'auth_audit_logs', ['created_at'], unique=False)
    op.drop_table('subscriptions')
    op.drop_table('credit_transactions')
    op.drop_index(op.f('ix_agent_executions_workflow_id'), table_name='agent_executions')
    op.drop_index(op.f('ix_agent_executions_user_id'), table_name='agent_executions')
    op.drop_index(op.f('ix_agent_executions_thread_id'), table_name='agent_executions')
    op.drop_index(op.f('ix_agent_executions_status'), table_name='agent_executions')
    op.drop_index(op.f('ix_agent_executions_agent_id'), table_name='agent_executions')
    op.drop_table('agent_executions')
    # ### end Alembic commands ###
