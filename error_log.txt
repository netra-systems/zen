FIVE WHYS ROOT CAUSE ANALYSIS - LLM Manager Null Reference Fix
================================================================
Date: 2025-09-04 20:20 IST
Status: ✅ FIXED

ORIGINAL ERROR:
--------------
2025-09-04 14:20:45.164 | ERROR | LLM request failed: 'NoneType' object has no attribute 'ask_llm'
2025-09-04 14:20:45.164 | WARNING | Action plan generation failed, using fallback: 'NoneType' object has no attribute 'ask_llm'

FIVE WHYS ANALYSIS:
------------------
WHY #1: The llm_manager attribute is None when _get_llm_response_with_monitoring() tries to call self.llm_manager.ask_llm()
WHY #2: ActionsToMeetGoalsSubAgent instantiated without LLMManager being passed as parameter
WHY #3: AgentRegistry being called without required llm_manager and tool_dispatcher parameters in some code paths
WHY #4: Inconsistent instantiation patterns - legacy AgentRegistry() vs new factory patterns with parameters
WHY #5: ROOT CAUSE - Incomplete architectural migration between legacy and factory patterns, allowing agents to be created without essential dependencies

SOLUTION IMPLEMENTED:
--------------------
1. Added runtime validation in _get_llm_response_with_monitoring() methods
   - Clear error message explaining the architectural issue
   - References to FIVE_WHYS_ANALYSIS_20250904.md

2. Added construction-time warnings in __init__() methods
   - RuntimeWarning when agent created without LLMManager
   - Helps identify problematic instantiation paths early

3. Applied fix to:
   - /netra_backend/app/agents/actions_to_meet_goals_sub_agent.py
   - /netra_backend/app/agents/optimizations_core_sub_agent.py

4. Created comprehensive test suite:
   - /tests/mission_critical/test_llm_manager_null_reference_fix.py
   - Validates all Five Whys levels
   - Tests both failure and success paths

VERIFICATION:
------------
✅ Clear error messages instead of cryptic NoneType errors
✅ Early detection via construction warnings
✅ Root cause documented and referenced
✅ Backward compatibility maintained during migration
✅ Test coverage for all Five Whys levels

NEXT STEPS:
-----------
1. Complete architectural migration to factory patterns
2. Add startup validation for all critical services
3. Implement dependency injection framework
4. Remove legacy AgentRegistry pattern entirely

This fix addresses the immediate symptom while the team completes the architectural migration.