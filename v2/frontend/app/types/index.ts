/* eslint-disable */
/**
 * This file was automatically generated by pydantic-to-typescript.
 * Do not modify it by hand.
 */

export interface AuthConfigResponse {
  google_client_id: string;
  endpoints: AuthEndpoints;
  development_mode: boolean;
  user?: User | null;
  authorized_javascript_origins: string[];
  authorized_redirect_uris: string[];
  google_login_url?: string;
  logout_url?: string;
}

export interface AuthEndpoints {
  login: string;
  logout: string;
  token: string;
  user: string;
  dev_login: string;
}

export type SubAgentLifecycle = "pending" | "running" | "completed" | "failed" | "shutdown";
export type ToolStatus = "success" | "error" | "partial_success" | "in_progress" | "complete";

export interface AgentCompleted {
  run_id: string;
  result: any;
}

export interface AgentErrorMessage {
  run_id: string;
  message: string;
}

export interface AgentMessage {
  text: string;
}

export interface AgentStarted {
  run_id: string;
}

export interface AgentState {
  messages: BaseMessage[];
  next_node: string;
  tool_results?: ToolResult[] | null;
}

export interface AnalysisRequest {
  request_model: RequestModel;
}

export interface BaseMessage {
  content: string;
  type: string;
}

export interface Corpus {
  name: string;
  description?: string | null;
  id: string;
  status: string;
  created_by_id: string;
  created_at: string;
  updated_at: string;
}

export interface CorpusCreate {
  name: string;
  description?: string | null;
}

export interface CorpusUpdate {
  name: string;
  description?: string | null;
}

export interface DeepAgentState {
  messages: BaseMessage[];
  todos: Todo[];
  files: {
    [k: string]: any;
  };
}

export interface ReferenceCreateRequest {
  name: string;
  friendly_name: string;
  description?: string | null;
  type: string;
  value: string;
  version: string;
}

export interface ReferenceGetResponse {
  references: ReferenceItem[];
}

export interface ReferenceItem {
  id: number;
  name: string;
  friendly_name: string;
  description?: string | null;
  type: string;
  value: string;
  version: string;
}

export interface ReferenceUpdateRequest {
  name?: string | null;
  friendly_name?: string | null;
  description?: string | null;
  type?: string | null;
  value?: string | null;
  version?: string | null;
}

export interface RequestModel {
  id?: string;
  user_id: string;
  query: string;
  workloads: Workload[];
  constraints?: any;
}

export interface RunComplete {
  run_id: string;
  result: any;
}

export interface StopAgent {
  run_id: string;
}

export interface StreamEvent {
  event_type: string;
  data: {
    [k: string]: any;
  };
}

export interface SubAgentState {
  messages: BaseMessage[];
  next_node: string;
  tool_results?: ToolResult[] | null;
  lifecycle?: SubAgentLifecycle;
  start_time?: string | null;
  end_time?: string | null;
  error_message?: string | null;
}

export interface SubAgentUpdate {
  sub_agent_name: string;
  state: SubAgentState;
}

export interface Todo {
  id: string;
  task: string;
  status: string;
  items: string[];
}

export interface Token {
  access_token: string;
  token_type: string;
}

export interface ToolCompleted {
  tool_name: string;
  result: any;
}

export interface ToolInput {
  tool_name: string;
  args?: any[];
  kwargs?: {
    [k: string]: any;
  };
}

export interface ToolResult {
  tool_input: ToolInput;
  status?: ToolStatus;
  message?: string;
  payload?: any;
  start_time?: number;
  end_time?: number | null;
}

export interface ToolStarted {
  tool_name: string;
}

export interface User {
  email: string;
  is_active?: boolean;
  is_superuser?: boolean;
  full_.name?: string | null;
  picture?: string | null;
  id: string;
}

export interface UserMessage {
  text: string;
  references?: string[];
}

export interface WebSocketError {
  message: string;
}

export interface WebSocketMessage {
  type:
    | "analysis_request"
    | "error"
    | "stream_event"
    | "run_complete"
    | "sub_agent_update"
    | "agent_started"
    | "agent_completed"
    | "agent_error"
    | "user_message"
    | "agent_message"
    | "tool_started"
    | "tool_completed"
    | "stop_agent";
  payload:
    | AnalysisRequest
    | WebSocketError
    | StreamEvent
    | RunComplete
    | SubAgentUpdate
    | AgentStarted
    | AgentCompleted
    | AgentErrorMessage
    | UserMessage
    | AgentMessage
    | ToolStarted
    | ToolCompleted
    | StopAgent;
}

export interface Workload {
  run_id: string;
  query: string;
  data_source: DataSource;
  time_range: TimeRange;
}

export interface DataSource {
  source_table: string;
  filters?: {
    [k: string]: any;
  } | null;
}

export interface TimeRange {
  start_time: string;
  end_time: string;
}
