SPEC:WS: WS Websockets

WS:1:0: Primary Spec: WS Websockets Specification.
WS:1:1:0: Goal: WS working as a complete end to end system.
WS:1:1:1: CRITICAL: The Coherence of the system working in harmony front and backend together.
WS:1:1:1:1: Coherence: Validate Coherence with SPEC:chat_ui_ux 
WS:1:1:1:2: Coherence: Validate Coherence with SPEC:netra_user_auth
WS:1:1:1:3: Coherence: Validate Coherence with SPEC:conventions
WS:1:1:1:4: Coherence: Agent to Frontend communications using WS
WS:1:1:1:5: Coherence: Frontend to Agent communications using WS
WS:1:1:1:6: Coherence: Frontend loading into Chat UI/UX concepts using WS
WS:1:1:1:7: Coherence: With service discovery: backend tells frontend WS config: frontend loads config from service discovery

WS:1:0:1:0: JSON first: Always send and recieve JSON.
WS:1:0:1:2: Careful: Lanchain stream to JSON parsing
WS:1:0:1:2: Careful: WS use JSON not string
WS:1:0:1:3: Careful: Protect against multiple functions or processing double or triple wrapping JSON badly

WS:1:0:1:0 WebSocket connection is established statefully on application state load (BEFORE the first message is sent.) It is an ERROR if WS canâ€™t be established.
WS:1:0:1:1: Authorization considerations. think carefully dev auth, regular user auth, etc. all well typed.
WS:1:0:2:2: WebSocket connection is persistent.
WS:1:0:2:3: Important: WebSocket connection resilient to component re-renders and lifecycle changes.
Websockets works with regular JSON etc. when the user sends chat messages or free text or clicking examples etc.
WS:1:0:2:4: WS messages are passed properly and use types.

WS:1:0:2:0: WS Startup profile: When application starts up or reloads, WS are available.
WS:1:0:2:1: If the front end sends a socket but the backend rejects, it must be logged clearly. 
WS:1:0:2:2: Backend sends responses using a single source of truth to manage WS.
WS:1:0:2:5: The backend provides discovery of WS config to frontend.
WS:1:0:2:5:1: The frontend discovers WS config at earilest reasonable application state.

WS:1:0:3: Python classes. Strong python types and classes every possible WS related item.
Seperate out sub parts here. Think about what is the generic WS handling, and when other parts
of the application want to handle it.

WS:ENDS