SPEC:WS: WS Websockets

WS:1:0: Primary Spec: WS Websockets Specification.
WS:1:1:0: Goal: WS working as a complete end to end system.
WS:1:1:1: CRITICAL: The Coherence of the system working in harmony front and backend together.
WS:1:1:1:0: Cohernece: Coherence with User Auth using WS
WS:1:1:1:1: Coherence: Agent communications using WS

WS:1:0:1:0: Careful: Lanchain stream to JSON parsing
WS:1:0:1:1: Careful: WS use JSON not string
WS:1:0:1:2: Careful: Protect against multiple functions or processing double or triple wrapping JSON badly

WS:1:0:1:3: Module imports: Check module imports and add tests for validating modules import

WS:1:0:2:0: Frontend: WebSocket connection concepts.
WS:0:2:1: WebSocket connection is established statefully on application state load (BEFORE the first message is sent.) It is an ERROR if WS canâ€™t be established.
WS:1:0:2:2: WebSocket connection is persistent.
WS:1:0:2:3: Important: WebSocket connection resilient to component re-renders and lifecycle changes.
Websockets works with regular JSON etc. when the user sends chat messages or free text or clicking examples etc.
WS:1:0::2:4: WS messages are passed properly and use types.

WS:1:0:2: Backend:
WS:1:0:2:0: WS Startup profile: When application starts up or reloads, WS are available.
WS:1:0:2:1: If the front end sends a socket but the backend rejects, it must be logged clearly. 
WS:1:0:2:2: Backend sends responses using a single source of truth to manage WS.
WS:1:0:2:4: Backend: Always complete JSON objects.
WS:1:0:2:5: The backend provides discovery of WS config to frontend.
WS:1:0:2:5:1: The frontend discovers WS config at earilest reasonable application state.

WS:ENDS