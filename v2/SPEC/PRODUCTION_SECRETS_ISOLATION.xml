<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <name>Production Secrets Isolation Architecture</name>
    <version>1.0.0</version>
    <purpose>Secure isolation of production secrets when running Claude with --dangerously-skip-permissions</purpose>
    <created>2025-08-10</created>
    <classification>SECURITY-CRITICAL</classification>
  </metadata>

  <executive_summary>
    <overview>
      Defines a multi-layered security architecture to prevent unauthorized access to production secrets
      when development teams use Claude with --dangerously-skip-permissions flag. Ensures complete 
      isolation between development and production environments through IAM controls, network segregation,
      and cryptographic boundaries.
    </overview>
    <risk_level>HIGH</risk_level>
    <compliance_requirements>
      <requirement>SOC2 Type II</requirement>
      <requirement>ISO 27001</requirement>
      <requirement>GDPR Article 32</requirement>
    </compliance_requirements>
  </executive_summary>

  <architecture>
    <security_zones>
      <zone id="production">
        <name>Production Security Zone</name>
        <classification>RESTRICTED</classification>
        <access_model>ZERO_TRUST</access_model>
        <authentication>
          <method>Service Account with Workload Identity</method>
          <mfa_required>true</mfa_required>
          <session_duration>3600</session_duration>
        </authentication>
      </zone>
      
      <zone id="development">
        <name>Development Security Zone</name>
        <classification>INTERNAL</classification>
        <access_model>DEFAULT_DENY</access_model>
        <authentication>
          <method>Google Cloud Default Application Credentials</method>
          <mfa_required>false</mfa_required>
          <session_duration>28800</session_duration>
        </authentication>
      </zone>
      
      <zone id="staging">
        <name>Staging Security Zone</name>
        <classification>CONTROLLED</classification>
        <access_model>LEAST_PRIVILEGE</access_model>
        <authentication>
          <method>Service Account with Limited Scope</method>
          <mfa_required>true</mfa_required>
          <session_duration>7200</session_duration>
        </authentication>
      </zone>
    </security_zones>

    <isolation_boundaries>
      <boundary type="PROJECT">
        <name>GCP Project Isolation</name>
        <implementation>
          <production_project>netra-prod-{random-suffix}</production_project>
          <staging_project>netra-staging-{random-suffix}</staging_project>
          <development_project>netra-dev-{random-suffix}</development_project>
          <cross_project_access>EXPLICITLY_DENIED</cross_project_access>
        </implementation>
      </boundary>
      
      <boundary type="NETWORK">
        <name>VPC Network Segregation</name>
        <implementation>
          <production_vpc>
            <cidr>10.0.0.0/16</cidr>
            <private_google_access>true</private_google_access>
            <flow_logs>ENABLED</flow_logs>
          </production_vpc>
          <development_vpc>
            <cidr>192.168.0.0/16</cidr>
            <private_google_access>false</private_google_access>
            <flow_logs>OPTIONAL</flow_logs>
          </development_vpc>
          <vpc_peering>PROHIBITED</vpc_peering>
        </implementation>
      </boundary>
      
      <boundary type="CRYPTOGRAPHIC">
        <name>Encryption Key Isolation</name>
        <implementation>
          <kms_keyring>
            <production>projects/netra-prod/locations/global/keyRings/prod-secrets</production>
            <development>projects/netra-dev/locations/global/keyRings/dev-secrets</development>
          </kms_keyring>
          <key_rotation_period>90_DAYS</key_rotation_period>
          <key_algorithm>AES_256_GCM</key_algorithm>
        </implementation>
      </boundary>
    </isolation_boundaries>
  </architecture>

  <claude_permissions_model>
    <dangerously_skip_permissions_context>
      <description>
        When --dangerously-skip-permissions is used, Claude bypasses normal permission checks.
        This requires compensating controls at the infrastructure level.
      </description>
      <compensating_controls>
        <control id="CC-001">
          <name>Environment-Based Secret Access</name>
          <implementation>
            Secret access is controlled by environment variables and service account permissions,
            not by Claude's internal permission model.
          </implementation>
        </control>
        <control id="CC-002">
          <name>Runtime Secret Injection</name>
          <implementation>
            Secrets are injected at runtime through secure sidecars or init containers,
            never stored in code or configuration.
          </implementation>
        </control>
        <control id="CC-003">
          <name>Audit Logging Enhancement</name>
          <implementation>
            All secret access attempts are logged to Cloud Audit Logs with enhanced
            verbosity when --dangerously-skip-permissions is detected.
          </implementation>
        </control>
      </compensating_controls>
    </dangerously_skip_permissions_context>

    <execution_contexts>
      <context environment="DEVELOPMENT">
        <claude_flags>
          <flag>--dangerously-skip-permissions</flag>
          <flag>--environment=development</flag>
          <flag>--secret-source=local</flag>
        </claude_flags>
        <allowed_secrets>
          <secret_pattern>dev-*</secret_pattern>
          <secret_pattern>test-*</secret_pattern>
          <secret_pattern>local-*</secret_pattern>
        </allowed_secrets>
        <prohibited_secrets>
          <secret_pattern>prod-*</secret_pattern>
          <secret_pattern>production-*</secret_pattern>
          <secret_pattern>live-*</secret_pattern>
        </prohibited_secrets>
      </context>
      
      <context environment="PRODUCTION">
        <claude_flags>
          <flag>--dangerously-skip-permissions</flag>
          <flag>--environment=production</flag>
          <flag>--secret-source=secret-manager</flag>
          <flag>--audit-mode=enhanced</flag>
        </claude_flags>
        <allowed_secrets>
          <secret_pattern>prod-*</secret_pattern>
          <secret_pattern>production-*</secret_pattern>
        </allowed_secrets>
        <secret_access_validation>
          <require_workload_identity>true</require_workload_identity>
          <require_vpc_service_controls>true</require_vpc_service_controls>
        </secret_access_validation>
      </context>
    </execution_contexts>
  </claude_permissions_model>

  <iam_policies>
    <policy id="DEV-001">
      <name>Developer Default Auth Restriction</name>
      <description>
        Developers using gcloud default application credentials MUST NOT have access to production secrets
      </description>
      <implementation>
        <gcp_organization_policy>
          constraints/iam.allowedPolicyMemberDomains:
            - netra-dev.iam.gserviceaccount.com
          constraints/iam.disableServiceAccountKeyCreation: true
          constraints/iam.workloadIdentityPoolProviders:
            - projects/netra-dev/locations/global/workloadIdentityPools/dev-pool/*
        </gcp_organization_policy>
        
        <explicit_denials>
          <deny>
            <resource>projects/netra-prod/secrets/*</resource>
            <principals>
              <principal>domain:netra-dev.iam.gserviceaccount.com</principal>
              <principal>group:developers@netra.ai</principal>
            </principals>
            <permissions>
              <permission>secretmanager.secrets.get</permission>
              <permission>secretmanager.secrets.access</permission>
              <permission>secretmanager.versions.get</permission>
              <permission>secretmanager.versions.access</permission>
            </permissions>
          </deny>
        </explicit_denials>
      </implementation>
    </policy>

    <policy id="PROD-001">
      <name>Production Secret Access Policy</name>
      <description>
        Production secrets accessible only through dedicated service accounts with workload identity
      </description>
      <implementation>
        <service_account>netra-prod-claude@netra-prod.iam.gserviceaccount.com</service_account>
        <workload_identity_binding>
          serviceAccount:netra-prod.svc.id.goog[claude/claude-sa]
        </workload_identity_binding>
        <required_attributes>
          <attribute>environment=production</attribute>
          <attribute>approved=true</attribute>
          <attribute>audit_enabled=true</attribute>
        </required_attributes>
      </implementation>
    </policy>

    <policy id="AUDIT-001">
      <name>Secret Access Audit Policy</name>
      <description>
        All secret access attempts must be logged and monitored
      </description>
      <implementation>
        <audit_logs>
          <log_sink>
            <name>secret-access-sink</name>
            <destination>pubsub.googleapis.com/projects/netra-security/topics/secret-access</destination>
            <filter>
              resource.type="secretmanager.googleapis.com/Secret"
              AND (protoPayload.methodName="google.cloud.secretmanager.v1.SecretManagerService.AccessSecretVersion"
                   OR protoPayload.methodName="google.cloud.secretmanager.v1.SecretManagerService.GetSecret")
            </filter>
          </log_sink>
          <alerting>
            <alert_on_dev_prod_crossover>true</alert_on_dev_prod_crossover>
            <alert_on_excessive_access>true</alert_on_excessive_access>
            <alert_on_unauthorized_attempt>true</alert_on_unauthorized_attempt>
          </alerting>
        </audit_logs>
      </implementation>
    </policy>
  </iam_policies>

  <secret_management>
    <secret_manager_configuration>
      <production_secrets>
        <project>netra-prod</project>
        <location>global</location>
        <replication_policy>AUTOMATIC</replication_policy>
        <encryption>
          <cmek>projects/netra-prod/locations/global/keyRings/prod-secrets/cryptoKeys/primary</cmek>
        </encryption>
        <access_control>
          <vpc_service_controls>
            <perimeter>accessPolicies/12345/servicePerimeters/prod_perimeter</perimeter>
            <ingress_rules>
              <rule>
                <source>
                  <access_level>accessPolicies/12345/accessLevels/prod_workload_identity</access_level>
                </source>
                <operations>
                  <service>secretmanager.googleapis.com</service>
                  <method>*</method>
                </operations>
              </rule>
            </ingress_rules>
          </vpc_service_controls>
        </access_control>
      </production_secrets>

      <development_secrets>
        <project>netra-dev</project>
        <location>global</location>
        <replication_policy>USER_MANAGED</replication_policy>
        <locations>
          <location>us-central1</location>
        </locations>
        <encryption>DEFAULT</encryption>
      </development_secrets>
    </secret_manager_configuration>

    <secret_rotation>
      <production_rotation_policy>
        <frequency>30_DAYS</frequency>
        <automatic>true</automatic>
        <notification_channels>
          <channel>security-team@netra.ai</channel>
        </notification_channels>
      </production_rotation_policy>
      <development_rotation_policy>
        <frequency>90_DAYS</frequency>
        <automatic>false</automatic>
      </development_rotation_policy>
    </secret_rotation>
  </secret_management>

  <runtime_enforcement>
    <admission_controllers>
      <controller id="SECRET-VALIDATOR">
        <name>Secret Access Validator</name>
        <implementation>
          <webhook>https://admission.netra-prod.internal/validate-secret-access</webhook>
          <validation_rules>
            <rule>
              <name>Validate Service Account</name>
              <condition>request.auth.claims.service_account</condition>
              <action>ALLOW_IF_PRODUCTION_SA</action>
            </rule>
            <rule>
              <name>Block Dev Credentials</name>
              <condition>request.auth.claims.email.endsWith('@netra.ai')</condition>
              <action>DENY</action>
            </rule>
          </validation_rules>
        </implementation>
      </controller>
    </admission_controllers>

    <policy_enforcement_points>
      <pep id="CLAUDE-RUNTIME">
        <name>Claude Runtime PEP</name>
        <location>Container Init</location>
        <checks>
          <check>Verify environment classification</check>
          <check>Validate service account binding</check>
          <check>Confirm VPC Service Controls</check>
          <check>Verify audit logging enabled</check>
        </checks>
        <failure_action>TERMINATE_WITH_ALERT</failure_action>
      </pep>
    </policy_enforcement_points>
  </runtime_enforcement>

  <monitoring_and_alerting>
    <metrics>
      <metric>
        <name>secret_access_attempts</name>
        <labels>
          <label>environment</label>
          <label>service_account</label>
          <label>secret_pattern</label>
          <label>success</label>
        </labels>
      </metric>
      <metric>
        <name>cross_environment_access_attempts</name>
        <labels>
          <label>source_environment</label>
          <label>target_environment</label>
          <label>principal</label>
        </labels>
      </metric>
    </metrics>

    <alerts>
      <alert>
        <name>Production Secret Access from Dev</name>
        <condition>
          metric.type="custom.googleapis.com/security/cross_environment_access"
          AND resource.labels.source_environment="development"
          AND resource.labels.target_environment="production"
        </condition>
        <notification_channels>
          <channel>security-incidents@netra.ai</channel>
          <channel>pagerduty-security</channel>
        </notification_channels>
        <severity>CRITICAL</severity>
      </alert>
    </alerts>
  </monitoring_and_alerting>

  <implementation_checklist>
    <phase name="PREPARATION">
      <task priority="1">Create separate GCP projects for prod/staging/dev</task>
      <task priority="1">Configure VPC Service Controls perimeter for production</task>
      <task priority="2">Set up Cloud KMS keyrings and keys</task>
      <task priority="2">Configure Secret Manager in each project</task>
    </phase>

    <phase name="IAM_CONFIGURATION">
      <task priority="1">Remove all developer IAM bindings from production project</task>
      <task priority="1">Create deny policies for developer groups</task>
      <task priority="2">Set up Workload Identity for production service accounts</task>
      <task priority="3">Configure organization policies</task>
    </phase>

    <phase name="RUNTIME_SETUP">
      <task priority="1">Deploy admission controllers</task>
      <task priority="2">Configure Claude with environment-specific flags</task>
      <task priority="2">Set up secret injection mechanisms</task>
      <task priority="3">Enable enhanced audit logging</task>
    </phase>

    <phase name="MONITORING">
      <task priority="1">Deploy log sinks and aggregation</task>
      <task priority="2">Configure alerting policies</task>
      <task priority="3">Set up security dashboards</task>
      <task priority="3">Schedule regular access reviews</task>
    </phase>
  </implementation_checklist>

  <testing_and_validation>
    <test_scenarios>
      <scenario id="TEST-001">
        <name>Developer Default Auth Denial Test</name>
        <steps>
          <step>Developer authenticates with gcloud auth application-default login</step>
          <step>Attempt to access production secret using Claude --dangerously-skip-permissions</step>
          <step>Verify access is denied at IAM level</step>
          <step>Verify audit log entry is created</step>
          <step>Verify security alert is triggered</step>
        </steps>
        <expected_result>ACCESS_DENIED</expected_result>
      </scenario>

      <scenario id="TEST-002">
        <name>Production Service Account Success Test</name>
        <steps>
          <step>Production Claude pod starts with Workload Identity</step>
          <step>Claude runs with --dangerously-skip-permissions flag</step>
          <step>Attempt to access production secret</step>
          <step>Verify access is granted</step>
          <step>Verify audit log shows successful access</step>
        </steps>
        <expected_result>ACCESS_GRANTED</expected_result>
      </scenario>

      <scenario id="TEST-003">
        <name>Cross-Environment Access Prevention</name>
        <steps>
          <step>Staging service account attempts production secret access</step>
          <step>Verify VPC Service Controls block the request</step>
          <step>Verify deny policy prevents access</step>
          <step>Verify critical alert is triggered</step>
        </steps>
        <expected_result>ACCESS_DENIED_WITH_ALERT</expected_result>
      </scenario>
    </test_scenarios>
  </testing_and_validation>

  <compliance_mappings>
    <mapping framework="SOC2">
      <control>CC6.1 - Logical Access Controls</control>
      <implementation>IAM policies and deny rules</implementation>
    </mapping>
    <mapping framework="ISO27001">
      <control>A.9.1.2 - Access to networks and network services</control>
      <implementation>VPC Service Controls and network isolation</implementation>
    </mapping>
    <mapping framework="NIST">
      <control>AC-3 - Access Enforcement</control>
      <implementation>Multi-layer access controls with explicit denials</implementation>
    </mapping>
  </compliance_mappings>

  <incident_response>
    <playbook id="IR-001">
      <name>Unauthorized Production Secret Access Attempt</name>
      <trigger>Alert on cross-environment access attempt</trigger>
      <steps>
        <step>Immediate notification to security team</step>
        <step>Identify principal and source of attempt</step>
        <step>Review audit logs for pattern analysis</step>
        <step>Rotate affected secrets if compromise suspected</step>
        <step>Update deny policies if needed</step>
        <step>Document incident and lessons learned</step>
      </steps>
      <escalation_time>5_MINUTES</escalation_time>
    </playbook>
  </incident_response>
</specification>