SPEC:NETRA_SECURITY:START:

NETRA_SECURITY:1:0:0: Uses OAuth, JWT.
SecurityService (e..g JWT) Keep all structural security conceps as is.
The frontend JWT is stored securely and used in All WS, HTTP calls etc 
THe backend provides the JWT as needed
Conisder that OAuth URLS may not be relevant to UI/UX expiernece for loging logout

NETRA_SECURITY:1:0:1: The UI/UX base layout and header are persistent in all auth states.
NETRA_SECURITY:1:0:2: Only use official OAuth libraries or similar
NETRA_SECURITY:1:0:3: Validate that OAuth Login, OAuth Logout, 
and development user context all works. Production ready.
NETRA_SECURITY:1:0:4: In development context: 
Defaults to auto login, including JWT token etc. to simulate OAuth.

NETRA_SECURITY:1:0:5: Consider context of frontend and backend env hot reloading. 

NETRA_SECURITY:1:0:6: KEEP EXISTING STUFF. Keep existing stuff as much as possible. The point is to have the core wiring work. Focus on adding mixing things and break fix. Use Schemas.py and app/types/index.ts whenever possible for any static values, paths, config values, etc. etc.
NETRA_SECURITY:1:0:7: Schema: {
  "web": {
    "authorized_javascript_origins": [
      "https://app.netrasystems.ai",
      "https://127.0.0.1",
      "http://localhost"
    ],
    "authorized_redirect_uris": [
      "https://app.netrasystems.ai/oauth2callback",
      "http://localhost:3000/auth/callback"
    ]
  }
}
NETRA_SECURITY:1:0:8: The login button for OAuth on the front end looks good and is large.
In dev mode, its shows the dev user and option to OAuth Login "Override" the dev mode login.

NETRA_SECURITY:1:0:9: The backend provides discovery of OAUTH endpoints to frontend, e.g. the complete path including base url etc. a dict with login, logout, auth, etc. This can lean on existing OpenAPI / Fast API spec if possible.
NETRA_SECURITY:1:0:10: Keep the development env. 
When front and backend in development mode: 
On Pageload: Automatically authentics as Dev user without using Google OAuth.

NETRA_SECURITY:ENDS