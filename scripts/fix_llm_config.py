#!/usr/bin/env python3
"""
LLM Configuration Fix Script
============================
This script helps diagnose and fix LLM configuration issues.

Usage:
    python scripts/fix_llm_config.py check     # Check current configuration
    python scripts/fix_llm_config.py fix       # Apply fixes
    python scripts/fix_llm_config.py test      # Test LLM functionality
"""

import asyncio
import os
import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))


def check_environment():
    """Check if required environment variables are set."""
    print("üîç Checking environment variables...")
    
    required_vars = {
        'GEMINI_API_KEY': 'Required for LLM functionality',
        'ENV': 'Environment setting (development/staging/production)',
    }
    
    missing = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            # Mask the API key for security
            if 'KEY' in var or 'SECRET' in var:
                masked = value[:4] + '...' + value[-4:] if len(value) > 8 else '***'
                print(f"  ‚úÖ {var}: {masked} - {description}")
            else:
                print(f"  ‚úÖ {var}: {value} - {description}")
        else:
            print(f"  ‚ùå {var}: NOT SET - {description}")
            missing.append(var)
    
    return missing


def create_env_file():
    """Create a template .env file if it doesn't exist."""
    env_path = Path('.env')
    
    if env_path.exists():
        print(f"‚ÑπÔ∏è  .env file already exists at {env_path.absolute()}")
        return False
    
    template = """# Netra Core Environment Configuration
# Generated by fix_llm_config.py

# Environment setting
ENV=development

# LLM Configuration (REQUIRED)
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY=your-gemini-api-key-here

# Database Configuration (for local development)
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/netra_dev
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=netra_dev
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# Redis Configuration (for local development)
REDIS_HOST=localhost
REDIS_PORT=6379

# Security Keys (generate new ones for production)
JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
SECRET_KEY=dev-secret-key-change-in-production

# Optional Services
# LANGFUSE_SECRET_KEY=your-langfuse-secret
# LANGFUSE_PUBLIC_KEY=your-langfuse-public
# GITHUB_TOKEN=your-github-token
"""
    
    env_path.write_text(template)
    print(f"‚úÖ Created .env template at {env_path.absolute()}")
    print("‚ö†Ô∏è  Please edit .env and add your GEMINI_API_KEY")
    return True


async def test_llm_functionality():
    """Test if LLM manager can be initialized and used."""
    print("\nüß™ Testing LLM functionality...")
    
    try:
        from netra_backend.app.llm.llm_manager import get_llm_manager
        
        print("  üì¶ Importing LLM manager...")
        manager = await get_llm_manager()
        
        print("  üè• Running health check...")
        health = await manager.health_check()
        
        print(f"  Status: {health.get('status', 'unknown')}")
        print(f"  Initialized: {health.get('initialized', False)}")
        print(f"  Available configs: {health.get('available_configs', [])}")
        
        if health.get('status') == 'healthy' and health.get('available_configs'):
            print("\n  üéØ Testing LLM request...")
            response = await manager.ask_llm("Say 'Hello World' in exactly two words.")
            print(f"  Response: {response}")
            print("\n‚úÖ LLM functionality is working!")
            return True
        else:
            print("\n‚ö†Ô∏è  LLM manager is not fully configured")
            return False
            
    except Exception as e:
        print(f"\n‚ùå LLM test failed: {e}")
        return False


async def test_health_check():
    """Test the startup health check for LLM."""
    print("\nüè• Testing startup health check...")
    
    try:
        from fastapi import FastAPI
        from netra_backend.app.startup_health_checks import StartupHealthChecker
        
        # Create a minimal FastAPI app for testing
        app = FastAPI()
        
        # Initialize LLM manager on the app
        from netra_backend.app.llm.llm_manager import get_llm_manager
        app.state.llm_manager = await get_llm_manager()
        
        # Run health check
        checker = StartupHealthChecker(app)
        result = await checker.check_llm_manager()
        
        print(f"  Service: {result.service_name}")
        print(f"  Status: {result.status.value}")
        print(f"  Message: {result.message}")
        if result.latency_ms:
            print(f"  Latency: {result.latency_ms:.1f}ms")
        
        return result.status.value == "healthy"
        
    except Exception as e:
        print(f"‚ùå Health check test failed: {e}")
        return False


def apply_fixes():
    """Apply automatic fixes for common issues."""
    print("\nüîß Applying fixes...")
    
    fixes_applied = []
    
    # Fix 1: Create .env file if missing
    if create_env_file():
        fixes_applied.append("Created .env template file")
    
    # Fix 2: Load .env file if it exists
    env_path = Path('.env')
    if env_path.exists():
        try:
            from dotenv import load_dotenv
            load_dotenv(override=True)
            print("‚úÖ Loaded .env file")
            fixes_applied.append("Loaded environment from .env")
        except ImportError:
            print("‚ö†Ô∏è  python-dotenv not installed. Install with: pip install python-dotenv")
    
    # Fix 3: Check if GEMINI_API_KEY is now set
    if os.getenv('GEMINI_API_KEY'):
        print("‚úÖ GEMINI_API_KEY is now available")
        fixes_applied.append("GEMINI_API_KEY configured")
    else:
        print("‚ö†Ô∏è  GEMINI_API_KEY still not set. Please add it to your .env file")
    
    return fixes_applied


async def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Fix LLM configuration issues')
    parser.add_argument('command', choices=['check', 'fix', 'test'], 
                       help='Command to run')
    
    args = parser.parse_args()
    
    print("=" * 60)
    print("LLM Configuration Diagnostic Tool")
    print("=" * 60)
    
    if args.command == 'check':
        missing = check_environment()
        if missing:
            print(f"\n‚ö†Ô∏è  Missing {len(missing)} required environment variable(s)")
            print("Run 'python scripts/fix_llm_config.py fix' to apply fixes")
            sys.exit(1)
        else:
            print("\n‚úÖ All required environment variables are set")
            
    elif args.command == 'fix':
        missing = check_environment()
        fixes = apply_fixes()
        
        if fixes:
            print(f"\n‚úÖ Applied {len(fixes)} fix(es):")
            for fix in fixes:
                print(f"  - {fix}")
        
        # Re-check after fixes
        print("\nüîç Re-checking configuration...")
        missing = check_environment()
        
        if not missing:
            print("\n‚úÖ Configuration fixed! Run 'python scripts/fix_llm_config.py test' to verify")
        else:
            print(f"\n‚ö†Ô∏è  Still missing {len(missing)} variable(s). Please check your .env file")
            
    elif args.command == 'test':
        # Check environment first
        missing = check_environment()
        if missing:
            print(f"\n‚ö†Ô∏è  Cannot test - missing {len(missing)} required variable(s)")
            print("Run 'python scripts/fix_llm_config.py fix' first")
            sys.exit(1)
        
        # Run tests
        llm_ok = await test_llm_functionality()
        health_ok = await test_health_check()
        
        if llm_ok and health_ok:
            print("\n‚úÖ All tests passed! LLM configuration is working correctly")
        else:
            print("\n‚ö†Ô∏è  Some tests failed. Please check the output above")
            sys.exit(1)


if __name__ == '__main__':
    asyncio.run(main())