#!/usr/bin/env python
"""
OAuth Local Setup Script for Staging Testing
Configures OAuth properly for local development with staging-like behavior.
"""

import os
import sys
from pathlib import Path
from typing import Dict, Tuple

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def print_setup_intro() -> None:
    """Print OAuth setup introduction."""
    print("\n=== OAuth Local Development Setup ===\n")
    print("This script configures OAuth for local development (localhost:3010)")
    print("while optionally using staging-like features.\n")

def load_existing_env() -> None:
    """Load existing .env files if available."""
    env_file = project_root / '.env'
    env_local = project_root / '.env.local'
    if env_local.exists():
        print(f"Found .env.local - using local configuration")
        from dotenv import load_dotenv
        load_dotenv(env_local)
    elif env_file.exists():
        print(f"Found .env - loading existing configuration")
        from dotenv import load_dotenv
        load_dotenv(env_file)

def get_oauth_credentials() -> Tuple[str, str]:
    """Extract OAuth credentials from environment."""
    client_id = os.getenv("GOOGLE_CLIENT_ID") or os.getenv("GOOGLE_OAUTH_CLIENT_ID")
    client_secret = os.getenv("GOOGLE_CLIENT_SECRET") or os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")
    return client_id or "", client_secret or ""

def print_oauth_error_instructions() -> None:
    """Print instructions for missing OAuth credentials."""
    print("\n[ERROR] OAuth credentials not found!")
    print("\nYou need to:")
    print("1. Go to Google Cloud Console")
    print("2. Create or select OAuth 2.0 Client ID")
    print("3. Add these redirect URIs:")
    print("   - http://localhost:3010/api/auth/callback")
    print("   - http://localhost:3010/auth/callback")
    print("   - http://localhost:8000/api/auth/callback")
    print("4. Set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET in .env")

def print_oauth_success(client_id: str) -> None:
    """Print success message for found credentials."""
    print(f"\n[OK] OAuth credentials found")
    print(f"Client ID: {client_id[:20]}...")

def build_development_env_vars(client_id: str, client_secret: str) -> Dict[str, str]:
    """Build environment variables for development."""
    return {
        "ENVIRONMENT": "development",
        "GOOGLE_CLIENT_ID": client_id,
        "GOOGLE_CLIENT_SECRET": client_secret,
        "FRONTEND_URL": "http://localhost:3010",
        "API_URL": "http://localhost:8000",
        "PORT": "8000",
        "DISABLE_HTTPS_ONLY": "true",
        "SECRET_KEY": os.getenv("SECRET_KEY", "dev_secret_key_at_least_32_characters_long_for_validation"),
        "JWT_SECRET_KEY": os.getenv("JWT_SECRET_KEY", "dev_jwt_secret_key_at_least_32_characters_long"),
        "CORS_ORIGINS": "http://localhost:3010,http://localhost:8000,http://localhost:3000",
        "ALLOW_DEV_LOGIN": "true",
        "DEBUG": "true",
        "LOG_LEVEL": "debug",
    }

def setup_oauth_env() -> Dict[str, str]:
    """Setup OAuth environment for local development."""
    print_setup_intro()
    load_existing_env()
    client_id, client_secret = get_oauth_credentials()
    if not client_id or not client_secret:
        print_oauth_error_instructions()
        return {}
    print_oauth_success(client_id)
    env_vars = build_development_env_vars(client_id, client_secret)
    write_env_local(env_vars)
    return env_vars

def build_env_content_header() -> list[str]:
    """Build header content for .env.local file."""
    return [
        "# OAuth Local Development Configuration",
        "# Generated by scripts/setup_oauth_local.py",
        "# This file configures OAuth for localhost:3010",
        "",
        "# Environment - Always use development for localhost",
        "ENVIRONMENT=development",
        "",
        "# OAuth Credentials (from your Google Cloud Console)",
    ]

def format_env_var_line(key: str, value: str) -> str:
    """Format a single environment variable line."""
    if key in ["GOOGLE_CLIENT_ID", "GOOGLE_CLIENT_SECRET"]:
        if value and not value.startswith("${"):
            return f"{key}={value}"
        else:
            return f"# {key}=your_actual_{key.lower()}_here"
    return f"{key}={value}"

def build_env_content_footer() -> list[str]:
    """Build footer content for .env.local file."""
    return [
        "",
        "# To use staging OAuth (not recommended for local):",
        "# FORCE_STAGING_OAUTH=true",
        "# GOOGLE_OAUTH_CLIENT_ID_STAGING=your_staging_client_id",
        "# GOOGLE_OAUTH_CLIENT_SECRET_STAGING=your_staging_secret",
    ]

def write_env_local(env_vars: Dict[str, str]) -> None:
    """Write environment variables to .env.local."""
    env_local = project_root / '.env.local'
    content = build_env_content_header()
    for key, value in env_vars.items():
        content.append(format_env_var_line(key, value))
    content.extend(build_env_content_footer())
    with open(env_local, 'w') as f:
        f.write('\n'.join(content))
    print(f"\n[OK] Configuration written to .env.local")

def print_google_console_header() -> None:
    """Print Google Cloud Console setup header."""
    print("\n=== Google Cloud Console Setup ===\n")
    print("1. Go to: https://console.cloud.google.com/apis/credentials")
    print("2. Select your project")
    print("3. Click on your OAuth 2.0 Client ID (or create one)")

def print_redirect_uris() -> None:
    """Print required redirect URIs."""
    print("4. Add these Authorized redirect URIs:")
    print("   - http://localhost:3010/api/auth/callback")
    print("   - http://localhost:3010/auth/callback")
    print("   - http://localhost:8000/api/auth/callback")

def print_javascript_origins() -> None:
    """Print required JavaScript origins."""
    print("5. Add these Authorized JavaScript origins:")
    print("   - http://localhost:3010")
    print("   - http://localhost:8000")
    print("   - http://localhost:3000")
    print("6. Save the changes")
    print("\n[IMPORTANT] The redirect URIs must match EXACTLY!")

def validate_google_console() -> None:
    """Provide instructions for Google Cloud Console setup."""
    print_google_console_header()
    print_redirect_uris()
    print_javascript_origins()

def setup_diagnostic_environment() -> None:
    """Setup environment for diagnostic check."""
    print("\n=== Running OAuth Diagnostic ===\n")
    os.environ["ENVIRONMENT"] = "development"
    os.environ["FRONTEND_URL"] = "http://localhost:3010"

def validate_oauth_config() -> tuple[list[str], object]:
    """Validate OAuth configuration and return issues and config."""
    from app.auth.environment_config import auth_env_config
    config = auth_env_config.get_oauth_config()
    issues = []
    if not config.client_id:
        issues.append("[X] No OAuth client ID configured")
    if not config.client_secret:
        issues.append("[X] No OAuth client secret configured")
    return issues, config

def print_config_status(config: object) -> None:
    """Print OAuth configuration status."""
    from app.auth.environment_config import auth_env_config
    if config.client_id:
        print(f"[OK] Client ID: {config.client_id[:20]}...")
    if config.client_secret:
        print("[OK] Client secret configured")
    print(f"[OK] Environment: {auth_env_config.environment.value}")
    print(f"[OK] Redirect URIs configured: {len(config.redirect_uris)}")

def print_redirect_uris_status(config: object) -> None:
    """Print redirect URIs status."""
    for uri in config.redirect_uris:
        if "localhost:3010" in uri:
            print(f"  - {uri}")

def print_diagnostic_result(issues: list[str]) -> bool:
    """Print diagnostic result and return success status."""
    if issues:
        print("\nIssues found:")
        for issue in issues:
            print(f"  {issue}")
        return False
    print("\n[OK] OAuth configuration validated!")
    return True

def run_diagnostic() -> bool:
    """Run OAuth diagnostic check."""
    setup_diagnostic_environment()
    issues, config = validate_oauth_config()
    print_config_status(config)
    print_redirect_uris_status(config)
    return print_diagnostic_result(issues)

def print_main_header() -> None:
    """Print main tool header."""
    print("OAuth Local Development Setup Tool")
    print("=" * 50)

def check_dotenv_dependency() -> bool:
    """Check if python-dotenv is available."""
    try:
        from dotenv import load_dotenv
        return True
    except ImportError:
        print("\n[ERROR] python-dotenv not installed")
        print("Run: pip install python-dotenv")
        return False

def print_success_instructions() -> None:
    """Print next steps after successful setup."""
    print("\n=== Next Steps ===\n")
    print("1. Start backend:")
    print("   cd " + str(project_root))
    print("   python app/main.py")
    print("\n2. Start frontend:")
    print("   cd " + str(project_root / "frontend"))
    print("   npm run dev")
    print("\n3. Access: http://localhost:3010")
    print("\n4. Click 'Sign in with Google'")
    print("\n[TIP] If you get OAuth errors, check that your")
    print("Google Cloud Console redirect URIs match exactly!")

def handle_setup_failure() -> int:
    """Handle OAuth setup failure."""
    validate_google_console()
    return 1

def handle_diagnostic_failure() -> int:
    """Handle diagnostic failure."""
    print("\n[ERROR] OAuth configuration has issues")
    validate_google_console()
    return 1

def main():
    """Main function."""
    print_main_header()
    if not check_dotenv_dependency():
        return 1
    env_vars = setup_oauth_env()
    if not env_vars:
        return handle_setup_failure()
    if run_diagnostic():
        print_success_instructions()
        return 0
    return handle_diagnostic_failure()

if __name__ == "__main__":
    sys.exit(main())