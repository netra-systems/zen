#!/usr/bin/env python
"""
OAuth Local Setup Script for Staging Testing
Configures OAuth properly for local development with staging-like behavior.
"""

import os
import sys
from pathlib import Path
from typing import Dict, Tuple

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def setup_oauth_env() -> Dict[str, str]:
    """Setup OAuth environment for local development."""
    env_vars = {}
    
    print("\n=== OAuth Local Development Setup ===\n")
    print("This script configures OAuth for local development (localhost:3010)")
    print("while optionally using staging-like features.\n")
    
    # Check existing .env file
    env_file = project_root / '.env'
    env_local = project_root / '.env.local'
    
    if env_local.exists():
        print(f"Found .env.local - using local configuration")
        from dotenv import load_dotenv
        load_dotenv(env_local)
    elif env_file.exists():
        print(f"Found .env - loading existing configuration")
        from dotenv import load_dotenv
        load_dotenv(env_file)
    
    # Check current OAuth configuration
    client_id = os.getenv("GOOGLE_CLIENT_ID") or os.getenv("GOOGLE_OAUTH_CLIENT_ID")
    client_secret = os.getenv("GOOGLE_CLIENT_SECRET") or os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")
    
    if not client_id or not client_secret:
        print("\n[ERROR] OAuth credentials not found!")
        print("\nYou need to:")
        print("1. Go to Google Cloud Console")
        print("2. Create or select OAuth 2.0 Client ID")
        print("3. Add these redirect URIs:")
        print("   - http://localhost:3010/api/auth/callback")
        print("   - http://localhost:3010/auth/callback")
        print("   - http://localhost:8000/api/auth/callback")
        print("4. Set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET in .env")
        return {}
    
    print(f"\n[OK] OAuth credentials found")
    print(f"Client ID: {client_id[:20]}...")
    
    # Configure environment
    env_vars.update({
        "ENVIRONMENT": "development",
        "GOOGLE_CLIENT_ID": client_id,
        "GOOGLE_CLIENT_SECRET": client_secret,
        "FRONTEND_URL": "http://localhost:3010",
        "API_URL": "http://localhost:8000",
        "PORT": "8000",
        "DISABLE_HTTPS_ONLY": "true",
        "SECRET_KEY": os.getenv("SECRET_KEY", "dev_secret_key_at_least_32_characters_long_for_validation"),
        "JWT_SECRET_KEY": os.getenv("JWT_SECRET_KEY", "dev_jwt_secret_key_at_least_32_characters_long"),
        "CORS_ORIGINS": "http://localhost:3010,http://localhost:8000,http://localhost:3000",
        "ALLOW_DEV_LOGIN": "true",
        "DEBUG": "true",
        "LOG_LEVEL": "debug",
    })
    
    # Write configuration
    write_env_local(env_vars)
    
    return env_vars

def write_env_local(env_vars: Dict[str, str]) -> None:
    """Write environment variables to .env.local."""
    env_local = project_root / '.env.local'
    
    content = [
        "# OAuth Local Development Configuration",
        "# Generated by scripts/setup_oauth_local.py",
        "# This file configures OAuth for localhost:3010",
        "",
        "# Environment - Always use development for localhost",
        "ENVIRONMENT=development",
        "",
        "# OAuth Credentials (from your Google Cloud Console)",
    ]
    
    for key, value in env_vars.items():
        if key in ["GOOGLE_CLIENT_ID", "GOOGLE_CLIENT_SECRET"]:
            if value and not value.startswith("${"):
                content.append(f"{key}={value}")
            else:
                content.append(f"# {key}=your_actual_{key.lower()}_here")
        else:
            content.append(f"{key}={value}")
    
    content.append("")
    content.append("# To use staging OAuth (not recommended for local):")
    content.append("# FORCE_STAGING_OAUTH=true")
    content.append("# GOOGLE_OAUTH_CLIENT_ID_STAGING=your_staging_client_id")
    content.append("# GOOGLE_OAUTH_CLIENT_SECRET_STAGING=your_staging_secret")
    
    with open(env_local, 'w') as f:
        f.write('\n'.join(content))
    
    print(f"\n[OK] Configuration written to .env.local")

def validate_google_console() -> None:
    """Provide instructions for Google Cloud Console setup."""
    print("\n=== Google Cloud Console Setup ===\n")
    print("1. Go to: https://console.cloud.google.com/apis/credentials")
    print("2. Select your project")
    print("3. Click on your OAuth 2.0 Client ID (or create one)")
    print("4. Add these Authorized redirect URIs:")
    print("   - http://localhost:3010/api/auth/callback")
    print("   - http://localhost:3010/auth/callback")
    print("   - http://localhost:8000/api/auth/callback")
    print("5. Add these Authorized JavaScript origins:")
    print("   - http://localhost:3010")
    print("   - http://localhost:8000")
    print("   - http://localhost:3000")
    print("6. Save the changes")
    print("\n[IMPORTANT] The redirect URIs must match EXACTLY!")

def run_diagnostic() -> bool:
    """Run OAuth diagnostic check."""
    print("\n=== Running OAuth Diagnostic ===\n")
    
    # Import after environment is loaded
    os.environ["ENVIRONMENT"] = "development"
    os.environ["FRONTEND_URL"] = "http://localhost:3010"
    
    from app.auth.environment_config import auth_env_config
    
    config = auth_env_config.get_oauth_config()
    
    issues = []
    
    if not config.client_id:
        issues.append("[X] No OAuth client ID configured")
    else:
        print(f"[OK] Client ID: {config.client_id[:20]}...")
    
    if not config.client_secret:
        issues.append("[X] No OAuth client secret configured")
    else:
        print("[OK] Client secret configured")
    
    print(f"[OK] Environment: {auth_env_config.environment.value}")
    print(f"[OK] Redirect URIs configured: {len(config.redirect_uris)}")
    
    for uri in config.redirect_uris:
        if "localhost:3010" in uri:
            print(f"  - {uri}")
    
    if issues:
        print("\nIssues found:")
        for issue in issues:
            print(f"  {issue}")
        return False
    
    print("\n[OK] OAuth configuration validated!")
    return True

def main():
    """Main function."""
    print("OAuth Local Development Setup Tool")
    print("=" * 50)
    
    # Try to import dotenv
    try:
        from dotenv import load_dotenv
    except ImportError:
        print("\n[ERROR] python-dotenv not installed")
        print("Run: pip install python-dotenv")
        return 1
    
    # Setup OAuth
    env_vars = setup_oauth_env()
    
    if not env_vars:
        validate_google_console()
        return 1
    
    # Run diagnostic
    if run_diagnostic():
        print("\n=== Next Steps ===\n")
        print("1. Start backend:")
        print("   cd " + str(project_root))
        print("   python app/main.py")
        print("\n2. Start frontend:")
        print("   cd " + str(project_root / "frontend"))
        print("   npm run dev")
        print("\n3. Access: http://localhost:3010")
        print("\n4. Click 'Sign in with Google'")
        print("\n[TIP] If you get OAuth errors, check that your")
        print("Google Cloud Console redirect URIs match exactly!")
        return 0
    else:
        print("\n[ERROR] OAuth configuration has issues")
        validate_google_console()
        return 1

if __name__ == "__main__":
    sys.exit(main())