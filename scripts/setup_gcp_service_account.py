#!/usr/bin/env python3
"""
Setup GCP Service Account for Netra Apex Platform Deployment
This script helps configure service account authentication for GCP deployments.
"""

import os
import sys
import json
import subprocess
from pathlib import Path
import argparse
import io

# Fix Unicode encoding issues on Windows
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')


def create_service_account(project_id: str, account_name: str = "netra-deployer"):
    """Create a service account for deployment."""
    gcloud_cmd = "gcloud.cmd" if sys.platform == "win32" else "gcloud"
    use_shell = sys.platform == "win32"
    
    email = f"{account_name}@{project_id}.iam.gserviceaccount.com"
    
    print(f"üîê Creating service account: {email}")
    
    # Create service account
    subprocess.run(
        [
            gcloud_cmd, "iam", "service-accounts", "create", account_name,
            "--display-name", "Netra Deployment Service Account",
            "--project", project_id
        ],
        check=False,
        shell=use_shell
    )
    
    print("üìù Granting necessary roles...")
    
    # Grant necessary roles
    roles = [
        "roles/run.admin",           # Cloud Run Admin
        "roles/storage.admin",        # Storage Admin for container images
        "roles/secretmanager.admin",  # Secret Manager Admin
        "roles/iam.serviceAccountUser", # Service Account User
        "roles/cloudbuild.builds.builder", # Cloud Build Builder
        "roles/artifactregistry.admin"  # Artifact Registry Admin
    ]
    
    for role in roles:
        print(f"  Granting {role}...")
        subprocess.run(
            [
                gcloud_cmd, "projects", "add-iam-policy-binding", project_id,
                "--member", f"serviceAccount:{email}",
                "--role", role
            ],
            capture_output=True,
            check=False,
            shell=use_shell
        )
    
    return email


def download_key(project_id: str, email: str, key_path: Path):
    """Download service account key."""
    gcloud_cmd = "gcloud.cmd" if sys.platform == "win32" else "gcloud"
    use_shell = sys.platform == "win32"
    
    print(f"üì• Downloading key to: {key_path}")
    
    subprocess.run(
        [
            gcloud_cmd, "iam", "service-accounts", "keys", "create",
            str(key_path),
            "--iam-account", email,
            "--project", project_id
        ],
        check=True,
        shell=use_shell
    )
    
    print(f"‚úÖ Key saved to: {key_path}")
    

def setup_default_credentials(key_path: Path):
    """Set up default credentials for the deployment script."""
    config_dir = Path.home() / ".netra"
    config_dir.mkdir(exist_ok=True)
    
    config_file = config_dir / "gcp_config.json"
    
    config = {
        "service_account_key": str(key_path),
        "default_project": "netra-staging"
    }
    
    with open(config_file, "w") as f:
        json.dump(config, f, indent=2)
    
    print(f"‚úÖ Default configuration saved to: {config_file}")
    
    # Create deployment wrapper script
    wrapper_script = Path(__file__).parent / "deploy_staging.py"
    
    wrapper_content = f'''#!/usr/bin/env python3
"""
Wrapper script for deploying to GCP staging with service account authentication.
Auto-generated by setup_gcp_service_account.py
"""

import os
import sys
import subprocess
from pathlib import Path

# Service account key path
SERVICE_ACCOUNT_KEY = r"{key_path}"

# Default to local build with checks
command = [
    sys.executable,
    "scripts/deploy_to_gcp.py",
    "--project", "netra-staging",
    "--build-local",
    "--service-account", SERVICE_ACCOUNT_KEY
]

# Add any additional arguments passed to this script
if len(sys.argv) > 1:
    command.extend(sys.argv[1:])
else:
    # Default to running checks
    command.append("--run-checks")

# Execute deployment
sys.exit(subprocess.call(command))
'''
    
    with open(wrapper_script, "w") as f:
        f.write(wrapper_content)
    
    print(f"‚úÖ Deployment wrapper created: {wrapper_script}")
    print("\nüìã Usage:")
    print(f"   python {wrapper_script}")
    print(f"   python {wrapper_script} --no-checks  # Skip pre-deployment checks")
    

def main():
    parser = argparse.ArgumentParser(description="Setup GCP service account for deployment")
    parser.add_argument("--project", default="netra-staging", help="GCP Project ID")
    parser.add_argument("--account-name", default="netra-deployer", 
                       help="Service account name")
    parser.add_argument("--key-dir", default=".", 
                       help="Directory to save the key file")
    parser.add_argument("--use-existing", help="Path to existing service account key file")
    
    args = parser.parse_args()
    
    if args.use_existing:
        # Use existing key
        key_path = Path(args.use_existing)
        if not key_path.exists():
            print(f"‚ùå Key file not found: {key_path}")
            sys.exit(1)
    else:
        # Create new service account and download key
        key_dir = Path(args.key_dir)
        key_dir.mkdir(exist_ok=True)
        
        key_path = key_dir / f"{args.account_name}-{args.project}.json"
        
        if key_path.exists():
            response = input(f"‚ö†Ô∏è Key file already exists: {key_path}\n   Overwrite? (y/n): ")
            if response.lower() != 'y':
                print("Using existing key file.")
            else:
                email = create_service_account(args.project, args.account_name)
                download_key(args.project, email, key_path)
        else:
            email = create_service_account(args.project, args.account_name)
            download_key(args.project, email, key_path)
    
    # Set up default configuration
    setup_default_credentials(key_path)
    
    print("\n‚úÖ Service account setup complete!")
    print("\nüöÄ You can now deploy using:")
    print(f"   python scripts/deploy_staging.py")
    print("\nOr with the main script:")
    print(f"   python scripts/deploy_to_gcp.py --project {args.project} --build-local --service-account {key_path}")
    

if __name__ == "__main__":
    main()