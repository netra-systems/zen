"""Fetch secrets from Google Secret Manager and create .env file."""

import os
import sys
from google.cloud import secretmanager

def fetch_secret(client, project_id, secret_name, version="latest"):
    """Fetch a single secret from Secret Manager."""
    try:
        name = f"projects/{project_id}/secrets/{secret_name}/versions/{version}"
        response = client.access_secret_version(name=name)
        return response.payload.data.decode("UTF-8")
    except Exception as e:
        print(f"Warning: Failed to fetch secret {secret_name}: {e}")
        return None

def main():
    """Main function to fetch secrets and create .env file."""
    # Initialize the Secret Manager client
    try:
        client = secretmanager.SecretManagerServiceClient()
    except Exception as e:
        print(f"Error: Failed to create Secret Manager client: {e}")
        print("Make sure GOOGLE_APPLICATION_CREDENTIALS is set and valid.")
        sys.exit(1)
    
    project_id = "304612253870"
    
    # Define the secrets to fetch and their env variable names
    secret_mappings = {
        "gemini-api-key": "GEMINI_API_KEY",
        "google-client-id": "GOOGLE_CLIENT_ID",
        "google-client-secret": "GOOGLE_CLIENT_SECRET",
        "langfuse-secret-key": "LANGFUSE_SECRET_KEY",
        "langfuse-public-key": "LANGFUSE_PUBLIC_KEY",
        "clickhouse-default-password": "CLICKHOUSE_DEFAULT_PASSWORD",
        "clickhouse-development-password": "CLICKHOUSE_DEVELOPMENT_PASSWORD",
        "jwt-secret-key": "JWT_SECRET_KEY",
        "fernet-key": "FERNET_KEY",
        "redis-default": "REDIS_PASSWORD"
    }
    
    # Additional static config values from .env.example
    static_config = {
        "CLICKHOUSE_HOST": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
        "CLICKHOUSE_PORT": "8443",
        "CLICKHOUSE_USER": "default",
        "CLICKHOUSE_DB": "default",
        "ENVIRONMENT": "development"
    }
    
    print("Fetching secrets from Google Secret Manager...")
    
    # Fetch all secrets
    env_vars = {}
    for secret_name, env_var in secret_mappings.items():
        print(f"Fetching {secret_name}...")
        secret_value = fetch_secret(client, project_id, secret_name)
        if secret_value:
            env_vars[env_var] = secret_value
            print(f"  [OK] Successfully fetched {secret_name}")
        else:
            print(f"  [FAIL] Failed to fetch {secret_name}")
    
    # Add static config values
    env_vars.update(static_config)
    
    # Write to .env file
    env_file_path = ".env"
    print(f"\nWriting to {env_file_path}...")
    
    with open(env_file_path, "w") as f:
        # Write header
        f.write("# Auto-generated .env file from Google Secret Manager\n")
        f.write("# Generated by fetch_secrets_to_env.py\n\n")
        
        # Write Google OAuth configuration section
        f.write("# Google OAuth Configuration\n")
        for key in ["GOOGLE_CLIENT_ID", "GOOGLE_CLIENT_SECRET"]:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        
        f.write("\n# API Keys\n")
        if "GEMINI_API_KEY" in env_vars:
            f.write(f"GEMINI_API_KEY={env_vars['GEMINI_API_KEY']}\n")
        
        f.write("\n# ClickHouse Configuration\n")
        for key in ["CLICKHOUSE_HOST", "CLICKHOUSE_PORT", "CLICKHOUSE_USER", 
                    "CLICKHOUSE_DEFAULT_PASSWORD", "CLICKHOUSE_DEVELOPMENT_PASSWORD", "CLICKHOUSE_DB"]:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        
        f.write("\n# Langfuse Configuration\n")
        for key in ["LANGFUSE_PUBLIC_KEY", "LANGFUSE_SECRET_KEY"]:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        
        f.write("\n# Security Keys\n")
        for key in ["JWT_SECRET_KEY", "FERNET_KEY"]:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")
        
        f.write("\n# Redis Configuration\n")
        if "REDIS_PASSWORD" in env_vars:
            f.write(f"REDIS_PASSWORD={env_vars['REDIS_PASSWORD']}\n")
        
        f.write("\n# Environment Configuration\n")
        f.write(f"ENVIRONMENT={env_vars['ENVIRONMENT']}\n")
    
    print(f"[SUCCESS] Created {env_file_path} with {len(env_vars)} configuration values")
    print("\nSummary:")
    print(f"  - Fetched {len([k for k in env_vars if k in secret_mappings.values()])} secrets from Google Secret Manager")
    print(f"  - Added {len(static_config)} static configuration values")

if __name__ == "__main__":
    main()