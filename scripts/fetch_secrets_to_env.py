"""Fetch secrets from Google Secret Manager and create .env file."""

import os
import sys
from google.cloud import secretmanager

def fetch_secret(client, project_id, secret_name, version="latest"):
    """Fetch a single secret from Secret Manager."""
    try:
        name = f"projects/{project_id}/secrets/{secret_name}/versions/{version}"
        response = client.access_secret_version(name=name)
        return response.payload.data.decode("UTF-8")
    except Exception as e:
        print(f"Warning: Failed to fetch secret {secret_name}: {e}")
        return None

def _get_project_id() -> str:
    """Get project ID from environment or use default."""
    # Determine project ID based on environment
    environment = os.environ.get("ENVIRONMENT", "development").lower()
    default_project_id = "701982941522" if environment == "staging" else "304612253870"
    project_id = os.environ.get('GOOGLE_CLOUD_PROJECT', default_project_id)
    print(f"Using project ID: {project_id} for environment: {environment}")
    return project_id

def _create_secret_client() -> secretmanager.SecretManagerServiceClient:
    """Initialize Secret Manager client with timeout."""
    try:
        import socket
        socket.setdefaulttimeout(10)
        return secretmanager.SecretManagerServiceClient()
    except Exception as e:
        print(f"Error: Failed to create Secret Manager client: {e}")
        print("Make sure GOOGLE_APPLICATION_CREDENTIALS is set and valid.")
        print("Or use 'gcloud auth application-default login' to authenticate.")
        sys.exit(1)

def _get_secret_mappings() -> dict[str, str]:
    """Return mapping of secret names to environment variable names."""
    return {
        "gemini-api-key": "GEMINI_API_KEY",
        "google-client-id": "GOOGLE_CLIENT_ID",
        "google-client-secret": "GOOGLE_CLIENT_SECRET",
        "langfuse-secret-key": "LANGFUSE_SECRET_KEY",
        "langfuse-public-key": "LANGFUSE_PUBLIC_KEY",
        "clickhouse-default-password": "CLICKHOUSE_DEFAULT_PASSWORD",
        "clickhouse-development-password": "CLICKHOUSE_DEVELOPMENT_PASSWORD",
        "jwt-secret-key": "JWT_SECRET_KEY",
        "fernet-key": "FERNET_KEY",
        "redis-default": "REDIS_PASSWORD"
    }

def _get_static_config() -> dict[str, str]:
    """Return static configuration values."""
    return {
        "CLICKHOUSE_HOST": "clickhouse_host_url_placeholder",
        "CLICKHOUSE_PORT": "8443",
        "CLICKHOUSE_USER": "default",
        "CLICKHOUSE_DB": "default",
        "ENVIRONMENT": "development"
    }

def _fetch_all_secrets(client: secretmanager.SecretManagerServiceClient, project_id: str, mappings: dict[str, str]) -> dict[str, str]:
    """Fetch all secrets and return environment variables."""
    print("Fetching secrets from Google Secret Manager...")
    env_vars = {}
    for secret_name, env_var in mappings.items():
        print(f"Fetching {secret_name}...")
        secret_value = fetch_secret(client, project_id, secret_name)
        if secret_value:
            env_vars[env_var] = secret_value
            print(f"  [OK] Successfully fetched {secret_name}")
        else:
            print(f"  [FAIL] Failed to fetch {secret_name}")
    return env_vars

def _check_env_file_exists(file_path: str) -> bool:
    """Check if env file exists and warn user if it does."""
    if os.path.exists(file_path):
        print(f"\n⚠️  WARNING: {file_path} already exists!")
        print("To protect your existing configuration, this script will not overwrite it.")
        print("Options:")
        print("  1. Rename or backup your existing .env file")
        print("  2. Use .env.development for local overrides")
        print("  3. Delete .env if you want to regenerate it")
        return True
    return False

def _write_env_sections(f, env_vars: dict[str, str]) -> None:
    """Write all environment variable sections to file."""
    sections = [
        ("# Google OAuth Configuration\n", ["GOOGLE_CLIENT_ID", "GOOGLE_CLIENT_SECRET"]),
        ("\n# API Keys\n", ["GEMINI_API_KEY"]),
        ("\n# ClickHouse Configuration\n", ["CLICKHOUSE_HOST", "CLICKHOUSE_PORT", "CLICKHOUSE_USER", "CLICKHOUSE_DEFAULT_PASSWORD", "CLICKHOUSE_DEVELOPMENT_PASSWORD", "CLICKHOUSE_DB"]),
        ("\n# Langfuse Configuration\n", ["LANGFUSE_PUBLIC_KEY", "LANGFUSE_SECRET_KEY"]),
        ("\n# Security Keys\n", ["JWT_SECRET_KEY", "FERNET_KEY"]),
        ("\n# Redis Configuration\n", ["REDIS_PASSWORD"]),
        ("\n# Environment Configuration\n", ["ENVIRONMENT"])
    ]
    for header, keys in sections:
        f.write(header)
        for key in keys:
            if key in env_vars:
                f.write(f"{key}={env_vars[key]}\n")

def _write_env_file(file_path: str, env_vars: dict[str, str]) -> None:
    """Write environment variables to .env file."""
    print(f"\nCreating new {file_path}...")
    with open(file_path, "w") as f:
        f.write("# Initial .env file from Google Secret Manager\n")
        f.write("# Generated by fetch_secrets_to_env.py\n")
        f.write("# This file will NOT be overwritten on subsequent runs\n\n")
        _write_env_sections(f, env_vars)

def _print_summary(env_vars: dict[str, str], secret_mappings: dict[str, str], static_config: dict[str, str]) -> None:
    """Print summary of operation results."""
    print(f"[SUCCESS] Created .env with {len(env_vars)} configuration values")
    print("\nSummary:")
    secrets_count = len([k for k in env_vars if k in secret_mappings.values()])
    print(f"  - Fetched {secrets_count} secrets from Google Secret Manager")
    print(f"  - Added {len(static_config)} static configuration values")

def _process_and_write_env(env_vars: dict[str, str], secret_mappings: dict[str, str], static_config: dict[str, str]) -> None:
    """Process environment variables and write .env file if it doesn't exist."""
    if not _check_env_file_exists(".env"):
        _write_env_file(".env", env_vars)
        _print_summary(env_vars, secret_mappings, static_config)

def main():
    """Main function to fetch secrets and create .env file."""
    project_id = _get_project_id()
    client = _create_secret_client()
    secret_mappings = _get_secret_mappings()
    static_config = _get_static_config()
    env_vars = {**_fetch_all_secrets(client, project_id, secret_mappings), **static_config}
    _process_and_write_env(env_vars, secret_mappings, static_config)

if __name__ == "__main__":
    main()