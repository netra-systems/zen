# REMOVED_SYNTAX_ERROR: class TestWebSocketConnection:
    # REMOVED_SYNTAX_ERROR: """Real WebSocket connection for testing instead of mocks."""

# REMOVED_SYNTAX_ERROR: def __init__(self):
    # REMOVED_SYNTAX_ERROR: pass
    # REMOVED_SYNTAX_ERROR: self.messages_sent = []
    # REMOVED_SYNTAX_ERROR: self.is_connected = True
    # REMOVED_SYNTAX_ERROR: self._closed = False

# REMOVED_SYNTAX_ERROR: async def send_json(self, message: dict):
    # REMOVED_SYNTAX_ERROR: """Send JSON message."""
    # REMOVED_SYNTAX_ERROR: if self._closed:
        # REMOVED_SYNTAX_ERROR: raise RuntimeError("WebSocket is closed")
        # REMOVED_SYNTAX_ERROR: self.messages_sent.append(message)

# REMOVED_SYNTAX_ERROR: async def close(self, code: int = 1000, reason: str = "Normal closure"):
    # REMOVED_SYNTAX_ERROR: """Close WebSocket connection."""
    # REMOVED_SYNTAX_ERROR: pass
    # REMOVED_SYNTAX_ERROR: self._closed = True
    # REMOVED_SYNTAX_ERROR: self.is_connected = False

# REMOVED_SYNTAX_ERROR: def get_messages(self) -> list:
    # REMOVED_SYNTAX_ERROR: """Get all sent messages."""
    # REMOVED_SYNTAX_ERROR: await asyncio.sleep(0)
    # REMOVED_SYNTAX_ERROR: return self.messages_sent.copy()

    # REMOVED_SYNTAX_ERROR: '''
    # REMOVED_SYNTAX_ERROR: CRITICAL FAILING TEST SUITE: JWT Signature Exploitation
    # REMOVED_SYNTAX_ERROR: Purpose: Expose vulnerabilities in JWT/service signature collision when using fallback
    # REMOVED_SYNTAX_ERROR: Expected: ALL tests should FAIL to demonstrate signature exploitation risks

    # REMOVED_SYNTAX_ERROR: This suite specifically tests the cryptographic weaknesses that arise when
    # REMOVED_SYNTAX_ERROR: service_secret falls back to jwt_secret_key, creating signature collisions.

    # REMOVED_SYNTAX_ERROR: Business Value Justification (BVJ):
        # REMOVED_SYNTAX_ERROR: - Segment: All - Critical security foundation
        # REMOVED_SYNTAX_ERROR: - Business Goal: Prevent signature forgery and token manipulation
        # REMOVED_SYNTAX_ERROR: - Value Impact: Protects authentication integrity across all services
        # REMOVED_SYNTAX_ERROR: - Strategic Impact: Signature vulnerabilities enable complete OAUTH SIMULATION
        # REMOVED_SYNTAX_ERROR: '''

        # REMOVED_SYNTAX_ERROR: import pytest
        # REMOVED_SYNTAX_ERROR: import asyncio
        # REMOVED_SYNTAX_ERROR: import jwt
        # REMOVED_SYNTAX_ERROR: import hmac
        # REMOVED_SYNTAX_ERROR: import hashlib
        # REMOVED_SYNTAX_ERROR: import json
        # REMOVED_SYNTAX_ERROR: import base64
        # REMOVED_SYNTAX_ERROR: import time
        # REMOVED_SYNTAX_ERROR: import os
        # REMOVED_SYNTAX_ERROR: import sys
        # REMOVED_SYNTAX_ERROR: from typing import Dict, Any, Optional
        # REMOVED_SYNTAX_ERROR: from datetime import datetime, timedelta, timezone
        # REMOVED_SYNTAX_ERROR: from netra_backend.app.websocket_core.unified_manager import UnifiedWebSocketManager
        # REMOVED_SYNTAX_ERROR: from test_framework.database.test_database_manager import DatabaseTestManager
        # REMOVED_SYNTAX_ERROR: from auth_service.core.auth_manager import AuthManager
        # REMOVED_SYNTAX_ERROR: from shared.isolated_environment import IsolatedEnvironment


        # REMOVED_SYNTAX_ERROR: from netra_backend.app.services.user_auth_service import UserAuthService
        # REMOVED_SYNTAX_ERROR: from netra_backend.app.core.configuration import unified_config_manager
        # REMOVED_SYNTAX_ERROR: from netra_backend.app.schemas.config import AppConfig
        # REMOVED_SYNTAX_ERROR: from netra_backend.app.core.unified_error_handler import UnifiedErrorHandler
        # REMOVED_SYNTAX_ERROR: from netra_backend.app.db.database_manager import DatabaseManager
        # REMOVED_SYNTAX_ERROR: from shared.isolated_environment import get_env


# REMOVED_SYNTAX_ERROR: class TestJWTSignatureExploitation:
    # REMOVED_SYNTAX_ERROR: '''
    # REMOVED_SYNTAX_ERROR: Tests that exploit JWT and service signature weaknesses
    # REMOVED_SYNTAX_ERROR: when service_secret falls back to jwt_secret_key
    # REMOVED_SYNTAX_ERROR: '''

    # REMOVED_SYNTAX_ERROR: @pytest.fixture
# REMOVED_SYNTAX_ERROR: def shared_secret_config(self):
    # REMOVED_SYNTAX_ERROR: """Use real service instance."""
    # TODO: Initialize real service
    # REMOVED_SYNTAX_ERROR: """Config where service_secret falls back to jwt_secret_key"""
    # REMOVED_SYNTAX_ERROR: pass
    # Mock: Component isolation for controlled unit testing
    # REMOVED_SYNTAX_ERROR: config = Mock(spec=AppConfig)
    # REMOVED_SYNTAX_ERROR: config.service_secret = None  # Forces fallback
    # REMOVED_SYNTAX_ERROR: config.jwt_secret_key = "shared-vulnerable-secret-123"
    # REMOVED_SYNTAX_ERROR: config.environment = "development"
    # REMOVED_SYNTAX_ERROR: config.auth_service_url = "http://localhost:8001"
    # REMOVED_SYNTAX_ERROR: return config

    # REMOVED_SYNTAX_ERROR: @pytest.fixture
# REMOVED_SYNTAX_ERROR: def distinct_secret_config(self):
    # REMOVED_SYNTAX_ERROR: """Use real service instance."""
    # TODO: Initialize real service
    # REMOVED_SYNTAX_ERROR: """Config with properly separated secrets"""
    # REMOVED_SYNTAX_ERROR: pass
    # Mock: Component isolation for controlled unit testing
    # REMOVED_SYNTAX_ERROR: config = Mock(spec=AppConfig)
    # REMOVED_SYNTAX_ERROR: config.service_secret = "unique-service-secret-" + os.urandom(16).hex()
    # REMOVED_SYNTAX_ERROR: config.jwt_secret_key = "unique-jwt-secret-" + os.urandom(16).hex()
    # REMOVED_SYNTAX_ERROR: config.environment = "production"
    # REMOVED_SYNTAX_ERROR: config.auth_service_url = "http://localhost:8001"
    # REMOVED_SYNTAX_ERROR: return config

    # Removed problematic line: @pytest.mark.asyncio
    # Removed problematic line: async def test_jwt_secret_key_service_signature_collision(self, shared_secret_config):
        # REMOVED_SYNTAX_ERROR: '''
        # REMOVED_SYNTAX_ERROR: TEST 1: Detect when JWT and service signatures use same secret
        # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Signatures collide enabling cross-domain attacks
        # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Cross-domain signature validation bypass
        # REMOVED_SYNTAX_ERROR: '''
        # REMOVED_SYNTAX_ERROR: pass
        # Arrange
        # Mock: Component isolation for testing without external dependencies
        # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

        # Create JWT token
        # REMOVED_SYNTAX_ERROR: jwt_payload = { )
        # REMOVED_SYNTAX_ERROR: "user_id": "user-123",
        # REMOVED_SYNTAX_ERROR: "email": "user@example.com",
        # REMOVED_SYNTAX_ERROR: "exp": time.time() + 3600
        

        # REMOVED_SYNTAX_ERROR: jwt_token = jwt.encode( )
        # REMOVED_SYNTAX_ERROR: jwt_payload,
        # REMOVED_SYNTAX_ERROR: shared_secret_config.jwt_secret_key,
        # REMOVED_SYNTAX_ERROR: algorithm="HS256"
        

        # Create service signature for same payload
        # REMOVED_SYNTAX_ERROR: service_payload = json.dumps(jwt_payload, sort_keys=True)
        # REMOVED_SYNTAX_ERROR: service_signature = hmac.new( )
        # REMOVED_SYNTAX_ERROR: shared_secret_config.jwt_secret_key.encode(),
        # REMOVED_SYNTAX_ERROR: service_payload.encode(),
        # REMOVED_SYNTAX_ERROR: hashlib.sha256
        # REMOVED_SYNTAX_ERROR: ).hexdigest()

        # Act - Try to use JWT signature as service signature
        # REMOVED_SYNTAX_ERROR: jwt_signature = jwt_token.split('.')[-1]

        # Decode JWT signature (base64url)
        # REMOVED_SYNTAX_ERROR: jwt_sig_bytes = base64.urlsafe_b64decode(jwt_signature + '==')

        # Assert - Signatures should be cryptographically separated
        # REMOVED_SYNTAX_ERROR: assert service_signature != jwt_sig_bytes.hex(), ( )
        # REMOVED_SYNTAX_ERROR: "VULNERABILITY: JWT and service signatures can be interchanged! "
        # REMOVED_SYNTAX_ERROR: "Same secret used for different cryptographic purposes enables signature confusion attacks."
        

        # Verify domain separation
        # REMOVED_SYNTAX_ERROR: with pytest.raises(ValueError, match="signature domain mismatch"):
            # Attempt to validate JWT signature as service signature
            # REMOVED_SYNTAX_ERROR: auth_service._verify_service_signature(jwt_payload, jwt_signature)

            # Removed problematic line: @pytest.mark.asyncio
            # Removed problematic line: async def test_token_signature_algorithm_confusion(self, shared_secret_config):
                # REMOVED_SYNTAX_ERROR: '''
                # REMOVED_SYNTAX_ERROR: TEST 2: Exploit algorithm confusion between JWT and service signatures
                # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Different algorithms can be mixed
                # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Algorithm downgrade attack
                # REMOVED_SYNTAX_ERROR: '''
                # REMOVED_SYNTAX_ERROR: pass
                # Arrange
                # Mock: Component isolation for testing without external dependencies
                # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                # REMOVED_SYNTAX_ERROR: secret = shared_secret_config.jwt_secret_key
                # REMOVED_SYNTAX_ERROR: payload = {"user_id": "victim", "role": "user"}

                # Create signatures with different algorithms
                # REMOVED_SYNTAX_ERROR: algorithms = [ )
                # REMOVED_SYNTAX_ERROR: ("HS256", hashlib.sha256),
                # REMOVED_SYNTAX_ERROR: ("HS384", hashlib.sha384),
                # REMOVED_SYNTAX_ERROR: ("HS512", hashlib.sha512),
                # REMOVED_SYNTAX_ERROR: ("none", None),  # Algorithm confusion attack
                

                # REMOVED_SYNTAX_ERROR: signatures = {}
                # REMOVED_SYNTAX_ERROR: for alg_name, hash_func in algorithms:
                    # REMOVED_SYNTAX_ERROR: if alg_name == "none":
                        # Attempt to bypass with no signature
                        # REMOVED_SYNTAX_ERROR: signatures[alg_name] = ""
                        # REMOVED_SYNTAX_ERROR: elif hash_func:
                            # REMOVED_SYNTAX_ERROR: signatures[alg_name] = hmac.new( )
                            # REMOVED_SYNTAX_ERROR: secret.encode(),
                            # REMOVED_SYNTAX_ERROR: json.dumps(payload).encode(),
                            # REMOVED_SYNTAX_ERROR: hash_func
                            # REMOVED_SYNTAX_ERROR: ).hexdigest()

                            # Act - Try to mix algorithms
                            # REMOVED_SYNTAX_ERROR: for alg1 in signatures:
                                # REMOVED_SYNTAX_ERROR: for alg2 in signatures:
                                    # REMOVED_SYNTAX_ERROR: if alg1 != alg2:
                                        # Attempt algorithm confusion
                                        # REMOVED_SYNTAX_ERROR: mixed_token = { )
                                        # REMOVED_SYNTAX_ERROR: "payload": payload,
                                        # REMOVED_SYNTAX_ERROR: "signature": signatures[alg1],
                                        # REMOVED_SYNTAX_ERROR: "algorithm": alg2
                                        

                                        # Assert - Mixed algorithms should be rejected
                                        # REMOVED_SYNTAX_ERROR: with pytest.raises(ValueError, match="algorithm mismatch|invalid algorithm"):
                                            # REMOVED_SYNTAX_ERROR: auth_service._validate_signature_algorithm(mixed_token)

                                            # Specifically test "none" algorithm bypass
                                            # REMOVED_SYNTAX_ERROR: assert signatures["none"] != "", ( )
                                            # REMOVED_SYNTAX_ERROR: "VULNERABILITY: 'none' algorithm accepted for signatures! "
                                            # REMOVED_SYNTAX_ERROR: "This allows complete signature bypass."
                                            

                                            # Removed problematic line: @pytest.mark.asyncio
                                            # Removed problematic line: async def test_service_signature_tampering(self, shared_secret_config):
                                                # REMOVED_SYNTAX_ERROR: '''
                                                # REMOVED_SYNTAX_ERROR: TEST 3: Tamper with service signature using known secret
                                                # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Tampered signatures accepted
                                                # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Signature forgery
                                                # REMOVED_SYNTAX_ERROR: '''
                                                # REMOVED_SYNTAX_ERROR: pass
                                                # Arrange
                                                # Mock: Component isolation for testing without external dependencies
                                                # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                                                # Original legitimate data
                                                # REMOVED_SYNTAX_ERROR: original_data = { )
                                                # REMOVED_SYNTAX_ERROR: "user_id": "legitimate-user",
                                                # REMOVED_SYNTAX_ERROR: "role": "viewer",
                                                # REMOVED_SYNTAX_ERROR: "permissions": ["read"]
                                                

                                                # Create legitimate signature
                                                # REMOVED_SYNTAX_ERROR: secret = shared_secret_config.jwt_secret_key
                                                # REMOVED_SYNTAX_ERROR: original_sig = hmac.new( )
                                                # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                # REMOVED_SYNTAX_ERROR: json.dumps(original_data, sort_keys=True).encode(),
                                                # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                # Act - Tamper with data and create new signature
                                                # REMOVED_SYNTAX_ERROR: tampered_data = original_data.copy()
                                                # REMOVED_SYNTAX_ERROR: tampered_data["role"] = "admin"  # Privilege escalation
                                                # REMOVED_SYNTAX_ERROR: tampered_data["permissions"] = ["read", "write", "delete"]

                                                # Forge new signature with known secret
                                                # REMOVED_SYNTAX_ERROR: tampered_sig = hmac.new( )
                                                # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                # REMOVED_SYNTAX_ERROR: json.dumps(tampered_data, sort_keys=True).encode(),
                                                # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                # Create mock validation context
                                                # Mock: Authentication service isolation for testing without real auth flows
                                                # REMOVED_SYNTAX_ERROR: websocket = TestWebSocketConnection()
                                                # REMOVED_SYNTAX_ERROR: mock_auth_client.validate_token.return_value = { )
                                                # REMOVED_SYNTAX_ERROR: **tampered_data,
                                                # REMOVED_SYNTAX_ERROR: "service_signature": tampered_sig,
                                                # REMOVED_SYNTAX_ERROR: "valid": True,
                                                # REMOVED_SYNTAX_ERROR: "verified_at": datetime.now(timezone.utc).isoformat()
                                                

                                                # Mock: Authentication service isolation for testing without real auth flows
                                                # REMOVED_SYNTAX_ERROR: result = await auth_service.validate_user_token("tampered-token")

                                                # Assert - Tampered data should be rejected
                                                # REMOVED_SYNTAX_ERROR: assert result is None or result.get("role") != "admin", ( )
                                                # REMOVED_SYNTAX_ERROR: "VULNERABILITY: Signature tampering successful! "
                                                # REMOVED_SYNTAX_ERROR: "Attacker escalated privileges by forging new signature with known secret."
                                                

                                                # Verify original data integrity
                                                # REMOVED_SYNTAX_ERROR: assert original_data["role"] == "viewer", "Original data should not be modified"

                                                # Removed problematic line: @pytest.mark.asyncio
                                                # Removed problematic line: async def test_hmac_timing_attack_service_validation(self, shared_secret_config):
                                                    # REMOVED_SYNTAX_ERROR: '''
                                                    # REMOVED_SYNTAX_ERROR: TEST 4: Time-based attack on HMAC comparison
                                                    # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Timing differences reveal signature information
                                                    # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Side-channel timing analysis
                                                    # REMOVED_SYNTAX_ERROR: '''
                                                    # REMOVED_SYNTAX_ERROR: pass
                                                    # Arrange
                                                    # Mock: Component isolation for testing without external dependencies
                                                    # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                                                    # REMOVED_SYNTAX_ERROR: secret = shared_secret_config.jwt_secret_key
                                                    # REMOVED_SYNTAX_ERROR: payload = {"user_id": "timing-victim"}

                                                    # Create correct signature
                                                    # REMOVED_SYNTAX_ERROR: correct_sig = hmac.new( )
                                                    # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                    # REMOVED_SYNTAX_ERROR: json.dumps(payload).encode(),
                                                    # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                    # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                    # Act - Measure timing for different signatures
                                                    # REMOVED_SYNTAX_ERROR: timing_results = []

                                                    # Test signatures with increasing similarity to correct one
                                                    # REMOVED_SYNTAX_ERROR: test_sigs = [ )
                                                    # REMOVED_SYNTAX_ERROR: "0" * len(correct_sig),  # Completely wrong
                                                    # REMOVED_SYNTAX_ERROR: correct_sig[:1] + "0" * (len(correct_sig) - 1),  # First char correct
                                                    # REMOVED_SYNTAX_ERROR: correct_sig[:len(correct_sig)//2] + "0" * (len(correct_sig)//2),  # Half correct
                                                    # REMOVED_SYNTAX_ERROR: correct_sig[:-1] + "0",  # All but last char correct
                                                    # REMOVED_SYNTAX_ERROR: correct_sig  # Completely correct
                                                    

                                                    # REMOVED_SYNTAX_ERROR: for test_sig in test_sigs:
                                                        # REMOVED_SYNTAX_ERROR: start_time = time.perf_counter_ns()

                                                        # Simulate signature comparison
                                                        # REMOVED_SYNTAX_ERROR: try:
                                                            # This should use constant-time comparison
                                                            # REMOVED_SYNTAX_ERROR: is_valid = hmac.compare_digest(test_sig, correct_sig)
                                                            # REMOVED_SYNTAX_ERROR: except:
                                                                # REMOVED_SYNTAX_ERROR: is_valid = test_sig == correct_sig  # Vulnerable comparison

                                                                # REMOVED_SYNTAX_ERROR: end_time = time.perf_counter_ns()
                                                                # REMOVED_SYNTAX_ERROR: timing_results.append((test_sig[:8], end_time - start_time, is_valid))

                                                                # Assert - Timing should be constant regardless of similarity
                                                                # REMOVED_SYNTAX_ERROR: timings = [t[1] for t in timing_results[:-1]]  # Exclude correct sig
                                                                # REMOVED_SYNTAX_ERROR: avg_timing = sum(timings) / len(timings)
                                                                # REMOVED_SYNTAX_ERROR: max_deviation = max(abs(t - avg_timing) for t in timings)

                                                                # Check for timing attack vulnerability
                                                                # REMOVED_SYNTAX_ERROR: timing_variance_threshold = avg_timing * 0.1  # 10% variance threshold

                                                                # REMOVED_SYNTAX_ERROR: assert max_deviation < timing_variance_threshold, ( )
                                                                # REMOVED_SYNTAX_ERROR: f"VULNERABILITY: Timing attack possible! "
                                                                # REMOVED_SYNTAX_ERROR: "formatted_string"
                                                                # REMOVED_SYNTAX_ERROR: f"This reveals information about correct signature through timing side-channel. "
                                                                # REMOVED_SYNTAX_ERROR: "formatted_string"
                                                                

                                                                # Removed problematic line: @pytest.mark.asyncio
                                                                # Removed problematic line: async def test_service_signature_length_extension(self, shared_secret_config):
                                                                    # REMOVED_SYNTAX_ERROR: '''
                                                                    # REMOVED_SYNTAX_ERROR: TEST 5: Hash length extension attack
                                                                    # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Can extend signed messages without knowing secret
                                                                    # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Extend service signature payload
                                                                    # REMOVED_SYNTAX_ERROR: '''
                                                                    # REMOVED_SYNTAX_ERROR: pass
                                                                    # Arrange
                                                                    # Mock: Component isolation for testing without external dependencies
                                                                    # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                                                                    # REMOVED_SYNTAX_ERROR: secret = shared_secret_config.jwt_secret_key

                                                                    # Original message and signature
                                                                    # REMOVED_SYNTAX_ERROR: original_message = json.dumps({"user_id": "user-1", "role": "user"})
                                                                    # REMOVED_SYNTAX_ERROR: original_sig = hmac.new( )
                                                                    # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                                    # REMOVED_SYNTAX_ERROR: original_message.encode(),
                                                                    # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                                    # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                                    # Act - Attempt length extension attack
                                                                    # Note: HMAC should prevent this, but test for vulnerability
                                                                    # REMOVED_SYNTAX_ERROR: extension = ', "admin": true}'
                                                                    # REMOVED_SYNTAX_ERROR: extended_message = original_message[:-1] + extension

                                                                    # Try to forge extended signature without knowing secret
                                                                    # This simulates what an attacker would attempt

                                                                    # Calculate what signature would be if vulnerable to length extension
                                                                    # (This would work with plain hash, not HMAC)
                                                                    # REMOVED_SYNTAX_ERROR: forged_data = { )
                                                                    # REMOVED_SYNTAX_ERROR: "message": extended_message,
                                                                    # REMOVED_SYNTAX_ERROR: "signature": original_sig,  # Reuse original
                                                                    # REMOVED_SYNTAX_ERROR: "valid": True
                                                                    

                                                                    # Assert - Length extension should fail with HMAC
                                                                    # REMOVED_SYNTAX_ERROR: extended_sig = hmac.new( )
                                                                    # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                                    # REMOVED_SYNTAX_ERROR: extended_message.encode(),
                                                                    # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                                    # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                                    # REMOVED_SYNTAX_ERROR: assert extended_sig != original_sig, ( )
                                                                    # REMOVED_SYNTAX_ERROR: "VULNERABILITY: Length extension attack possible! "
                                                                    # REMOVED_SYNTAX_ERROR: "Original signature valid for extended message. "
                                                                    # REMOVED_SYNTAX_ERROR: "This indicates improper use of hash function instead of HMAC."
                                                                    

                                                                    # Verify HMAC is actually being used
                                                                    # REMOVED_SYNTAX_ERROR: assert hasattr(auth_service, '_generate_service_signature'), ( )
                                                                    # REMOVED_SYNTAX_ERROR: "VULNERABILITY: No service signature generation method found"
                                                                    

                                                                    # Removed problematic line: @pytest.mark.asyncio
                                                                    # Removed problematic line: async def test_signature_malleability_attack(self, shared_secret_config):
                                                                        # REMOVED_SYNTAX_ERROR: '''
                                                                        # REMOVED_SYNTAX_ERROR: TEST 6: Test for signature malleability
                                                                        # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Modified signatures still validate
                                                                        # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Signature format manipulation
                                                                        # REMOVED_SYNTAX_ERROR: '''
                                                                        # REMOVED_SYNTAX_ERROR: pass
                                                                        # Arrange
                                                                        # Mock: Component isolation for testing without external dependencies
                                                                        # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                                                                        # REMOVED_SYNTAX_ERROR: secret = shared_secret_config.jwt_secret_key
                                                                        # REMOVED_SYNTAX_ERROR: payload = {"user_id": "malleable-user", "timestamp": time.time()}

                                                                        # Create signature
                                                                        # REMOVED_SYNTAX_ERROR: signature = hmac.new( )
                                                                        # REMOVED_SYNTAX_ERROR: secret.encode(),
                                                                        # REMOVED_SYNTAX_ERROR: json.dumps(payload, sort_keys=True).encode(),
                                                                        # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                                        # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                                        # Act - Test various signature malleability attacks
                                                                        # REMOVED_SYNTAX_ERROR: malleable_sigs = [ )
                                                                        # REMOVED_SYNTAX_ERROR: signature.upper(),  # Case variation
                                                                        # REMOVED_SYNTAX_ERROR: signature.lower(),
                                                                        # REMOVED_SYNTAX_ERROR: " " + signature + " ",  # Whitespace
                                                                        # REMOVED_SYNTAX_ERROR: signature + "\x00",  # Null byte injection
                                                                        # REMOVED_SYNTAX_ERROR: signature[::-1],  # Reversed
                                                                        # REMOVED_SYNTAX_ERROR: signature + signature,  # Duplicated
                                                                        

                                                                        # REMOVED_SYNTAX_ERROR: validation_results = []
                                                                        # REMOVED_SYNTAX_ERROR: for mal_sig in malleable_sigs:
                                                                            # REMOVED_SYNTAX_ERROR: try:
                                                                                # Attempt validation with malleable signature
                                                                                # REMOVED_SYNTAX_ERROR: is_valid = mal_sig.strip().lower() == signature.lower()
                                                                                # REMOVED_SYNTAX_ERROR: validation_results.append((mal_sig[:20], is_valid))
                                                                                # REMOVED_SYNTAX_ERROR: except:
                                                                                    # REMOVED_SYNTAX_ERROR: validation_results.append((mal_sig[:20], False))

                                                                                    # Assert - Only exact signature should validate
                                                                                    # REMOVED_SYNTAX_ERROR: valid_count = sum(1 for _, valid in validation_results if valid)
                                                                                    # REMOVED_SYNTAX_ERROR: assert valid_count == 0, ( )
                                                                                    # REMOVED_SYNTAX_ERROR: f"VULNERABILITY: Signature malleability detected! "
                                                                                    # REMOVED_SYNTAX_ERROR: "formatted_string"
                                                                                    # REMOVED_SYNTAX_ERROR: f"Signatures should be validated with exact byte comparison. "
                                                                                    # REMOVED_SYNTAX_ERROR: "formatted_string"
                                                                                    

                                                                                    # Removed problematic line: @pytest.mark.asyncio
                                                                                    # Removed problematic line: async def test_key_confusion_attack(self, shared_secret_config, distinct_secret_config):
                                                                                        # REMOVED_SYNTAX_ERROR: '''
                                                                                        # REMOVED_SYNTAX_ERROR: TEST 7: Test for key confusion between services
                                                                                        # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Wrong keys accepted for validation
                                                                                        # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Use keys from different contexts
                                                                                        # REMOVED_SYNTAX_ERROR: '''
                                                                                        # REMOVED_SYNTAX_ERROR: pass
                                                                                        # Arrange - Create auth services with different configs
                                                                                        # Mock: Component isolation for testing without external dependencies
                                                                                        # REMOVED_SYNTAX_ERROR: vulnerable_service = UserAuthService()

                                                                                        # Mock: Component isolation for testing without external dependencies
                                                                                        # REMOVED_SYNTAX_ERROR: secure_service = UserAuthService()

                                                                                        # Create token signed with one secret
                                                                                        # REMOVED_SYNTAX_ERROR: payload = {"user_id": "confused-user", "service": "auth"}

                                                                                        # REMOVED_SYNTAX_ERROR: vulnerable_sig = hmac.new( )
                                                                                        # REMOVED_SYNTAX_ERROR: shared_secret_config.jwt_secret_key.encode(),
                                                                                        # REMOVED_SYNTAX_ERROR: json.dumps(payload).encode(),
                                                                                        # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                                                        # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                                                        # REMOVED_SYNTAX_ERROR: secure_sig = hmac.new( )
                                                                                        # REMOVED_SYNTAX_ERROR: distinct_secret_config.service_secret.encode(),
                                                                                        # REMOVED_SYNTAX_ERROR: json.dumps(payload).encode(),
                                                                                        # REMOVED_SYNTAX_ERROR: hashlib.sha256
                                                                                        # REMOVED_SYNTAX_ERROR: ).hexdigest()

                                                                                        # Act - Try to validate with wrong service
                                                                                        # Mock: Authentication service isolation for testing without real auth flows
                                                                                        # REMOVED_SYNTAX_ERROR: websocket = TestWebSocketConnection()
                                                                                        # REMOVED_SYNTAX_ERROR: mock_auth_client.validate_token.return_value = { )
                                                                                        # REMOVED_SYNTAX_ERROR: **payload,
                                                                                        # REMOVED_SYNTAX_ERROR: "service_signature": vulnerable_sig,
                                                                                        # REMOVED_SYNTAX_ERROR: "valid": True,
                                                                                        # REMOVED_SYNTAX_ERROR: "verified_at": datetime.now(timezone.utc).isoformat()
                                                                                        

                                                                                        # Try to validate vulnerable signature with secure service
                                                                                        # Mock: Authentication service isolation for testing without real auth flows
                                                                                        # Mock: Component isolation for testing without external dependencies
                                                                                        # REMOVED_SYNTAX_ERROR: result = await secure_service.validate_user_token("confused-token")

                                                                                        # Assert - Cross-service signatures should fail
                                                                                        # REMOVED_SYNTAX_ERROR: assert result is None, ( )
                                                                                        # REMOVED_SYNTAX_ERROR: "VULNERABILITY: Key confusion attack successful! "
                                                                                        # REMOVED_SYNTAX_ERROR: "Signature from one service accepted by another service. "
                                                                                        # REMOVED_SYNTAX_ERROR: "Services must use cryptographically isolated keys."
                                                                                        

                                                                                        # Removed problematic line: @pytest.mark.asyncio
                                                                                        # Removed problematic line: async def test_signature_stripping_attack(self, shared_secret_config):
                                                                                            # REMOVED_SYNTAX_ERROR: '''
                                                                                            # REMOVED_SYNTAX_ERROR: TEST 8: Test signature stripping vulnerability
                                                                                            # REMOVED_SYNTAX_ERROR: EXPECTED FAILURE: Tokens accepted without signatures
                                                                                            # REMOVED_SYNTAX_ERROR: ATTACK VECTOR: Remove signature from token
                                                                                            # REMOVED_SYNTAX_ERROR: '''
                                                                                            # REMOVED_SYNTAX_ERROR: pass
                                                                                            # Arrange
                                                                                            # Mock: Component isolation for testing without external dependencies
                                                                                            # REMOVED_SYNTAX_ERROR: auth_service = UserAuthService()

                                                                                            # Create valid token data without signature
                                                                                            # REMOVED_SYNTAX_ERROR: unsigned_data = { )
                                                                                            # REMOVED_SYNTAX_ERROR: "user_id": "unsigned-user",
                                                                                            # REMOVED_SYNTAX_ERROR: "email": "attacker@example.com",
                                                                                            # REMOVED_SYNTAX_ERROR: "role": "admin",
                                                                                            # REMOVED_SYNTAX_ERROR: "valid": True,
                                                                                            # REMOVED_SYNTAX_ERROR: "verified_at": datetime.now(timezone.utc).isoformat()
                                                                                            

                                                                                            # Act - Try validation without signature
                                                                                            # REMOVED_SYNTAX_ERROR: websocket = TestWebSocketConnection()
                                                                                            # REMOVED_SYNTAX_ERROR: mock_auth_client.validate_token.return_value = unsigned_data

                                                                                            # Mock: Authentication service isolation for testing without real auth flows
                                                                                            # REMOVED_SYNTAX_ERROR: result = await auth_service.validate_user_token("unsigned-token")

                                                                                            # Assert - Unsigned tokens should be rejected
                                                                                            # REMOVED_SYNTAX_ERROR: assert result is None, ( )
                                                                                            # REMOVED_SYNTAX_ERROR: "VULNERABILITY: Signature stripping attack successful! "
                                                                                            # REMOVED_SYNTAX_ERROR: "Token accepted without service_signature field. "
                                                                                            # REMOVED_SYNTAX_ERROR: "All tokens must have valid signatures."
                                                                                            

                                                                                            # Test with empty signature
                                                                                            # REMOVED_SYNTAX_ERROR: unsigned_data["service_signature"] = ""
                                                                                            # REMOVED_SYNTAX_ERROR: mock_auth_client.validate_token.return_value = unsigned_data

                                                                                            # Mock: Authentication service isolation for testing without real auth flows
                                                                                            # REMOVED_SYNTAX_ERROR: result = await auth_service.validate_user_token("empty-sig-token")

                                                                                            # REMOVED_SYNTAX_ERROR: assert result is None, ( )
                                                                                            # REMOVED_SYNTAX_ERROR: "VULNERABILITY: Empty signature accepted! "
                                                                                            # REMOVED_SYNTAX_ERROR: "Tokens with empty service_signature field should be rejected."
                                                                                            


                                                                                            # Standalone execution
                                                                                            # REMOVED_SYNTAX_ERROR: if __name__ == "__main__":
                                                                                                # REMOVED_SYNTAX_ERROR: print("=" * 80)
                                                                                                # REMOVED_SYNTAX_ERROR: print("EXECUTING FAILING TEST SUITE: JWT Signature Exploitation")
                                                                                                # REMOVED_SYNTAX_ERROR: print("Testing cryptographic vulnerabilities in signature handling")
                                                                                                # REMOVED_SYNTAX_ERROR: print("Expected: ALL tests should FAIL")
                                                                                                # REMOVED_SYNTAX_ERROR: print("=" * 80)

                                                                                                # REMOVED_SYNTAX_ERROR: pytest.main([__file__, "-vvv", "-s", "--tb=short", "--color=yes"])