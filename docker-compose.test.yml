version: '3.8'

services:
  # PostgreSQL Test Database
  postgres-test:
    image: postgres:15-alpine
    container_name: netra-test-postgres
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: netra_test
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${TEST_POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - netra-test-network
    restart: unless-stopped

  # Redis Test Cache
  redis-test:
    image: redis:7-alpine
    container_name: netra-test-redis
    command: redis-server --appendonly no --save ""
    ports:
      - "${TEST_REDIS_PORT:-6380}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - netra-test-network
    restart: unless-stopped

  # ClickHouse Test Analytics (Optional - disabled by default)
  clickhouse-test:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-test-clickhouse
    environment:
      CLICKHOUSE_DB: netra_test_analytics
      CLICKHOUSE_USER: test
      CLICKHOUSE_PASSWORD: test
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${TEST_CLICKHOUSE_HTTP_PORT:-8124}:8123"
      - "${TEST_CLICKHOUSE_TCP_PORT:-9001}:9000"
    volumes:
      - clickhouse_test_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:8123/ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - netra-test-network
    restart: unless-stopped

  # Test Backend Service (for E2E tests)
  backend-test:
    build:
      context: .
      dockerfile: ./docker/backend.test.Dockerfile
      args:
        BUILD_MODE: test
    container_name: netra-test-backend
    environment:
      # Test Environment
      TESTING: "1"
      ENVIRONMENT: testing
      LOG_LEVEL: ERROR
      
      # Database
      DATABASE_URL: postgresql://test:test@postgres-test:5432/netra_test
      POSTGRES_HOST: postgres-test
      POSTGRES_PORT: 5432
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: netra_test
      
      # Redis
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_URL: redis://redis-test:6379/0
      TEST_DISABLE_REDIS: "false"
      
      # ClickHouse (enabled for tests - use real service)
      DEV_MODE_DISABLE_CLICKHOUSE: "false"
      CLICKHOUSE_ENABLED: "true"
      CLICKHOUSE_HOST: clickhouse-test
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: test
      CLICKHOUSE_PASSWORD: test
      CLICKHOUSE_DB: netra_test_analytics
      
      # Auth Service
      AUTH_SERVICE_URL: http://auth-test:8082
      
      # Server Config
      PORT: 8001
      HOST: 0.0.0.0
      
      # Test Secrets
      JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only-must-be-32-chars
      SERVICE_SECRET: test-service-secret-for-cross-service-auth-32-chars-minimum-length
      FERNET_KEY: iZAG-Kz661gRuJXEGzxgghUFnFRamgDrjDXZE6HdJkw=
      SECRET_KEY: test-secret-key-for-testing-only
      
      # Mock API Keys for testing
      ANTHROPIC_API_KEY: ${TEST_ANTHROPIC_API_KEY:-test-anthropic-api-key}
      OPENAI_API_KEY: ${TEST_OPENAI_API_KEY:-test-openai-api-key}
      GEMINI_API_KEY: ${TEST_GEMINI_API_KEY:-test-gemini-api-key}
      GOOGLE_API_KEY: ${TEST_GOOGLE_API_KEY:-test-google-api-key}
      
      # Frontend URL
      FRONTEND_URL: http://localhost:3001
      CORS_ORIGINS: '["http://localhost:3001", "http://frontend-test:3001"]'
    ports:
      - "${TEST_BACKEND_PORT:-8001}:8001"
    volumes:
      - ./netra_backend:/app/netra_backend:ro
      - ./shared:/app/shared:ro
      - ./test_framework:/app/test_framework:ro
      - ./tests:/app/tests:ro
      - ./SPEC:/app/SPEC:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      clickhouse-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - netra-test-network
    profiles:
      - e2e
    command: >
      sh -c "
        echo 'Test Backend: Waiting for database...' &&
        python scripts/wait_for_db.py &&
        echo 'Test Backend: Running migrations...' &&
        alembic -c netra_backend/alembic.ini upgrade head &&
        echo 'Test Backend: Starting...' &&
        uvicorn netra_backend.app.main:app --host 0.0.0.0 --port 8001 --reload-dir /app/netra_backend
      "

  # Test Auth Service (for E2E tests)
  auth-test:
    build:
      context: .
      dockerfile: ./docker/auth.test.Dockerfile
      args:
        BUILD_MODE: test
    container_name: netra-test-auth
    environment:
      # Test Environment
      TESTING: "1"
      ENVIRONMENT: testing
      LOG_LEVEL: ERROR
      
      # Database
      DATABASE_URL: postgresql://test:test@postgres-test:5432/netra_test
      POSTGRES_HOST: postgres-test
      POSTGRES_PORT: 5432
      
      # Redis
      REDIS_HOST: redis-test
      REDIS_PORT: 6379
      REDIS_URL: redis://redis-test:6379/1
      
      # Server Config
      PORT: 8082
      HOST: 0.0.0.0
      
      # Auth Config
      JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only-must-be-32-chars
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Test OAuth Config - using environment-specific variables
      GOOGLE_OAUTH_CLIENT_ID_DEVELOPMENT: test-google-client-id-for-integration-testing
      GOOGLE_OAUTH_CLIENT_SECRET_DEVELOPMENT: test-google-client-secret-for-integration-testing
    ports:
      - "${TEST_AUTH_PORT:-8082}:8082"
    volumes:
      - ./auth_service:/app/auth_service:ro
      - ./shared:/app/shared:ro
      - ./test_framework:/app/test_framework:ro
      - ./logs:/app/logs
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - netra-test-network
    profiles:
      - e2e

  # Test Frontend Service (for E2E tests)
  frontend-test:
    build:
      context: .
      dockerfile: ./docker/frontend.test.Dockerfile
      args:
        BUILD_MODE: test
    container_name: netra-test-frontend
    environment:
      # API URLs
      NEXT_PUBLIC_API_URL: http://localhost:8001
      NEXT_PUBLIC_AUTH_URL: http://localhost:8082
      NEXT_PUBLIC_WS_URL: ws://localhost:8001
      
      # Internal API URLs (for SSR)
      API_URL: http://backend-test:8001
      AUTH_URL: http://auth-test:8082
      
      # Next.js Config
      NODE_ENV: test
      NEXT_TELEMETRY_DISABLED: 1
      
      # Feature Flags
      NEXT_PUBLIC_ENVIRONMENT: testing
    ports:
      - "${TEST_FRONTEND_PORT:-3001}:3001"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/__tests__:/app/__tests__:ro
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend-test
      - auth-test
    networks:
      - netra-test-network
    profiles:
      - e2e
    command: npm run test:e2e

networks:
  netra-test-network:
    driver: bridge
    name: netra-test-network

volumes:
  postgres_test_data:
    name: netra-postgres-test-data
  redis_test_data:
    name: netra-redis-test-data
  clickhouse_test_data:
    name: netra-clickhouse-test-data