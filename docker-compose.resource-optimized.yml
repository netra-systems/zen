# Resource-Optimized Container Compose Configuration
# Based on DOCKER_CRASH_DEEP_10_WHYS_ANALYSIS.md findings
# Prevents resource exhaustion with strict limits and staged startup
# Compatible with both Docker and Podman
#
# CRITICAL: Maximum memory allocation designed to stay under WSL2 limits
# Total memory: ~3GB max (well under typical 8GB WSL2 limit)
#
# Usage with Docker:
# - docker compose -f docker-compose.resource-optimized.yml up -d
# - docker compose -f docker-compose.resource-optimized.yml --profile test up -d
#
# Usage with Podman:
# - podman-compose -f docker-compose.resource-optimized.yml up -d
# - podman compose -f docker-compose.resource-optimized.yml up -d

version: '3.8'

services:
  # ============================================
  # INFRASTRUCTURE SERVICES (Stage 1 - Start First)
  # Low memory, critical dependencies
  # ============================================

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      # Memory-optimized settings
      POSTGRES_SHARED_BUFFERS: 64MB
      POSTGRES_WORK_MEM: 2MB
      POSTGRES_MAINTENANCE_WORK_MEM: 32MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 128MB
      POSTGRES_MAX_CONNECTIONS: 30
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 45s  # Reduced frequency
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M  # Reduced from 512M
          cpus: '0.15'
        reservations:
          memory: 128M

  redis:
    image: redis:7-alpine
    command: |
      redis-server 
      --maxmemory 100mb 
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no
      --tcp-backlog 128
      --tcp-keepalive 60
      --databases 2
    ports:
      - "${REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 50s  # Different interval to prevent storms
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M  # Reduced from 256M
          cpus: '0.05'
        reservations:
          memory: 64M

  # ============================================
  # OPTIONAL SERVICES (Stage 2)
  # Can be disabled if memory constrained
  # ============================================

  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    profiles: ["full", "analytics"]  # Optional - not started by default
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_MAX_MEMORY_USAGE: 300000000  # 300MB limit
      CLICKHOUSE_MAX_THREADS: 2
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8124}:8123"
      - "${CLICKHOUSE_TCP_PORT:-9001}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 60s  # Even longer interval
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M  # Reduced from 1G
          cpus: '0.1'
        reservations:
          memory: 256M

  # ============================================
  # CORE APPLICATION SERVICES (Stage 3)
  # Higher memory but strictly limited
  # ============================================

  auth:
    image: netra-auth:latest
    build:
      context: .
      dockerfile: ./docker/auth.alpine.Dockerfile
      args:
        BUILD_ENV: production
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: WARNING
      # Optimization flags
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Limit workers
      WEB_CONCURRENCY: 1
      WORKERS: 1
      MAX_WORKERS: 1
    ports:
      - "${AUTH_PORT:-8081}:8081"
    volumes:
      - auth_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 55s  # Staggered interval
      timeout: 10s
      retries: 3
      start_period: 45s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M  # Reduced from 1G
          cpus: '0.2'
        reservations:
          memory: 256M

  backend:
    image: netra-backend:latest
    build:
      context: .
      dockerfile: ./docker/backend.alpine.Dockerfile
      args:
        BUILD_ENV: production
    environment:
      ENVIRONMENT: production
      LOG_LEVEL: WARNING
      # Optimization flags
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
      # Database
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Auth Service
      AUTH_SERVICE_URL: http://auth:8081
      # Memory monitoring
      ENABLE_MEMORY_MONITORING: "true"
      MEMORY_CHECK_INTERVAL: "60"
      MEMORY_WARNING_THRESHOLD: "70"
      MEMORY_CRITICAL_THRESHOLD: "85"
      MEMORY_CLEANUP_ENABLED: "true"
      # Worker limits
      WEB_CONCURRENCY: 2
      WORKERS_PER_CORE: 1
      MAX_WORKERS: 2
      # Async limits
      ASYNCIO_MAX_TASKS: 10
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s  # Longest interval for biggest service
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G  # Only backend gets 1GB as requested
          cpus: '0.3'
        reservations:
          memory: 512M

  frontend:
    image: netra-frontend:latest
    build:
      context: .
      dockerfile: ./docker/frontend.alpine.Dockerfile
      args:
        BUILD_ENV: production
        NODE_ENV: production
    profiles: ["full", "ui"]  # Optional - not started by default for API-only testing
    environment:
      NODE_ENV: production
      # Limit Node.js memory
      NODE_OPTIONS: "--max-old-space-size=150"
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      backend:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 65s  # Different from others
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - netra_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M  # Minimal for frontend
          cpus: '0.2'
        reservations:
          memory: 128M

  # ============================================
  # TEST ENVIRONMENT (Minimal Resources)
  # ============================================

  test-postgres:
    image: postgres:15-alpine
    profiles: ["test"]
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: netra_test
      POSTGRES_HOST_AUTH_METHOD: trust
      # Minimal settings for testing
      POSTGRES_SHARED_BUFFERS: 32MB
      POSTGRES_WORK_MEM: 1MB
      POSTGRES_MAX_CONNECTIONS: 20
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - netra_network
    restart: no
    deploy:
      resources:
        limits:
          memory: 128M  # Absolute minimum
          cpus: '0.1'
        reservations:
          memory: 64M

  test-redis:
    image: redis:7-alpine
    profiles: ["test"]
    command: redis-server --maxmemory 32mb --maxmemory-policy allkeys-lru --databases 1
    ports:
      - "6381:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - netra_network
    restart: no
    deploy:
      resources:
        limits:
          memory: 64M  # Absolute minimum
          cpus: '0.05'
        reservations:
          memory: 32M

  test-auth:
    image: netra-test-auth:latest
    profiles: ["test"]
    build:
      context: .
      dockerfile: ./docker/auth.alpine.Dockerfile
      args:
        BUILD_ENV: test
    environment:
      ENVIRONMENT: test
      LOG_LEVEL: ERROR
      TESTING: 1
      POSTGRES_HOST: test-postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      WEB_CONCURRENCY: 1
      WORKERS: 1
    ports:
      - "8082:8081"
    depends_on:
      - test-postgres
      - test-redis
    networks:
      - netra_network
    restart: no
    deploy:
      resources:
        limits:
          memory: 256M  # Minimal for test
          cpus: '0.15'
        reservations:
          memory: 128M

  test-backend:
    image: netra-test-backend:latest
    profiles: ["test"]
    build:
      context: .
      dockerfile: ./docker/backend.alpine.Dockerfile
      args:
        BUILD_ENV: test
    environment:
      ENVIRONMENT: test
      LOG_LEVEL: ERROR
      TESTING: 1
      POSTGRES_HOST: test-postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: test-redis
      REDIS_PORT: 6379
      AUTH_SERVICE_URL: http://test-auth:8081
      WEB_CONCURRENCY: 1
      WORKERS: 1
      MAX_WORKERS: 1
    ports:
      - "8001:8000"
    depends_on:
      - test-postgres
      - test-redis
      - test-auth
    networks:
      - netra_network
    restart: no
    deploy:
      resources:
        limits:
          memory: 512M  # Reduced for test
          cpus: '0.2'
        reservations:
          memory: 256M

# ============================================
# VOLUMES - Minimal set to prevent crashes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  auth_data:
    driver: local
  backend_data:
    driver: local

# ============================================
# NETWORKS
# ============================================
networks:
  netra_network:
    driver: bridge
    # Note: driver_opts removed for Podman compatibility
    # Both Docker and Podman will use default bridge settings

# ============================================
# TOTAL RESOURCE LIMITS SUMMARY:
# 
# DEFAULT PROFILE (Core Services Only):
# - postgres: 256M
# - redis: 128M  
# - auth: 512M
# - backend: 1G (as requested)
# TOTAL: ~1.9GB
#
# FULL PROFILE (All Services):
# - Above plus:
# - clickhouse: 512M
# - frontend: 256M
# TOTAL: ~2.7GB
#
# TEST PROFILE:
# - test-postgres: 128M
# - test-redis: 64M
# - test-auth: 256M
# - test-backend: 512M
# TOTAL: ~960MB
#
# All totals are well under WSL2 typical 8GB limit
# ============================================