<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="1" tests="14" time="4.014" timestamp="2025-09-08T19:28:19.751601-07:00" hostname="Anthony"><testcase classname="" name="tests.test_auth_real_services_comprehensive" time="0.000"><skipped message="collection skipped">('C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\test_auth_real_services_comprehensive.py', 51, 'Skipped: Test framework functions have been removed')</skipped></testcase><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_auth_config_provides_critical_business_configuration" time="0.672" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_oauth_configuration_enables_user_onboarding_business_value" time="0.009" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_security_configuration_protects_business_assets" time="0.005" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_session_configuration_balances_security_and_usability" time="0.005" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_database_configuration_supports_business_scalability" time="0.009" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_redis_configuration_enables_session_management_business_value" time="0.006" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_cors_configuration_enables_frontend_integration_business_value" time="0.005" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_configuration_logging_masks_secrets_for_security" time="0.014" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_jwt_configuration_health_check" time="0.009" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_service_startup_sequence_validation" time="0.009" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_configuration_validation_comprehensive" time="0.045" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_environment_specific_configuration" time="0.013" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_dependency_health_checks" time="0.017"><failure message="AssertionError: assert not True&#10; +  where True = DependencyChecker.check_all_dependencies.&lt;locals&gt;.HealthResult(all_healthy=True, overall_response_time=0.1, database=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.05, error=''), redis=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.02, error=''), oauth_providers=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.0, error='')).all_healthy">auth_service\tests\unit\test_auth_startup_configuration_comprehensive.py:465: in test_dependency_health_checks
    assert not health_result.all_healthy
E   AssertionError: assert not True
E    +  where True = DependencyChecker.check_all_dependencies.&lt;locals&gt;.HealthResult(all_healthy=True, overall_response_time=0.1, database=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.05, error=''), redis=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.02, error=''), oauth_providers=DependencyChecker.check_all_dependencies.&lt;locals&gt;.ComponentHealth(healthy=True, response_time=0.0, error='')).all_healthy</failure></testcase></testsuite></testsuites>