<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="1" failures="0" skipped="1" tests="56" time="1.126" timestamp="2025-09-09T11:56:47.174704-07:00" hostname="Shivanginis-MacBook-Pro.local"><testcase classname="" name="tests.test_auth_real_services_comprehensive" time="0.000"><skipped message="collection skipped">('/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_auth_real_services_comprehensive.py', 51, 'Skipped: Test framework functions have been removed')</skipped></testcase><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthBusinessLogicValidation" name="test_user_registration_business_rules" time="0.098" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthBusinessLogicValidation" name="test_subscription_tier_access_control" time="0.000" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthBusinessLogicValidation" name="test_login_attempt_business_logic" time="0.000" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthBusinessLogicValidation" name="test_account_lifecycle_management" time="0.000" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthBusinessLogicValidation" name="test_business_rule_compliance_validation" time="0.000" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthCrossServiceValidation" name="test_cross_service_token_validation_business_logic" time="0.001" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthSecurityPolicyValidation" name="test_password_policy_business_rules" time="0.002" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthSecurityPolicyValidation" name="test_session_security_policy" time="0.001" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthIntegrationBusinessLogic" name="test_oauth_integration_business_rules" time="0.000" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthAuditBusinessLogic" name="test_audit_logging_business_rules" time="0.002" /><testcase classname="tests.unit.test_auth_business_logic_validation_comprehensive.TestAuthAuditBusinessLogic" name="test_compliance_reporting_business_logic" time="0.002" /><testcase classname="tests.unit.test_auth_service_business_logic.TestAuthServiceBusinessLogic" name="test_service_authentication_business_rules" time="0.003" /><testcase classname="tests.unit.test_auth_service_business_logic.TestAuthServiceBusinessLogic" name="test_user_permission_business_logic" time="0.001" /><testcase classname="tests.unit.test_auth_service_business_logic.TestAuthServiceBusinessLogic" name="test_user_lifecycle_business_events" time="0.075" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_auth_config_provides_critical_business_configuration" time="0.002" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_auth_config_adapts_to_environment_specific_business_needs" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_oauth_configuration_enables_user_onboarding_business_value" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_security_configuration_protects_business_assets" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_session_configuration_balances_security_and_usability" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_database_configuration_supports_business_scalability" time="0.002" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_redis_configuration_enables_session_management_business_value" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_cors_configuration_enables_frontend_integration_business_value" time="0.001" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_configuration_logging_masks_secrets_for_security" time="0.004" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_unified_auth_interface_provides_business_authentication_capabilities" time="0.002" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_auth_interface_token_creation_supports_business_workflows" time="0.002" /><testcase classname="tests.unit.test_auth_service_core_business_value.TestAuthServiceCoreBusinessValue" name="test_token_validation_protects_business_operations" time="0.003" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthCheckScript" name="test_health_check_script_basic_functionality" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthCheckScript" name="test_health_check_script_environment_port_handling" time="0.003" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthCheckScript" name="test_health_check_script_failure_scenarios" time="0.002" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthCheckScript" name="test_readiness_check_script_functionality" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthEndpoints" name="test_health_endpoints_response_formats" time="0.000" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthEndpoints" name="test_health_check_performance_timing" time="0.000" /><testcase classname="tests.unit.test_auth_service_health_check.TestAuthServiceHealthEndpoints" name="test_health_check_environment_differences" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_auth_postgres_health_check_success" time="0.002" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_auth_postgres_health_check_failure" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_oauth_providers_health_check" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_jwt_configuration_health_check" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthConfigModule" name="test_overall_auth_health_status_aggregation" time="0.002" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthCheckBusinessValue" name="test_health_monitoring_prevents_service_outages" time="0.001" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthCheckBusinessValue" name="test_health_check_supports_deployment_automation" time="0.000" /><testcase classname="tests.unit.test_auth_service_health_check.TestHealthCheckBusinessValue" name="test_health_check_enables_monitoring_and_alerting" time="0.001" /><testcase classname="tests.unit.test_auth_service_security_validation.TestAuthServiceSecurityValidation" name="test_password_validation_requirements" time="0.001" /><testcase classname="tests.unit.test_auth_service_security_validation.TestAuthServiceSecurityValidation" name="test_email_validation_security" time="0.001" /><testcase classname="tests.unit.test_auth_service_security_validation.TestAuthServiceSecurityValidation" name="test_authentication_rate_limiting_simulation" time="0.021" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_service_startup_sequence_validation" time="0.002" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_configuration_validation_comprehensive" time="0.008" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_environment_specific_configuration" time="0.002" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_dependency_health_checks" time="0.003" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_startup_performance_optimization" time="0.002" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_health_check_endpoints" time="0.001" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_graceful_shutdown_sequence" time="0.003" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_configuration_hot_reload" time="0.005" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_startup_failure_recovery" time="0.027" /><testcase classname="tests.unit.test_auth_startup_configuration_comprehensive.TestAuthStartupConfiguration" name="test_startup_monitoring_and_metrics" time="0.003" /><testcase classname="tests.unit.test_database_connection_comprehensive.TestAuthDatabaseConnectionInitialization" name="test_database_connection_initialization" time="0.002"><error message="failed on setup with &quot;file /Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_connection_comprehensive.py, line 35&#10;      @pytest.mark.unit&#10;      @pytest.mark.real_services&#10;      async def test_database_connection_initialization(self, real_services_fixture):&#10;          &quot;&quot;&quot;Test basic database connection initialization&quot;&quot;&quot;&#10;          # Create new connection instance&#10;          db_conn = AuthDatabaseConnection()&#10;&#10;          # Verify initial state&#10;          assert db_conn.engine is None&#10;          assert db_conn.async_session_maker is None&#10;          assert db_conn._initialized is False&#10;&#10;          # Initialize connection&#10;          await db_conn.initialize()&#10;&#10;          # Verify post-initialization state&#10;          assert db_conn.engine is not None&#10;          assert db_conn.async_session_maker is not None&#10;          assert db_conn._initialized is True&#10;&#10;          # Clean up&#10;          await db_conn.close()&#10;file /Users/anthony/Documents/GitHub/netra-apex/test_framework/fixtures/real_services.py, line 307&#10;  @pytest.fixture(scope=&quot;function&quot;)&#10;  async def real_services_fixture(real_postgres_connection, with_test_database):&#10;      &quot;&quot;&quot;REAL services fixture - provides access to actual running services.&#10;&#10;      This fixture provides connections to actual running services including:&#10;      - Real PostgreSQL database with active session&#10;      - Backend service endpoints&#10;      - Auth service endpoints&#10;      - Environment configuration&#10;&#10;      CRITICAL: This replaces placeholder implementations with real services.&#10;&#10;      Args:&#10;          real_postgres_connection: Real database connection info&#10;          with_test_database: Real database session&#10;&#10;      Yields:&#10;          Dict: Real service connections and configuration&#10;      &quot;&quot;&quot;&#10;      postgres_info = real_postgres_connection&#10;      db_session = with_test_database&#10;      env = get_env()&#10;&#10;      # Determine service URLs based on environment&#10;      backend_port = env.get(&quot;BACKEND_PORT&quot;, &quot;8000&quot;)&#10;      auth_port = env.get(&quot;AUTH_SERVICE_PORT&quot;, &quot;8081&quot;)&#10;      redis_port = env.get(&quot;REDIS_PORT&quot;, &quot;6381&quot;)  # Test Redis port&#10;&#10;      backend_url = f&quot;http://localhost:{backend_port}&quot;&#10;      auth_url = f&quot;http://localhost:{auth_port}&quot;&#10;      redis_url = f&quot;redis://localhost:{redis_port}&quot;&#10;&#10;      # Validate services are reachable (optional - don't fail if not available)&#10;      services_available = {&#10;          &quot;backend&quot;: False,&#10;          &quot;auth&quot;: False,&#10;          &quot;database&quot;: postgres_info[&quot;available&quot;],&#10;          &quot;redis&quot;: False&#10;      }&#10;&#10;      # Test Redis connection&#10;      try:&#10;          import redis&#10;          redis_client = redis.Redis.from_url(redis_url, socket_timeout=2)&#10;          redis_client.ping()&#10;          services_available[&quot;redis&quot;] = True&#10;          redis_client.close()&#10;      except Exception:&#10;          logger.info(&quot;Redis service not reachable - tests will use URL only&quot;)&#10;&#10;      try:&#10;          import aiohttp&#10;          timeout = aiohttp.ClientTimeout(total=2)&#10;          async with aiohttp.ClientSession(timeout=timeout) as session:&#10;              # Test backend service&#10;              try:&#10;                  async with session.get(f&quot;{backend_url}/health&quot;) as resp:&#10;                      services_available[&quot;backend&quot;] = resp.status == 200&#10;              except Exception:&#10;                  logger.info(&quot;Backend service not reachable - tests will use URL only&quot;)&#10;&#10;              # Test auth service&#10;              try:&#10;                  async with session.get(f&quot;{auth_url}/health&quot;) as resp:&#10;                      services_available[&quot;auth&quot;] = resp.status == 200&#10;              except Exception:&#10;                  logger.info(&quot;Auth service not reachable - tests will use URL only&quot;)&#10;      except ImportError:&#10;          logger.info(&quot;aiohttp not available - skipping service health checks&quot;)&#10;&#10;      yield {&#10;          &quot;backend_url&quot;: backend_url,&#10;          &quot;auth_url&quot;: auth_url,&#10;          &quot;redis_url&quot;: redis_url,&#10;          &quot;postgres&quot;: postgres_info[&quot;engine&quot;],&#10;          &quot;db&quot;: db_session,&#10;          &quot;redis&quot;: redis_url,  # Add redis key for compatibility&#10;          &quot;database_url&quot;: postgres_info[&quot;database_url&quot;],&#10;          &quot;environment&quot;: postgres_info[&quot;environment&quot;],&#10;          &quot;services_available&quot;: services_available,&#10;          &quot;database_available&quot;: postgres_info[&quot;available&quot;]&#10;      }&#10;E       fixture 'real_postgres_connection' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_faker, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, api_client, auth_service_client, authenticated_api_client, authenticated_websocket, backend_service_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, clean_database, clickhouse_client, common_test_user, cov, database_connection, database_transaction, docker_test_manager, doctest_namespace, e2e_logger, e2e_services, e2e_test_config, ensure_no_mocks, event_loop, event_loop_policy, faker, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, isolated_test_env, isolated_test_users, mock_agent_service, mock_agent_supervisor, mock_auth_redis, mock_background_task_manager, mock_clickhouse_client, mock_database_factory, mock_key_manager, mock_llm_manager, mock_redis_client, mock_redis_manager, mock_security_service, mock_tool_dispatcher, mock_websocket_manager, monkeypatch, no_cover, performance_monitor, pytestconfig, real_auth_db, real_auth_redis, real_auth_service, real_clickhouse, real_http_client, real_jwt_manager, real_llm_config, real_oauth_endpoints, real_postgres, real_redis, real_services, real_services_fixture, real_services_function, real_websocket_client, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_client, redis_manager, sample_data, service_urls, setup_real_services, sync_auth_db, test_agent, test_conversation, test_organization, test_services, test_user, test_user_data, test_user_token, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_connection&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/anthony/Documents/GitHub/netra-apex/test_framework/fixtures/real_services.py:307&quot;">file /Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_connection_comprehensive.py, line 35
      @pytest.mark.unit
      @pytest.mark.real_services
      async def test_database_connection_initialization(self, real_services_fixture):
          """Test basic database connection initialization"""
          # Create new connection instance
          db_conn = AuthDatabaseConnection()

          # Verify initial state
          assert db_conn.engine is None
          assert db_conn.async_session_maker is None
          assert db_conn._initialized is False

          # Initialize connection
          await db_conn.initialize()

          # Verify post-initialization state
          assert db_conn.engine is not None
          assert db_conn.async_session_maker is not None
          assert db_conn._initialized is True

          # Clean up
          await db_conn.close()
file /Users/anthony/Documents/GitHub/netra-apex/test_framework/fixtures/real_services.py, line 307
  @pytest.fixture(scope="function")
  async def real_services_fixture(real_postgres_connection, with_test_database):
      """REAL services fixture - provides access to actual running services.

      This fixture provides connections to actual running services including:
      - Real PostgreSQL database with active session
      - Backend service endpoints
      - Auth service endpoints
      - Environment configuration

      CRITICAL: This replaces placeholder implementations with real services.

      Args:
          real_postgres_connection: Real database connection info
          with_test_database: Real database session

      Yields:
          Dict: Real service connections and configuration
      """
      postgres_info = real_postgres_connection
      db_session = with_test_database
      env = get_env()

      # Determine service URLs based on environment
      backend_port = env.get("BACKEND_PORT", "8000")
      auth_port = env.get("AUTH_SERVICE_PORT", "8081")
      redis_port = env.get("REDIS_PORT", "6381")  # Test Redis port

      backend_url = f"http://localhost:{backend_port}"
      auth_url = f"http://localhost:{auth_port}"
      redis_url = f"redis://localhost:{redis_port}"

      # Validate services are reachable (optional - don't fail if not available)
      services_available = {
          "backend": False,
          "auth": False,
          "database": postgres_info["available"],
          "redis": False
      }

      # Test Redis connection
      try:
          import redis
          redis_client = redis.Redis.from_url(redis_url, socket_timeout=2)
          redis_client.ping()
          services_available["redis"] = True
          redis_client.close()
      except Exception:
          logger.info("Redis service not reachable - tests will use URL only")

      try:
          import aiohttp
          timeout = aiohttp.ClientTimeout(total=2)
          async with aiohttp.ClientSession(timeout=timeout) as session:
              # Test backend service
              try:
                  async with session.get(f"{backend_url}/health") as resp:
                      services_available["backend"] = resp.status == 200
              except Exception:
                  logger.info("Backend service not reachable - tests will use URL only")

              # Test auth service
              try:
                  async with session.get(f"{auth_url}/health") as resp:
                      services_available["auth"] = resp.status == 200
              except Exception:
                  logger.info("Auth service not reachable - tests will use URL only")
      except ImportError:
          logger.info("aiohttp not available - skipping service health checks")

      yield {
          "backend_url": backend_url,
          "auth_url": auth_url,
          "redis_url": redis_url,
          "postgres": postgres_info["engine"],
          "db": db_session,
          "redis": redis_url,  # Add redis key for compatibility
          "database_url": postgres_info["database_url"],
          "environment": postgres_info["environment"],
          "services_available": services_available,
          "database_available": postgres_info["available"]
      }
E       fixture 'real_postgres_connection' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_faker, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, api_client, auth_service_client, authenticated_api_client, authenticated_websocket, backend_service_client, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, clean_database, clickhouse_client, common_test_user, cov, database_connection, database_transaction, docker_test_manager, doctest_namespace, e2e_logger, e2e_services, e2e_test_config, ensure_no_mocks, event_loop, event_loop_policy, faker, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, isolated_test_env, isolated_test_users, mock_agent_service, mock_agent_supervisor, mock_auth_redis, mock_background_task_manager, mock_clickhouse_client, mock_database_factory, mock_key_manager, mock_llm_manager, mock_redis_client, mock_redis_manager, mock_security_service, mock_tool_dispatcher, mock_websocket_manager, monkeypatch, no_cover, performance_monitor, pytestconfig, real_auth_db, real_auth_redis, real_auth_service, real_clickhouse, real_http_client, real_jwt_manager, real_llm_config, real_oauth_endpoints, real_postgres, real_redis, real_services, real_services_fixture, real_services_function, real_websocket_client, record_property, record_testsuite_property, record_xml_attribute, recwarn, redis_client, redis_manager, sample_data, service_urls, setup_real_services, sync_auth_db, test_agent, test_conversation, test_organization, test_services, test_user, test_user_data, test_user_token, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory, websocket_connection
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/anthony/Documents/GitHub/netra-apex/test_framework/fixtures/real_services.py:307</error></testcase></testsuite></testsuites>