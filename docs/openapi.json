{
  "openapi": "3.1.0",
  "info": {
    "title": "Netra AI Optimization Platform API",
    "version": "1.0.0",
    "description": "Enterprise-grade system for optimizing AI workloads. This API provides endpoints for agent orchestration, workflow management, and AI optimization tools.",
    "contact": {
      "name": "Netra Support",
      "email": "support@netrasystems.ai",
      "url": "https://netrasystems.ai/support"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://netrasystems.ai/license"
    }
  },
  "paths": {
    "/api/auth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Token",
        "operationId": "token_api_auth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_token_api_auth_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/config": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Auth Config",
        "description": "Returns the authentication configuration.\nThis endpoint is used by the frontend to determine how to behave.",
        "operationId": "get_auth_config_api_auth_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthConfigResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "login_api_auth_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/auth/callback": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Callback",
        "description": "Handle OAuth callback from Google",
        "operationId": "callback_api_auth_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Handle logout - returns success response",
        "operationId": "logout_api_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/auth/dev_login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Dev Login",
        "operationId": "dev_login_api_auth_dev_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/run_agent": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Run Agent",
        "description": "Starts the agent to analyze the user's request.",
        "operationId": "run_agent_api_agent_run_agent_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Run Agent Api Agent Run Agent Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/{run_id}/status": {
      "get": {
        "tags": [
          "agent"
        ],
        "summary": "Get Agent Status",
        "operationId": "get_agent_status_api_agent__run_id__status_get",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Agent Status Api Agent  Run Id  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/{run_id}/state": {
      "get": {
        "tags": [
          "agent"
        ],
        "summary": "Get Agent State",
        "description": "Get the full agent state for a run",
        "operationId": "get_agent_state_api_agent__run_id__state_get",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Agent State Api Agent  Run Id  State Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/agent/thread/{thread_id}/runs": {
      "get": {
        "tags": [
          "agent"
        ],
        "summary": "Get Thread Runs",
        "description": "Get all runs for a thread",
        "operationId": "get_thread_runs_api_agent_thread__thread_id__runs_get",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Thread Runs Api Agent Thread  Thread Id  Runs Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/threads/": {
      "get": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "List Threads",
        "description": "List all threads for the current user",
        "operationId": "list_threads_api_threads__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ThreadResponse"
                  },
                  "title": "Response List Threads Api Threads  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Create Thread",
        "description": "Create a new thread",
        "operationId": "create_thread_api_threads__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreadCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/threads/{thread_id}": {
      "get": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Get Thread",
        "description": "Get a specific thread",
        "operationId": "get_thread_api_threads__thread_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Update Thread",
        "description": "Update a thread",
        "operationId": "update_thread_api_threads__thread_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThreadUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThreadResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Delete Thread",
        "description": "Delete (archive) a thread",
        "operationId": "delete_thread_api_threads__thread_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/threads/{thread_id}/messages": {
      "get": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Get Thread Messages",
        "description": "Get messages for a specific thread",
        "operationId": "get_thread_messages_api_threads__thread_id__messages_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/threads/{thread_id}/auto-rename": {
      "post": {
        "tags": [
          "threads",
          "threads"
        ],
        "summary": "Auto Rename Thread",
        "description": "Automatically generate a title for thread based on first message",
        "operationId": "auto_rename_thread_api_threads__thread_id__auto_rename_post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Thread Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm-cache/stats": {
      "get": {
        "tags": [
          "llm-cache"
        ],
        "summary": "Get Cache Stats",
        "description": "Get LLM cache statistics.\nIf llm_config_name is provided, returns stats for that specific config.\nOtherwise returns stats for all configs.",
        "operationId": "get_cache_stats_api_llm_cache_stats_get",
        "parameters": [
          {
            "name": "llm_config_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Llm Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Cache Stats Api Llm Cache Stats Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm-cache/clear": {
      "delete": {
        "tags": [
          "llm-cache"
        ],
        "summary": "Clear Cache",
        "description": "Clear LLM cache entries.\nIf llm_config_name is provided, clears cache for that specific config.\nOtherwise clears all cache entries.",
        "operationId": "clear_cache_api_llm_cache_clear_delete",
        "parameters": [
          {
            "name": "llm_config_name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Llm Config Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Clear Cache Api Llm Cache Clear Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm-cache/toggle": {
      "post": {
        "tags": [
          "llm-cache"
        ],
        "summary": "Toggle Cache",
        "description": "Enable or disable LLM response caching.",
        "operationId": "toggle_cache_api_llm_cache_toggle_post",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "title": "Enabled"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "title": "Response Toggle Cache Api Llm Cache Toggle Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/llm-cache/ttl": {
      "put": {
        "tags": [
          "llm-cache"
        ],
        "summary": "Update Ttl",
        "description": "Update the default TTL for cached responses.",
        "operationId": "update_ttl_api_llm_cache_ttl_put",
        "parameters": [
          {
            "name": "ttl_seconds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Ttl Seconds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Update Ttl Api Llm Cache Ttl Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/supply/supply-catalog/": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Catalog",
        "description": "Retrieves a list of all models in the supply catalog.",
        "operationId": "read_supply_catalog_api_supply_supply_catalog__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SupplyOption"
                  },
                  "type": "array",
                  "title": "Response Read Supply Catalog Api Supply Supply Catalog  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "supply"
        ],
        "summary": "Create Supply Option",
        "description": "Creates a new supply option in the catalog.",
        "operationId": "create_supply_option_api_supply_supply_catalog__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplyOptionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/supply/supply-catalog/{option_id}": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Option",
        "description": "Retrieves a single supply option by its ID.",
        "operationId": "read_supply_option_api_supply_supply_catalog__option_id__get",
        "parameters": [
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Option Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/content": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Content Corpuses",
        "description": "Lists all available, successfully generated content corpuses.",
        "operationId": "list_content_corpuses_api_generation_content_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Content Corpuses Api Generation Content Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus",
        "description": "Starts a background job to generate a new content corpus.",
        "operationId": "create_content_corpus_api_generation_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus Api Generation Content Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/logs": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Log Sets",
        "description": "Lists all available, successfully generated synthetic log sets.",
        "operationId": "list_log_sets_api_generation_logs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Log Sets Api Generation Logs Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Logs",
        "description": "Starts a background job to generate a new set of synthetic logs.",
        "operationId": "create_synthetic_logs_api_generation_logs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Logs Api Generation Logs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/content_corpus": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus And Store",
        "description": "Starts a background job to generate a new content corpus and store it in ClickHouse.",
        "operationId": "create_content_corpus_and_store_api_generation_content_corpus_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCorpusGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus And Store Api Generation Content Corpus Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/ingest_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Ingest Data",
        "description": "Starts a background job to ingest data into ClickHouse.",
        "operationId": "ingest_data_api_generation_ingest_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataIngestionParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Ingest Data Api Generation Ingest Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/synthetic_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Data",
        "description": "Starts a background job to generate new synthetic data.",
        "operationId": "create_synthetic_data_api_generation_synthetic_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyntheticDataGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Data Api Generation Synthetic Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/jobs/{job_id}": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "Get Job Status",
        "description": "Retrieves the status of a generation job.",
        "operationId": "get_job_status_api_generation_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Job Status Api Generation Jobs  Job Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/generation/clickhouse_tables": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Clickhouse Tables",
        "description": "Lists all tables in the ClickHouse database.",
        "operationId": "list_clickhouse_tables_api_generation_clickhouse_tables_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Clickhouse Tables Api Generation Clickhouse Tables Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/settings": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get App Settings",
        "description": "Retrieve the current application settings.\nOnly accessible to users with system_config permission (developers and admins).",
        "operationId": "get_app_settings_api_settings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/settings/log_table": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Log Table",
        "description": "Set the default ClickHouse log table.\nOnly accessible to admin users.",
        "operationId": "set_log_table_api_settings_log_table_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Set Log Table Api Settings Log Table Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/settings/log_tables": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Add Log Table",
        "description": "Add a new ClickHouse log table to the list of available tables.\nOnly accessible to admin users.",
        "operationId": "add_log_table_api_settings_log_tables_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Add Log Table Api Settings Log Tables Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Remove Log Table",
        "description": "Remove a ClickHouse log table from the list of available tables.\nOnly accessible to admin users.",
        "operationId": "remove_log_table_api_settings_log_tables_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Remove Log Table Api Settings Log Tables Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/settings/time_period": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Time Period",
        "description": "Set the default time period for log analysis.\nOnly accessible to admin users.",
        "operationId": "set_time_period_api_settings_time_period_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimePeriodSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Set Time Period Api Settings Time Period Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/settings/default_log_table": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Default Log Table For Context",
        "description": "Set the default ClickHouse log table for a specific context.\nOnly accessible to admin users.",
        "operationId": "set_default_log_table_for_context_api_settings_default_log_table_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultLogTableSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Set Default Log Table For Context Api Settings Default Log Table Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Remove Default Log Table For Context",
        "description": "Remove the default ClickHouse log table for a specific context.\nOnly accessible to admin users.",
        "operationId": "remove_default_log_table_for_context_api_settings_default_log_table_delete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultLogTableSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Remove Default Log Table For Context Api Settings Default Log Table Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/references": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Get References",
        "description": "Returns a paginated list of available @reference items.\n\nArgs:\n    offset: Number of items to skip (default: 0)\n    limit: Maximum number of items to return (default: 100, max: 1000)",
        "operationId": "get_references_api_references_get",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of items to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of items to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of items to return",
              "default": 100,
              "title": "Limit"
            },
            "description": "Number of items to return"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceGetResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "references"
        ],
        "summary": "Create Reference",
        "description": "Creates a new @reference item.",
        "operationId": "create_reference_api_references_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/references/{reference_id}": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Get Reference",
        "description": "Returns a specific @reference item.",
        "operationId": "get_reference_api_references__reference_id__get",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reference Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "references"
        ],
        "summary": "Update Reference",
        "description": "Updates a specific @reference item.",
        "operationId": "update_reference_api_references__reference_id__put",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reference Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health/live": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Live",
        "description": "Liveness probe to check if the application is running.",
        "operationId": "live_health_live_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Live Health Live Get"
                }
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Ready",
        "description": "Readiness probe to check if the application is ready to serve requests.",
        "operationId": "ready_health_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Ready Health Ready Get"
                }
              }
            }
          }
        }
      }
    },
    "/health/database-env": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Database Environment",
        "description": "Check database environment configuration and validation status.",
        "operationId": "database_environment_health_database_env_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Database Environment Health Database Env Get"
                }
              }
            }
          }
        }
      }
    },
    "/health/schema-validation": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Schema Validation",
        "description": "Run and return comprehensive schema validation results.",
        "operationId": "schema_validation_health_schema_validation_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Schema Validation Health Schema Validation Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/tables": {
      "get": {
        "tags": [
          "corpus"
        ],
        "summary": "List Corpus Tables",
        "operationId": "list_corpus_tables_api_corpus_tables_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Response List Corpus Tables Api Corpus Tables Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/": {
      "post": {
        "tags": [
          "corpus"
        ],
        "summary": "Create Corpus",
        "operationId": "create_corpus_api_corpus__post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorpusCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "corpus"
        ],
        "summary": "Read Corpora",
        "operationId": "read_corpora_api_corpus__get",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Corpus"
                  },
                  "title": "Response Read Corpora Api Corpus  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/{corpus_id}": {
      "get": {
        "tags": [
          "corpus"
        ],
        "summary": "Read Corpus",
        "operationId": "read_corpus_api_corpus__corpus_id__get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "corpus"
        ],
        "summary": "Update Corpus",
        "operationId": "update_corpus_api_corpus__corpus_id__put",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorpusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "corpus"
        ],
        "summary": "Delete Corpus",
        "operationId": "delete_corpus_api_corpus__corpus_id__delete",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/{corpus_id}/generate": {
      "post": {
        "tags": [
          "corpus"
        ],
        "summary": "Regenerate Corpus",
        "operationId": "regenerate_corpus_api_corpus__corpus_id__generate_post",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Corpus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/{corpus_id}/status": {
      "get": {
        "tags": [
          "corpus"
        ],
        "summary": "Get Corpus Status",
        "operationId": "get_corpus_status_api_corpus__corpus_id__status_get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get Corpus Status Api Corpus  Corpus Id  Status Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/corpus/{corpus_id}/content": {
      "get": {
        "tags": [
          "corpus"
        ],
        "summary": "Get Corpus Content",
        "operationId": "get_corpus_content_api_corpus__corpus_id__content_get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Corpus Content Api Corpus  Corpus Id  Content Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/generate": {
      "post": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Generate Synthetic Data",
        "description": "Initiate synthetic data generation job\n\nCreates a background task to generate synthetic AI workload data\nbased on the provided configuration. Data is streamed to ClickHouse\nin real-time with progress updates via WebSocket.",
        "operationId": "generate_synthetic_data_api_synthetic_generate_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/status/{job_id}": {
      "get": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Get Generation Status",
        "description": "Get generation job status\n\nReturns the current status and progress of a generation job.",
        "operationId": "get_generation_status_api_synthetic_status__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/cancel/{job_id}": {
      "post": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Cancel Generation",
        "description": "Cancel running generation job\n\nStops a running generation job and returns the number of records\nthat were completed before cancellation.",
        "operationId": "cancel_generation_api_synthetic_cancel__job_id__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/preview": {
      "get": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Preview Synthetic Data",
        "description": "Preview sample generated data before full generation\n\nGenerates a small sample of synthetic data to preview the output\nbefore committing to a full generation job.",
        "operationId": "preview_synthetic_data_api_synthetic_preview_get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Corpus Id"
            }
          },
          {
            "name": "workload_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Workload Type"
            }
          },
          {
            "name": "sample_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 10,
              "title": "Sample Size"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/create": {
      "post": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Create Corpus",
        "description": "Create new corpus table in ClickHouse\n\nCreates a new corpus for storing content that will be used\nin synthetic data generation.",
        "operationId": "create_corpus_api_synthetic_corpus_create_post",
        "parameters": [
          {
            "name": "content_source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^(upload|generate|import)$",
              "default": "upload",
              "title": "Content Source"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorpusCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/{corpus_id}/upload": {
      "post": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Upload Corpus Content",
        "description": "Upload content to corpus\n\nUploads content records to a corpus. Supports batch uploads\nwhere multiple requests can be made with the same batch_id.",
        "operationId": "upload_corpus_content_api_synthetic_corpus__corpus_id__upload_post",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "batch_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Batch Id"
            }
          },
          {
            "name": "is_final_batch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Is Final Batch"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                },
                "title": "Records"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/{corpus_id}/content": {
      "get": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Get Corpus Content",
        "description": "Get corpus content\n\nRetrieves content from a corpus with optional filtering.",
        "operationId": "get_corpus_content_api_synthetic_corpus__corpus_id__content_get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 100,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          },
          {
            "name": "workload_type",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Workload Type"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/{corpus_id}/statistics": {
      "get": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Get Corpus Statistics",
        "description": "Get corpus statistics\n\nReturns statistical information about a corpus including\nrecord counts, workload distribution, and content metrics.",
        "operationId": "get_corpus_statistics_api_synthetic_corpus__corpus_id__statistics_get",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/{corpus_id}": {
      "delete": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Delete Corpus",
        "description": "Delete corpus\n\nDeletes a corpus and its associated ClickHouse table.",
        "operationId": "delete_corpus_api_synthetic_corpus__corpus_id__delete",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/synthetic/corpus/{corpus_id}/clone": {
      "post": {
        "tags": [
          "synthetic_data",
          "synthetic_data"
        ],
        "summary": "Clone Corpus",
        "description": "Clone an existing corpus\n\nCreates a copy of an existing corpus with a new name.",
        "operationId": "clone_corpus_api_synthetic_corpus__corpus_id__clone_post",
        "parameters": [
          {
            "name": "corpus_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Corpus Id"
            }
          },
          {
            "name": "new_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "New Name"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/config": {
      "get": {
        "tags": [
          "config"
        ],
        "summary": "Get Config",
        "operationId": "get_config_api_config_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebSocketConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/chat": {
      "post": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Demo Chat",
        "description": "Handle demo chat interactions with industry-specific AI optimization.\n\nThis endpoint simulates the multi-agent system for demonstrations,\nproviding realistic optimization recommendations based on industry context.",
        "operationId": "demo_chat_api_demo_chat_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemoChatRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemoChatResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/industry/{industry}/templates": {
      "get": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Get Industry Templates",
        "description": "Get industry-specific demo templates and scenarios.\n\nReturns pre-configured templates for different industries including\ntypical optimization scenarios and expected metrics.",
        "operationId": "get_industry_templates_api_demo_industry__industry__templates_get",
        "parameters": [
          {
            "name": "industry",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Industry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IndustryTemplate"
                  },
                  "title": "Response Get Industry Templates Api Demo Industry  Industry  Templates Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/roi/calculate": {
      "post": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Calculate Roi",
        "description": "Calculate ROI and cost savings for AI optimization.\n\nProvides detailed financial projections based on current spend\nand expected optimization improvements.",
        "operationId": "calculate_roi_api_demo_roi_calculate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ROICalculationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ROICalculationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/metrics/synthetic": {
      "get": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Get Synthetic Metrics",
        "description": "Generate synthetic performance metrics for demonstrations.\n\nCreates realistic performance data showing optimization improvements\nover time for visual demonstrations.",
        "operationId": "get_synthetic_metrics_api_demo_metrics_synthetic_get",
        "parameters": [
          {
            "name": "scenario",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "standard",
              "title": "Scenario"
            }
          },
          {
            "name": "duration_hours",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 24,
              "title": "Duration Hours"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemoMetrics"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/export/report": {
      "post": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Export Demo Report",
        "description": "Export demo session as a comprehensive report.\n\nGenerates a detailed report including optimization recommendations,\nROI calculations, and implementation roadmap.",
        "operationId": "export_demo_report_api_demo_export_report_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportReportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/session/{session_id}/status": {
      "get": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Get Demo Session Status",
        "description": "Get the current status of a demo session.\n\nReturns progress, completed steps, and remaining actions.",
        "operationId": "get_demo_session_status_api_demo_session__session_id__status_get",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/session/{session_id}/feedback": {
      "post": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Submit Demo Feedback",
        "description": "Submit feedback for a demo session.\n\nCollects user feedback to improve demo experience.",
        "operationId": "submit_demo_feedback_api_demo_session__session_id__feedback_post",
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Feedback"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/demo/analytics/summary": {
      "get": {
        "tags": [
          "demo",
          "demo"
        ],
        "summary": "Get Demo Analytics",
        "description": "Get demo analytics summary (admin only).\n\nProvides insights into demo usage, conversion rates, and effectiveness.",
        "operationId": "get_demo_analytics_api_demo_analytics_summary_get",
        "parameters": [
          {
            "name": "days",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 30,
              "title": "Days"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/": {
      "get": {
        "tags": [
          "unified-tools"
        ],
        "summary": "List available tools",
        "description": "Get list of all tools available to the current user\n\nThis endpoint replaces the old admin-specific tool listings and provides\na unified view of all tools with their availability status.",
        "operationId": "list_tools_api_tools__get",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by category",
              "title": "Category"
            },
            "description": "Filter by category"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolAvailabilityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/execute": {
      "post": {
        "tags": [
          "unified-tools"
        ],
        "summary": "Execute a tool",
        "description": "Execute a tool with permission checking and usage tracking\n\nThis endpoint replaces all the separate tool execution endpoints and provides\na unified interface for all tool operations.",
        "operationId": "execute_tool_api_tools_execute_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolExecutionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Execute Tool Api Tools Execute Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/categories": {
      "get": {
        "tags": [
          "unified-tools"
        ],
        "summary": "Get tool categories",
        "description": "Get list of all tool categories with counts",
        "operationId": "get_tool_categories_api_tools_categories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response Get Tool Categories Api Tools Categories Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/permissions/{tool_name}": {
      "get": {
        "tags": [
          "unified-tools"
        ],
        "summary": "Check tool permissions",
        "description": "Check if user has permission to use a specific tool\n\nThis is useful for UI elements to show/hide tool options dynamically.",
        "operationId": "check_tool_permissions_api_tools_permissions__tool_name__get",
        "parameters": [
          {
            "name": "tool_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Name"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Action to check",
              "default": "execute",
              "title": "Action"
            },
            "description": "Action to check"
          },
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Check Tool Permissions Api Tools Permissions  Tool Name  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/user/plan": {
      "get": {
        "tags": [
          "unified-tools"
        ],
        "summary": "Get user plan information",
        "description": "Get current user's plan information and upgrade options",
        "operationId": "get_user_plan_api_tools_user_plan_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/tools/migrate-legacy": {
      "post": {
        "tags": [
          "unified-tools"
        ],
        "summary": "Migrate from legacy admin system",
        "description": "Migrate user from legacy admin system to new tool-based system\n\nThis endpoint handles the transition from role-based admin access\nto the new per-tool permission system.",
        "operationId": "migrate_legacy_admin_api_tools_migrate_legacy_post",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Migrate Legacy Admin Api Tools Migrate Legacy Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentConfig": {
        "properties": {
          "supervisor_strategy": {
            "type": "string",
            "title": "Supervisor Strategy",
            "default": "round_robin"
          },
          "max_retries": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Max Retries",
            "default": 3
          },
          "backoff_strategy": {
            "type": "string",
            "title": "Backoff Strategy",
            "default": "exponential"
          }
        },
        "type": "object",
        "title": "AgentConfig",
        "description": "Agent configuration for generation"
      },
      "AppConfig": {
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "default": "development"
          },
          "app_name": {
            "type": "string",
            "title": "App Name",
            "default": "netra"
          },
          "google_cloud": {
            "$ref": "#/components/schemas/GoogleCloudConfig",
            "default": {
              "project_id": "cryptic-net-466001-n0",
              "client_id": "",
              "client_secret": ""
            }
          },
          "oauth_config": {
            "$ref": "#/components/schemas/OAuthConfig"
          },
          "clickhouse_native": {
            "$ref": "#/components/schemas/ClickHouseNativeConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 9440,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https": {
            "$ref": "#/components/schemas/ClickHouseHTTPSConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 8443,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https_dev": {
            "$ref": "#/components/schemas/ClickHouseHTTPSDevConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 8443,
              "user": "development_user",
              "password": "",
              "database": "development",
              "superuser": true
            }
          },
          "clickhouse_logging": {
            "$ref": "#/components/schemas/ClickHouseLoggingConfig",
            "default": {
              "enabled": true,
              "default_table": "logs",
              "default_time_period_days": 7,
              "available_tables": [
                "logs"
              ],
              "default_tables": {},
              "available_time_periods": [
                1,
                7,
                30,
                90
              ]
            }
          },
          "langfuse": {
            "$ref": "#/components/schemas/LangfuseConfig",
            "default": {
              "secret_key": "",
              "public_key": "",
              "host": "https://cloud.langfuse.com/"
            }
          },
          "ws_config": {
            "$ref": "#/components/schemas/WebSocketConfig"
          },
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": "default_secret_key"
          },
          "algorithm": {
            "type": "string",
            "title": "Algorithm",
            "default": "HS256"
          },
          "access_token_expire_minutes": {
            "type": "integer",
            "title": "Access Token Expire Minutes",
            "default": 30
          },
          "fernet_key": {
            "type": "string",
            "title": "Fernet Key"
          },
          "jwt_secret_key": {
            "type": "string",
            "title": "Jwt Secret Key"
          },
          "api_base_url": {
            "type": "string",
            "title": "Api Base Url",
            "default": "http://localhost:8000"
          },
          "database_url": {
            "type": "string",
            "title": "Database Url"
          },
          "log_level": {
            "type": "string",
            "title": "Log Level",
            "default": "DEBUG"
          },
          "log_secrets": {
            "type": "boolean",
            "title": "Log Secrets",
            "default": false
          },
          "frontend_url": {
            "type": "string",
            "title": "Frontend Url",
            "default": "http://localhost:3010"
          },
          "redis": {
            "$ref": "#/components/schemas/RedisConfig"
          },
          "llm_cache_enabled": {
            "type": "boolean",
            "title": "Llm Cache Enabled",
            "default": true
          },
          "llm_cache_ttl": {
            "type": "integer",
            "title": "Llm Cache Ttl",
            "default": 3600
          },
          "dev_mode_redis_enabled": {
            "type": "boolean",
            "title": "Dev Mode Redis Enabled",
            "description": "Enable Redis in development mode (default: True). Set DEV_MODE_DISABLE_REDIS=true to disable.",
            "default": true
          },
          "dev_mode_clickhouse_enabled": {
            "type": "boolean",
            "title": "Dev Mode Clickhouse Enabled",
            "description": "Enable ClickHouse in development mode (default: True). Set DEV_MODE_DISABLE_CLICKHOUSE=true to disable.",
            "default": true
          },
          "dev_mode_llm_enabled": {
            "type": "boolean",
            "title": "Dev Mode Llm Enabled",
            "description": "Enable LLMs in development mode (default: True). Set DEV_MODE_DISABLE_LLM=true to disable.",
            "default": true
          },
          "llm_configs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LLMConfig"
            },
            "type": "object",
            "title": "Llm Configs",
            "default": {
              "default": {
                "provider": "google",
                "model_name": "gemini-2.5-pro",
                "generation_config": {}
              },
              "analysis": {
                "generation_config": {
                  "temperature": 0.5
                },
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "triage": {
                "generation_config": {},
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "data": {
                "generation_config": {},
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "optimizations_core": {
                "generation_config": {},
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "actions_to_meet_goals": {
                "generation_config": {},
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "reporting": {
                "generation_config": {},
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              }
            }
          }
        },
        "type": "object",
        "title": "AppConfig",
        "description": "Base configuration class."
      },
      "AuthConfigResponse": {
        "properties": {
          "google_client_id": {
            "type": "string",
            "title": "Google Client Id"
          },
          "endpoints": {
            "$ref": "#/components/schemas/AuthEndpoints"
          },
          "development_mode": {
            "type": "boolean",
            "title": "Development Mode"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ]
          },
          "authorized_javascript_origins": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authorized Javascript Origins"
          },
          "authorized_redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authorized Redirect Uris"
          }
        },
        "type": "object",
        "required": [
          "google_client_id",
          "endpoints",
          "development_mode",
          "authorized_javascript_origins",
          "authorized_redirect_uris"
        ],
        "title": "AuthConfigResponse"
      },
      "AuthEndpoints": {
        "properties": {
          "login": {
            "type": "string",
            "title": "Login"
          },
          "logout": {
            "type": "string",
            "title": "Logout"
          },
          "callback": {
            "type": "string",
            "title": "Callback"
          },
          "token": {
            "type": "string",
            "title": "Token"
          },
          "user": {
            "type": "string",
            "title": "User"
          },
          "dev_login": {
            "type": "string",
            "title": "Dev Login"
          }
        },
        "type": "object",
        "required": [
          "login",
          "logout",
          "callback",
          "token",
          "user",
          "dev_login"
        ],
        "title": "AuthEndpoints"
      },
      "Body_token_api_auth_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_token_api_auth_token_post"
      },
      "ClickHouseHTTPSConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSConfig"
      },
      "ClickHouseHTTPSDevConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "development_user"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "development"
          },
          "superuser": {
            "type": "boolean",
            "title": "Superuser",
            "default": true
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSDevConfig"
      },
      "ClickHouseLoggingConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "default_table": {
            "type": "string",
            "title": "Default Table",
            "default": "logs"
          },
          "default_time_period_days": {
            "type": "integer",
            "title": "Default Time Period Days",
            "default": 7
          },
          "available_tables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Tables"
          },
          "default_tables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Default Tables"
          },
          "available_time_periods": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Available Time Periods"
          }
        },
        "type": "object",
        "title": "ClickHouseLoggingConfig"
      },
      "ClickHouseNativeConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 9440
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseNativeConfig"
      },
      "ContentCorpusGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          },
          "clickhouse_table": {
            "type": "string",
            "title": "Clickhouse Table",
            "description": "The name of the ClickHouse table to store the corpus in.",
            "default": "content_corpus"
          }
        },
        "type": "object",
        "title": "ContentCorpusGenParams"
      },
      "ContentGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "title": "ContentGenParams"
      },
      "Corpus": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "created_by_id": {
            "type": "string",
            "title": "Created By Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "id",
          "status",
          "created_by_id",
          "created_at",
          "updated_at"
        ],
        "title": "Corpus"
      },
      "CorpusCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CorpusCreate"
      },
      "CorpusUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CorpusUpdate"
      },
      "DataIngestionParams": {
        "properties": {
          "data_path": {
            "type": "string",
            "title": "Data Path",
            "description": "The path to the data file to ingest."
          },
          "table_name": {
            "type": "string",
            "title": "Table Name",
            "description": "The name of the table to ingest the data into."
          }
        },
        "type": "object",
        "required": [
          "data_path",
          "table_name"
        ],
        "title": "DataIngestionParams"
      },
      "DataSource": {
        "properties": {
          "source_table": {
            "type": "string",
            "title": "Source Table"
          },
          "filters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filters"
          }
        },
        "type": "object",
        "required": [
          "source_table"
        ],
        "title": "DataSource"
      },
      "DefaultLogTableSettings": {
        "properties": {
          "context": {
            "type": "string",
            "title": "Context"
          },
          "log_table": {
            "type": "string",
            "title": "Log Table"
          }
        },
        "type": "object",
        "required": [
          "context",
          "log_table"
        ],
        "title": "DefaultLogTableSettings"
      },
      "DemoChatRequest": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "User message for demo chat"
          },
          "industry": {
            "type": "string",
            "title": "Industry",
            "description": "Industry context for demo"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id",
            "description": "Demo session identifier"
          },
          "context": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context",
            "description": "Additional context"
          }
        },
        "type": "object",
        "required": [
          "message",
          "industry"
        ],
        "title": "DemoChatRequest",
        "description": "Request model for demo chat interactions."
      },
      "DemoChatResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response",
            "description": "AI response"
          },
          "agents_involved": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Agents Involved",
            "description": "Agents that processed the request"
          },
          "optimization_metrics": {
            "type": "object",
            "title": "Optimization Metrics",
            "description": "Optimization metrics"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Demo session identifier"
          }
        },
        "type": "object",
        "required": [
          "response",
          "session_id"
        ],
        "title": "DemoChatResponse",
        "description": "Response model for demo chat interactions."
      },
      "DemoMetrics": {
        "properties": {
          "latency_reduction": {
            "type": "number",
            "title": "Latency Reduction"
          },
          "throughput_increase": {
            "type": "number",
            "title": "Throughput Increase"
          },
          "cost_reduction": {
            "type": "number",
            "title": "Cost Reduction"
          },
          "accuracy_improvement": {
            "type": "number",
            "title": "Accuracy Improvement"
          },
          "timestamps": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Timestamps"
          },
          "values": {
            "additionalProperties": {
              "items": {
                "type": "number"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Values"
          }
        },
        "type": "object",
        "required": [
          "latency_reduction",
          "throughput_increase",
          "cost_reduction",
          "accuracy_improvement",
          "timestamps",
          "values"
        ],
        "title": "DemoMetrics",
        "description": "Demo performance metrics model."
      },
      "DevLoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "DevLoginRequest"
      },
      "ExportReportRequest": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id",
            "description": "Demo session to export"
          },
          "format": {
            "type": "string",
            "pattern": "^(pdf|docx|html)$",
            "title": "Format",
            "description": "Export format",
            "default": "pdf"
          },
          "include_sections": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Include Sections",
            "description": "Sections to include in report"
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "ExportReportRequest",
        "description": "Request model for report export."
      },
      "GenerationRequest": {
        "properties": {
          "corpus_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corpus Id"
          },
          "domain_focus": {
            "type": "string",
            "title": "Domain Focus"
          },
          "tool_catalog": {
            "items": {
              "$ref": "#/components/schemas/ToolConfig"
            },
            "type": "array",
            "title": "Tool Catalog"
          },
          "workload_distribution": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Workload Distribution"
          },
          "scale_parameters": {
            "$ref": "#/components/schemas/ScaleConfig"
          },
          "agent_configuration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AgentConfig"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "domain_focus",
          "tool_catalog",
          "workload_distribution",
          "scale_parameters"
        ],
        "title": "GenerationRequest",
        "description": "Synthetic data generation request"
      },
      "GenerationResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "estimated_duration_seconds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimated Duration Seconds"
          },
          "websocket_channel": {
            "type": "string",
            "title": "Websocket Channel"
          },
          "table_name": {
            "type": "string",
            "title": "Table Name"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "websocket_channel",
          "table_name"
        ],
        "title": "GenerationResponse",
        "description": "Generation job response"
      },
      "GoogleCloudConfig": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "default": "cryptic-net-466001-n0"
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id",
            "default": ""
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret",
            "default": ""
          }
        },
        "type": "object",
        "title": "GoogleCloudConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "IndustryTemplate": {
        "properties": {
          "industry": {
            "type": "string",
            "title": "Industry"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt Template"
          },
          "optimization_scenarios": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Optimization Scenarios"
          },
          "typical_metrics": {
            "type": "object",
            "title": "Typical Metrics"
          }
        },
        "type": "object",
        "required": [
          "industry",
          "name",
          "description",
          "prompt_template",
          "optimization_scenarios",
          "typical_metrics"
        ],
        "title": "IndustryTemplate",
        "description": "Industry-specific template model."
      },
      "JobStatusResponse": {
        "properties": {
          "job_id": {
            "type": "string",
            "title": "Job Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "progress_percentage": {
            "type": "number",
            "title": "Progress Percentage"
          },
          "records_generated": {
            "type": "integer",
            "title": "Records Generated"
          },
          "records_ingested": {
            "type": "integer",
            "title": "Records Ingested"
          },
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Errors"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "status",
          "progress_percentage",
          "records_generated",
          "records_ingested",
          "errors",
          "started_at"
        ],
        "title": "JobStatusResponse",
        "description": "Job status response"
      },
      "LLMConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "The LLM provider (e.g., 'google', 'openai')."
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the model."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The API key for the LLM provider."
          },
          "generation_config": {
            "type": "object",
            "title": "Generation Config",
            "description": "A dictionary of generation parameters, e.g., temperature, max_tokens.",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "provider",
          "model_name"
        ],
        "title": "LLMConfig"
      },
      "LangfuseConfig": {
        "properties": {
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": ""
          },
          "public_key": {
            "type": "string",
            "title": "Public Key",
            "default": ""
          },
          "host": {
            "type": "string",
            "title": "Host",
            "default": "https://cloud.langfuse.com/"
          }
        },
        "type": "object",
        "title": "LangfuseConfig"
      },
      "LogGenParams": {
        "properties": {
          "corpus_id": {
            "type": "string",
            "title": "Corpus Id",
            "description": "The ID of the content corpus to use for generation."
          },
          "num_logs": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Logs",
            "description": "Number of log entries to generate.",
            "default": 1000
          },
          "max_cores": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "required": [
          "corpus_id"
        ],
        "title": "LogGenParams"
      },
      "LogTableSettings": {
        "properties": {
          "log_table": {
            "type": "string",
            "title": "Log Table"
          }
        },
        "type": "object",
        "required": [
          "log_table"
        ],
        "title": "LogTableSettings"
      },
      "OAuthConfig": {
        "properties": {
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id",
            "default": ""
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret",
            "default": ""
          },
          "token_uri": {
            "type": "string",
            "title": "Token Uri",
            "default": "https://oauth2.googleapis.com/token"
          },
          "auth_uri": {
            "type": "string",
            "title": "Auth Uri",
            "default": "https://accounts.google.com/o/oauth2/v2/auth"
          },
          "userinfo_endpoint": {
            "type": "string",
            "title": "Userinfo Endpoint",
            "default": "https://www.googleapis.com/oauth2/userinfo"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scopes",
            "default": [
              "openid",
              "email",
              "profile"
            ]
          },
          "authorized_javascript_origins": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authorized Javascript Origins",
            "default": [
              "https://app.netrasystems.ai",
              "https://127.0.0.1",
              "http://localhost"
            ]
          },
          "authorized_redirect_uris": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authorized Redirect Uris",
            "default": [
              "https://app.netrasystems.ai/oauth2callback",
              "http://localhost:3000/auth/callback"
            ]
          }
        },
        "type": "object",
        "title": "OAuthConfig"
      },
      "PermissionLevel": {
        "type": "string",
        "enum": [
          "none",
          "read",
          "write",
          "admin"
        ],
        "title": "PermissionLevel",
        "description": "Permission levels for tools"
      },
      "PreviewResponse": {
        "properties": {
          "samples": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Samples"
          },
          "estimated_characteristics": {
            "type": "object",
            "title": "Estimated Characteristics"
          }
        },
        "type": "object",
        "required": [
          "samples",
          "estimated_characteristics"
        ],
        "title": "PreviewResponse",
        "description": "Preview response"
      },
      "ROICalculationRequest": {
        "properties": {
          "current_spend": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Current Spend",
            "description": "Current AI infrastructure spend"
          },
          "request_volume": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Request Volume",
            "description": "Monthly request volume"
          },
          "average_latency": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Average Latency",
            "description": "Average latency in ms"
          },
          "industry": {
            "type": "string",
            "title": "Industry",
            "description": "Industry for context-specific calculations"
          }
        },
        "type": "object",
        "required": [
          "current_spend",
          "request_volume",
          "average_latency",
          "industry"
        ],
        "title": "ROICalculationRequest",
        "description": "Request model for ROI calculations."
      },
      "ROICalculationResponse": {
        "properties": {
          "current_annual_cost": {
            "type": "number",
            "title": "Current Annual Cost"
          },
          "optimized_annual_cost": {
            "type": "number",
            "title": "Optimized Annual Cost"
          },
          "annual_savings": {
            "type": "number",
            "title": "Annual Savings"
          },
          "savings_percentage": {
            "type": "number",
            "title": "Savings Percentage"
          },
          "roi_months": {
            "type": "integer",
            "title": "Roi Months"
          },
          "three_year_tco_reduction": {
            "type": "number",
            "title": "Three Year Tco Reduction"
          },
          "performance_improvements": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Performance Improvements"
          }
        },
        "type": "object",
        "required": [
          "current_annual_cost",
          "optimized_annual_cost",
          "annual_savings",
          "savings_percentage",
          "roi_months",
          "three_year_tco_reduction",
          "performance_improvements"
        ],
        "title": "ROICalculationResponse",
        "description": "Response model for ROI calculations."
      },
      "RateLimit": {
        "properties": {
          "per_minute": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per Minute",
            "description": "Calls per minute"
          },
          "per_hour": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per Hour",
            "description": "Calls per hour"
          },
          "per_day": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per Day",
            "description": "Calls per day"
          },
          "burst_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Burst Limit",
            "description": "Burst allowance"
          }
        },
        "type": "object",
        "title": "RateLimit",
        "description": "Rate limiting configuration for tools"
      },
      "RedisConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "redis-10504.fcrce190.us-east-1-1.ec2.redns.redis-cloud.com"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 10504
          },
          "username": {
            "type": "string",
            "title": "Username",
            "default": "default"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          }
        },
        "type": "object",
        "title": "RedisConfig"
      },
      "ReferenceCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "ReferenceCreateRequest"
      },
      "ReferenceGetResponse": {
        "properties": {
          "references": {
            "items": {
              "$ref": "#/components/schemas/ReferenceItem"
            },
            "type": "array",
            "title": "References"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          }
        },
        "type": "object",
        "required": [
          "references"
        ],
        "title": "ReferenceGetResponse"
      },
      "ReferenceItem": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "ReferenceItem"
      },
      "ReferenceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          }
        },
        "type": "object",
        "title": "ReferenceUpdateRequest"
      },
      "RequestModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "workloads": {
            "items": {
              "$ref": "#/components/schemas/Workload"
            },
            "type": "array",
            "title": "Workloads"
          },
          "constraints": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Constraints"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "query",
          "workloads"
        ],
        "title": "RequestModel"
      },
      "ScaleConfig": {
        "properties": {
          "num_traces": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Num Traces"
          },
          "time_window_hours": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Time Window Hours",
            "default": 24
          },
          "concurrent_users": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Concurrent Users",
            "default": 100
          },
          "peak_load_multiplier": {
            "type": "number",
            "exclusiveMinimum": 0.0,
            "title": "Peak Load Multiplier",
            "default": 1.0
          }
        },
        "type": "object",
        "required": [
          "num_traces"
        ],
        "title": "ScaleConfig",
        "description": "Scale configuration for generation"
      },
      "SupplyOption": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "SupplyOption"
      },
      "SupplyOptionCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "SupplyOptionCreate"
      },
      "SyntheticDataGenParams": {
        "properties": {
          "num_traces": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Traces",
            "description": "Number of traces to generate.",
            "default": 10000
          },
          "num_users": {
            "type": "integer",
            "maximum": 10000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Users",
            "description": "Number of unique users to simulate.",
            "default": 100
          },
          "error_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Error Rate",
            "description": "The fraction of traces that should be errors.",
            "default": 0.05
          },
          "event_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Event Types",
            "description": "A list of event types to simulate."
          },
          "source_table": {
            "type": "string",
            "title": "Source Table",
            "description": "The name of the source ClickHouse table for the content corpus.",
            "default": "content_corpus"
          },
          "destination_table": {
            "type": "string",
            "title": "Destination Table",
            "description": "The name of the destination ClickHouse table for the generated data.",
            "default": "synthetic_data"
          }
        },
        "type": "object",
        "title": "SyntheticDataGenParams"
      },
      "ThreadCreate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "title": "ThreadCreate"
      },
      "ThreadResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "thread"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "message_count": {
            "type": "integer",
            "title": "Message Count",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at"
        ],
        "title": "ThreadResponse"
      },
      "ThreadUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          }
        },
        "type": "object",
        "title": "ThreadUpdate"
      },
      "TimePeriodSettings": {
        "properties": {
          "days": {
            "type": "integer",
            "title": "Days"
          }
        },
        "type": "object",
        "required": [
          "days"
        ],
        "title": "TimePeriodSettings"
      },
      "TimeRange": {
        "properties": {
          "start_time": {
            "type": "string",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "title": "End Time"
          }
        },
        "type": "object",
        "required": [
          "start_time",
          "end_time"
        ],
        "title": "TimeRange"
      },
      "ToolAvailability": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "Tool name"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Tool category"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Tool description"
          },
          "available": {
            "type": "boolean",
            "title": "Available",
            "description": "Whether tool is available to user"
          },
          "permission_level": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PermissionLevel"
              },
              {
                "type": "null"
              }
            ],
            "description": "User's permission level"
          },
          "required_permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Required Permissions",
            "description": "Required permissions"
          },
          "missing_requirements": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Missing Requirements",
            "description": "Missing requirements"
          },
          "rate_limits": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RateLimit"
              },
              {
                "type": "null"
              }
            ],
            "description": "Applicable rate limits"
          },
          "usage_today": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Usage Today",
            "description": "Usage count today"
          },
          "upgrade_required": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Upgrade Required",
            "description": "Required plan upgrade"
          }
        },
        "type": "object",
        "required": [
          "tool_name",
          "category",
          "description",
          "available"
        ],
        "title": "ToolAvailability",
        "description": "Tool availability information for a user"
      },
      "ToolAvailabilityResponse": {
        "properties": {
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ToolAvailability"
            },
            "type": "array",
            "title": "Tools"
          },
          "user_plan": {
            "type": "string",
            "title": "User Plan"
          },
          "total_tools": {
            "type": "integer",
            "title": "Total Tools"
          },
          "available_tools": {
            "type": "integer",
            "title": "Available Tools"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories"
          }
        },
        "type": "object",
        "required": [
          "tools",
          "user_plan",
          "total_tools",
          "available_tools",
          "categories"
        ],
        "title": "ToolAvailabilityResponse",
        "description": "Response with available tools for user"
      },
      "ToolConfig": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "latency_ms_range": {
            "prefixItems": [
              {
                "type": "integer"
              },
              {
                "type": "integer"
              }
            ],
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "title": "Latency Ms Range",
            "default": [
              50,
              500
            ]
          },
          "failure_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Failure Rate",
            "default": 0.01
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "ToolConfig",
        "description": "Tool configuration for generation"
      },
      "ToolExecutionRequest": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name"
          },
          "arguments": {
            "type": "object",
            "title": "Arguments",
            "default": {}
          },
          "action": {
            "type": "string",
            "title": "Action",
            "default": "execute"
          }
        },
        "type": "object",
        "required": [
          "tool_name"
        ],
        "title": "ToolExecutionRequest",
        "description": "Request to execute a tool"
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_superuser": {
            "type": "boolean",
            "title": "Is Superuser"
          },
          "hashed_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hashed Password"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "email",
          "id",
          "is_active",
          "is_superuser"
        ],
        "title": "User"
      },
      "UserPlanResponse": {
        "properties": {
          "current_plan": {
            "type": "string",
            "title": "Current Plan"
          },
          "plan_expires_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan Expires At"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Features"
          },
          "available_upgrades": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Upgrades"
          },
          "usage_summary": {
            "type": "object",
            "title": "Usage Summary"
          }
        },
        "type": "object",
        "required": [
          "current_plan",
          "plan_expires_at",
          "features",
          "available_upgrades",
          "usage_summary"
        ],
        "title": "UserPlanResponse",
        "description": "Response with user's plan information"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WebSocketConfig": {
        "properties": {
          "ws_url": {
            "type": "string",
            "title": "Ws Url",
            "description": "The WebSocket URL for the frontend to connect to.",
            "default": "ws://localhost:8000/ws"
          }
        },
        "type": "object",
        "title": "WebSocketConfig"
      },
      "Workload": {
        "properties": {
          "run_id": {
            "type": "string",
            "title": "Run Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "data_source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange"
          }
        },
        "type": "object",
        "required": [
          "run_id",
          "query",
          "data_source",
          "time_range"
        ],
        "title": "Workload"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/auth/token"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Local development server"
    },
    {
      "url": "https://api.netrasystems.ai",
      "description": "Production server"
    },
    {
      "url": "https://staging-api.netrasystems.ai",
      "description": "Staging server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKey": []
    }
  ]
}