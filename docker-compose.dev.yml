# Netra Development Docker Compose Configuration
# Use this file for local development with all services
#
# Usage:
# docker-compose -f docker-compose.dev.yml up -d
# docker-compose -f docker-compose.dev.yml down
# docker-compose -f docker-compose.dev.yml logs -f

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: netra-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-netra}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netra-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # ClickHouse Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8124:8123"
      - "9001:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/init_clickhouse.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: ./docker/auth.development.Dockerfile
    container_name: netra-auth
    env_file:
      - .env.development
    environment:
      ENVIRONMENT: development
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgresql://netra:netra123@postgres:5432/netra_dev
      PORT: 8081
      HOST: 0.0.0.0
    ports:
      - "8081:8081"
    volumes:
      - ./auth_service:/app/auth_service:cached
      - ./shared:/app/shared:cached
      - auth_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - netra-network
    command: >
      sh -c "
        echo 'Starting auth service...' &&
        python -m uvicorn auth_service.main:app --host 0.0.0.0 --port 8081 --reload
      "

  # Analytics Service
  analytics:
    build:
      context: .
      dockerfile: ./docker/analytics.development.Dockerfile
    container_name: netra-analytics
    env_file:
      - .env.development
    environment:
      ENVIRONMENT: development
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_URL: clickhouse://netra:netra123@clickhouse:8123/netra_analytics
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      PORT: 8090
      HOST: 0.0.0.0
    ports:
      - "8090:8090"
    volumes:
      - ./analytics_service:/app/analytics_service:cached
      - ./shared:/app/shared:cached
      - analytics_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - netra-network
    command: >
      sh -c "
        echo 'Starting analytics service...' &&
        python -m uvicorn analytics_service.main:app --host 0.0.0.0 --port 8090 --reload
      "

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: ./docker/backend.development.Dockerfile
    container_name: netra-backend
    env_file:
      - .env.development
    environment:
      ENVIRONMENT: development
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      DATABASE_URL: postgresql://netra:netra123@postgres:5432/netra_dev
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_URL: clickhouse://netra:netra123@clickhouse:8123/netra_analytics
      AUTH_SERVICE_URL: http://auth:8081
      ANALYTICS_SERVICE_URL: http://analytics:8090
      PORT: 8000
      HOST: 0.0.0.0
      FRONTEND_URL: http://localhost:3000
      ALLOW_DEV_OAUTH_SIMULATION: "true"
      WEBSOCKET_AUTH_BYPASS: "true"
    ports:
      - "8000:8000"
    volumes:
      - ./netra_backend:/app/netra_backend:cached
      - ./shared:/app/shared:cached
      - ./SPEC:/app/SPEC:ro
      - ./scripts:/app/scripts:ro
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - netra-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python scripts/wait_for_db.py &&
        echo 'Running migrations...' &&
        alembic -c netra_backend/alembic.ini upgrade head &&
        echo 'Starting backend...' &&
        python -m uvicorn netra_backend.app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.development.Dockerfile
      args:
        BUILD_MODE: development
    container_name: netra-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_AUTH_URL: http://localhost:8081
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://localhost:8000/ws
      NEXT_PUBLIC_ENVIRONMENT: development
      API_URL: http://backend:8000
      AUTH_URL: http://auth:8081
      WS_URL: ws://backend:8000
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:cached
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    depends_on:
      backend:
        condition: service_healthy
      auth:
        condition: service_healthy
    networks:
      - netra-network
    command: >
      sh -c "
        echo 'Starting frontend...' &&
        npm run dev
      "

networks:
  netra-network:
    driver: bridge
    name: netra-network

volumes:
  postgres_data:
    name: netra-postgres-data
  redis_data:
    name: netra-redis-data
  clickhouse_data:
    name: netra-clickhouse-data
  auth_logs:
    name: netra-auth-logs
  analytics_logs:
    name: netra-analytics-logs
  backend_logs:
    name: netra-backend-logs
  frontend_node_modules:
    name: netra-frontend-node-modules
  frontend_next:
    name: netra-frontend-next