version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: netra-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_db}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-netra}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netra-redis
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # ClickHouse Analytics (Optional)
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_TCP_PORT:-9000}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/init_clickhouse.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    profiles:
      - analytics

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    container_name: netra-backend
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-netra}:${POSTGRES_PASSWORD:-netra123}@postgres:5432/${POSTGRES_DB:-netra_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_db}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      
      # ClickHouse
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      
      # Auth Service
      AUTH_SERVICE_URL: http://auth:8081
      
      # Server Config
      PORT: 8000
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # API Keys (from host environment)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NETRA_API_KEY: ${NETRA_API_KEY}
      
      # Frontend URL
      FRONTEND_URL: http://localhost:3000
      CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./netra_backend:/app/netra_backend:ro
      - ./shared:/app/shared:ro
      - ./SPEC:/app/SPEC:ro
      - ./scripts:/app/scripts:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        python scripts/wait_for_db.py &&
        echo 'Running migrations...' &&
        alembic -c netra_backend/alembic.ini upgrade head &&
        echo 'Starting backend...' &&
        uvicorn netra_backend.app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/netra_backend
      "

  # Auth Service
  auth:
    build:
      context: .
      dockerfile: docker/auth.Dockerfile
    container_name: netra-auth
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-netra}:${POSTGRES_PASSWORD:-netra123}@postgres:5432/${POSTGRES_DB:-netra_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/1
      
      # Server Config
      PORT: 8081
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Auth Config
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    ports:
      - "${AUTH_PORT:-8081}:8081"
    volumes:
      - ./auth_service:/app/auth_service:ro
      - ./shared:/app/shared:ro
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-network

  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
      args:
        BUILD_MODE: development
    container_name: netra-frontend
    environment:
      # API URLs
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_AUTH_URL: http://localhost:8081
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
      
      # Internal API URLs (for SSR)
      API_URL: http://backend:8000
      AUTH_URL: http://auth:8081
      
      # Next.js Config
      NODE_ENV: development
      NEXT_TELEMETRY_DISABLED: 1
      
      # Feature Flags
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/next.config.js:/app/next.config.js:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts:ro
      - ./frontend/postcss.config.mjs:/app/postcss.config.mjs:ro
      # Exclude node_modules from volume mount to use container's installed packages
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
      - auth
    networks:
      - netra-network
    command: npm run dev

networks:
  netra-network:
    driver: bridge
    name: netra-network

volumes:
  postgres_data:
    name: netra-postgres-data
  redis_data:
    name: netra-redis-data
  clickhouse_data:
    name: netra-clickhouse-data