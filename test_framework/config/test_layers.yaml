# Netra Apex Test Layer Configuration
# Layered test execution system for optimal timing and dependency management

metadata:
  version: "1.0.0"
  description: "Comprehensive layered test configuration for Netra Apex platform"
  created_at: "2025-01-01"
  config_schema_version: "1.0"

# Test layer definitions with execution order and dependencies
layers:
  # LAYER 1: Fast Feedback (< 2 min) - Critical path validation
  fast_feedback:
    name: "Fast Feedback"
    description: "Quick validation tests for immediate developer feedback"
    priority: 1
    execution_order: 1
    max_duration_minutes: 2
    execution_mode: "sequential"  # Run in order for fastest feedback
    fail_fast: true
    background_execution: false
    
    # Resource requirements
    resource_limits:
      max_memory_mb: 512
      max_cpu_percent: 50
      max_parallel_instances: 2
    
    # Categories in this layer
    categories:
      - name: "smoke"
        timeout_seconds: 60
        max_parallel_instances: 2
        priority_order: 1
      - name: "unit"
        timeout_seconds: 120
        max_parallel_instances: 4
        priority_order: 2
        filters:
          include_patterns: ["**/test_*.py", "**/unit/**"]
          exclude_patterns: ["**/slow_*", "**/integration/**"]
    
    # Layer dependencies (must complete before this layer starts)
    dependencies: []
    conflicts: ["e2e_performance"]
    
    # Success criteria
    success_criteria:
      min_pass_rate: 0.98
      max_failures: 1
      critical_tests_must_pass: true
    
    # Environment overrides
    environment_overrides:
      ci:
        max_duration_minutes: 1
        execution_mode: "parallel"
      dev:
        fail_fast: false

  # LAYER 2: Core Integration (< 10 min) - Service validation  
  core_integration:
    name: "Core Integration"
    description: "Database, API, and core service integration tests"
    priority: 2
    execution_order: 2
    max_duration_minutes: 10
    execution_mode: "parallel"
    fail_fast: false
    background_execution: false
    
    resource_limits:
      max_memory_mb: 1024
      max_cpu_percent: 70
      max_parallel_instances: 4
    
    categories:
      - name: "database"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 1
        resource_requirements:
          requires_postgresql: true
          requires_redis: false
      - name: "api"
        timeout_seconds: 300
        max_parallel_instances: 3
        priority_order: 2
        resource_requirements:
          requires_backend_service: true
      - name: "websocket"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 3
        resource_requirements:
          requires_backend_service: true
          requires_websocket_server: true
      - name: "integration"
        timeout_seconds: 600
        max_parallel_instances: 2
        priority_order: 4
        filters:
          include_patterns: ["**/integration/**", "**/test_integration_*.py"]
          exclude_patterns: ["**/e2e/**", "**/cypress/**"]
    
    dependencies: ["fast_feedback"]
    conflicts: ["e2e_performance"]
    
    success_criteria:
      min_pass_rate: 0.95
      max_failures: 3
      critical_tests_must_pass: false
    
    # Service availability requirements
    required_services:
      - postgresql
      - redis
      - backend_service
    
    environment_overrides:
      staging:
        timeout_multiplier: 1.5
        required_services:
          - postgresql
          - redis
          - backend_service
          - auth_service

  # LAYER 3: Service Integration (< 20 min) - Cross-service validation
  service_integration:
    name: "Service Integration"
    description: "Backend integration, agent workflows, and cross-service tests"
    priority: 3
    execution_order: 3
    max_duration_minutes: 20
    execution_mode: "hybrid"  # Mix of parallel and sequential based on dependencies
    fail_fast: false
    background_execution: false
    
    resource_limits:
      max_memory_mb: 2048
      max_cpu_percent: 80
      max_parallel_instances: 3
    
    categories:
      - name: "agent"
        timeout_seconds: 600
        max_parallel_instances: 2
        priority_order: 1
        resource_requirements:
          requires_real_llm: true
          requires_backend_service: true
          requires_postgresql: true
          min_memory_mb: 512
      - name: "e2e_critical"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 2
        resource_requirements:
          requires_real_services: true
      - name: "frontend"
        timeout_seconds: 300
        max_parallel_instances: 3
        priority_order: 3
        resource_requirements:
          requires_node_runtime: true
    
    dependencies: ["core_integration"]
    conflicts: []
    
    success_criteria:
      min_pass_rate: 0.90
      max_failures: 5
      critical_tests_must_pass: false
    
    required_services:
      - postgresql
      - redis
      - backend_service
      - auth_service
    
    # LLM requirements for this layer
    llm_requirements:
      mode: "real"
      timeout_seconds: 60
      fallback_to_mock: false
    
    environment_overrides:
      dev:
        execution_mode: "parallel"
        required_services:
          - postgresql
          - redis
          - backend_service

  # LAYER 4: End-to-End & Performance (background) - Full system validation
  e2e_performance:
    name: "E2E & Performance"
    description: "Full end-to-end tests and performance validation"
    priority: 4
    execution_order: 4
    max_duration_minutes: 60
    execution_mode: "sequential"  # Long-running tests run one at a time
    fail_fast: false
    background_execution: true  # Can run in background after core layers
    
    resource_limits:
      max_memory_mb: 4096
      max_cpu_percent: 90
      max_parallel_instances: 1  # Resource-intensive tests
    
    categories:
      - name: "cypress"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 1
        resource_requirements:
          requires_real_services: true
          requires_real_llm: true
          requires_frontend_build: true
          requires_postgresql: true
          requires_redis: true
      - name: "e2e"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 2
        resource_requirements:
          requires_real_services: true
          requires_real_llm: true
      - name: "performance"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 3
        resource_requirements:
          requires_real_services: true
          dedicated_resources: true
    
    dependencies: ["service_integration"]
    conflicts: []
    
    success_criteria:
      min_pass_rate: 0.85
      max_failures: 10
      critical_tests_must_pass: false
      allow_partial_success: true
    
    required_services:
      - postgresql
      - redis
      - backend_service
      - auth_service
      - frontend_service
    
    llm_requirements:
      mode: "real"
      timeout_seconds: 120
      fallback_to_mock: false
    
    environment_overrides:
      ci:
        background_execution: true
        max_duration_minutes: 45
      staging:
        background_execution: false
        max_duration_minutes: 90

# Global execution configuration
execution_config:
  # Layer execution strategy
  layer_execution_mode: "waterfall_with_background"  # Execute layers in order, allow background for layer 4
  
  # Timeout and retry configuration
  global_timeout_minutes: 120
  layer_startup_timeout_seconds: 30
  inter_layer_delay_seconds: 5
  
  # Parallel execution limits
  max_global_parallel_tests: 8
  max_memory_usage_mb: 6144
  max_cpu_usage_percent: 90
  
  # Fail-fast configuration per layer
  fail_fast_strategy:
    fast_feedback: "immediate"      # Stop immediately on failure
    core_integration: "category"    # Stop layer on category failure
    service_integration: "disabled" # Continue all tests in layer
    e2e_performance: "disabled"     # Continue all tests (background)
  
  # Resource conflict resolution
  resource_conflict_resolution: "priority_based"  # Higher priority layers get resources first
  
  # Background execution
  background_execution:
    enabled: true
    max_background_layers: 1
    background_layers: ["e2e_performance"]
    monitoring_interval_seconds: 30

# Environment-specific layer configurations
environments:
  # Development environment - focus on fast feedback
  dev:
    layer_overrides:
      fast_feedback:
        max_duration_minutes: 3
        execution_mode: "parallel"
      e2e_performance:
        background_execution: true
        skip_performance_tests: true
  
  # CI environment - optimize for speed and reliability
  ci:
    layer_overrides:
      fast_feedback:
        max_duration_minutes: 1
        max_parallel_instances: 4
      core_integration:
        max_duration_minutes: 8
        execution_mode: "parallel"
      service_integration:
        max_duration_minutes: 15
      e2e_performance:
        background_execution: true
        max_duration_minutes: 30
  
  # Staging environment - full validation
  staging:
    layer_overrides:
      fast_feedback:
        max_duration_minutes: 3
      core_integration:
        max_duration_minutes: 12
        timeout_multiplier: 1.5
      service_integration:
        max_duration_minutes: 25
      e2e_performance:
        background_execution: false
        max_duration_minutes: 90
        
# Service dependency matrix
service_dependencies:
  postgresql:
    startup_timeout_seconds: 30
    health_check_endpoint: "/health"
    required_for_layers: ["core_integration", "service_integration", "e2e_performance"]
  
  redis:
    startup_timeout_seconds: 15
    health_check_command: "redis-cli ping"
    required_for_layers: ["core_integration", "service_integration", "e2e_performance"]
  
  backend_service:
    startup_timeout_seconds: 45
    health_check_endpoint: "/api/health"
    required_for_layers: ["core_integration", "service_integration", "e2e_performance"]
    depends_on: ["postgresql", "redis"]
  
  auth_service:
    startup_timeout_seconds: 30
    health_check_endpoint: "/auth/health"
    required_for_layers: ["service_integration", "e2e_performance"]
    depends_on: ["postgresql"]
  
  frontend_service:
    startup_timeout_seconds: 60
    health_check_endpoint: "/"
    required_for_layers: ["e2e_performance"]
    build_required: true

# Monitoring and reporting configuration
monitoring:
  # Progress tracking per layer
  progress_tracking:
    enabled: true
    granularity: "test"  # Track individual test progress
    persist_progress: true
    checkpoint_interval_seconds: 30
  
  # Performance monitoring
  performance_monitoring:
    enabled: true
    memory_monitoring: true
    cpu_monitoring: true
    network_monitoring: false
    disk_monitoring: false
  
  # Reporting configuration
  reporting:
    layer_reports: true
    timing_analysis: true
    resource_usage_reports: true
    dependency_analysis: true
    
    report_formats: ["json", "html", "junit"]
    report_output_dir: "test_reports/layers"