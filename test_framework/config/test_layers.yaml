# Test Layer Configuration for Netra Apex Orchestration System
# This file defines the hierarchical layer structure for test execution

metadata:
  version: "1.0.0"
  description: "Layered test execution configuration for Netra Apex platform"
  created_at: "2025-01-08T00:00:00Z"
  config_schema_version: "1.0"

# Layer Definitions
layers:
  fast_feedback:
    name: "Fast Feedback"
    description: "Quick validation tests for immediate developer feedback"
    priority: 1
    execution_order: 1
    max_duration_minutes: 2
    execution_mode: "sequential"
    fail_fast: true
    background_execution: false
    
    resource_limits:
      max_memory_mb: 512
      max_cpu_percent: 50
      max_parallel_instances: 2
      
    categories:
      - name: "smoke"
        timeout_seconds: 60
        max_parallel_instances: 2
        priority_order: 1
        resource_requirements:
          requires_postgresql: false
          requires_redis: false
          requires_backend_service: false
          requires_real_llm: false
          requires_real_services: false
          min_memory_mb: 64
          dedicated_resources: false
        filters:
          include_patterns: ["smoke", "critical"]
          exclude_patterns: ["slow", "external"]
          
      - name: "unit"
        timeout_seconds: 120
        max_parallel_instances: 4
        priority_order: 2
        resource_requirements:
          requires_postgresql: false
          requires_redis: false
          requires_backend_service: false
          requires_real_llm: false
          requires_real_services: false
          min_memory_mb: 128
          dedicated_resources: false
        filters:
          include_patterns: ["unit", "component"]
          exclude_patterns: ["integration", "e2e"]
          
      - name: "golden_path_unit"
        timeout_seconds: 300
        max_parallel_instances: 4
        priority_order: 3
        resource_requirements:
          requires_postgresql: false
          requires_redis: false
          requires_backend_service: false
          requires_real_llm: false
          requires_real_services: false
          min_memory_mb: 128
          dedicated_resources: false
        filters:
          include_patterns: ["golden_path", "unit", "business_logic"]
          exclude_patterns: ["integration", "e2e", "mock"]
          
    dependencies: []
    conflicts: []
    required_services: []
    
    success_criteria:
      min_pass_rate: 0.98
      max_failures: 2
      critical_tests_must_pass: true
      allow_partial_success: false
      
    llm_requirements:
      mode: "mock"
      timeout_seconds: 30
      fallback_to_mock: true
      
    environment_overrides:
      staging:
        max_duration_minutes: 3
        llm_requirements:
          mode: "real"
      production:
        max_duration_minutes: 5
        fail_fast: false

  core_integration:
    name: "Core Integration"
    description: "Database, API, and core service integration tests"
    priority: 2
    execution_order: 2
    max_duration_minutes: 10
    execution_mode: "parallel"
    fail_fast: false
    background_execution: false
    
    resource_limits:
      max_memory_mb: 1024
      max_cpu_percent: 70
      max_parallel_instances: 4
      
    categories:
      - name: "database"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 1
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: false
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 256
          dedicated_resources: false
        filters:
          include_patterns: ["database", "db", "persistence"]
          exclude_patterns: ["mock", "fake"]
          
      - name: "api"
        timeout_seconds: 300
        max_parallel_instances: 3
        priority_order: 2
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 256
          dedicated_resources: false
        filters:
          include_patterns: ["api", "endpoint", "route"]
          exclude_patterns: ["frontend", "ui"]
          
      - name: "websocket"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 3
        resource_requirements:
          requires_postgresql: false
          requires_redis: true
          requires_backend_service: true
          requires_websocket_server: true
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 192
          dedicated_resources: false
        filters:
          include_patterns: ["websocket", "ws", "realtime"]
          exclude_patterns: ["mock", "simulation"]
          
      - name: "integration"
        timeout_seconds: 600
        max_parallel_instances: 2
        priority_order: 4
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 384
          dedicated_resources: false
        filters:
          include_patterns: ["integration", "service"]
          exclude_patterns: ["unit", "e2e"]
          
      - name: "golden_path_integration"
        timeout_seconds: 600
        max_parallel_instances: 2
        priority_order: 5
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 384
          dedicated_resources: false
        filters:
          include_patterns: ["golden_path", "integration", "service_validation"]
          exclude_patterns: ["unit", "e2e", "mock"]
          
    dependencies: ["fast_feedback"]
    conflicts: []
    required_services: ["postgresql", "redis", "backend_service"]
    
    success_criteria:
      min_pass_rate: 0.95
      max_failures: 5
      critical_tests_must_pass: true
      allow_partial_success: false
      
    llm_requirements:
      mode: "mock"
      timeout_seconds: 60
      fallback_to_mock: true
      
    environment_overrides:
      staging:
        llm_requirements:
          mode: "real"
        required_services: ["postgresql", "redis", "backend_service", "auth_service"]
      production:
        max_duration_minutes: 15
        llm_requirements:
          mode: "real"
          fallback_to_mock: false

  service_integration:
    name: "Service Integration"
    description: "Backend integration, agent workflows, and cross-service tests"
    priority: 3
    execution_order: 3
    max_duration_minutes: 20
    execution_mode: "hybrid"
    fail_fast: false
    background_execution: false
    
    resource_limits:
      max_memory_mb: 2048
      max_cpu_percent: 80
      max_parallel_instances: 3
      
    categories:
      - name: "agent"
        timeout_seconds: 600
        max_parallel_instances: 2
        priority_order: 1
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_real_llm: true
          requires_real_services: true
          min_memory_mb: 512
          dedicated_resources: true
        filters:
          include_patterns: ["agent", "workflow", "ai"]
          exclude_patterns: ["mock", "fake"]
          
      - name: "e2e_critical"
        timeout_seconds: 300
        max_parallel_instances: 2
        priority_order: 2
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_frontend_service: false
          requires_real_llm: true
          requires_real_services: true
          min_memory_mb: 384
          dedicated_resources: false
        filters:
          include_patterns: ["e2e", "critical", "essential"]
          exclude_patterns: ["performance", "load"]
          
      - name: "golden_path_e2e"
        timeout_seconds: 1200
        max_parallel_instances: 1
        priority_order: 1
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_websocket_server: true
          requires_real_llm: true
          requires_real_services: true
          min_memory_mb: 512
          dedicated_resources: true
        filters:
          include_patterns: ["golden_path", "e2e", "user_flow", "business_value"]
          exclude_patterns: ["performance", "load", "mock"]
          
      - name: "frontend"
        timeout_seconds: 300
        max_parallel_instances: 3
        priority_order: 3
        resource_requirements:
          requires_postgresql: false
          requires_redis: false
          requires_backend_service: true
          requires_frontend_service: false
          requires_node_runtime: true
          requires_frontend_build: true
          requires_real_llm: false
          requires_real_services: false
          min_memory_mb: 256
          dedicated_resources: false
        filters:
          include_patterns: ["frontend", "react", "ui", "component"]
          exclude_patterns: ["backend", "api"]
          
    dependencies: ["core_integration"]
    conflicts: ["performance", "cypress"]
    required_services: ["postgresql", "redis", "backend_service", "auth_service"]
    
    success_criteria:
      min_pass_rate: 0.90
      max_failures: 8
      critical_tests_must_pass: true
      allow_partial_success: true
      
    llm_requirements:
      mode: "real"
      timeout_seconds: 60
      fallback_to_mock: false
      
    environment_overrides:
      test:
        llm_requirements:
          mode: "mock"
          fallback_to_mock: true
      development:
        max_duration_minutes: 25
        success_criteria:
          allow_partial_success: true

  e2e_background:
    name: "E2E & Performance"
    description: "Full end-to-end tests and performance validation (background execution)"
    priority: 4
    execution_order: 4
    max_duration_minutes: 60
    execution_mode: "sequential"
    fail_fast: false
    background_execution: true
    
    resource_limits:
      max_memory_mb: 4096
      max_cpu_percent: 90
      max_parallel_instances: 1
      
    categories:
      - name: "cypress"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 1
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_frontend_service: true
          requires_node_runtime: true
          requires_real_llm: true
          requires_real_services: true
          min_memory_mb: 1024
          dedicated_resources: true
        filters:
          include_patterns: ["cypress", "e2e", "browser"]
          exclude_patterns: ["unit", "mock"]
          
      - name: "e2e"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 2
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_frontend_service: true
          requires_real_llm: true
          requires_real_services: true
          min_memory_mb: 768
          dedicated_resources: true
        filters:
          include_patterns: ["e2e", "integration", "full"]
          exclude_patterns: ["unit", "mock", "performance"]
          
      - name: "performance"
        timeout_seconds: 1800
        max_parallel_instances: 1
        priority_order: 3
        resource_requirements:
          requires_postgresql: true
          requires_redis: true
          requires_backend_service: true
          requires_auth_service: true
          requires_frontend_service: false
          requires_real_llm: false
          requires_real_services: true
          min_memory_mb: 1024
          dedicated_resources: true
        filters:
          include_patterns: ["performance", "load", "stress", "benchmark"]
          exclude_patterns: ["unit", "mock"]
          
    dependencies: ["service_integration"]
    conflicts: ["fast_feedback", "core_integration"]
    required_services: ["postgresql", "redis", "backend_service", "auth_service", "frontend_service"]
    
    success_criteria:
      min_pass_rate: 0.85
      max_failures: 10
      critical_tests_must_pass: false
      allow_partial_success: true
      
    llm_requirements:
      mode: "real"
      timeout_seconds: 120
      fallback_to_mock: false
      
    environment_overrides:
      test:
        background_execution: false
        max_duration_minutes: 30
      development:
        success_criteria:
          min_pass_rate: 0.75
          allow_partial_success: true

# Global Execution Configuration
execution_config:
  layer_execution_mode: "waterfall_with_background"
  global_timeout_minutes: 90
  layer_startup_timeout_seconds: 30
  inter_layer_delay_seconds: 5
  max_global_parallel_tests: 8
  max_memory_usage_mb: 6144
  max_cpu_usage_percent: 90
  resource_conflict_resolution: "priority_based"
  
  # Fail-fast strategies per layer
  fail_fast_strategy:
    fast_feedback: "immediate"
    core_integration: "category"
    service_integration: "layer"
    e2e_background: "disabled"
  
  # Background execution settings
  background_execution:
    enabled: true
    max_background_layers: 1
    background_layers: ["e2e_background"]

# Service Dependencies and Startup Order
service_dependencies:
  postgresql:
    startup_timeout_seconds: 30
    health_check_endpoint: "localhost:5432"
    depends_on: []
    
  redis:
    startup_timeout_seconds: 10
    health_check_endpoint: "localhost:6379"
    depends_on: []
    
  backend_service:
    startup_timeout_seconds: 45
    health_check_endpoint: "localhost:8000/health"
    depends_on: ["postgresql", "redis"]
    
  auth_service:
    startup_timeout_seconds: 30
    health_check_endpoint: "localhost:8081/health"
    depends_on: ["postgresql", "redis"]
    
  frontend_service:
    startup_timeout_seconds: 60
    health_check_endpoint: "localhost:3000"
    depends_on: ["backend_service", "auth_service"]