#!/usr/bin/env python3
"""
Simple validation test for Issue #937 - WebSocket Agent Events
"""
import asyncio
import json
import time
import websockets
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_websocket_connection():
    """Test basic WebSocket connection and message flow."""
    websocket_url = "wss://netra-backend-staging-pnovr5vsba-uc.a.run.app/api/v1/websocket"

    print(f"Testing WebSocket URL: {websocket_url}")

    try:
        async with websockets.connect(websocket_url) as websocket:
            print("SUCCESS: Connected to WebSocket")

            # Wait for initial message
            try:
                initial = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                initial_event = json.loads(initial)
                print(f"Initial message: {initial_event.get('type', 'unknown')}")
            except:
                print("No initial message received")

            # Test 1: Send agent_started directly (current broken approach)
            print("\n--- Test 1: Send agent_started directly (BROKEN) ---")
            agent_event = {
                "type": "agent_started",
                "user_id": "test_user",
                "timestamp": time.time()
            }
            await websocket.send(json.dumps(agent_event))
            print("Sent agent_started event")

            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                response_event = json.loads(response)
                print(f"Response: {response_event.get('type', 'unknown')}")
                print("CONFIRMED: Server responds with connection_established, not agent_started")
            except asyncio.TimeoutError:
                print("No response received")

            # Test 2: Send user_message (correct approach)
            print("\n--- Test 2: Send user_message (CORRECT) ---")
            user_msg = {
                "type": "user_message",
                "user_id": "test_user_correct",
                "message": "Hello, please help me test agent events",
                "timestamp": time.time()
            }
            await websocket.send(json.dumps(user_msg))
            print("Sent user_message")

            # Wait for any responses
            events_received = []
            for i in range(5):  # Try to get up to 5 events
                try:
                    event = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                    event_data = json.loads(event)
                    event_type = event_data.get('type', 'unknown')
                    events_received.append(event_type)
                    print(f"Event {i+1}: {event_type}")

                    if event_type in ['agent_started', 'agent_thinking', 'tool_executing', 'tool_completed', 'agent_completed']:
                        print(f"SUCCESS: Received agent event: {event_type}")
                except asyncio.TimeoutError:
                    print(f"Timeout waiting for event {i+1}")
                    break
                except Exception as e:
                    print(f"Error: {e}")
                    break

            print(f"\nEvents received: {events_received}")

            if any(event in ['agent_started', 'agent_thinking', 'tool_executing', 'tool_completed', 'agent_completed'] for event in events_received):
                print("CONCLUSION: Correct approach works - agent events are generated by user_message")
            else:
                print("CONCLUSION: May need authentication or different message format")

    except Exception as e:
        print(f"Connection error: {e}")

if __name__ == "__main__":
    asyncio.run(test_websocket_connection())