name: Lark Notifier
description: Send notifications to Lark channels
author: Netra Systems

inputs:
  type:
    description: 'Notification type (workflow, pr, error, success)'
    required: true
  status:
    description: 'Status of the event'
    required: true
  webhook_url:
    description: 'Lark webhook URL for simple notifications'
    required: false
  bot_url:
    description: 'Lark bot server URL for interactive notifications'
    required: false
  channel:
    description: 'Target channel (general, alerts, staging)'
    required: false
    default: 'general'
  title:
    description: 'Custom notification title'
    required: false
  message:
    description: 'Custom notification message'
    required: false
  metadata:
    description: 'Additional metadata as JSON'
    required: false
    default: '{}'

runs:
  using: composite
  steps:
    - name: Prepare notification payload
      id: payload
      shell: bash
      run: |
        # Build notification based on type
        case "${{ inputs.type }}" in
          workflow)
            TITLE="${{ inputs.title || github.workflow }}"
            STATUS_EMOJI=$([[ "${{ inputs.status }}" == "success" ]] && echo "✅" || echo "❌")
            MESSAGE="Workflow: ${{ github.workflow }}\nStatus: ${{ inputs.status }}\nCommit: ${{ github.sha }}"
            COLOR=$([[ "${{ inputs.status }}" == "success" ]] && echo "green" || echo "red")
            ;;
          
          pr)
            TITLE="PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
            MESSAGE="Action: ${{ inputs.status }}\nAuthor: ${{ github.event.pull_request.user.login }}"
            COLOR="blue"
            ;;
          
          error)
            TITLE="🚨 Error: ${{ inputs.title || 'Build Failed' }}"
            MESSAGE="${{ inputs.message || 'An error occurred during the workflow' }}"
            COLOR="red"
            ;;
          
          success)
            TITLE="✅ Success: ${{ inputs.title || 'Build Succeeded' }}"
            MESSAGE="${{ inputs.message || 'Workflow completed successfully' }}"
            COLOR="green"
            ;;
          
          *)
            TITLE="${{ inputs.title || 'GitHub Notification' }}"
            MESSAGE="${{ inputs.message || 'Event triggered from GitHub' }}"
            COLOR="blue"
            ;;
        esac
        
        # Create JSON payload
        if [[ -n "${{ inputs.bot_url }}" ]]; then
          # Interactive card for bot server
          cat > payload.json <<EOF
        {
          "type": "${{ inputs.type }}",
          "channel": "${{ inputs.channel }}",
          "card": {
            "config": {"wide_screen_mode": true},
            "header": {
              "title": {"tag": "plain_text", "content": "$TITLE"},
              "template": "$COLOR"
            },
            "elements": [
              {
                "tag": "markdown",
                "content": "$MESSAGE"
              },
              {
                "tag": "action",
                "actions": [
                  {
                    "tag": "button",
                    "text": {"tag": "plain_text", "content": "View on GitHub"},
                    "type": "default",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          },
          "metadata": ${{ inputs.metadata }}
        }
        EOF
        else
          # Simple webhook message
          cat > payload.json <<EOF
        {
          "msg_type": "interactive",
          "card": {
            "config": {"wide_screen_mode": true},
            "header": {
              "title": {"tag": "plain_text", "content": "$TITLE"},
              "template": "$COLOR"
            },
            "elements": [
              {
                "tag": "markdown",
                "content": "$MESSAGE"
              }
            ]
          }
        }
        EOF
        fi
        
        echo "payload_file=payload.json" >> $GITHUB_OUTPUT
    
    - name: Send to Lark bot server
      if: inputs.bot_url != ''
      shell: bash
      run: |
        curl -X POST "${{ inputs.bot_url }}/github/notification" \
          -H "Content-Type: application/json" \
          -d @${{ steps.payload.outputs.payload_file }} \
          --fail-with-body \
          || echo "Failed to send to bot server, continuing..."
    
    - name: Send to Lark webhook
      if: inputs.webhook_url != '' && inputs.bot_url == ''
      shell: bash
      run: |
        curl -X POST "${{ inputs.webhook_url }}" \
          -H "Content-Type: application/json" \
          -d @${{ steps.payload.outputs.payload_file }} \
          --fail-with-body \
          || echo "Failed to send to webhook, continuing..."