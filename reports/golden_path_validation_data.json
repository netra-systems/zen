{
  "summary": {
    "total_files": 454,
    "total_tests": 4067,
    "compliant_files": 346,
    "files_with_auth": 238,
    "files_with_real_services": 170,
    "files_with_websocket_events": 204,
    "files_with_bvj": 403,
    "syntax_errors": 0,
    "import_errors": 0,
    "coverage_by_category": {
      "e2e": 100,
      "integration": 139,
      "unknown": 35,
      "unit": 158,
      "mission_critical": 22
    },
    "coverage_by_service": {
      "auth": 48,
      "global": 177,
      "backend": 221,
      "shared": 7,
      "frontend": 1
    },
    "critical_issues": [
      "66 E2E/Integration tests lack authentication (violates CLAUDE.md)",
      "4 test files failed basic validation"
    ],
    "recommendations": []
  },
  "files": [
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/e2e/test_complete_oauth_login_flow.py",
      "relative_path": "auth_service/tests/e2e/test_complete_oauth_login_flow.py",
      "category": "e2e",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete OAuth Login Flow - E2E\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure secure user authentication enables platform access\n- Value Impact: Users can reliably authenticate and access Netra platform capabilities\n- Strategic Impact: Core security foundation enabling all business operations\n\nThis E2E test validates the complete Google OAuth flow from start to finish:\n1. OAuth authorization URL generation\n2. User authentication with Google (simulated)\n3. Authorization code callback handling\n4. JWT token generation and validation\n5. Cross-service authentication validation\n6. Session persistence and refresh token handling\n7. Complete user journey testing with real services\n\nCRITICAL E2E REQUIREMENTS:\n- Uses REAL Docker services (PostgreSQL, Redis, Auth Service)\n- NO MOCKS allowed - all services must be real\n- Tests complete end-to-end business journeys\n- Validates actual authentication flows that enable business value\n- Uses proper timing validation (no 0-second executions)\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_auth_comprehensive_integration.py",
      "relative_path": "auth_service/tests/integration/test_auth_comprehensive_integration.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Auth Service Integration Tests - SSOT Testing Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure authentication reliability across all user flows and service interactions\n- Value Impact: Prevents authentication failures that block user access and revenue generation\n- Strategic Impact: Core platform stability - authentication is foundation for all business operations\n\nThis comprehensive test suite validates the complete authentication service functionality\nusing REAL services, REAL databases, and NO MOCKS (except external OAuth providers).\n\nCRITICAL FOCUS AREAS:\n1. JWT token lifecycle management (creation, validation, refresh, expiration)\n2. Session persistence and management across requests\n3. Cross-service authentication validation between auth and backend services\n4. Database user management and persistence operations\n5. Multi-user isolation and security boundaries\n6. Password validation and user registration flows\n7. Token refresh mechanisms and session continuity\n8. Authentication error handling and security validation\n\nTESTING REQUIREMENTS per CLAUDE.md:\n- Uses ONLY real services (--real-services compatible)\n- Follows SSOT patterns from test_framework/ssot/base_test_case.py\n- Uses IsolatedEnvironment for all environment access\n- Tests real business scenarios that existing features depend on\n- Each test includes Business Value Justification (BVJ) comment\n- NO MOCKS except external OAuth providers\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_auth_database_operations_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_auth_database_operations_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Database Operations and User Management Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Reliable user data storage and retrieval\n- Value Impact: Ensures user accounts and sessions are persistently managed\n- Strategic Impact: Data integrity foundation for multi-user platform\n\nThese tests validate:\n1. User CRUD operations with database persistence\n2. Session management with Redis integration\n3. Transaction handling and data consistency\n4. Database connection pooling and performance\n5. Data migration and schema validation\n6. Multi-user concurrent database operations\n",
      "test_methods": [
        "test_user_data"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_auth_remaining_integration_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_auth_remaining_integration_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Service Remaining Integration Tests (Tests 4-10)\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Complete integration testing coverage of auth service\n- Value Impact: Ensures all auth service components work together correctly\n- Strategic Impact: Comprehensive validation of authentication platform\n\nThese tests validate:\n1. JWT token lifecycle management integration\n2. Multi-user session isolation\n3. Service startup and health checks\n4. Cross-service authentication validation\n5. Error handling and recovery integration\n6. Performance and scalability integration\n7. Security policy enforcement integration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_auth_route_security_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_auth_route_security_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 4,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Route Security Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Secure API endpoints protect user data and platform integrity\n- Value Impact: Prevents unauthorized access to authentication functions\n- Strategic Impact: Security foundation for all platform operations\n\nThese tests validate:\n1. Authentication endpoint security and validation\n2. Authorization header processing and JWT validation\n3. Rate limiting and abuse prevention\n4. CORS handling for web clients\n5. Input validation and sanitization\n6. Security headers and response handling\n",
      "test_methods": [
        "test_authentication_endpoint_security_validation",
        "test_jwt_authorization_header_processing",
        "test_rate_limiting_and_abuse_prevention",
        "test_cors_handling_for_web_clients"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_comprehensive_auth_security_validation.py",
      "relative_path": "auth_service/tests/integration/test_comprehensive_auth_security_validation.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Authentication Security Validation Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (System Security & Resilience)\n- Business Goal: Ensure complete authentication security across all attack vectors\n- Value Impact: Prevents security breaches, DDoS attacks, and system abuse\n- Strategic Impact: Security failures can destroy platform reputation and cause regulatory violations\n\nThis test suite provides comprehensive validation of authentication security including:\n\n1. Rate limiting and abuse prevention\n2. Security attack pattern detection\n3. \"Error behind the error\" root cause analysis\n4. System resilience under attack\n5. Recovery and self-healing mechanisms\n6. Comprehensive security boundary validation\n7. Attack vector coverage and mitigation testing\n\nCRITICAL: This is the capstone test suite that validates ALL authentication\nsecurity mechanisms work together cohesively to protect the platform.\n\nIncident References:\n- Rate limiting failures enable DDoS attacks\n- Missing attack detection allows system abuse\n- Poor error analysis masks root causes\n- Insufficient security boundaries enable breaches\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_jwt_token_lifecycle_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_jwt_token_lifecycle_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nJWT Token Lifecycle and Cross-Service Synchronization Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure seamless user authentication across all services\n- Value Impact: Prevents user lockouts, maintains session continuity, enables multi-service workflows\n- Strategic Impact: Core platform functionality - without working JWT lifecycle, users cannot access system\n\nThis test suite validates JWT token lifecycle management and cross-service synchronization\nfrom MISSION_CRITICAL_NAMED_VALUES_INDEX.xml:\n\n1. JWT secret key synchronization across auth and backend services\n2. Token creation, validation, and refresh mechanisms\n3. Cross-service token validation consistency\n4. Token expiration and renewal flows\n5. Multi-user token isolation and security boundaries\n\nCRITICAL: JWT token issues cause silent failures where users appear logged in\nbut cannot perform actions, leading to poor user experience and support burden.\n\nIncident References:\n- JWT secret mismatches cause token validation failures across services\n- Token refresh endpoint failures cause user logouts\n- Missing token synchronization breaks multi-service authentication\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_multi_environment_oauth_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_multi_environment_oauth_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 10,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Multi-Environment OAuth Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure OAuth flows work correctly across all deployment environments\n- Value Impact: Prevents $75K+ MRR loss from OAuth authentication failures during deployments\n- Strategic Impact: Validates OAuth security model prevents cross-environment credential leakage\n- Revenue Impact: OAuth failures = complete user lockout = 100% revenue impact until resolved\n\nCRITICAL MULTI-ENVIRONMENT SECURITY REQUIREMENTS:\nMulti-environment OAuth security is fundamental to platform security:\n- Development credentials CANNOT be used in staging/production\n- Staging credentials CANNOT be used in production\n- Production credentials CANNOT leak to other environments\n- Each environment has isolated OAuth callback URLs\n- Environment-specific redirect URI validation\n- Configuration inheritance rules prevent accidental cross-pollination\n\nINTEGRATION TESTING METHODOLOGY:\n- Real AuthEnvironment and GoogleOAuthProvider instances\n- Real IsolatedEnvironment configuration management\n- Real multi-environment configuration scenarios\n- Real OAuth flow validation (without external API calls)\n- Real environment isolation testing\n- Real configuration validation across environment transitions\n\nCLAUDE.MD COMPLIANCE:\n- Uses SSOT BaseTestCase for isolated environment management\n- NO business logic mocks - tests real integration behavior  \n- Real services integration patterns\n- Tests fail hard when security requirements violated\n- Comprehensive cross-environment validation scenarios\n",
      "test_methods": [
        "test_oauth_configuration_environment_isolation",
        "test_oauth_environment_transition_security",
        "test_oauth_configuration_validation_across_environments",
        "test_oauth_authorization_url_generation_multi_environment",
        "test_auth_secret_loader_environment_specific_credentials",
        "test_auth_secret_loader_oauth_integration_with_provider",
        "test_oauth_missing_credentials_error_handling_by_environment",
        "test_oauth_partial_credentials_error_handling",
        "test_complete_oauth_flow_integration_multi_environment",
        "test_oauth_configuration_persistence_across_requests"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_multi_user_isolation_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_multi_user_isolation_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMulti-User Isolation Comprehensive Tests - PRIORITY 1 SECURITY CRITICAL\n\n**CRITICAL**: Comprehensive multi-user security isolation testing with attack vector validation.\nThese tests protect the Chat business value by ensuring users cannot access each other's \nAI conversations, agent executions, or sensitive data.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers - authentication is foundation for all user interactions\n- Business Goal: Platform Stability, Security, Risk Reduction  \n- Value Impact: Prevents auth cascade failures that destroy chat business value\n- Strategic Impact: Ensures multi-user isolation for concurrent AI chat sessions\n\nULTRA CRITICAL CONSTRAINTS:\n- ALL tests use REAL services (PostgreSQL, Redis, OAuth providers)\n- Tests designed to FAIL HARD - no try/except bypassing\n- Focus on realistic, difficult failure scenarios  \n- Multi-user isolation is MANDATORY\n- ABSOLUTE IMPORTS ONLY (from auth_service.* not relative)\n\nSecurity Attack Vectors Tested:\n- Session token replay attacks\n- Cross-user data leakage\n- OAuth state parameter manipulation  \n- Concurrent session hijacking\n- Service authorization bypass attempts\n- JWT token injection between users\n- Race condition exploitation\n- Session fixation attacks\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_oauth_complete_authentication_flow.py",
      "relative_path": "auth_service/tests/integration/test_oauth_complete_authentication_flow.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nOAuth Complete Authentication Flow Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Enable seamless user onboarding and authentication\n- Value Impact: Users can authenticate with their existing accounts (Google, GitHub, etc.)\n- Strategic Impact: Reduces friction in user acquisition and increases conversion rates\n\nCRITICAL: Tests complete OAuth authentication flow with REAL auth service.\nTests OAuth simulation for staging/testing environments and full OAuth flow.\n\nFollowing CLAUDE.md requirements:\n- Uses real services (no mocks in integration tests)\n- Follows SSOT patterns from test_framework/ssot/\n- Tests MUST fail hard - no try/except blocks masking errors\n- Multi-user isolation using Factory patterns\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_oauth_provider_integration_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_oauth_provider_integration_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nOAuth Provider Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Seamless third-party authentication integration\n- Value Impact: Users can authenticate with Google/GitHub without friction\n- Strategic Impact: Reduces signup barriers and improves user acquisition\n\nThese tests validate:\n1. OAuth provider configuration and initialization\n2. Real OAuth flow simulation (without actual OAuth calls)\n3. Token exchange and user profile retrieval\n4. Provider-specific error handling\n5. Multi-provider support and switching\n6. OAuth state management and security\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_oauth_security_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_oauth_security_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nOAuth Provider Integration and Security Validation Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Secure user onboarding and authentication via OAuth providers\n- Value Impact: Enables users to sign up and login easily while maintaining security\n- Strategic Impact: OAuth failures block user acquisition and cause security vulnerabilities\n\nThis test suite validates OAuth provider integration and security validation\nfrom MISSION_CRITICAL_NAMED_VALUES_INDEX.xml and critical auth flows:\n\n1. OAuth provider configuration and credential validation\n2. OAuth redirect URI validation and security\n3. OAuth state parameter validation (CSRF protection)\n4. OAuth token exchange and user data extraction\n5. OAuth callback security and error handling\n6. Multi-provider OAuth support and isolation\n\nCRITICAL: OAuth vulnerabilities can lead to account takeover attacks,\nCSRF attacks, and unauthorized access. These tests prevent security breaches\nthat could compromise user accounts and platform integrity.\n\nIncident References:\n- OAuth redirect mismatches cause authentication failures\n- Missing OAuth state validation enables CSRF attacks\n- OAuth configuration errors block new user signups\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/integration/test_session_lifecycle_comprehensive.py",
      "relative_path": "auth_service/tests/integration/test_session_lifecycle_comprehensive.py",
      "category": "integration",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nSession Management Lifecycle Comprehensive Tests - PRIORITY 2 SECURITY CRITICAL\n\n**CRITICAL**: Comprehensive session lifecycle testing with concurrent session limits.\nThese tests ensure session management maintains Chat security by properly handling\nuser sessions, preventing session hijacking, and enforcing concurrent session limits.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers - sessions enable persistent Chat user experience  \n- Business Goal: Security, User Experience, Platform Stability\n- Value Impact: Prevents session attacks that could compromise Chat conversations\n- Strategic Impact: Session security enables multi-device Chat access and user retention\n\nULTRA CRITICAL CONSTRAINTS:\n- ALL tests use REAL Redis and session storage\n- Tests designed to FAIL HARD - no try/except bypassing\n- Focus on realistic concurrent session scenarios\n- Session security must prevent hijacking and replay attacks\n- ABSOLUTE IMPORTS ONLY (from auth_service.* not relative)\n\nSession Attack Vectors Tested:\n- Session hijacking and token theft\n- Concurrent session limit bypass attempts\n- Session fixation attacks  \n- Session replay and reuse attacks\n- Session timeout bypass attempts\n- Cross-user session contamination\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_auth_comprehensive.py",
      "relative_path": "auth_service/tests/test_auth_comprehensive.py",
      "category": "unknown",
      "service": "auth",
      "test_count": 29,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Auth Service Test Suite\n====================================\n\nThis file consolidates all auth service testing functionality into a single comprehensive suite.\nReplaces the previous 89 test files with focused, complete test coverage.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers | Goal: System Stability | Impact: Critical path protection\n- Consolidates 89 test files into single comprehensive suite\n- Maintains 100% critical path coverage with zero duplication\n- Enables fast feedback loops for auth service changes\n\nTest Coverage:\n- OAuth flows (Google, GitHub, Local)\n- JWT token handling and validation  \n- Database operations and connections\n- Error handling and edge cases\n- Security scenarios and CSRF protection\n- Configuration and environment handling\n- API endpoints and HTTP methods\n- Redis connection and failover\n",
      "test_methods": [
        "test_environment_setup",
        "test_auth_config_initialization",
        "test_auth_provider_enum",
        "test_database_connection_initialization",
        "test_database_connection_parameters",
        "test_jwt_token_structure_validation",
        "test_jwt_secret_configuration",
        "test_jwt_token_generation",
        "test_jwt_token_expiration",
        "test_google_oauth_initiation",
        "test_oauth_redirect_uri_configuration",
        "test_oauth_state_csrf_protection",
        "test_oauth_callback_handling",
        "test_oauth_error_scenarios",
        "test_oauth_staging_configuration",
        "test_health_endpoint",
        "test_auth_endpoints_head_method_support",
        "test_cors_headers",
        "test_login_endpoint_validation",
        "test_sql_injection_protection",
        "test_rate_limiting_protection",
        "test_password_security_validation",
        "test_redis_connection_availability",
        "test_redis_failover_graceful_degradation",
        "test_database_connection_error_handling",
        "test_invalid_jwt_token_handling",
        "test_malformed_request_handling",
        "test_development_environment_features",
        "test_staging_environment_features"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_auth_comprehensive_audit.py",
      "relative_path": "auth_service/tests/test_auth_comprehensive_audit.py",
      "category": "unknown",
      "service": "auth",
      "test_count": 15,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Authentication Audit Test Suite\nTests authentication with increasing complexity to ensure robustness\n",
      "test_methods": [
        "test_health_endpoint_accessible",
        "test_config_endpoint_returns_valid_structure",
        "test_invalid_token_formats_rejected",
        "test_token_with_tampered_signature",
        "test_token_with_invalid_claims",
        "test_refresh_endpoint_with_malformed_json",
        "test_refresh_endpoint_with_missing_token",
        "test_large_permission_sets",
        "test_token_algorithm_confusion_attack",
        "test_token_with_future_iat",
        "test_token_jti_uniqueness",
        "test_full_auth_flow_with_refresh",
        "test_websocket_auth_endpoint",
        "test_cors_and_security_headers",
        "test_rate_limiting_behavior"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_auth_real_services_comprehensive.py",
      "relative_path": "auth_service/tests/test_auth_real_services_comprehensive.py",
      "category": "unknown",
      "service": "auth",
      "test_count": 5,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nReal Service Auth Tests - No Mock Implementation\n===============================================\n\nThis test suite eliminates all mock usage and tests against real services:\n- Real PostgreSQL/SQLite database connections\n- Real Redis for session management  \n- Real JWT validation without mocks\n- Real HTTP clients for OAuth flows\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal | Goal: Test Quality | Impact: Eliminates mock violations\n- Replaces 222+ mock violations with real service tests\n- Ensures auth service actually works with real dependencies\n- Validates end-to-end authentication flows\n",
      "test_methods": [
        "test_jwt_token_creation_and_validation",
        "test_jwt_refresh_token_flow",
        "test_jwt_token_expiration",
        "test_health_endpoint_real",
        "test_auth_config_endpoint_real"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_refresh_loop_prevention_comprehensive.py",
      "relative_path": "auth_service/tests/test_refresh_loop_prevention_comprehensive.py",
      "category": "unknown",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/test_signup_flow_comprehensive.py",
      "relative_path": "auth_service/tests/test_signup_flow_comprehensive.py",
      "category": "unknown",
      "service": "auth",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive tests for user signup flow with edge cases\nTests database persistence, password hashing, validation, and error handling\n",
      "test_methods": [
        "test_email_validation",
        "test_password_validation",
        "test_password_hashing",
        "test_password_verification_mismatch",
        "test_same_password_different_hashes"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/golden_path/test_auth_service_business_logic.py",
      "relative_path": "auth_service/tests/unit/golden_path/test_auth_service_business_logic.py",
      "category": "unit",
      "service": "auth",
      "test_count": 11,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Service Golden Path Unit Tests: Business Logic\n\nTests core auth service business logic for golden path user authentication flows.\nValidates JWT generation, user validation, and authentication state management\nwithout requiring external services.\n\nBusiness Value:\n- Ensures authentication business rules work correctly for 90% of users\n- Validates JWT token security and user session management\n- Tests OAuth simulation and bypass mechanisms for testing environments\n- Verifies user permission and role-based access control logic\n",
      "test_methods": [
        "test_user_registration_business_rules",
        "test_jwt_token_generation_business_requirements",
        "test_user_login_business_validation",
        "test_token_validation_business_security",
        "test_user_permissions_business_authorization",
        "test_oauth_simulation_business_testing_support",
        "test_password_hashing_business_security",
        "test_database_unavailable_business_fallback",
        "test_invalid_token_business_error_handling",
        "test_user_not_found_business_handling",
        "test_rate_limiting_business_protection"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_business_logic_validation_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_business_logic_validation_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 11,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Business Logic Validation Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Correct authentication business logic across user tiers\n- Value Impact: Ensures auth system properly enforces business rules\n- Strategic Impact: Protects platform revenue and user experience integrity\n\nThese tests validate:\n1. User registration business rules and validation\n2. Login attempt limits and security policies\n3. Subscription tier access control\n4. Account lifecycle management\n5. Business rule enforcement across user types\n",
      "test_methods": [
        "test_user_registration_business_rules",
        "test_subscription_tier_access_control",
        "test_login_attempt_business_logic",
        "test_account_lifecycle_management",
        "test_business_rule_compliance_validation",
        "test_cross_service_token_validation_business_logic",
        "test_password_policy_business_rules",
        "test_session_security_policy",
        "test_oauth_integration_business_rules",
        "test_audit_logging_business_rules",
        "test_compliance_reporting_business_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_config_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_config_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 54,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Configuration\nTests configuration loading, environment handling, and defaults\n",
      "test_methods": [
        "test_get_environment",
        "test_get_jwt_secret",
        "test_get_jwt_algorithm",
        "test_get_jwt_access_expiry_minutes",
        "test_get_jwt_refresh_expiry_days",
        "test_get_jwt_service_expiry_minutes",
        "test_get_service_secret",
        "test_get_service_id",
        "test_get_database_url",
        "test_get_redis_url",
        "test_get_cors_origins",
        "test_get_api_base_url",
        "test_get_frontend_url",
        "test_is_development",
        "test_is_production",
        "test_is_test",
        "test_get_google_client_id",
        "test_get_google_client_secret",
        "test_google_oauth_enabled",
        "test_get_google_oauth_redirect_uri",
        "test_get_google_oauth_scopes",
        "test_get_database_host",
        "test_get_database_port",
        "test_get_database_name",
        "test_get_database_user",
        "test_get_database_password",
        "test_get_database_pool_size",
        "test_get_database_max_overflow",
        "test_use_sqlite_in_test",
        "test_get_redis_host",
        "test_get_redis_port",
        "test_get_redis_db",
        "test_get_redis_password",
        "test_redis_enabled",
        "test_redis_disabled_in_test",
        "test_get_redis_ttl",
        "test_get_bcrypt_rounds",
        "test_get_password_min_length",
        "test_get_max_login_attempts",
        "test_get_account_lockout_duration",
        "test_get_session_timeout",
        "test_require_email_verification",
        "test_get_token_blacklist_ttl",
        "test_get_rate_limit_requests",
        "test_get_allowed_origins",
        "test_default_values_when_env_empty",
        "test_type_conversion",
        "test_boolean_conversion",
        "test_list_conversion",
        "test_environment_specific_defaults",
        "test_validate_jwt_secret_length",
        "test_validate_service_secret_length",
        "test_validate_database_url_format",
        "test_validate_redis_url_format"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_environment_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_environment_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 109,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for AuthEnvironment class - Complete coverage of auth service configuration\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable auth service configuration across all environments\n- Value Impact: Prevents configuration failures that cause authentication outages\n- Strategic Impact: Core platform stability - auth failures can cause total system outages\n- Revenue Impact: Protects $50K+ MRR by preventing WebSocket auth failures like JWT secret mismatches\n\nThis test suite provides 100% coverage of AuthEnvironment functionality including:\n- Environment-specific configuration handling\n- JWT secret management and unified secret integration\n- Database and Redis connection configuration\n- OAuth provider configuration with environment-specific behavior\n- Service URL generation for different environments\n- Security parameter validation\n- Error handling and fallback mechanisms\n",
      "test_methods": [
        "test_initialization_with_minimal_config",
        "test_initialization_validates_config",
        "test_validation_logs_missing_required_vars",
        "test_get_jwt_secret_key_uses_unified_manager",
        "test_get_jwt_secret_key_falls_back_on_unified_failure",
        "test_get_jwt_secret_key_environment_specific",
        "test_get_jwt_secret_key_generates_dev_fallback",
        "test_get_jwt_secret_key_generates_test_fallback",
        "test_get_jwt_secret_key_fails_for_staging_without_config",
        "test_get_jwt_secret_key_fails_for_production_without_config",
        "test_get_jwt_algorithm_environment_specific",
        "test_get_jwt_algorithm_respects_explicit_config",
        "test_get_jwt_expiration_minutes_environment_defaults",
        "test_get_jwt_expiration_minutes_respects_config",
        "test_get_jwt_expiration_minutes_handles_invalid_config",
        "test_get_refresh_token_expiration_days_environment_defaults",
        "test_get_secret_key_with_explicit_config",
        "test_get_secret_key_generates_dev_fallback",
        "test_get_secret_key_generates_test_fallback",
        "test_get_secret_key_fails_for_staging_without_config",
        "test_get_bcrypt_rounds_environment_defaults",
        "test_get_database_url_uses_sqlite_for_test",
        "test_get_database_url_uses_builder_for_non_test",
        "test_get_database_url_fails_gracefully_when_builder_fails",
        "test_get_postgres_host_environment_defaults",
        "test_get_postgres_port_environment_defaults",
        "test_get_postgres_port_handles_invalid_config",
        "test_get_postgres_user_environment_defaults",
        "test_get_postgres_password_environment_defaults",
        "test_get_postgres_db_environment_defaults",
        "test_get_redis_url_environment_defaults",
        "test_get_redis_host_environment_defaults",
        "test_get_redis_port_environment_defaults",
        "test_get_redis_port_handles_invalid_config",
        "test_get_session_ttl_environment_defaults",
        "test_get_oauth_google_client_id_tries_environment_specific_keys",
        "test_get_oauth_google_client_id_falls_back_to_generic",
        "test_get_oauth_google_client_id_returns_empty_for_missing_config",
        "test_get_oauth_google_client_secret_environment_specific_behavior",
        "test_get_oauth_github_client_id_simple_getter",
        "test_get_oauth_github_client_secret_simple_getter",
        "test_get_auth_service_port_environment_defaults",
        "test_get_auth_service_host_environment_defaults",
        "test_get_backend_url_environment_defaults",
        "test_get_frontend_url_environment_defaults",
        "test_get_auth_service_url_constructs_from_host_and_port",
        "test_get_auth_service_url_production_default",
        "test_get_oauth_redirect_uri_deprecated_warning",
        "test_get_environment_returns_lowercase",
        "test_get_environment_defaults_to_development",
        "test_is_production_detection",
        "test_is_staging_detection",
        "test_is_development_detection",
        "test_is_testing_detection",
        "test_get_cors_origins_from_config",
        "test_get_cors_origins_environment_defaults",
        "test_get_log_level_environment_defaults",
        "test_get_log_level_respects_config",
        "test_should_enable_debug_environment_defaults",
        "test_should_enable_debug_respects_config",
        "test_get_login_rate_limit_environment_defaults",
        "test_get_login_rate_limit_period_environment_defaults",
        "test_get_max_failed_login_attempts_environment_defaults",
        "test_get_account_lockout_duration_default",
        "test_get_account_lockout_duration_handles_invalid",
        "test_get_min_password_length_environment_defaults",
        "test_require_password_complexity_environment_defaults",
        "test_get_smtp_host_simple_getter",
        "test_get_smtp_port_handles_conversion",
        "test_get_smtp_from_email_default",
        "test_is_smtp_enabled_checks_required_fields",
        "test_get_method",
        "test_set_method",
        "test_exists_method",
        "test_get_all_method",
        "test_validate_success_with_all_required",
        "test_validate_fails_with_missing_jwt_secret",
        "test_validate_warns_about_insecure_defaults_in_production",
        "test_validate_warns_about_long_jwt_expiration",
        "test_validate_warns_about_weak_password_policy",
        "test_get_auth_env_returns_same_instance",
        "test_convenience_functions_use_singleton",
        "test_handles_environment_variable_not_found_gracefully",
        "test_handles_invalid_integer_configurations",
        "test_oauth_redirect_uri_with_different_providers",
        "test_database_url_builder_with_missing_dependencies",
        "test_unified_jwt_secret_with_import_error",
        "test_cors_origins_with_whitespace_in_config",
        "test_environment_detection_case_insensitive",
        "test_port_configuration_with_explicit_values",
        "test_url_explicit_overrides",
        "test_auth_service_url_localhost_conversion",
        "test_integer_configuration_explicit_values",
        "test_validate_method_comprehensive_coverage",
        "test_database_url_builder_error_scenarios",
        "test_all_explicit_configuration_getters",
        "test_jwt_secret_tries_all_fallback_keys",
        "test_jwt_secret_fails_for_unknown_environment",
        "test_jwt_secret_strips_whitespace",
        "test_environment_fallback_patterns",
        "test_testing_environment_detection_with_env_var",
        "test_password_complexity_boolean_conversion",
        "test_debug_enable_boolean_conversion",
        "test_validate_method_environment_reporting",
        "test_validate_catches_all_security_issues",
        "test_oauth_google_tries_all_key_patterns",
        "test_cors_origins_parsing_edge_cases",
        "test_secret_key_generation_consistency",
        "test_jwt_secret_generation_environment_specific"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_environment_performance_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_environment_performance_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 12,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Performance and Startup Tests for Auth Environment Configuration\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Critical infrastructure for all segments)\n- Business Goal: Ensure fast auth service startup and responsive configuration access\n- Value Impact: Prevents slow auth service startup that delays platform availability\n- Strategic Impact: Auth service startup time directly affects platform deployment speed\n- Revenue Impact: Slow auth startup = delayed deployments = reduced development velocity\n\nCRITICAL PERFORMANCE REQUIREMENTS:\nAuth service must start quickly in all environments to ensure:\n- Fast deployment cycles (critical for staging/production deployments)\n- Quick development iteration (critical for developer productivity)\n- Rapid auto-scaling in production (critical for handling traffic spikes)\n- Fast disaster recovery (critical for platform reliability)\n\nPERFORMANCE TESTING METHODOLOGY:\n- Real AuthEnvironment instances (no business logic mocking)\n- Actual configuration loading with realistic scenarios\n- Memory usage monitoring for resource efficiency\n- Startup time measurement across environments\n- Configuration access performance validation\n- Resource leak detection for long-running scenarios\n\nCLAUDE.MD COMPLIANCE:\n- Uses SSOT BaseTestCase for isolated testing\n- NO mocks of core business logic - tests real performance\n- Uses IsolatedEnvironment throughout\n- Tests fail hard when performance requirements not met\n",
      "test_methods": [
        "test_auth_environment_initialization_performance",
        "test_configuration_access_performance",
        "test_concurrent_configuration_access_performance",
        "test_memory_usage_optimization",
        "test_singleton_memory_efficiency",
        "test_configuration_caching_efficiency",
        "test_configuration_validation_performance",
        "test_repeated_validation_performance",
        "test_multiple_environment_creation_performance",
        "test_configuration_method_performance_under_load",
        "test_long_running_configuration_access_stability",
        "test_memory_stability_under_continuous_load"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_service_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_service_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for AuthService - Core authentication service\nTests basic functionality and regression protection\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_service_core_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_service_core_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 15,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for AuthService SSOT class\n100% coverage priority for critical business logic following CLAUDE.md principles\n\nCRITICAL REQUIREMENTS:\n- NO mocks unless absolutely necessary (prefer real objects)  \n- ALL tests MUST be designed to FAIL HARD in every way\n- NEVER add \"extra\" features or \"enterprise\" type extensions\n- Use ABSOLUTE IMPORTS only (no relative imports)\n- Tests must RAISE ERRORS - DO NOT USE try/except blocks in tests\n- CHEATING ON TESTS = ABOMINATION\n\nThis test suite covers 1293 lines of AuthService SSOT class with:\n- Real instances (no mocks)\n- Boundary condition tests\n- Error condition tests  \n- Security tests\n- Race condition tests\n- Concurrent operations\n",
      "test_methods": [
        "test_auth_service_init_creates_real_instances",
        "test_database_initialization_handles_missing_db_gracefully",
        "test_jwt_handler_initialization_with_real_secret",
        "test_create_session_generates_valid_session",
        "test_delete_session_removes_session",
        "test_delete_nonexistent_session_fails_gracefully",
        "test_circuit_breaker_initial_state_is_closed",
        "test_record_failure_increases_failure_count",
        "test_record_success_resets_failure_count",
        "test_circuit_breaker_opens_after_threshold_failures",
        "test_reset_circuit_breaker_closes_circuit",
        "test_reset_all_circuit_breakers_closes_all",
        "test_validate_email_with_valid_emails_succeeds",
        "test_validate_email_with_invalid_emails_fails_hard",
        "test_memory_usage_with_large_number_of_sessions"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_auth_startup_configuration_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_auth_startup_configuration_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 10,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Service Startup and Configuration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Reliable authentication service startup and configuration\n- Value Impact: Ensures auth service starts correctly and serves users reliably\n- Strategic Impact: Foundation for entire platform availability and security\n\nThese tests validate:\n1. Service startup sequence and dependency validation\n2. Configuration loading and validation\n3. Environment-specific configuration handling\n4. Health check and readiness probe functionality\n5. Graceful shutdown and resource cleanup\n6. Startup performance and optimization\n",
      "test_methods": [
        "test_service_startup_sequence_validation",
        "test_configuration_validation_comprehensive",
        "test_environment_specific_configuration",
        "test_dependency_health_checks",
        "test_startup_performance_optimization",
        "test_health_check_endpoints",
        "test_graceful_shutdown_sequence",
        "test_configuration_hot_reload",
        "test_startup_failure_recovery",
        "test_startup_monitoring_and_metrics"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_config_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_config_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 76,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for auth_service/auth_core/config.py\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Security  \n- Business Goal: Ensure authentication configuration is 100% reliable\n- Value Impact: Prevents auth failures that block user access (critical for revenue)\n- Strategic Impact: Auth config manages JWT secrets, OAuth credentials, database connections\n  that are fundamental to platform security and user experience\n\nCRITICAL: This configuration module is the SSOT for all auth service settings.\nAny failures in config loading could prevent users from logging in, causing\nimmediate revenue impact and customer churn.\n\nCoverage Requirements:\n- 100% code coverage of auth_service/auth_core/config.py\n- All configuration methods tested with success and failure scenarios  \n- Environment-specific behavior validated (test, development, staging, production)\n- OAuth configuration validation\n- JWT secret management testing\n- Database and Redis URL configuration\n- Security settings validation\n- Service URL configuration\n- Fallback behavior and error handling\n\nTest Categories:\n- Configuration Loading & Delegation\n- Environment Detection & Defaults\n- OAuth Configuration (Google)\n- JWT Configuration & Security\n- Database Configuration & URL Building\n- Redis Configuration & Settings\n- Security & Rate Limiting\n- Service URLs & CORS\n- Error Handling & Validation\n- Environment-Specific Behavior\n",
      "test_methods": [
        "test_config_instance_creation",
        "test_get_config_function",
        "test_environment_property_access",
        "test_static_methods_exist",
        "test_get_environment_delegates_to_auth_env",
        "test_environment_specific_checks",
        "test_environment_consistency",
        "test_get_google_client_id",
        "test_get_google_client_secret",
        "test_is_google_oauth_enabled",
        "test_get_google_oauth_redirect_uri",
        "test_get_google_oauth_scopes",
        "test_oauth_with_environment_variables",
        "test_get_jwt_secret",
        "test_get_jwt_algorithm",
        "test_get_jwt_access_expiry_minutes",
        "test_get_jwt_refresh_expiry_days",
        "test_get_jwt_service_expiry_minutes",
        "test_jwt_configuration_consistency",
        "test_get_service_secret",
        "test_get_service_id",
        "test_service_id_environment_specific",
        "test_get_frontend_url",
        "test_get_auth_service_url",
        "test_get_api_base_url",
        "test_url_format_validation",
        "test_get_database_url",
        "test_get_raw_database_url",
        "test_database_url_conversion",
        "test_get_database_host",
        "test_get_database_port",
        "test_get_database_name",
        "test_get_database_user",
        "test_get_database_password",
        "test_get_database_pool_size",
        "test_get_database_max_overflow",
        "test_database_pool_environment_specific",
        "test_get_redis_url",
        "test_get_session_ttl_hours",
        "test_is_redis_disabled",
        "test_get_redis_host",
        "test_get_redis_port",
        "test_get_redis_db",
        "test_get_redis_password",
        "test_is_redis_enabled",
        "test_get_redis_default_ttl",
        "test_redis_environment_specific",
        "test_get_bcrypt_rounds",
        "test_get_password_min_length",
        "test_get_max_login_attempts",
        "test_get_account_lockout_duration_minutes",
        "test_get_session_timeout_minutes",
        "test_require_email_verification",
        "test_get_token_blacklist_ttl_hours",
        "test_get_rate_limit_requests_per_minute",
        "test_security_environment_specific",
        "test_get_cors_origins",
        "test_get_allowed_origins",
        "test_cors_environment_specific",
        "test_log_configuration",
        "test_log_configuration_masks_secrets",
        "test_handles_missing_auth_env",
        "test_handles_auth_env_method_errors",
        "test_handles_type_conversion_errors",
        "test_environment_fallbacks",
        "test_deprecated_oauth_redirect_uri_warning",
        "test_jwt_and_service_secrets_consistency",
        "test_database_url_and_components_consistency",
        "test_redis_url_and_components_consistency",
        "test_service_urls_environment_consistency",
        "test_ttl_and_timeout_consistency",
        "test_production_security_standards",
        "test_oauth_business_readiness",
        "test_database_performance_configuration",
        "test_session_management_business_logic",
        "test_rate_limiting_business_protection"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_connection_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_connection_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Service Database Connection\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Ensure reliable database connectivity for auth service\n- Value Impact: Prevents authentication failures due to connection issues\n- Strategic Impact: Foundation for scalable multi-user authentication\n\nTests database connection management, session handling, transaction management,\nconnection pooling, error handling, and environment-specific configuration.\nUses real PostgreSQL database for comprehensive validation.\n",
      "test_methods": [
        "test_compatibility_aliases"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_connection_events_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_connection_events_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 32,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Service Database Connection Events\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable database connection monitoring and timeout handling\n- Value Impact: Prevents auth service failures due to connection issues and provides observability\n- Strategic Impact: Foundation for monitoring and debugging database connectivity issues\n\nTests connection event handlers, timeout configuration, pool monitoring,\nevent setup, and integration with SQLAlchemy engine events.\nUses real PostgreSQL database for comprehensive validation.\n",
      "test_methods": [
        "test_auth_database_config_constants",
        "test_auth_database_config_values_reasonable",
        "test_get_settings_with_auth_config",
        "test_get_settings_with_partial_auth_config",
        "test_get_settings_import_error",
        "test_get_settings_module_level_initialization",
        "test_execute_auth_timeout_statements",
        "test_close_cursor_safely_success",
        "test_close_cursor_safely_error",
        "test_configure_auth_connection_timeouts_success",
        "test_configure_auth_connection_timeouts_error",
        "test_set_auth_connection_pid_with_backend_pid",
        "test_set_auth_connection_pid_no_backend_pid",
        "test_set_auth_connection_pid_error",
        "test_monitor_auth_pool_usage_no_pool",
        "test_monitor_auth_pool_usage_normal_usage",
        "test_monitor_auth_pool_usage_high_usage",
        "test_monitor_auth_pool_usage_missing_methods",
        "test_monitor_auth_pool_usage_error",
        "test_log_auth_connection_established_with_settings",
        "test_log_auth_connection_established_no_settings",
        "test_log_auth_checkout_if_enabled_enabled",
        "test_log_auth_checkout_if_enabled_disabled",
        "test_setup_auth_async_engine_events_none_engine",
        "test_setup_auth_async_engine_events_error",
        "test_connect_event_handler_postgresql",
        "test_connect_event_handler_sqlite",
        "test_checkout_event_handler",
        "test_pool_events_setup",
        "test_connection_info_logging",
        "test_event_handler_exception_handling",
        "test_module_exports"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_manager_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_manager_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 17,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Service Database Manager\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable database engine management and URL construction\n- Value Impact: Prevents auth service failures due to database configuration issues\n- Strategic Impact: Foundation for consistent database connectivity across environments\n\nTests database engine creation, URL construction, environment handling,\nconfiguration validation, and integration with shared components.\nUses real PostgreSQL database for comprehensive validation.\n",
      "test_methods": [
        "test_get_database_url_normal_mode",
        "test_get_database_url_fast_test_mode",
        "test_get_database_url_environment_variables",
        "test_get_database_url_validation_failure",
        "test_get_database_url_no_url_generated",
        "test_environment_detection_development",
        "test_environment_detection_staging",
        "test_environment_detection_production",
        "test_environment_detection_default",
        "test_integration_with_database_url_builder",
        "test_integration_with_isolated_environment",
        "test_url_masking_for_logging",
        "test_missing_environment_variables",
        "test_invalid_environment_values",
        "test_database_url_builder_exception",
        "test_fast_test_mode_variations",
        "test_environment_specific_url_construction"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_models_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_models_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Service Database Models\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure auth data integrity and model correctness\n- Value Impact: Prevents data corruption and authentication failures\n- Strategic Impact: Foundation for reliable multi-user authentication\n\nTests all database models for data integrity, constraints, relationships, and business logic.\nUses real PostgreSQL database for comprehensive validation.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_repository_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_repository_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Database Repository and Models\nTests database operations, models, and repository methods\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_database_staging_validation_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_database_staging_validation_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 59,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for Auth Service Staging Database Validation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Prevent staging deployment failures due to database configuration issues\n- Value Impact: Reduces deployment downtime and debugging time for staging environment\n- Strategic Impact: Ensures reliable auth service availability during development cycle\n\nTests database URL validation, credential validation, SSL compatibility,\nstaging deployment validation, and pre-deployment checks.\nFocuses on configuration validation rather than real database connections.\n",
      "test_methods": [
        "test_validate_empty_url",
        "test_validate_none_url",
        "test_validate_invalid_scheme",
        "test_validate_postgresql_scheme",
        "test_validate_postgres_scheme",
        "test_validate_cloud_sql_url",
        "test_validate_cloud_sql_url_with_ssl_params",
        "test_validate_tcp_url_with_sslmode",
        "test_validate_tcp_url_with_ssl_param",
        "test_validate_tcp_url_no_ssl",
        "test_validate_localhost_warning",
        "test_validate_no_port_warning",
        "test_validate_no_hostname",
        "test_validate_malformed_cloud_sql_path",
        "test_validate_cloud_sql_missing_db_name",
        "test_validate_credentials_no_username",
        "test_validate_credentials_no_password",
        "test_validate_credentials_problematic_username_pattern",
        "test_validate_credentials_pr_pattern_username",
        "test_validate_credentials_postgres_username",
        "test_validate_credentials_root_username",
        "test_validate_credentials_insecure_password",
        "test_validate_credentials_short_password",
        "test_validate_credentials_numeric_password",
        "test_validate_credentials_test_password",
        "test_validate_credentials_placeholder_password",
        "test_validate_credentials_variable_placeholder",
        "test_validate_credentials_staging_specific_checks",
        "test_validate_credentials_secure_example",
        "test_validate_credentials_parsing_error",
        "test_ssl_compatibility_cloud_sql_with_ssl_params",
        "test_ssl_compatibility_cloud_sql_ssl_not_removed",
        "test_ssl_compatibility_tcp_sslmode_conversion",
        "test_ssl_compatibility_tcp_sslmode_not_converted",
        "test_ssl_compatibility_tcp_with_ssl_param",
        "test_ssl_compatibility_error_handling",
        "test_pre_deployment_validation_with_url",
        "test_pre_deployment_validation_without_url",
        "test_pre_deployment_validation_url_format_failure",
        "test_pre_deployment_validation_credential_failure",
        "test_pre_deployment_validation_ssl_failure",
        "test_pre_deployment_validation_warnings_only",
        "test_pre_deployment_validation_success",
        "test_pre_deployment_validation_long_url_truncation",
        "test_print_validation_report_passed",
        "test_print_validation_report_failed",
        "test_print_validation_report_warning",
        "test_print_validation_report_unknown_status",
        "test_validate_staging_deployment_success",
        "test_validate_staging_deployment_warning",
        "test_validate_staging_deployment_failure",
        "test_url_format_validation_exception",
        "test_credential_validation_exception",
        "test_cloud_sql_database_name_extraction_edge_cases",
        "test_regex_patterns_comprehensive",
        "test_environment_specific_validation_branches",
        "test_password_security_checks_comprehensive",
        "test_main_module_success",
        "test_main_module_failure"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_google_oauth_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_google_oauth_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 36,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Google OAuth Provider\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure Google OAuth integration prevents authentication failures\n- Value Impact: Prevents $75K+ MRR loss from OAuth authentication failures\n- Strategic Impact: Core authentication mechanism for user login\n\nTest Coverage:\n- Google OAuth provider initialization and configuration\n- Authorization URL generation with proper parameters\n- Authorization code exchange for user tokens\n- User profile retrieval from Google APIs\n- State parameter validation (CSRF protection)\n- Environment-specific configuration validation\n- Error handling for OAuth failures\n- Security validations and input sanitization\n- Network error handling for Google API calls\n- Token validation and refresh flows\n- Multiple scope support\n- Redirect URI validation across environments\n\nCRITICAL: Uses SSOT BaseTestCase and IsolatedEnvironment.\nNO direct os.environ access. Tests with real OAuth flows where possible.\n",
      "test_methods": [
        "test_provider_initializes_successfully",
        "test_provider_environment_detection",
        "test_provider_credentials_initialization",
        "test_provider_handles_missing_credentials_in_test",
        "test_provider_requires_credentials_in_production",
        "test_is_configured_with_valid_credentials",
        "test_is_configured_with_missing_credentials",
        "test_validate_configuration_with_valid_data",
        "test_validate_configuration_with_invalid_client_id",
        "test_validate_configuration_with_invalid_client_secret",
        "test_get_configuration_status",
        "test_get_redirect_uri_returns_valid_uri",
        "test_redirect_uri_environment_specific",
        "test_redirect_uri_consistency",
        "test_get_authorization_url_basic",
        "test_get_authorization_url_with_custom_scopes",
        "test_get_authorization_url_parameters",
        "test_get_authorization_url_without_client_id",
        "test_exchange_code_for_user_info_test_environment",
        "test_exchange_code_for_user_info_without_client_secret",
        "test_exchange_code_for_user_info_real_api_success",
        "test_exchange_code_for_user_info_token_request_failure",
        "test_exchange_code_for_user_info_no_access_token",
        "test_exchange_code_for_user_info_user_info_failure",
        "test_self_check_with_valid_configuration",
        "test_self_check_with_invalid_configuration",
        "test_self_check_authorization_url_generation",
        "test_self_check_includes_redirect_uri",
        "test_self_check_client_id_privacy",
        "test_state_parameter_required",
        "test_redirect_uri_validation_by_environment",
        "test_no_credential_exposure_in_errors",
        "test_input_sanitization",
        "test_provider_initialization_performance",
        "test_authorization_url_generation_performance",
        "test_memory_usage_stability"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_jwt_cache_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_jwt_cache_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 29,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for JWT Cache - High-performance caching for JWT validation\nTests all functionality including Redis integration, performance metrics, and edge cases\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Ensure JWT validation performance and reliability\n- Value Impact: Fast token validation enables responsive user experience\n- Strategic Impact: Cache performance directly impacts platform scalability\n",
      "test_methods": [
        "test_cache_initialization",
        "test_get_cache_key_generation",
        "test_cache_and_retrieve_valid_payload",
        "test_cache_and_retrieve_invalid_result",
        "test_cache_expiration_removes_entries",
        "test_jwt_token_expiration_handling",
        "test_redis_cache_hit",
        "test_redis_cache_miss",
        "test_redis_expired_token_removal",
        "test_redis_connection_failure_fallback",
        "test_redis_disabled_uses_memory_only",
        "test_cache_size_limit_enforcement",
        "test_expired_entries_cleanup_on_size_limit",
        "test_get_cache_stats_accuracy",
        "test_performance_under_concurrent_access",
        "test_invalidate_user_cache_memory_only",
        "test_invalidate_user_cache_with_redis",
        "test_invalidate_user_cache_redis_failure_graceful",
        "test_clear_cache_memory_only",
        "test_clear_cache_with_redis",
        "test_clear_cache_redis_failure_graceful",
        "test_cache_with_none_payload",
        "test_cache_with_invalid_json_payload",
        "test_get_cache_stats_with_zero_validations",
        "test_cache_key_with_empty_token",
        "test_memory_cache_corruption_handling",
        "test_global_instance_exists",
        "test_global_instance_functionality",
        "test_global_instance_stats"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_jwt_handler_batch4_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_jwt_handler_batch4_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 19,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest JWT Handler Batch 4 - Comprehensive JWT Security and Validation Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Mid - Security-Critical Infrastructure\n- Business Goal: Prevent security breaches and ensure compliant JWT handling\n- Value Impact: Validates core authentication security mechanisms\n- Revenue Impact: Protects $120K+ MRR by preventing auth bypasses and token exploits\n\nCRITICAL: These tests ensure JWT security compliance and prevent token-based attacks.\nAll security mechanisms MUST be validated with NO mocks in critical paths.\n",
      "test_methods": [
        "test_jwt_handler_validates_token_structure_security",
        "test_jwt_handler_prevents_algorithm_confusion_attacks",
        "test_jwt_handler_validates_token_claims_security",
        "test_jwt_handler_token_blacklist_prevents_reuse",
        "test_jwt_handler_user_blacklist_invalidates_all_tokens",
        "test_jwt_handler_cross_service_token_validation",
        "test_jwt_handler_service_signature_validation",
        "test_jwt_handler_prevents_token_replay_attacks",
        "test_jwt_handler_enforces_token_expiration_security",
        "test_jwt_handler_rejects_ancient_tokens_security",
        "test_jwt_handler_cache_security_validation",
        "test_jwt_handler_secure_error_handling",
        "test_jwt_handler_performance_stats_security",
        "test_jwt_handler_creates_access_tokens_with_security_claims",
        "test_jwt_handler_creates_refresh_tokens_with_user_data",
        "test_jwt_handler_refresh_access_token_preserves_user_data",
        "test_jwt_handler_service_token_authentication",
        "test_jwt_handler_validates_oauth_id_tokens",
        "test_jwt_handler_user_id_extraction_utility"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_jwt_handler_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_jwt_handler_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 89,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for JWT Handler - Core authentication token management\nTests basic functionality and regression protection with 100% coverage\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure JWT authentication security and reliability\n- Value Impact: Secure token management enables trusted user authentication\n- Strategic Impact: Authentication foundation for entire platform security\n",
      "test_methods": [
        "test_create_access_token",
        "test_create_refresh_token",
        "test_create_service_token",
        "test_validate_valid_access_token",
        "test_validate_invalid_token_type",
        "test_validate_malformed_token",
        "test_validate_expired_token",
        "test_extract_user_id_from_token",
        "test_extract_user_id_from_invalid_token",
        "test_refresh_access_token_success",
        "test_refresh_access_token_with_invalid_token",
        "test_token_payload_contains_required_claims",
        "test_token_issuer_is_correct",
        "test_token_audience_is_correct",
        "test_token_jti_is_unique",
        "test_blacklist_token",
        "test_validate_blacklisted_token_fails",
        "test_remove_token_from_blacklist",
        "test_blacklist_user",
        "test_validate_token_for_blacklisted_user_fails",
        "test_remove_user_from_blacklist",
        "test_get_blacklist_info",
        "test_validate_token_with_none_algorithm_fails",
        "test_validate_token_with_wrong_algorithm_fails",
        "test_validate_token_with_invalid_issuer_fails",
        "test_validate_token_with_invalid_audience_fails",
        "test_validate_token_too_old_fails",
        "test_validate_token_issued_in_future_fails",
        "test_validate_id_token_basic",
        "test_validate_id_token_wrong_issuer_fails",
        "test_validate_id_token_expired_fails",
        "test_mock_token_rejected_in_production",
        "test_get_performance_stats",
        "test_validate_token_caching",
        "test_token_structure_validation",
        "test_enhanced_jwt_claims_validation_fast",
        "test_create_refresh_token_without_email",
        "test_validate_token_for_consumption_with_replay_protection",
        "test_cross_service_token_validation",
        "test_service_signature_generation",
        "test_cleanup_expired_token_ids",
        "test_environment_binding_in_token",
        "test_service_id_in_token",
        "test_validate_token_jwt_alias",
        "test_token_with_empty_permissions",
        "test_token_with_no_permissions",
        "test_get_jwt_secret_production_requires_secret",
        "test_get_jwt_secret_staging_requires_secret",
        "test_get_jwt_secret_production_requires_minimum_length",
        "test_get_jwt_secret_development_allows_empty",
        "test_get_jwt_secret_test_allows_empty",
        "test_run_async_in_background_with_running_loop",
        "test_run_async_in_background_without_loop",
        "test_validate_enhanced_jwt_claims_full",
        "test_validate_enhanced_jwt_claims_invalid_issuer",
        "test_validate_enhanced_jwt_claims_invalid_audience",
        "test_validate_enhanced_jwt_claims_environment_mismatch",
        "test_validate_enhanced_jwt_claims_service_id_mismatch",
        "test_validate_enhanced_jwt_claims_missing_jti_allowed",
        "test_validate_cross_service_token_development_permissive",
        "test_validate_cross_service_token_future_issued",
        "test_validate_cross_service_token_too_old",
        "test_validate_cross_service_token_with_replay_protection",
        "test_track_and_check_token_id",
        "test_cleanup_expired_token_ids_threshold",
        "test_cleanup_expired_token_ids_manual",
        "test_validate_token_security_consolidated_valid",
        "test_validate_token_security_consolidated_invalid_structure",
        "test_validate_jwt_structure_valid_token",
        "test_validate_jwt_structure_invalid_base64",
        "test_validate_jwt_structure_invalid_json",
        "test_validate_jwt_structure_empty_parts",
        "test_validate_token_rejects_mock_tokens",
        "test_refresh_access_token_rejects_mock_tokens",
        "test_mock_tokens_rejected_in_production_environment",
        "test_mock_tokens_rejected_in_test_environment_too",
        "test_get_audience_for_token_type_access",
        "test_get_audience_for_token_type_refresh",
        "test_get_audience_for_token_type_service",
        "test_get_audience_for_token_type_admin",
        "test_get_audience_for_token_type_unknown",
        "test_generate_service_signature_success",
        "test_generate_service_signature_different_payloads",
        "test_generate_service_signature_handles_exceptions",
        "test_handler_initialization_loads_config",
        "test_handler_initialization_calls_redis_init",
        "test_refresh_access_token_extracts_user_data_from_payload",
        "test_refresh_access_token_with_minimal_refresh_token",
        "test_blacklist_user_invalidates_cache"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_jwt_handler_core_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_jwt_handler_core_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 48,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for JWTHandler SSOT class\n100% coverage priority for JWT security validation and token operations\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n- CHEATING ON TESTS = ABOMINATION  \n- NO mocks unless absolutely necessary (prefer real objects)\n- ALL tests MUST be designed to FAIL HARD in every way\n- NEVER add \"extra\" features or \"enterprise\" type extensions\n- Use ABSOLUTE IMPORTS only (no relative imports)\n- Tests must RAISE ERRORS - DO NOT USE try/except blocks in tests\n\nThis test suite covers 966 lines of JWTHandler SSOT class with:\n- Real JWT operations (no mocks)\n- Security validation tests (algorithm confusion, replay attacks)\n- Token creation/validation with real PyJWT\n- Blacklist operations with real Redis (if available)\n- Race condition tests for concurrent operations\n- Boundary condition tests (malformed tokens, edge cases)\n",
      "test_methods": [
        "test_jwt_handler_init_with_real_secret",
        "test_jwt_handler_secret_length_enforced_in_production",
        "test_jwt_handler_blacklist_initialization",
        "test_create_access_token_generates_valid_jwt",
        "test_create_refresh_token_generates_valid_jwt",
        "test_create_service_token_generates_valid_jwt",
        "test_create_tokens_have_unique_jti",
        "test_create_tokens_have_proper_expiration",
        "test_validate_token_with_valid_access_token_succeeds",
        "test_validate_token_with_valid_refresh_token_succeeds",
        "test_validate_token_with_wrong_token_type_fails_hard",
        "test_validate_token_with_malformed_jwt_fails_hard",
        "test_validate_token_with_wrong_signature_fails_hard",
        "test_validate_token_with_expired_token_fails_hard",
        "test_validate_token_with_future_issued_time_fails_hard",
        "test_validate_token_algorithm_confusion_attack_prevention",
        "test_validate_token_with_missing_required_claims_fails_hard",
        "test_validate_token_security_consolidated_rejects_weak_algorithms",
        "test_validate_token_security_consolidated_validates_structure",
        "test_validate_jwt_structure_method_validates_parts",
        "test_validate_enhanced_jwt_claims_validates_security",
        "test_blacklist_token_adds_to_blacklist",
        "test_blacklist_token_with_invalid_token_handles_gracefully",
        "test_is_token_blacklisted_with_non_blacklisted_token",
        "test_blacklist_user_blocks_all_user_tokens",
        "test_remove_from_blacklist_removes_token",
        "test_remove_user_from_blacklist_removes_user",
        "test_get_blacklist_info_returns_counts",
        "test_refresh_access_token_with_valid_refresh_token_succeeds",
        "test_refresh_access_token_with_invalid_refresh_token_fails_hard",
        "test_refresh_access_token_with_access_token_fails_hard",
        "test_refresh_access_token_with_expired_refresh_token_fails_hard",
        "test_validate_token_for_consumption_implements_replay_protection",
        "test_refresh_operation_rejects_mock_tokens_in_production",
        "test_validate_id_token_with_valid_token_succeeds",
        "test_validate_id_token_with_wrong_issuer_fails_hard",
        "test_validate_id_token_with_expired_token_fails_hard",
        "test_validate_id_token_with_too_old_token_fails_hard",
        "test_get_performance_stats_returns_metrics",
        "test_extract_user_id_from_valid_token_succeeds",
        "test_extract_user_id_from_invalid_token_returns_none",
        "test_concurrent_token_creation_generates_unique_tokens",
        "test_concurrent_blacklist_operations_maintain_consistency",
        "test_concurrent_validation_operations_remain_consistent",
        "test_operations_with_extremely_long_inputs_handle_gracefully",
        "test_operations_with_unicode_characters_handle_correctly",
        "test_operations_with_special_json_characters_handle_correctly",
        "test_memory_usage_with_large_blacklists_remains_reasonable"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_oauth_business_logic_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_oauth_business_logic_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 14,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nOAuth Business Logic Comprehensive Tests - PRIORITY 1 SECURITY CRITICAL\n\n**CRITICAL**: Comprehensive OAuth business logic testing with subscription tier validation.\nThese tests ensure OAuth provider integration maintains business value by correctly \nassigning user tiers and detecting business accounts for Chat monetization.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers - OAuth is primary user onboarding method\n- Business Goal: Revenue optimization through correct tier assignment\n- Value Impact: Prevents revenue leakage from incorrect user tier classification\n- Strategic Impact: Ensures business email detection drives tier upgrades and Chat revenue\n\nULTRA CRITICAL CONSTRAINTS:\n- Tests designed to FAIL HARD - no try/except bypassing\n- Focus on realistic OAuth provider data scenarios\n- Business logic must protect against tier downgrade attacks\n- ABSOLUTE IMPORTS ONLY (from auth_service.* not relative)\n\nOAuth Attack Vectors Tested:\n- OAuth state parameter manipulation\n- Provider data injection attacks  \n- Subscription tier bypass attempts\n- Business email domain spoofing\n- Account linking security violations\n- Provider validation bypass\n",
      "test_methods": [
        "test_google_oauth_user_processing_standard_flow",
        "test_github_oauth_user_processing_developer_tier",
        "test_business_email_detection_and_tier_upgrade",
        "test_business_email_domain_detection_comprehensive",
        "test_subscription_tier_determination_logic",
        "test_oauth_business_rules_validation_comprehensive",
        "test_oauth_account_linking_business_logic",
        "test_oauth_provider_validation_security",
        "test_tier_bypass_attack_prevention",
        "test_email_domain_spoofing_prevention",
        "test_oauth_data_completeness_validation",
        "test_existing_user_account_linking_detection",
        "test_oauth_tier_upgrade_suggestions",
        "test_email_verification_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_oauth_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_oauth_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 22,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for OAuth functionality\nTests Google OAuth and general OAuth manager\n",
      "test_methods": [
        "test_oauth_manager_initialization",
        "test_get_available_providers",
        "test_get_provider_google",
        "test_get_provider_invalid",
        "test_is_provider_configured",
        "test_get_provider_status",
        "test_get_invalid_provider_status",
        "test_provider_initialization",
        "test_client_id_property",
        "test_client_secret_property",
        "test_get_redirect_uri",
        "test_is_configured",
        "test_validate_configuration",
        "test_self_check",
        "test_get_configuration_status",
        "test_get_authorization_url_basic",
        "test_exchange_code_for_user_info_with_invalid_code",
        "test_provider_requires_configuration",
        "test_provider_self_check_comprehensive",
        "test_configuration_validation_comprehensive",
        "test_manager_provider_integration",
        "test_provider_status_consistency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_oauth_manager_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_oauth_manager_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 30,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for OAuth Manager\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Ensure OAuth authentication reliability prevents user login failures\n- Value Impact: Prevents $75K+ MRR loss from authentication failures\n- Strategic Impact: Core platform authentication functionality\n\nTest Coverage:\n- OAuth Manager initialization and provider management\n- Multiple provider support (Google, GitHub, etc.)\n- Provider configuration validation\n- Status reporting and health checks\n- Error handling for misconfigured providers\n- Security validations for OAuth state parameters\n- Provider availability checks\n- Configuration consistency validation\n\nCRITICAL: Uses SSOT BaseTestCase and IsolatedEnvironment.\nNO direct os.environ access. Uses real services where possible.\n",
      "test_methods": [
        "test_oauth_manager_initializes_successfully",
        "test_oauth_manager_initializes_providers",
        "test_oauth_manager_handles_provider_initialization_failures",
        "test_get_available_providers_returns_list",
        "test_get_provider_google_returns_correct_type",
        "test_get_provider_invalid_returns_none",
        "test_get_provider_empty_string_returns_none",
        "test_get_provider_none_returns_none",
        "test_is_provider_configured_google",
        "test_is_provider_configured_invalid_provider",
        "test_get_provider_status_google",
        "test_get_provider_status_invalid_provider",
        "test_get_provider_status_all_fields_present",
        "test_manager_handles_provider_initialization_exceptions",
        "test_manager_handles_provider_method_exceptions",
        "test_manager_thread_safety_basic",
        "test_manager_memory_usage",
        "test_manager_provider_consistency",
        "test_manager_status_vs_provider_health",
        "test_manager_with_multiple_operations",
        "test_manager_with_development_environment",
        "test_manager_with_staging_environment",
        "test_manager_with_production_environment",
        "test_manager_configuration_changes",
        "test_manager_no_credential_leakage",
        "test_manager_input_validation",
        "test_manager_state_isolation",
        "test_manager_initialization_performance",
        "test_manager_operation_performance",
        "test_manager_memory_efficiency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_oauth_manager_ssot_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_oauth_manager_ssot_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 35,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\n\ud83d\udea8 CRITICAL COMPREHENSIVE UNIT TESTS - OAuth Manager SSOT Class\nAuth Service OAuth Manager - Business Critical Authentication System\n\n**BUSINESS VALUE JUSTIFICATION (BVJ):**\n- **Segment**: All (Free, Early, Mid, Enterprise) - 100% user impact\n- **Business Goal**: Prevent OAuth authentication failures causing $10M+ potential churn\n- **Value Impact**: SSOT OAuth manager protects against security breaches and login failures\n- **Strategic/Revenue Impact**: Core authentication prevents complete platform inaccessibility\n\n**MISSION CRITICAL CONTEXT:**\n- OAuth Manager is the SINGLE SOURCE OF TRUTH for ALL OAuth provider management\n- Any failure in this class causes complete OAuth login system breakdown\n- Protects against $10M+ potential churn from OAuth security breaches\n- Ensures multi-environment OAuth configuration consistency\n- Foundation for Google OAuth integration serving 100% of users\n\n**TEST COVERAGE APPROACH:**\n- 40+ comprehensive test methods across 8 test classes\n- REAL instances only - NO business logic mocking (CLAUDE.md compliance)\n- Multi-environment testing (dev, staging, prod)\n- Security patterns: CSRF, state validation, token management\n- Concurrency testing for multi-user OAuth flows\n- Error boundary testing with HARD FAILURES\n- Business value protection validation\n\n**CRITICAL REQUIREMENTS:**\n\u2705 Tests MUST fail hard when system breaks (NO try/except blocks)\n\u2705 REAL OAuth manager instances (no mocks for core business logic)\n\u2705 Complete multi-user isolation testing\n\u2705 OAuth security pattern validation\n\u2705 Multi-environment configuration testing\n\u2705 Callback validation and CSRF protection\n\u2705 Provider availability and health monitoring\n",
      "test_methods": [
        "test_oauth_manager_initializes_with_real_providers",
        "test_oauth_manager_provider_registration_integrity",
        "test_oauth_manager_handles_provider_initialization_exceptions",
        "test_oauth_manager_initialization_performance",
        "test_get_available_providers_returns_consistent_results",
        "test_get_provider_google_returns_valid_instance_or_none",
        "test_get_provider_with_invalid_names",
        "test_provider_instance_isolation",
        "test_is_provider_configured_accurate_status",
        "test_get_provider_status_comprehensive_information",
        "test_get_provider_status_error_handling",
        "test_provider_configuration_consistency",
        "test_oauth_manager_development_environment",
        "test_oauth_manager_staging_environment",
        "test_oauth_manager_production_environment",
        "test_oauth_manager_test_environment",
        "test_environment_configuration_isolation",
        "test_oauth_manager_prevents_credential_leakage",
        "test_oauth_manager_input_sanitization",
        "test_oauth_manager_state_isolation",
        "test_oauth_manager_csrf_protection_readiness",
        "test_oauth_manager_callback_validation_readiness",
        "test_oauth_manager_concurrent_initialization",
        "test_oauth_manager_concurrent_provider_access",
        "test_oauth_manager_high_frequency_access",
        "test_oauth_manager_memory_stability_under_load",
        "test_oauth_manager_handles_provider_creation_failures",
        "test_oauth_manager_invalid_environment_handling",
        "test_oauth_manager_resource_exhaustion_protection",
        "test_oauth_manager_partial_configuration_handling",
        "test_oauth_manager_user_authentication_readiness",
        "test_oauth_manager_multi_user_isolation_protection",
        "test_oauth_manager_platform_availability_protection",
        "test_oauth_manager_production_readiness_validation",
        "test_oauth_manager_security_breach_prevention"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_oauth_provider_security_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_oauth_provider_security_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 16,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Security-Focused Unit Tests for OAuth Provider Classes\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prevent OAuth security breaches and authentication failures\n- Value Impact: Protects $75K+ MRR from OAuth authentication failures\n- Strategic Impact: Core security foundation for multi-user authentication system\n- Risk Mitigation: Prevents credential leakage, CSRF attacks, and unauthorized access\n\nCRITICAL SECURITY TESTING:\nThis test suite focuses on the most security-critical aspects of OAuth authentication:\n- Multi-environment credential isolation (dev/staging/prod cannot cross-contaminate)\n- State parameter validation (CSRF protection)\n- Redirect URI validation (prevents callback hijacking)\n- Credential sanitization (prevents exposure in logs/errors)\n- Input validation (prevents injection attacks)\n- Environment-specific configuration validation\n\nTESTING METHODOLOGY:\n- Uses SSOT BaseTestCase for isolated environment management\n- NO mocks of core business logic - tests real OAuth provider behavior\n- Real IsolatedEnvironment usage throughout\n- Tests fail hard when security validation fails\n- Comprehensive edge case coverage for security scenarios\n",
      "test_methods": [
        "test_development_credentials_isolated_from_production",
        "test_staging_credentials_validated_for_environment",
        "test_production_oauth_configuration_security_requirements",
        "test_state_parameter_cryptographically_strong",
        "test_state_parameter_prevents_replay_attacks",
        "test_malicious_state_parameters_handled_safely",
        "test_redirect_uri_environment_specific_validation",
        "test_redirect_uri_prevents_open_redirect_attacks",
        "test_redirect_uri_https_enforcement_production",
        "test_credentials_not_exposed_in_error_messages",
        "test_self_check_masks_sensitive_information",
        "test_configuration_status_sanitization",
        "test_authorization_code_input_validation",
        "test_scope_parameter_validation",
        "test_oauth_provider_dos_protection",
        "test_oauth_provider_memory_safety"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_password_security_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_password_security_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nPassword Security Comprehensive Tests - PRIORITY 2 SECURITY CRITICAL\n\n**CRITICAL**: Comprehensive password policy enforcement testing with security validation.\nThese tests ensure password security protects Chat user accounts from credential attacks,\npreventing unauthorized access to AI conversations and user data.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers - password security affects all user registrations  \n- Business Goal: Security, User Protection, Compliance\n- Value Impact: Prevents account breaches that could compromise Chat conversations\n- Strategic Impact: Password security maintains platform trust and prevents data breaches\n\nULTRA CRITICAL CONSTRAINTS:\n- Tests designed to FAIL HARD - no try/except bypassing\n- Focus on realistic password attack scenarios\n- Password policies must prevent common attack vectors\n- ABSOLUTE IMPORTS ONLY (from auth_service.* not relative)\n\nPassword Attack Vectors Tested:\n- Brute force password attempts\n- Dictionary attack patterns\n- Password cracking with common patterns  \n- Sequential character attacks\n- Password reuse and history validation\n- Credential stuffing prevention\n",
      "test_methods": [
        "test_password_policy_validation_comprehensive",
        "test_password_strength_scoring_algorithm",
        "test_password_hashing_security",
        "test_password_attack_pattern_prevention",
        "test_password_complexity_scoring_edge_cases"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_repository_core_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_repository_core_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for AuthUserRepository, AuthSessionRepository, and AuthAuditRepository SSOT classes\n100% coverage priority for database operations and race condition handling\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n- CHEATING ON TESTS = ABOMINATION  \n- NO mocks unless absolutely necessary (prefer real database operations)\n- ALL tests MUST be designed to FAIL HARD in every way\n- NEVER add \"extra\" features or \"enterprise\" type extensions\n- Use ABSOLUTE IMPORTS only (no relative imports)\n- Tests must RAISE ERRORS - DO NOT USE try/except blocks in tests\n\nThis test suite covers 423+ lines of Repository SSOT classes with:\n- Real database operations (no mocks - use test database)\n- Race condition tests for concurrent operations\n- Boundary condition tests (duplicate users, invalid data)\n- Transaction integrity tests\n- Account locking mechanism tests\n- Audit logging tests\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_secret_loader_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_secret_loader_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 34,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for AuthSecretLoader SSOT Class\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (All user segments depend on this infrastructure)\n- Business Goal: Configuration Security and Service Independence \n- Value Impact: AuthSecretLoader is the SSOT for ALL auth service secrets - JWT tokens, OAuth credentials, database URLs\n- Strategic Impact: $3M+ Revenue Protection - Prevents production auth failures that would block all user access\n- Revenue Impact: Auth failures = 100% platform downtime = complete revenue loss\n- Risk Mitigation: Ensures multi-environment secret management works correctly across dev/test/staging/production\n\nCRITICAL BUSINESS IMPORTANCE:\nThis SSOT class is the foundation of authentication security for the entire platform.\nAny failure in secret loading results in:\n- Complete authentication system failure\n- All user sessions invalidated \n- Total platform inaccessibility\n- Cascading failures across all services\n- Complete revenue stop until resolved\n\nThe AuthSecretLoader centralizes configuration validation through shared.configuration,\neliminating duplicate secret validation logic while maintaining auth service independence.\n\nTESTING PHILOSOPHY:\n- CHEATING ON TESTS = ABOMINATION - All tests fail hard when system breaks\n- NO BUSINESS LOGIC MOCKS - Use real AuthSecretLoader instances \n- ABSOLUTE IMPORTS ONLY - Zero relative imports\n- ERROR RAISING - Tests designed to fail hard, no try/except masking\n- REAL BEHAVIOR VALIDATION - Test actual secret loading with realistic scenarios\n",
      "test_methods": [
        "test_auth_secret_loader_class_exists",
        "test_all_methods_are_static",
        "test_get_jwt_secret_with_central_validator_success",
        "test_get_jwt_secret_central_validator_failure",
        "test_get_jwt_secret_no_central_validator_available",
        "test_get_jwt_secret_validator_instantiation_error",
        "test_get_google_client_id_success_with_environment_logging",
        "test_get_google_client_id_validation_failure",
        "test_get_google_client_secret_success_with_environment_logging",
        "test_get_google_client_secret_validation_failure",
        "test_oauth_methods_fail_without_central_validator",
        "test_get_database_url_from_postgres_variables_development",
        "test_get_database_url_from_postgres_variables_staging_with_ssl",
        "test_get_database_url_cloud_sql_configuration",
        "test_get_database_url_missing_required_variables",
        "test_get_database_url_secret_manager_fallback_staging",
        "test_get_e2e_oauth_simulation_key_staging_environment_variable",
        "test_get_e2e_oauth_simulation_key_staging_secret_manager",
        "test_get_e2e_oauth_simulation_key_non_staging_environment_denied",
        "test_get_e2e_oauth_simulation_key_staging_not_configured",
        "test_load_from_secret_manager_success",
        "test_load_from_secret_manager_no_gcp_project",
        "test_load_from_secret_manager_import_error",
        "test_load_from_secret_manager_access_error",
        "test_load_from_secret_manager_configuration_error",
        "test_all_methods_handle_environment_access_errors",
        "test_secret_loading_with_invalid_central_validator_response",
        "test_oauth_credential_loading_with_unicode_handling",
        "test_database_url_construction_respects_environment_precedence",
        "test_secret_loader_methods_maintain_service_independence",
        "test_jwt_secret_loading_prevents_authentication_failures",
        "test_oauth_credentials_support_multi_environment_isolation",
        "test_database_url_construction_supports_multiple_deployment_patterns",
        "test_e2e_bypass_key_enables_staging_testing_while_maintaining_security"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_startup_optimizer_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_startup_optimizer_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 22,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for AuthServiceStartupOptimizer SSOT Class\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - All (Free, Early, Mid, Enterprise)\n- Business Goal: Platform Stability & Performance - Ensure sub-5 second auth service startup\n- Value Impact: Fast service initialization directly impacts user experience and system availability\n- Strategic Impact: Critical infrastructure reliability - auth service must start quickly for all user flows\n\nCRITICAL REQUIREMENTS:\n- NO business logic mocks (use real AuthServiceStartupOptimizer instances)\n- ALL tests MUST be designed to FAIL HARD in every way\n- Use ABSOLUTE IMPORTS only (no relative imports)\n- Tests must RAISE ERRORS - DO NOT USE try/except blocks in tests\n- CHEATING ON TESTS = ABOMINATION\n- Real async behavior testing with proper timing validation\n- Race condition detection for concurrent initialization\n\nThis test suite covers the 336-line AuthServiceStartupOptimizer SSOT class with:\n- Real instances (no business logic mocks)\n- Startup timing validation\n- Component initialization testing\n- Parallel vs sequential execution validation\n- Error handling and recovery patterns\n- Performance optimization verification\n- Concurrent execution safety\n- Lazy loading patterns\n- Metrics collection validation\n",
      "test_methods": [
        "test_startup_metrics_initialization_default",
        "test_startup_metrics_initialization_with_values",
        "test_startup_metrics_post_init_creates_empty_collections",
        "test_startup_optimizer_initialization",
        "test_startup_optimizer_singleton_pattern",
        "test_is_component_ready_false_when_not_initialized",
        "test_is_component_ready_true_when_initialized",
        "test_get_startup_report_initial_state",
        "test_get_startup_report_with_initialized_components",
        "test_get_startup_report_with_failed_components",
        "test_get_startup_report_with_critical_component_failures",
        "test_get_startup_report_security_components_critical_failure",
        "test_lazy_load_component_first_time",
        "test_lazy_load_component_second_access",
        "test_lazy_load_component_loader_exception",
        "test_lazy_load_component_timing_recorded",
        "test_concurrent_lazy_loading_same_component",
        "test_component_timing_precision",
        "test_empty_startup_metrics",
        "test_very_long_component_names",
        "test_component_ready_special_characters",
        "test_startup_optimizer_singleton_business_value"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/auth_service/tests/unit/test_token_validator_comprehensive.py",
      "relative_path": "auth_service/tests/unit/test_token_validator_comprehensive.py",
      "category": "unit",
      "service": "auth",
      "test_count": 49,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for TokenValidator SSOT class - Core JWT token operations\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Ensure core JWT token creation and validation security\n- Value Impact: Secure token management enables trusted user authentication across platform\n- Strategic Impact: Foundation for multi-user system authentication and authorization\n\nCRITICAL: TokenValidator is the SSOT for basic JWT operations in auth service.\nThis test suite validates all token operations fail hard when system breaks.\n\nTest Categories:\n- Token Creation (create_token method)\n- Token Validation (validate_token method) \n- JWT Algorithm Security (HS256)\n- Datetime Conversion Handling\n- Error Scenarios and Edge Cases\n- Security Patterns and Vulnerabilities\n- Performance Characteristics\n\nCHEATING ON TESTS = ABOMINATION\nAll tests use real TokenValidator instances with no business logic mocks.\n",
      "test_methods": [
        "test_token_validator_initialization",
        "test_create_token_basic_user_data",
        "test_create_token_with_expiration_datetime",
        "test_create_token_with_naive_datetime_assumes_utc",
        "test_create_token_with_aware_datetime_preserves_timezone",
        "test_create_token_preserves_user_data",
        "test_create_token_makes_copy_of_user_data",
        "test_validate_valid_token_success",
        "test_validate_token_verifies_expiration",
        "test_validate_token_verifies_signature",
        "test_validate_malformed_token_fails",
        "test_validate_token_with_wrong_algorithm",
        "test_validate_token_with_wrong_secret",
        "test_validate_token_future_issued_time",
        "test_algorithm_is_secure",
        "test_secret_key_is_configured",
        "test_rejects_none_algorithm_tokens",
        "test_token_tampering_detection",
        "test_handles_injection_attempts_in_user_data",
        "test_large_payload_handling",
        "test_special_characters_in_user_data",
        "test_datetime_conversion_utc_aware",
        "test_datetime_conversion_naive_assumes_utc",
        "test_datetime_conversion_non_utc_timezone",
        "test_non_datetime_exp_preserved",
        "test_multiple_datetime_fields_handled",
        "test_edge_case_datetime_values",
        "test_create_token_empty_user_data",
        "test_create_token_none_user_data_fails",
        "test_create_token_non_dict_user_data_fails",
        "test_validate_token_empty_string_fails",
        "test_validate_token_none_fails",
        "test_validate_token_non_string_fails",
        "test_create_token_with_circular_reference_fails",
        "test_create_token_with_non_serializable_data_fails",
        "test_token_creation_is_deterministic",
        "test_token_validation_is_consistent",
        "test_handles_concurrent_operations",
        "test_memory_usage_with_large_tokens",
        "test_user_authentication_scenario",
        "test_service_to_service_authentication",
        "test_temporary_access_token_scenario",
        "test_api_key_style_long_lived_token",
        "test_multi_tenant_scenario",
        "test_prevents_algorithm_confusion_attack",
        "test_prevents_key_confusion_attack",
        "test_prevents_timing_attacks_on_validation",
        "test_handles_jwt_header_injection",
        "test_consistent_error_handling_across_invalid_inputs"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/backup/url_migration/20250909_104154/backup/url_migration/tests/e2e/test_auth_flow_comprehensive.py",
      "relative_path": "backup/url_migration/20250909_104154/backup/url_migration/tests/e2e/test_auth_flow_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/backup/url_migration/20250909_104154/tests/unit/test_deploy_to_gcp_comprehensive.py",
      "relative_path": "backup/url_migration/20250909_104154/tests/unit/test_deploy_to_gcp_comprehensive.py",
      "category": "unit",
      "service": "global",
      "test_count": 40,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for scripts/deploy_to_gcp.py\n\nThis test suite provides comprehensive coverage of the GCP deployment script's\nbusiness logic, configuration management, and error detection capabilities.\n\nCRITICAL MISSION: Test deployment infrastructure without actually deploying\n- Tests configuration validation and creation\n- Tests Docker build command generation\n- Tests GCP service configuration building\n- Tests environment variable processing\n- Tests secret management logic\n- Tests error detection and validation\n\nARCHITECTURE COMPLIANCE:\n- \u2705 ZERO MOCKS - Uses real implementations and dependency injection only\n- \u2705 NO try/except blocks - Tests fail hard as required by CLAUDE.md\n- \u2705 Real SSOT imports and integrations\n- \u2705 Real object creation and validation testing\n- \u2705 Windows-compatible path handling\n- \u2705 Tests real business logic and configuration validation\n- \u2705 All mock violations removed (lines 304, 321, 338, 340 fixed)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Prevent deployment failures and outages\n- Value Impact: Catch configuration errors before production\n- Strategic Impact: Ensures reliable deployment infrastructure\n",
      "test_methods": [
        "test_service_config_creation_backend",
        "test_service_config_creation_auth",
        "test_service_config_creation_frontend",
        "test_service_config_defaults",
        "test_gcp_deployer_initialization_staging",
        "test_gcp_deployer_initialization_production",
        "test_gcp_deployer_alpine_vs_standard_configuration",
        "test_container_runtime_detection_logic",
        "test_frontend_environment_variables_validation_success",
        "test_frontend_environment_variables_validation_failure",
        "test_deployment_configuration_environment_requirements",
        "test_deployment_configuration_missing_environment_variables",
        "test_local_development_url_detection",
        "test_build_image_local_command_generation_backend",
        "test_build_image_cloud_configuration_generation",
        "test_dockerfile_creation_logic_backend",
        "test_dockerfile_creation_logic_frontend",
        "test_deploy_service_command_generation_backend",
        "test_deploy_service_environment_variables_processing",
        "test_frontend_critical_environment_variables_processing",
        "test_vpc_connector_and_cloud_sql_configuration",
        "test_secrets_config_integration",
        "test_critical_environment_variables_from_gsm_mapping",
        "test_oauth_configuration_mapping",
        "test_redis_configuration_mapping",
        "test_gcloud_validation_logic",
        "test_service_url_validation_logic",
        "test_health_check_endpoint_logic",
        "test_traffic_routing_logic",
        "test_deployment_phases_logic",
        "test_service_deployment_order",
        "test_rollback_planning_logic",
        "test_error_recovery_strategy",
        "test_windows_path_handling",
        "test_windows_command_execution_setup",
        "test_windows_encoding_setup",
        "test_cost_optimization_configuration",
        "test_deployment_reliability_features",
        "test_multi_environment_support",
        "test_security_configuration_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/backup/url_migration/tests/e2e/test_auth_flow_comprehensive.py",
      "relative_path": "backup/url_migration/tests/e2e/test_auth_flow_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/dev_launcher/tests/test_environment_source_tracking_comprehensive.py",
      "relative_path": "dev_launcher/tests/test_environment_source_tracking_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 8,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nenv = get_env()\nComprehensive Environment Variable Source Tracking Tests\n\nThis test module identifies and validates critical gaps in environment variable source tracking,\na core requirement from SPEC/unified_environment_management.xml for debugging environment conflicts.\n\nBusiness Value: Platform/Internal - Development Velocity and System Stability\nPrevents 60% reduction in environment-related debugging time by ensuring complete source traceability.\n\nCRITICAL MISSING COVERAGE:\n- Source tracking verification across multi-level operations\n- Source conflict detection and resolution\n- Source tracking persistence through isolation state changes\n- Thread-safe source tracking validation\n",
      "test_methods": [
        "test_source_tracking_for_all_set_operations",
        "test_source_tracking_overwrites_preserve_history",
        "test_source_tracking_across_isolation_state_changes",
        "test_source_tracking_thread_safety",
        "test_source_tracking_integration_with_file_loading",
        "test_source_tracking_error_when_no_source_provided",
        "test_source_tracking_retrieval_and_inspection",
        "test_source_tracking_with_subprocess_environment"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/dev_launcher/tests/test_parallel_executor_comprehensive.py",
      "relative_path": "dev_launcher/tests/test_parallel_executor_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 18,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive failing tests for ParallelTask system with focus on retry_count functionality.\n\nThese tests are designed to fail initially to expose issues in the ParallelTask retry system.\nThey stress-test edge cases, timing, dependencies, and error handling.\n",
      "test_methods": [
        "test_parallel_task_with_retry_count_success_on_second_attempt",
        "test_parallel_task_max_retries_exhausted",
        "test_parallel_task_retry_with_timeout",
        "test_parallel_task_dependency_with_retry",
        "test_parallel_executor_mixed_retry_tasks",
        "test_parallel_task_retry_delay_progression",
        "test_parallel_task_retry_count_zero_fails_immediately",
        "test_parallel_executor_batch_with_retries",
        "test_parallel_task_exception_types_in_retry",
        "test_parallel_executor_performance_with_retries",
        "test_parallel_task_concurrent_modifications_during_retry",
        "test_parallel_task_memory_pressure_with_retries",
        "test_parallel_task_nested_exception_chains_in_retry",
        "test_parallel_task_retry_with_changing_environment",
        "test_parallel_task_retry_statistics_accuracy",
        "test_parallel_task_retry_with_resource_cleanup",
        "test_parallel_task_retry_with_dynamic_timeout_adjustment",
        "test_parallel_task_cascade_retry_failure_recovery"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/google-cloud-sdk/platform/gsutil/gslib/tests/test_tabcomplete.py",
      "relative_path": "google-cloud-sdk/platform/gsutil/gslib/tests/test_tabcomplete.py",
      "category": "unknown",
      "service": "global",
      "test_count": 16,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Integration tests for tab completion.",
      "test_methods": [
        "test_single_bucket",
        "test_bucket_only_single_bucket",
        "test_bucket_only_no_objects",
        "test_single_subdirectory",
        "test_multiple_buckets",
        "test_single_object",
        "test_multiple_objects",
        "test_subcommands",
        "test_invalid_partial_bucket_name",
        "test_acl_argument",
        "test_cached_results",
        "test_expired_cached_results",
        "test_prefix_caching",
        "test_prefix_caching_boundary",
        "test_prefix_caching_no_results",
        "test_prefix_caching_partial_results"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/agents/test_data_sub_agent_comprehensive.py",
      "relative_path": "netra_backend/tests/agents/test_data_sub_agent_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/agents/test_triage_sub_agent_comprehensive.py",
      "relative_path": "netra_backend/tests/agents/test_triage_sub_agent_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive tests for TriageSubAgent - modular architecture compliant\nSplit into focused test modules to comply with 450-line file limit and 25-line function limit\n\nThis file serves as the main entry point that imports all the split test modules.\nEach module focuses on a specific aspect of testing with functions \u22648 lines.\n",
      "test_methods": [
        "test_architectural_compliance"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/critical/test_websocket_json_serialization_comprehensive.py",
      "relative_path": "netra_backend/tests/critical/test_websocket_json_serialization_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket JSON Serialization Tests\n\nTests all WebSocket components for JSON serialization safety, preventing\n\"Object of type WebSocketState is not JSON serializable\" errors in staging.\n\nThese tests validate the fixes applied in ultimate test deploy loop Cycle 3.\n",
      "test_methods": [
        "test_safe_websocket_state_logging_function",
        "test_unified_websocket_auth_connection_states_serialization",
        "test_unified_websocket_auth_stats_json_serialization",
        "test_unified_authentication_service_debug_logging",
        "test_websocket_state_enum_direct_serialization_fails",
        "test_all_websocket_states_safe_logging",
        "test_websocket_error_handling_json_serialization",
        "test_staging_gcp_cloud_run_logging_scenario",
        "test_end_to_end_websocket_flow_json_safety",
        "test_prevention_of_future_websocket_json_bugs"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/database/test_repositories_comprehensive_index.py",
      "relative_path": "netra_backend/tests/database/test_repositories_comprehensive_index.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/e2e/test_agent_execution_core_complete_flow.py",
      "relative_path": "netra_backend/tests/e2e/test_agent_execution_core_complete_flow.py",
      "category": "e2e",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Execution Core Complete E2E Flow Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free \u2192 Enterprise)\n- Business Goal: Validate complete agent execution delivers end-to-end user value\n- Value Impact: E2E tests ensure agents work in realistic production-like scenarios\n- Strategic Impact: Confidence in complete system delivering business insights to real users\n\nThis test suite validates Agent Execution Core functionality through complete\nend-to-end testing with authentication, real WebSocket connections, and\nfull system integration, focusing on actual user value delivery scenarios.\n\n\ud83d\udea8 CRITICAL: ALL E2E TESTS MUST USE AUTHENTICATION\nThis ensures proper multi-user isolation and real-world scenario testing.\n\nCRITICAL REQUIREMENTS VALIDATED:\n- Complete agent execution flow with JWT authentication\n- Real WebSocket connections with authenticated users\n- Multi-user execution context isolation in production-like environment  \n- Full system integration including trace context and metrics\n- Error handling and recovery in realistic network conditions\n- Performance validation under real system load\n- Business value delivery measurement and validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/e2e/test_startup_complete_e2e.py",
      "relative_path": "netra_backend/tests/e2e/test_startup_complete_e2e.py",
      "category": "e2e",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete End-to-End Tests for Startup System\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Mission Critical Business Infrastructure\n- Business Goal: Validate complete startup system works end-to-end across real environments\n- Value Impact: Ensures startup reliability prevents chat system outages (90% of business value)\n- Strategic Impact: $25M+ ARR protection through elimination of production startup failures\n\nThis E2E test suite validates the COMPLETE startup system integration including:\n1. Real service dependencies (database, Redis, auth)\n2. Complete startup sequence from SMD deterministic orchestrator\n3. WebSocket integration for chat functionality\n4. Multi-user authentication and session management \n5. Agent supervisor creation and WebSocket bridge integration\n6. Real-time event delivery for chat user experience\n7. Performance validation under realistic load\n8. Error handling and recovery patterns\n9. Cross-environment validation (test, staging patterns)\n10. Business continuity validation\n\nCRITICAL REQUIREMENTS:\n- ALL tests MUST use authentication (JWT/OAuth) per CLAUDE.md E2E auth mandate\n- Use REAL services - database, Redis, WebSocket connections\n- NO mocks allowed in E2E tests - must test real system integration\n- Tests MUST fail hard when system breaks - NO exception masking\n- Follow SSOT patterns from test_framework/ssot/\n- Validate business-critical chat functionality end-to-end\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/e2e/test_websocket_agent_events_comprehensive.py",
      "relative_path": "netra_backend/tests/e2e/test_websocket_agent_events_comprehensive.py",
      "category": "e2e",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Agent Event Flow Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure chat functionality delivers real-time value to users\n- Value Impact: Users must receive all 5 critical WebSocket events for meaningful AI interactions\n- Strategic Impact: Core revenue driver - chat is 90% of our delivered value per CLAUDE.md\n\nMISSION CRITICAL: This test validates that WebSocket agent events enable substantive chat value.\nAll 5 WebSocket events MUST be sent during agent execution per CLAUDE.md section 6:\n1. agent_started - User must see agent began processing their problem\n2. agent_thinking - Real-time reasoning visibility (shows AI is working on valuable solutions)  \n3. tool_executing - Tool usage transparency (demonstrates problem-solving approach)\n4. tool_completed - Tool results display (delivers actionable insights)\n5. agent_completed - User must know when valuable response is ready\n\nCRITICAL: Uses real Docker services (PostgreSQL, Redis, Backend) and real agent execution.\nNO MOCKS per CLAUDE.md \"MOCKS = Abomination\".\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/e2e/test_websocket_authentication_comprehensive.py",
      "relative_path": "netra_backend/tests/e2e/test_websocket_authentication_comprehensive.py",
      "category": "e2e",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Authentication E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Authentication is universal\n- Business Goal: Ensure secure, reliable WebSocket authentication for all users\n- Value Impact: Prevents authentication failures that cause user churn and security breaches\n- Strategic Impact: Critical security foundation enabling $200K+ MRR protection\n\nThis test suite validates:\n1. Valid JWT authentication succeeds with proper user context\n2. Invalid JWT authentication fails with 403 errors\n3. Expired JWT authentication fails appropriately\n4. Missing JWT authentication fails with 403\n5. OAuth token exchange works properly\n6. Multi-user isolation (users cannot access each other's data)\n7. Token refresh during active connection works\n8. WebSocket disconnections are handled gracefully\n\nCRITICAL: Uses real Docker services, real JWT tokens, proper SSOT patterns\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/e2e/test_websocket_notifier_complete_e2e.py",
      "relative_path": "netra_backend/tests/e2e/test_websocket_notifier_complete_e2e.py",
      "category": "e2e",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Notifier Complete E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free \u2192 Enterprise)\n- Business Goal: Validate real-time notifications work in production-like environment\n- Value Impact: E2E tests ensure users receive timely feedback for engagement and transparency\n- Strategic Impact: Real-time notifications are critical for user retention and platform stickiness\n\nThis test suite validates WebSocket Notifier functionality through complete\nend-to-end testing with authentication, real WebSocket connections, and\nproduction-like infrastructure, ensuring users receive reliable real-time feedback.\n\n\ud83d\udea8 CRITICAL: ALL E2E TESTS MUST USE AUTHENTICATION\nThis ensures proper multi-user isolation and real-world scenario testing.\n\n\u26a0\ufe0f DEPRECATION NOTE: WebSocketNotifier is deprecated in favor of AgentWebSocketBridge.\nThese E2E tests validate the complete notification flow for backward compatibility.\n\nCRITICAL REQUIREMENTS VALIDATED:\n- Real WebSocket notification delivery with authentication\n- Multi-user notification isolation in production environment\n- Complete agent lifecycle notification flows  \n- Error notification handling with real WebSocket connections\n- Performance under realistic network conditions\n- Message ordering and timing in real scenarios\n- User engagement metrics and notification effectiveness\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/agents/supervisor/test_agent_execution_core_comprehensive_integration.py",
      "relative_path": "netra_backend/tests/integration/agents/supervisor/test_agent_execution_core_comprehensive_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Agent Execution Core Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure reliable agent execution across all system components\n- Value Impact: Agents must execute reliably to deliver optimization insights\n- Strategic Impact: Core platform functionality - agents are our primary value delivery mechanism\n\nIntegration Points Tested:\n1. Agent execution with real database persistence  \n2. WebSocket event delivery across components\n3. Tool dispatcher coordination during execution\n4. User context isolation in multi-user scenarios\n5. Execution tracking and monitoring integration\n6. Error boundary and timeout protection\n7. State management across execution lifecycle\n8. Trace context propagation between services\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/agents/test_agent_execution_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/agents/test_agent_execution_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Agent Execution Integration Tests - 25 Real Business Scenarios\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Core AI execution functionality  \n- Business Goal: Validate complete agent lifecycle for delivering substantive AI value\n- Value Impact: CRITICAL - Agent execution is the core business value delivery mechanism\n- Strategic Impact: $1M+ ARR depends on reliable agent startup, execution, and completion\n\nEMPHASIS: Chat Business Value - These tests ensure COMPLETE value of AI-powered interactions:\n- Real Solutions through proper agent execution\n- Helpful responses via reliable state management  \n- Timely updates through WebSocket event delivery\n- Complete Business Value via end-to-end agent workflows\n- Business IP protection through proper context isolation\n\nCRITICAL REQUIREMENTS:\n1. NO MOCKS - Uses real components with in-memory databases only\n2. ALL 5 WebSocket events MUST be validated: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n3. Multi-user isolation through UserExecutionContext\n4. Real agent implementations (DataHelperAgent, SupplyResearcherAgent, etc.)\n5. Performance and error scenarios for business resilience\n6. Independent and runnable tests following pytest best practices\n\nThis comprehensive test suite validates the complete agent execution infrastructure\nthat enables the platform to deliver AI-powered solutions to users.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/agents/test_tool_dispatcher_integration_comprehensive_batch2.py",
      "relative_path": "netra_backend/tests/integration/agents/test_tool_dispatcher_integration_comprehensive_batch2.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for Tool Dispatcher System - Batch 2 Comprehensive Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Development Velocity\n- Business Goal: Validate tool dispatcher system works with real services\n- Value Impact: Prevents integration failures that would break agent workflows\n- Strategic Impact: Core platform functionality enabling all AI agent capabilities\n\nIntegration Focus:\n1. Tool dispatcher with real registry and validation services\n2. WebSocket event emission through real connections\n3. Tool execution with real state management\n4. Error handling with real error conditions\n5. User context isolation with real user execution contexts\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/api/test_api_endpoint_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/api/test_api_endpoint_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive API Endpoint Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure API endpoints deliver reliable optimization services\n- Value Impact: API reliability enables frontend and third-party integrations\n- Strategic Impact: APIs are the primary interface for delivering platform value\n\nIntegration Points Tested:\n1. API endpoint integration with business logic layer\n2. Authentication and authorization integration  \n3. Request validation and response formatting\n4. Error handling across API boundaries\n5. WebSocket integration triggered by API calls\n6. Database persistence through API operations\n7. Multi-user request isolation at API level\n8. Performance and rate limiting integration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/api/test_health_endpoint_security_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/api/test_health_endpoint_security_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Health Endpoint Security Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal, All customer tiers  \n- Business Goal: System security and monitoring reliability\n- Value Impact: Prevents security breaches and ensures reliable monitoring\n- Strategic Impact: Foundation for production monitoring and security\n\nCRITICAL REQUIREMENTS:\n- Tests real API endpoint security with authentication\n- Validates input sanitization and authorization\n- Ensures monitoring data is protected\n- No mocks - uses real FastAPI endpoints\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/business/test_agent_execution_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/business/test_agent_execution_business_logic_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Execution Business Logic Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Core product functionality and value delivery\n- Value Impact: Ensures agents deliver consistent business value to users\n- Strategic Impact: Foundation of competitive advantage and user satisfaction\n\nCRITICAL REQUIREMENTS:\n- Tests real agent execution with business logic validation\n- Validates agent output quality and consistency\n- Ensures proper resource allocation and limits\n- No mocks - uses real agent execution system\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/business/test_user_credit_system_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/business/test_user_credit_system_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest User Credit System Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Revenue protection and credit system integrity\n- Value Impact: Prevents revenue leakage and ensures accurate billing\n- Strategic Impact: Foundation for monetization and subscription management\n\nCRITICAL REQUIREMENTS:\n- Tests real credit deduction and management logic\n- Validates billing accuracy and subscription enforcement\n- Ensures no credit overselling or revenue leakage\n- No mocks - uses real business logic with database\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/concurrency/test_concurrent_execution_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/concurrency/test_concurrent_execution_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Concurrent Execution Integration Tests\n\nTests multi-user scenarios, race conditions, and performance under load\nto ensure the system can deliver business value to multiple concurrent users\nwhile maintaining data integrity and performance.\n\nIntegration Level: Tests complete system under concurrent load with real services.\nNO MOCKS except for external LLM APIs.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/config/test_environment_configuration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/config/test_environment_configuration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Environment Configuration Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Configuration reliability and environment stability\n- Value Impact: Prevents configuration-related outages and security breaches\n- Strategic Impact: Foundation for reliable multi-environment deployments\n\nCRITICAL REQUIREMENTS:\n- Tests real environment configuration loading\n- Validates configuration isolation between environments\n- Ensures sensitive data protection\n- No mocks - uses real IsolatedEnvironment system\n",
      "test_methods": [
        "test_environment_variable_loading_and_isolation",
        "test_database_url_configuration_validation",
        "test_jwt_secret_configuration_consistency",
        "test_configuration_change_tracking_and_drift_detection",
        "test_multi_environment_configuration_scenarios",
        "test_configuration_security_and_sensitive_data_handling"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/core/tools/test_unified_tool_dispatcher_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/core/tools/test_unified_tool_dispatcher_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Tool Dispatcher Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable tool execution across system components\n- Value Impact: Tools enable agents to deliver actionable optimization insights  \n- Strategic Impact: Tool execution is core to our AI-powered optimization platform\n\nIntegration Points Tested:\n1. Tool dispatcher cross-component coordination\n2. WebSocket event integration during tool execution\n3. User context isolation in tool dispatch\n4. Database integration for tool result persistence\n5. Permission system integration with tool security\n6. Tool registry coordination with execution engine\n7. Error handling and recovery across tool boundaries\n8. Performance monitoring and metrics collection\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/database/test_database_migration_integrity_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/database/test_database_migration_integrity_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Database Migration Integrity Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Data integrity during system upgrades\n- Value Impact: Prevents data corruption and business continuity disruption\n- Strategic Impact: Enables safe system evolution and feature deployment\n\nCRITICAL REQUIREMENTS:\n- Tests real database migration scenarios\n- Validates data integrity across schema changes\n- Ensures backward compatibility and rollback safety\n- No mocks - uses real database migration tools\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/database/test_postgresql_transactions_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/database/test_postgresql_transactions_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest PostgreSQL Transactions Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Data integrity and transactional consistency\n- Value Impact: Prevents data corruption and ensures business logic integrity\n- Strategic Impact: Foundation for reliable user data and business operations\n\nCRITICAL REQUIREMENTS:\n- Tests real PostgreSQL database with transactions\n- Validates ACID properties and consistency\n- Ensures data integrity under concurrent access\n- No mocks - uses real database connections\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/error_handling/test_comprehensive_error_handling_integration.py",
      "relative_path": "netra_backend/tests/integration/error_handling/test_comprehensive_error_handling_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Error Handling Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure system reliability across service boundaries\n- Value Impact: Validates error propagation and recovery with real services\n- Strategic Impact: Prevents cascade failures that could cause platform outages\n\nThese tests validate error handling with real PostgreSQL, Redis, WebSocket\nconnections, and service integrations. NO MOCKS for infrastructure components.\n\nCRITICAL: Integration-level error handling prevents single component failures\nfrom bringing down the entire platform, protecting customer experience.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_advanced_tool_pipeline_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_advanced_tool_pipeline_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAdvanced Tool Pipeline and Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure complex tool pipelines deliver reliable AI analysis results\n- Value Impact: Validates sophisticated agent tool chains that provide deep business insights\n- Strategic Impact: CRITICAL for competitive differentiation - complex analysis = higher value\n\nADVANCED TOOL PIPELINE TEST SCENARIOS:\n1. Complex multi-tool chaining with dependency validation\n2. Tool error propagation and recovery mechanisms\n3. Tool output transformation and data flow validation\n4. Parallel tool execution with result aggregation\n5. Tool timeout handling and circuit breaker patterns\n6. Dynamic tool selection and execution path optimization\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - Real tool execution and data processing\n- E2E authentication throughout tool pipeline\n- WebSocket events for all tool execution stages\n- Performance benchmarks for complex tool chains\n- Data integrity validation through entire pipeline\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_agent_execution_database_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_agent_execution_database_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Execution with Real Database Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure agent execution works reliably with real database\n- Value Impact: Agents deliver 90% of our business value - must work with real data persistence\n- Strategic Impact: Critical for $500K+ ARR - agent failures = no insights = no customer value\n\nThis test validates Critical Issue #2 from Golden Path:\n\"Missing Service Dependencies\" - Agent supervisor and thread service not always available\nduring WebSocket connection, affecting agent execution pipeline.\n\nCRITICAL REQUIREMENTS:\n1. Test complete agent pipeline (Triage\u2192Data Helper\u2192UVS Reporting) with real DB\n2. Test agent result persistence to PostgreSQL\n3. Test thread management and conversation history\n4. Test agent state recovery from database\n5. NO MOCKS for PostgreSQL/Redis - only external APIs (LLM, OAuth)\n6. Use E2E authentication for all agent executions\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_agent_execution_pipeline_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_agent_execution_pipeline_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Execution Pipeline State Transitions - Golden Path Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure agents progress through complete execution states to deliver value\n- Value Impact: Users receive complete responses with actionable insights and recommendations\n- Strategic Impact: Core business functionality - agents must transition from started to completed states\n\nCRITICAL REQUIREMENTS:\n1. Test agent state transitions: started \u2192 thinking \u2192 tool_executing \u2192 tool_completed \u2192 completed\n2. Validate WebSocket events are sent for each state transition\n3. Test real database persistence at each stage\n4. Test error recovery and graceful degradation\n5. Use real services only (NO MOCKS per CLAUDE.md)\n6. Validate business value is delivered in final state\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_agent_factory_real_database_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_agent_factory_real_database_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Factory + Real Database Integration Test - Golden Path Factory Patterns\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Platform - Agent Execution Infrastructure  \n- Business Goal: Validate factory patterns with real PostgreSQL dependencies\n- Value Impact: Ensures $500K+ ARR agent execution pipeline works reliably with database\n- Strategic Impact: Critical for multi-user agent isolation and resource management\n\nCRITICAL: This test validates REAL service interactions:\n- Real PostgreSQL for user/context persistence\n- Real agent factory creation with database dependencies  \n- Real user execution context isolation\n- NO MOCKS - Integration testing with actual database services\n\nTests core Golden Path: User connects \u2192 Agent factory creates \u2192 Database validates \u2192 Context isolates\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_agent_lifecycle_state_management_advanced.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_agent_lifecycle_state_management_advanced.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAdvanced Agent Lifecycle and State Management Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure agent state persistence and lifecycle management for reliable AI operations\n- Value Impact: Validates complex agent execution scenarios that deliver consistent business value\n- Strategic Impact: CRITICAL for enterprise customers - agents must maintain state across failures\n\nADVANCED TEST SCENARIOS:\n1. Agent state persistence across system restarts\n2. Complex agent lifecycle transitions with state validation\n3. Agent execution with memory constraints and cleanup\n4. Concurrent agent state management with isolation\n5. Agent state recovery from partial failures\n6. Long-running agent state consistency validation\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - Real services for all database/cache operations\n- E2E authentication throughout all tests\n- WebSocket events validation for all agent state changes\n- Performance benchmarks for state persistence operations\n- Resource cleanup and memory management validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_agent_response_quality_validation.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_agent_response_quality_validation.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Response Quality Validation Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure agents deliver high-quality, actionable business insights\n- Value Impact: Quality responses directly correlate with user retention and value realization\n- Strategic Impact: Response quality is core differentiator for $500K+ ARR target\n\nCOVERAGE FOCUS:\n1. Response content accuracy and relevance validation\n2. Business value metrics in agent outputs  \n3. Response completeness and actionability testing\n4. Multi-agent response consistency validation\n5. Response formatting and structure verification\n6. Error handling and fallback response quality\n7. Domain-specific expertise validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_authentication_real_services_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_authentication_real_services_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Authentication Integration with Real Services\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure authentication works with real database and session management\n- Value Impact: Authentication enables secure multi-user access and proper billing/limits\n- Strategic Impact: Critical for $500K+ ARR - authentication failures = no user access = no revenue\n\nCRITICAL REQUIREMENTS:\n1. Test JWT validation with real database user lookup\n2. Test session persistence with Redis\n3. Test multi-user authentication isolation\n4. Test authentication failure handling\n5. NO MOCKS for PostgreSQL/Redis - real authentication validation\n6. Use E2E authentication patterns throughout\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_complete_golden_path_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_complete_golden_path_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete Golden Path Flow Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Validate end-to-end Golden Path user journey\n- Value Impact: Complete flow validation ensures entire user experience works\n- Strategic Impact: MISSION CRITICAL for $500K+ ARR - this IS the business\n\nThis test validates the COMPLETE Golden Path from the GOLDEN_PATH_USER_FLOW_COMPLETE.md:\n1. WebSocket Connection & Authentication\n2. Message Routing & Agent Selection\n3. Agent Execution Pipeline (Triage\u2192Data Helper\u2192UVS Reporting)\n4. WebSocket Events & Real-time Updates\n5. Result Persistence & User Response\n\nCRITICAL REQUIREMENTS:\n1. Test abbreviated golden path flow with real services but no LLM\n2. Test data persistence at each stage\n3. Test error recovery with real service failures\n4. Test performance benchmarks for business SLAs\n5. NO MOCKS for core services - real end-to-end validation\n6. Use E2E authentication throughout entire flow\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_cost_optimization_data_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_cost_optimization_data_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Cost Optimization Data Integration\n\nBusiness Value Justification (BVJ):\n- Segment: Mid, Enterprise (primary cost optimization users)\n- Business Goal: Ensure cost optimization analysis works with real data sources\n- Value Impact: Cost optimization is core value prop - delivers quantifiable ROI to users\n- Strategic Impact: MISSION CRITICAL for $500K+ ARR - cost savings = primary customer value\n\nCRITICAL REQUIREMENTS:\n1. Test cost analysis with real database queries\n2. Test optimization result persistence\n3. Test historical cost tracking\n4. Test business value calculations with real data\n5. NO MOCKS for PostgreSQL/Redis - real cost data analysis\n6. Use E2E authentication for all cost operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_enterprise_multiuser_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_enterprise_multiuser_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Enterprise Multi-User Integration\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise (primary revenue driver)\n- Business Goal: Ensure Enterprise multi-user scenarios work flawlessly\n- Value Impact: Enterprise accounts generate highest revenue per user\n- Strategic Impact: CRITICAL for $500K+ ARR - Enterprise users = 70%+ of revenue\n\nCRITICAL REQUIREMENTS:\n1. Test 10+ concurrent Enterprise users with real services\n2. Test user isolation at database level\n3. Test resource allocation and limits\n4. Test billing/usage tracking with real data\n5. NO MOCKS for PostgreSQL/Redis - real Enterprise-scale testing\n6. Use E2E authentication for all Enterprise operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_error_recovery_resilience.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_error_recovery_resilience.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Error Recovery and Resilience Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure system gracefully handles errors while maintaining user value delivery\n- Value Impact: Resilient systems maintain user trust and minimize revenue loss during failures\n- Strategic Impact: System reliability is critical for enterprise customers and $500K+ ARR\n\nCOVERAGE FOCUS:  \n1. Database connection failure recovery testing\n2. Redis cache failure graceful degradation\n3. Agent execution error recovery mechanisms  \n4. WebSocket connection resilience testing\n5. Partial system failure golden path continuation\n6. Data consistency during error scenarios\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_jwt_token_refresh_agent_execution_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_jwt_token_refresh_agent_execution_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest JWT Token Refresh During Active Agent Execution Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure seamless user experience when JWT tokens expire during agent execution\n- Value Impact: Prevents session interruptions that could cause customer churn and revenue loss\n- Strategic Impact: CRITICAL for $500K+ ARR - token refresh failures = broken user sessions = lost revenue\n\nCRITICAL GOLDEN PATH SCENARIO:\nThis test validates a critical missing scenario identified in golden path analysis:\n1. User starts an agent execution with a JWT token that will expire during execution\n2. During agent execution, the JWT token expires\n3. Token gets refreshed automatically without user intervention\n4. Agent execution continues seamlessly without interruption\n5. User receives all expected WebSocket events throughout the process\n6. Final result is delivered successfully with refreshed authentication\n\nREQUIREMENTS:\n1. REAL INTEGRATION TEST - NO MOCKS for PostgreSQL, Redis, WebSocket connections\n2. Must use SSOT patterns from test_framework/\n3. Must validate JWT token refresh during active agent workflow\n4. Must ensure all 5 critical WebSocket events are sent (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n5. Must FAIL HARD if token refresh doesn't work properly\n6. Must validate seamless user experience throughout token transition\n7. Must use real_services_fixture for database and cache operations\n8. Must follow TEST_CREATION_GUIDE.md patterns exactly\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_message_lifecycle_real_services_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_message_lifecycle_real_services_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMessage Lifecycle + Real Services Integration Test - Golden Path Complete Flow\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Platform - Complete Message Flow\n- Business Goal: Validate complete message lifecycle from WebSocket to Database to Redis to Response\n- Value Impact: Ensures $500K+ ARR chat message flow works reliably end-to-end\n- Strategic Impact: Critical for user experience - message persistence, retrieval, and real-time delivery\n\nCRITICAL: This test validates REAL service interactions:\n- Real PostgreSQL for message persistence and history\n- Real Redis for message caching and real-time data\n- Real WebSocket connections for message delivery\n- NO MOCKS - Integration testing with actual message flow services\n\nTests core Golden Path: User sends message \u2192 WebSocket receives \u2192 Database stores \u2192 Redis caches \u2192 Agent processes \u2192 Response delivers\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_message_routing_persistence_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_message_routing_persistence_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Message Routing with Real Persistence Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure message routing works with real data persistence\n- Value Impact: Message routing enables proper agent execution and user interactions\n- Strategic Impact: Critical for $500K+ ARR - message failures = no agent responses = no value\n\nCRITICAL REQUIREMENTS:\n1. Test message routing with real database lookups\n2. Test message classification persistence\n3. Test priority routing for Enterprise users\n4. Test message queuing with Redis\n5. NO MOCKS for PostgreSQL/Redis - real message persistence\n6. Use E2E authentication for all message operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_multi_agent_workflow_coordination.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_multi_agent_workflow_coordination.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Multi-Agent Workflow Coordination - Golden Path Integration\n\nBusiness Value Justification (BVJ):\n- Segment: Early, Mid, Enterprise (multi-step workflows)\n- Business Goal: Enable complex multi-agent workflows that deliver comprehensive insights  \n- Value Impact: Users get complete analysis from multiple specialized agents working together\n- Strategic Impact: Differentiating capability - competitors lack coordinated multi-agent workflows\n\nCRITICAL REQUIREMENTS:\n1. Test agent coordination: Triage \u2192 Data Helper \u2192 UVS Reporting \u2192 Final Synthesis\n2. Test agent handoffs with context preservation between agents\n3. Test workflow state progression across multiple agents\n4. Test WebSocket events for entire multi-agent workflow\n5. Use real services only (NO MOCKS per CLAUDE.md)\n6. Validate business value delivered through agent collaboration\n\nMulti-Agent Workflow Stages:\n1. Triage Agent: Analyzes request and determines workflow path\n2. Data Helper Agent: Gathers and processes relevant data\n3. Specialized Agent (UVS/Cost/Security): Performs domain analysis  \n4. Synthesis Agent: Combines results into actionable recommendations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_multi_session_user_authentication_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_multi_session_user_authentication_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Multi-Session User Authentication Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Enable same user to access platform from multiple devices/browsers simultaneously\n- Value Impact: Critical for modern user experience - users expect seamless multi-device access\n- Strategic Impact: ESSENTIAL for $500K+ ARR - multi-device access prevents user frustration and churn\n\nCRITICAL REQUIREMENTS:\n1. Test same user authenticating from multiple sessions (devices/browsers) simultaneously\n2. Test session isolation - each session gets independent WebSocket events and agent contexts\n3. Test concurrent agent execution with proper user context isolation\n4. Test thread/conversation isolation between sessions\n5. NO MOCKS for PostgreSQL/Redis/WebSocket - real multi-session validation\n6. Use E2E authentication patterns throughout\n7. Validate that sessions don't interfere with each other\n8. Test FAIL HARD if multi-session isolation doesn't work properly\n\nThis test validates Critical Golden Path Issue:\n\"Multi-Session User Context Isolation\" - Same user from multiple devices must have\nindependent agent execution contexts and WebSocket event streams.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_multi_user_concurrency_isolation_advanced.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_multi_user_concurrency_isolation_advanced.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAdvanced Multi-User Concurrency and Isolation Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Mid and Enterprise (High-value multi-user scenarios)\n- Business Goal: Ensure system scales with concurrent users without data leakage\n- Value Impact: Validates enterprise-grade isolation and performance under load\n- Strategic Impact: CRITICAL for $1M+ ARR - enterprise customers require perfect isolation\n\nADVANCED MULTI-USER TEST SCENARIOS:\n1. High-concurrency user isolation with cross-user data validation\n2. Resource contention and fair allocation under extreme load  \n3. Database transaction isolation with concurrent user operations\n4. Memory and CPU resource isolation between user sessions\n5. WebSocket event isolation with hundreds of concurrent connections\n6. Agent execution isolation with overlapping tool usage\n7. Authentication and authorization isolation edge cases\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - Real services for all operations\n- E2E authentication for all users\n- Perfect isolation validation - zero cross-contamination\n- Performance benchmarks under extreme concurrent load\n- Resource cleanup and memory management validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_performance_timing_requirements.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_performance_timing_requirements.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Performance and Timing Requirements Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure system meets performance SLAs critical for user satisfaction\n- Value Impact: Response times directly correlate with user engagement and retention\n- Strategic Impact: Performance is competitive differentiator for $500K+ ARR target\n\nCOVERAGE FOCUS:\n1. Agent execution time validation under normal load\n2. WebSocket message delivery latency testing\n3. Database query performance under concurrent load\n4. System response time degradation testing\n5. Resource usage efficiency validation  \n6. Performance consistency across user sessions\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_race_condition_real_services.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_race_condition_real_services.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Real Services Race Condition Prevention\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prevent race conditions that cause user experience failures\n- Value Impact: Race condition prevention ensures reliable user interactions\n- Strategic Impact: Critical for $500K+ ARR - race conditions = user frustration = churn\n\nThis test validates Critical Issue #1 from Golden Path:\n\"Race Conditions in WebSocket Handshake\" - Cloud Run environments experience race conditions.\nAlso tests database and Redis race conditions that can occur with concurrent users.\n\nCRITICAL REQUIREMENTS:\n1. Test race condition prevention with real database locks\n2. Test concurrent user creation scenarios\n3. Test WebSocket handshake coordination via Redis\n4. Test distributed locking for critical sections\n5. NO MOCKS for PostgreSQL/Redis - real race condition testing\n6. Use E2E authentication for all concurrent operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_service_dependency_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_service_dependency_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Service Dependency Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure graceful degradation when services are unavailable\n- Value Impact: System resilience enables continuous operation during outages\n- Strategic Impact: Critical for $500K+ ARR - service failures should not break user experience\n\nThis test validates Critical Issue #2 from Golden Path:\n\"Missing Service Dependencies\" - Agent supervisor and thread service not always available\nduring WebSocket connection, requiring graceful degradation.\n\nCRITICAL REQUIREMENTS:\n1. Test graceful degradation when Redis is unavailable\n2. Test partial functionality when database is slow\n3. Test service health monitoring with real services\n4. Test fallback behavior validation\n5. NO MOCKS for PostgreSQL/Redis - test real service failures\n6. Use E2E authentication for all service interactions\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_thread_management_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_thread_management_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Thread Management Integration with Real Services\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure conversation thread management works with real persistence\n- Value Impact: Thread management enables conversation continuity and context preservation\n- Strategic Impact: Critical for $500K+ ARR - conversation history = user engagement = retention\n\nCRITICAL REQUIREMENTS:\n1. Test conversation thread creation/retrieval with PostgreSQL\n2. Test thread message persistence and ordering\n3. Test concurrent thread access patterns\n4. Test thread cleanup and archival\n5. NO MOCKS for PostgreSQL/Redis - real thread management\n6. Use E2E authentication for all thread operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_tool_execution_pipeline_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_tool_execution_pipeline_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Tool Execution Pipeline and Progression - Golden Path Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Tools enable all agent capabilities\n- Business Goal: Ensure tools execute reliably to deliver agent analysis capabilities\n- Value Impact: Tool execution enables data gathering, analysis, and actionable insights\n- Strategic Impact: Tools are the foundation of agent intelligence and business value delivery\n\nCRITICAL REQUIREMENTS:\n1. Test tool execution progression: tool_executing \u2192 tool_processing \u2192 tool_completed  \n2. Test tool result validation and business value extraction\n3. Test tool failure recovery and error handling\n4. Test tool execution within multi-agent workflows  \n5. Use real services only (NO MOCKS per CLAUDE.md)\n6. Validate tool outputs enable downstream agent processing\n\nTool Execution Flow:\n1. Tool Selection: Agent selects appropriate tool for task\n2. Tool Execution: Tool processes request with real data sources  \n3. Result Processing: Tool output is validated and formatted\n4. Result Integration: Tool results flow into agent reasoning\n5. WebSocket Events: Users see tool execution transparency\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_user_context_factory_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_user_context_factory_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest User Context Factory with Real Services Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure ExecutionEngineFactory creates proper user isolation\n- Value Impact: User isolation enables multi-tenancy and prevents data leaks\n- Strategic Impact: Critical for $500K+ ARR - multi-user system requires perfect isolation\n\nThis test validates Critical Issue #3 from Golden Path:\n\"Factory Initialization Failures\" - WebSocket manager factory can fail SSOT validation\ncausing 1011 errors due to improper user context creation.\n\nCRITICAL REQUIREMENTS:\n1. Test ExecutionEngineFactory with real database user lookup\n2. Test user isolation validation with multiple users\n3. Test factory initialization with real configuration\n4. Test SSOT compliance with real environment\n5. NO MOCKS for PostgreSQL/Redis - real user context creation\n6. Use E2E authentication for all factory operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_user_session_progression_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_user_session_progression_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest User Session and Context Progression Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure user sessions maintain context and progress across interactions\n- Value Impact: Users can build on previous conversations and maintain workflow continuity\n- Strategic Impact: Session continuity is critical for complex optimization workflows\n\nCOVERAGE FOCUS:\n1. Multi-turn conversation context preservation\n2. Session state consistency across WebSocket reconnections  \n3. User context isolation in multi-user scenarios\n4. Cross-session data persistence and retrieval\n5. Agent state progression tracking\n6. Session timeout and recovery mechanisms\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_advanced_edge_cases.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_advanced_edge_cases.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAdvanced WebSocket Connection and Messaging Edge Cases Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure WebSocket reliability for real-time AI interactions\n- Value Impact: Validates complex WebSocket scenarios that enable substantive chat experiences\n- Strategic Impact: CRITICAL for user engagement - WebSocket failures = lost customers\n\nADVANCED WEBSOCKET TEST SCENARIOS:\n1. Connection recovery from network interruptions\n2. Message ordering and delivery guarantees under load\n3. Large message handling and fragmentation\n4. Concurrent connection management per user\n5. WebSocket authentication edge cases and token refresh\n6. Message queue overflow and backpressure handling\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - Real WebSocket connections and message delivery\n- E2E authentication with token management\n- WebSocket events validation for all agent interactions\n- Performance benchmarks for message throughput\n- Connection resilience and automatic recovery testing\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_database_redis_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_database_redis_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket + Database + Redis Integration Test - Golden Path Service Interactions\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Platform - Multi-Service Chat Infrastructure\n- Business Goal: Validate complete WebSocket flow with real data persistence\n- Value Impact: Ensures $500K+ ARR Golden Path chat interactions work reliably \n- Strategic Impact: Critical for user experience - WebSocket events + database + cache coordination\n\nCRITICAL: This test validates REAL service interactions:\n- Real PostgreSQL for message/user persistence  \n- Real Redis for session/cache management\n- Real WebSocket connections with event delivery\n- NO MOCKS - Integration testing with actual services\n\nTests core Golden Path: User connects \u2192 Sends message \u2192 Database stores \u2192 Redis caches \u2192 WebSocket delivers\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_event_persistence_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_event_persistence_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Event Persistence Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure WebSocket events are persisted and auditable\n- Value Impact: WebSocket events provide transparency and trust - core to user experience\n- Strategic Impact: Critical for $500K+ ARR - missing events = poor UX = churn\n\nThis test validates Critical Issue #4 from Golden Path:\n\"Missing WebSocket Events\" - Not all required WebSocket events are sent, breaking user experience.\nThe 5 critical events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n\nCRITICAL REQUIREMENTS:\n1. Test all 5 WebSocket events are stored in real database\n2. Test event replay from database for user recovery\n3. Test event ordering validation and integrity\n4. Test event audit trail for business compliance\n5. NO MOCKS for PostgreSQL/Redis - use real event persistence\n6. Use E2E authentication for all event operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_handshake_timing_real_services.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_handshake_timing_real_services.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Handshake Timing + Real Services Integration Test - Golden Path Race Condition Handling\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Platform - WebSocket Connection Reliability\n- Business Goal: Validate WebSocket handshake timing with real service dependencies\n- Value Impact: Ensures $500K+ ARR WebSocket connections work reliably under load and race conditions\n- Strategic Impact: Critical for real-time user experience - connection failures = user frustration = churn\n\nCRITICAL: This test validates REAL service interactions:\n- Real PostgreSQL for user validation during handshake\n- Real Redis for session management and connection state\n- Real WebSocket connections with timing constraints\n- NO MOCKS - Integration testing with actual handshake timing\n\nTests core Golden Path: User connects \u2192 Handshake starts \u2192 Database validates \u2192 Redis stores \u2192 Connection establishes \u2192 Race conditions handled\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_message_handling_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_message_handling_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Message Handling and Event Sequence - Golden Path Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure WebSocket events enable substantive chat value delivery\n- Value Impact: Real-time transparency creates user trust and engagement \n- Strategic Impact: WebSocket events are infrastructure for 90% of business value (Chat)\n\nCRITICAL REQUIREMENTS:\n1. Test complete WebSocket event sequence: connection \u2192 authentication \u2192 agent_events \u2192 completion\n2. Validate event ordering and timing for optimal user experience\n3. Test multi-user WebSocket isolation and message routing\n4. Test WebSocket reconnection and recovery scenarios  \n5. Use real WebSocket connections only (NO MOCKS per CLAUDE.md)\n6. Validate business value transparency through event content\n\nWebSocket Events Critical for Business Value:\n- agent_started: User sees request acknowledged  \n- agent_thinking: User sees AI reasoning process\n- tool_executing: User sees tools being used\n- tool_completed: User sees tool results\n- agent_completed: User receives final actionable response\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/golden_path/test_websocket_real_connection_integration.py",
      "relative_path": "netra_backend/tests/integration/golden_path/test_websocket_real_connection_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Connection with Real Services Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure WebSocket connections work reliably with real services\n- Value Impact: WebSocket connections enable 90% of our chat functionality value delivery\n- Strategic Impact: Critical for $500K+ ARR - WebSocket failures = no chat = no revenue\n\nThis test validates Critical Issue #1 from Golden Path:\n\"Race Conditions in WebSocket Handshake\" - Cloud Run environments experience race conditions\nwhere message handling starts before WebSocket handshake completion.\n\nCRITICAL REQUIREMENTS:\n1. Test WebSocket connection with real PostgreSQL session persistence\n2. Test connection recovery with Redis state management  \n3. Test user context persistence across reconnections\n4. Test concurrent user WebSocket connections with isolation\n5. NO MOCKS for core services - only external APIs (LLM, OAuth)\n6. Use E2E authentication for all connections\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/monitoring/test_observability_systems_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/monitoring/test_observability_systems_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Observability Systems Comprehensive - Phase 5 Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal, Enterprise customers\n- Business Goal: System reliability and operational excellence\n- Value Impact: Enables proactive issue detection and resolution\n- Strategic Impact: Foundation for SLA compliance and customer trust\n\nCRITICAL REQUIREMENTS:\n- Tests real logging, metrics, and monitoring systems\n- Validates data collection accuracy and alerting\n- Ensures observability in production scenarios\n- No mocks - uses real observability infrastructure\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/performance/test_comprehensive_performance_integration.py",
      "relative_path": "netra_backend/tests/integration/performance/test_comprehensive_performance_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Performance Tests - Comprehensive Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure system integration performs at scale without degradation\n- Value Impact: Prevents 503 errors that cause 60% user abandonment\n- Strategic Impact: Validates system can handle Enterprise-level load (1000+ concurrent users)\n\nCRITICAL: These integration tests validate performance with REAL services.\nPoor integration performance is the #1 cause of production outages.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/performance/test_performance_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/performance/test_performance_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nPerformance Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure system performance meets user expectations\n- Value Impact: Fast response times prevent user abandonment\n- Strategic Impact: Performance directly impacts user satisfaction and retention\n\nIntegration Points Tested:\n1. End-to-end performance of agent execution workflows\n2. Database query performance under realistic load\n3. WebSocket event delivery performance at scale\n4. Tool dispatcher coordination performance\n5. Multi-user concurrent performance characteristics\n6. Memory and resource utilization integration\n7. Performance degradation detection and monitoring\n8. Load balancing and scaling performance integration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_cache_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_cache_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for System Startup CACHE Phase\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Platform Stability & Chat Performance\n- Value Impact: Ensures Redis cache infrastructure supports real-time chat functionality\n- Strategic Impact: Prevents cache failures that would degrade chat performance and session management\n\nCRITICAL: These tests validate the CACHE phase of system startup:\n1. Redis connection establishment and validation\n2. Redis health checks and connectivity monitoring\n3. Session storage capabilities for user authentication\n4. WebSocket connection caching for real-time chat\n5. Agent state caching for conversation continuity\n6. Cache performance requirements for chat responsiveness\n7. Cache expiration policies for data management\n8. Redis cluster/failover handling for reliability\n9. Cache consistency for multi-user scenarios\n10. Cache readiness for real-time chat operations\n\nThe CACHE phase is critical for performance - if it fails, chat becomes slow and unreliable.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_database_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_database_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for System Startup DATABASE Phase\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Platform Stability & Chat Readiness\n- Value Impact: Ensures database infrastructure is properly configured for chat functionality\n- Strategic Impact: Prevents database failures that would block all user interactions and data persistence\n\nCRITICAL: These tests validate the DATABASE phase of system startup:\n1. PostgreSQL connection establishment and validation\n2. Database schema validation and migrations\n3. Connection pool configuration and management\n4. Database health checks and monitoring\n5. User authentication database operations\n6. Thread/message storage capabilities\n7. Database performance requirements for chat\n8. Database isolation and multi-user support\n9. Database failover and error handling\n10. Database readiness for real-time chat operations\n\nThe DATABASE phase is foundational - if it fails, chat data persistence cannot work.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_dependencies_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_dependencies_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for System Startup DEPENDENCIES Phase\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Chat Service Reliability & Multi-User Support\n- Value Impact: Ensures all core services required for chat functionality are properly initialized\n- Strategic Impact: Prevents chat service failures that cause user abandonment and revenue loss\n\nCRITICAL: These tests validate the DEPENDENCIES phase (Phase 2) of deterministic startup:\n1. SSOT Auth validation (CRITICAL - Must be first)\n2. Key Manager initialization (CRITICAL)\n3. LLM Manager initialization (CRITICAL) \n4. Startup fixes application (CRITICAL)\n5. Core service dependencies initialization\n6. Health checker setup\n7. Error handler registration\n8. Middleware configuration\n9. OAuth client initialization (delegated to auth service)\n\nThe DEPENDENCIES phase provides the foundation services that enable chat functionality.\nWithout these dependencies, users cannot authenticate, send messages, or receive AI responses.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_finalize_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_finalize_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nFINALIZE Phase Integration Tests - System Startup to Chat Ready\n============================================================\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure complete system readiness for chat operations\n- Value Impact: Validates chat functionality delivers 90% of business value\n- Strategic Impact: Prevents broken chat from reaching users\n\nCRITICAL: Chat delivers 90% of our value - if chat cannot work, service MUST NOT start.\nThese tests validate the FINALIZE phase ensures complete system readiness for chat operations.\n\nBased on deterministic startup architecture (startup_module.py and smd.py):\n- Phase 7: FINALIZE validates all systems ready for chat\n- Complete startup completion state validation  \n- System health assessment with chat readiness focus\n- Critical path validation for end-to-end chat functionality\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_init_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_init_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for System Startup INIT Phase\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Platform Stability & Chat Readiness\n- Value Impact: Ensures system can initialize core components required for chat functionality\n- Strategic Impact: Prevents catastrophic startup failures that block all user interactions\n\nCRITICAL: These tests validate the INIT phase (Phase 1) of deterministic startup:\n1. Environment variable loading and validation\n2. Configuration setup and validation  \n3. Logging system initialization\n4. Project root resolution\n5. Dotenv file loading scenarios\n6. Cloud Run vs local environment detection\n7. Dev launcher integration scenarios\n\nThe INIT phase is foundational - if it fails, chat cannot work.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_services_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_services_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests for System Startup SERVICES Phase\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Agent Service Initialization & Chat Readiness\n- Value Impact: Ensures all agent services required for chat functionality are properly initialized and ready\n- Strategic Impact: Prevents chat service failures that cause user abandonment, ensures multi-user agent isolation\n\nCRITICAL: These tests validate the SERVICES phase (Phase 3) of deterministic startup:\n1. Agent Service Factory initialization and validation\n2. Agent Supervisor setup with Factory Pattern isolation\n3. Tool Dispatcher initialization (unified_tool_dispatcher)\n4. Agent Registry setup for WebSocket bridge integration\n5. LLM Agent service configuration and connectivity\n6. Data Agent service initialization and tool availability\n7. Triage Agent service setup and validation\n8. Agent execution engine factory setup and isolation\n9. WebSocket bridge initialization for agent-to-user communication\n10. Agent state management services and persistence\n11. Agent-to-WebSocket communication pathways validation\n12. Agent service health checks and monitoring setup\n13. Multi-user agent isolation validation (Factory Pattern)\n14. Agent service performance requirements validation\n15. Agent service error handling and recovery mechanisms\n16. Critical path validation for agent services\n17. Agent service business logic validation\n18. Integration between agent services and database/cache\n19. Agent service configuration validation\n20. Agent service resource management and cleanup\n\nThe SERVICES phase provides the agent infrastructure that enables substantive chat interactions.\nWithout these services, users cannot execute agents, receive AI responses, or access tool functionality.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/startup/test_websocket_phase_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/startup/test_websocket_phase_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Phase Integration Tests - System Startup to Chat Ready\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Platform Stability & Chat Value Delivery\n- Value Impact: Ensures WebSocket infrastructure is properly configured for real-time chat\n- Strategic Impact: Validates that startup sequence correctly prepares WebSocket systems for revenue-generating chat interactions\n\nThis test suite validates the WEBSOCKET phase of system startup, focusing on all components\nthat enable real-time chat communication between users and AI agents.\n\nKey WebSocket Components Tested:\n1. Unified WebSocket Manager initialization\n2. WebSocket Factory setup\n3. Agent Handler integration \n4. Authentication middleware\n5. CORS middleware\n6. Rate limiting\n7. Message handling\n8. User context extraction\n9. Error recovery\n10. Performance monitoring\n11. Multi-user isolation\n12. Critical chat events (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n\nCRITICAL: These tests validate that WebSocket infrastructure is properly configured\nto support real-time chat without requiring actual WebSocket server connections.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_agent_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_agent_registry_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Integration Tests for AgentRegistry.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Internal)\n- Business Goal: Ensure AgentRegistry enables reliable multi-user agent execution\n- Value Impact: AgentRegistry is the core system enabling user chat with AI agents\n- Strategic Impact: CRITICAL - without proper agent registration and isolation, \n                   multi-user system fails and business value is lost\n\nThis test suite validates the core AgentRegistry functionality that enables:\n1. Multi-user agent isolation (prevents user data leakage)\n2. WebSocket event delivery for real-time chat experience\n3. Agent lifecycle management and resource cleanup\n4. Factory pattern enforcement for proper user isolation\n5. Business-critical agent workflows and execution patterns\n\nCRITICAL: These tests use REAL services and REAL agent execution patterns.\nNO MOCKS allowed except for external API dependencies.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_agent_websocket_bridge_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_agent_websocket_bridge_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Test Suite for AgentWebSocketBridge\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable agent-WebSocket event delivery (core chat value)\n- Value Impact: Real-time agent updates enable substantive AI interactions\n- Strategic Impact: Core platform infrastructure for agent execution visibility\n\nThis integration test suite covers the CRITICAL agent-WebSocket bridge functionality:\n1. Agent-WebSocket event bridging lifecycle (agent event \u2192 bridge \u2192 WebSocket \u2192 user)\n2. Multi-user agent-WebSocket isolation and concurrent agent execution  \n3. Real-time agent event routing and WebSocket delivery coordination\n4. Agent execution context bridging to WebSocket user sessions\n5. Agent WebSocket bridge health monitoring and error recovery\n6. Cross-service agent-WebSocket coordination (agents \u2194 backend \u2194 frontend)\n7. Agent event queue management and delivery guarantees during WebSocket issues\n8. Business-critical agent event bridging (all 5 WebSocket events: started, thinking, tool_executing, tool_completed, completed)\n9. Agent WebSocket bridge performance under concurrent agent execution\n10. Integration with AgentRegistry, UnifiedWebSocketManager, and ExecutionEngine\n11. Agent WebSocket bridge resource management and cleanup\n12. Agent event serialization and WebSocket message format validation\n13. Agent WebSocket bridge timeout handling and circuit breaker patterns\n14. Agent WebSocket bridge authentication and user authorization validation\n\nCRITICAL: NO MOCKS - Uses real agent-WebSocket coordination, real event routing, real user session bridging\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_auth_service_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_auth_service_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Service Integration Test Suite - Comprehensive Integration Testing\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - All user segments depend on authentication\n- Business Goal: Ensure reliable authentication and authorization across all user flows\n- Value Impact: Users must be able to securely authenticate and access services\n- Strategic Impact: Core platform security and user experience foundation\n\nThis test suite validates auth service integration from the backend perspective,\nensuring all authentication flows work correctly with real PostgreSQL and Redis services.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_backend_auth_comprehensive_integration.py",
      "relative_path": "netra_backend/tests/integration/test_backend_auth_comprehensive_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nBackend Auth Comprehensive Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure backend properly integrates with auth service for secure user operations\n- Value Impact: Users can securely access chat features, threads, and agent executions through authenticated sessions\n- Strategic Impact: Core security integration that enables all user-facing features while maintaining multi-user isolation\n\nCRITICAL: These tests use REAL PostgreSQL and Redis services (no mocks).\nTests validate backend-to-auth-service integration with real cross-service communication.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_backend_service_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_backend_service_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Backend Service Integration Test Suite\n\nCRITICAL: Integration tests for backend service integration following TEST_CREATION_GUIDE.md patterns.\nUses REAL services (PostgreSQL, Redis) to ensure genuine backend service integration validation.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Foundation for ALL backend services\n- Business Goal: Ensure backend services integrate reliably for multi-user real-world operations\n- Value Impact: Prevents 500 errors, data corruption, service outages, and multi-user isolation failures\n- Strategic Impact: Backend service integration is core infrastructure - failures cascade to all user-facing features\n\nTEST PHILOSOPHY: Real Services > Mocks\n- Uses real PostgreSQL (port 5434) and Redis (port 6381) connections for authentic integration testing\n- Tests actual service coordination patterns and user context isolation\n- Validates real async session management, transaction handling, and WebSocket integration  \n- Covers realistic multi-user scenarios with factory-based isolation\n- Tests genuine connection pooling, background task processing, and error recovery\n- Validates middleware chain processing and API endpoint integration\n\nCOVERAGE TARGETS:\n1. Backend service core functionality integration with real database/cache\n2. Multi-user isolation with UserExecutionContext factory patterns\n3. WebSocket manager integration with agent execution coordination\n4. Database operations and ORM integration with transaction management\n5. Redis caching and session management with consistency validation\n6. Configuration management integration across service boundaries\n7. Middleware chain processing with authentication and authorization\n8. API endpoint integration with real request/response handling\n9. Service startup and shutdown processes with dependency validation\n10. Background task processing with WebSocket event coordination\n11. Agent execution engine integration with tool dispatching\n12. Error recovery and resilience patterns under load\n13. Performance optimization with connection pooling and caching\n14. Service health monitoring with real metrics collection\n15. Thread and message management with multi-user state isolation\n16. Event handling and notification systems with WebSocket delivery\n17. Resource management and cleanup with proper lifecycle handling\n18. Logging and monitoring integration with structured data\n19. Service communication patterns and service discovery\n20. Database schema validation and migration handling\n\nCRITICAL: Follows CLAUDE.md requirements:\n- NO MOCKS for database/Redis operations (real services via Docker)\n- Uses IsolatedEnvironment (never os.environ directly)\n- Follows SSOT patterns from test_framework/\n- Tests deliver genuine business value validation  \n- Each test validates actual multi-user business scenarios\n- WebSocket events are validated when agents are involved\n- Authentication patterns follow real JWT/OAuth flows\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_complete_ssot_workflow_integration.py",
      "relative_path": "netra_backend/tests/integration/test_complete_ssot_workflow_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete SSOT Class Workflow Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - $500K+ Annual Value Through System Reliability\n- Business Goal: Ensure complete workflows spanning 4-6 SSOT classes deliver end-to-end business value\n- Value Impact: Validates complete user journeys work flawlessly across all SSOT components\n- Strategic Impact: Prevents cascade failures that could cause $100K+ in lost revenue per incident\n\nCRITICAL: These tests validate complete business workflows that span multiple SSOT classes.\nEach workflow test represents a complete user journey that must work flawlessly in production.\nTesting complete workflows prevents integration failures that could cause significant revenue loss.\n\nKey SSOT Classes Integrated:\n- IsolatedEnvironment: Environment variable management\n- UnifiedConfigurationManager: Configuration management  \n- AgentRegistry: Agent lifecycle and execution\n- BaseAgent: Core agent functionality\n- UnifiedWebSocketManager: Real-time communication\n- UnifiedStateManager: State persistence\n- DatabaseManager: Data persistence layer\n- AuthenticationManager: Security and user management\n\nNO MOCKS: All tests use real instances to validate actual system behavior.\nMulti-User Testing: All workflows test proper user isolation and concurrent execution.\nWebSocket Events: All agent workflows validate the 5 critical WebSocket events.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_comprehensive_business_workflows_real_services.py",
      "relative_path": "netra_backend/tests/integration/test_comprehensive_business_workflows_real_services.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Business Workflow Integration Tests - Real Services\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate end-to-end business value delivery through complete user workflows\n- Value Impact: Users experience complete optimization journeys from data collection to actionable insights\n- Strategic Impact: Business workflow validation ensures platform delivers on core value proposition\n\nThese tests validate complete business workflows spanning multiple services and components,\nensuring the platform delivers measurable business value to users.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_config_edge_cases_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_config_edge_cases_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 25,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Integration Tests for Configuration Edge Cases and Error Scenarios\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - All customer tiers depend on stable configuration\n- Business Goal: System Reliability - Prevent silent failures and configuration-related outages\n- Value Impact: Prevents $12K MRR loss from config errors, enables WebSocket agent events\n- Strategic Impact: Ensures multi-user agent execution works under edge conditions\n\nCRITICAL MISSION:\nConfiguration edge cases can cause silent failures that break WebSocket agent events.\nThese tests validate the configuration system under stress conditions that would\noccur in production multi-user scenarios.\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS! Use real configuration instances under stress\n- Test realistic failure scenarios that occur in production\n- Focus on edge cases that prevent WebSocket agent events\n- Test configuration recovery mechanisms \n- Test scenarios that cause silent failures vs hard failures\n- Test multi-user isolation under configuration stress\n\nCategories: integration\n",
      "test_methods": [
        "test_validation_with_missing_critical_database_url",
        "test_validation_with_production_mode_missing_secrets",
        "test_progressive_validation_mode_enforcement",
        "test_validation_with_corrupted_config_data",
        "test_config_health_score_calculation",
        "test_malformed_env_file_parsing",
        "test_invalid_url_format_handling",
        "test_malformed_json_config_handling",
        "test_encoding_issues_handling",
        "test_os_environment_vs_env_file_precedence",
        "test_fallback_generation_precedence",
        "test_environment_specific_value_precedence",
        "test_concurrent_config_loading",
        "test_config_cache_consistency_under_load",
        "test_config_modification_race_conditions",
        "test_invalid_postgresql_url_formats",
        "test_database_connection_timeout_scenarios",
        "test_database_ssl_configuration_validation",
        "test_malformed_oauth_client_ids",
        "test_oauth_client_secret_validation",
        "test_oauth_environment_credential_leakage",
        "test_corrupted_config_file_recovery",
        "test_partial_config_loading_resilience",
        "test_config_hot_reload_error_recovery",
        "test_config_validation_error_accumulation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_config_isolated_environment_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_config_isolated_environment_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest IsolatedEnvironment Configuration System Integration\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Service Independence\n- Business Goal: Ensure configuration isolation prevents cross-test pollution and service failures\n- Value Impact: Prevents configuration drift that causes cascade failures across services\n- Strategic Impact: Core platform reliability - config bugs cause 503 errors and auth failures\n\nThis comprehensive test suite validates that the IsolatedEnvironment singleton correctly:\n1. Maintains isolation between test/development/staging/production environments\n2. Prevents configuration pollution between concurrent tests and services\n3. Handles multi-environment scenarios that cause real-world failures\n4. Validates thread safety and concurrent access patterns\n5. Tests configuration loading, validation, and error handling\n6. Ensures sensitive value masking and security compliance\n\nCRITICAL: These tests use REAL IsolatedEnvironment instances (no mocks) to validate\nactual business scenarios that could break the platform if configuration fails.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_config_service_specific_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_config_service_specific_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 33,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Integration Tests for Service-Specific Configuration Patterns\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal & Enterprise \n- Business Goal: System Stability & Risk Reduction - Prevent $12K MRR loss from config cascade failures\n- Value Impact: Ensures auth service OAuth configuration prevents enterprise customer churn\n- Strategic Impact: Validates configuration patterns supporting $50K MRR WebSocket agent functionality\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS! Use real auth service and backend configuration instances\n- Test realistic OAuth scenarios (Google, GitHub) that prevented enterprise customer loss\n- Focus on configuration preventing cascade failures and authentication mismatches\n- Test auth service integration with backend JWT secrets (WebSocket 403 fix)\n- Test environment detection, port discovery, and Docker integration patterns\n- Test configuration supporting agent execution and WebSocket events (mission critical)\n\nThis comprehensive test suite validates service-specific configuration patterns including:\n1. AuthConfig OAuth dual naming convention management (enterprise customer retention)\n2. Auth service environment detection and port discovery (Docker compatibility)  \n3. JWT secret integration across auth/backend services (WebSocket authentication)\n4. Multi-environment configuration inheritance and validation\n5. Configuration API endpoints (backup/restore/validation)\n6. Hot-reload and caching mechanisms with real services\n7. Service startup sequences and dependency injection\n8. Error handling and fallback mechanisms preventing cascade failures\n\nCategories: integration\n",
      "test_methods": [
        "test_oauth_google_dual_naming_backend_pattern",
        "test_oauth_google_dual_naming_auth_service_pattern",
        "test_oauth_dual_naming_precedence_resolution",
        "test_oauth_github_provider_support",
        "test_oauth_environment_isolation_security",
        "test_oauth_configuration_api_compatibility",
        "test_environment_detection_accuracy",
        "test_auth_service_port_discovery_integration",
        "test_docker_environment_detection",
        "test_service_url_resolution_cross_environment",
        "test_cors_origins_environment_specific",
        "test_jwt_secret_consistency_auth_backend_services",
        "test_jwt_environment_specific_resolution",
        "test_jwt_algorithm_consistency",
        "test_jwt_validation_cross_service",
        "test_jwt_websocket_authentication_config",
        "test_docker_environment_detection_signals",
        "test_cloud_run_deployment_configuration",
        "test_docker_database_connectivity_config",
        "test_docker_service_discovery_integration",
        "test_app_config_schema_validation_comprehensive",
        "test_app_config_environment_specific_loading",
        "test_app_config_database_integration",
        "test_app_config_websocket_support_validation",
        "test_app_config_agent_execution_support",
        "test_config_validation_api_integration",
        "test_config_service_instance_management",
        "test_config_api_error_handling",
        "test_configuration_hot_reload_basic",
        "test_configuration_caching_behavior",
        "test_jwt_secret_caching_hot_reload",
        "test_cross_service_cache_consistency",
        "test_configuration_reload_error_recovery"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_config_shared_components_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_config_shared_components_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 30,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for Cross-Service Configuration Components\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Development Velocity, Risk Reduction  \n- Business Goal: Zero configuration-related service failures and seamless cross-service integration\n- Value Impact: Prevents $50K MRR loss from configuration mismatches causing service failures\n- Strategic Impact: Validates shared config components that enable multi-user isolation and WebSocket events\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS! Uses real shared components and services\n- Tests realistic cross-service communication scenarios  \n- Tests configuration supporting multi-user isolation (factory patterns)\n- Tests remote service configurations (ClickHouse Cloud, OAuth providers)\n- Tests configuration enabling WebSocket agent events\n- Tests scenarios involving configuration secrets and security\n\nThis module tests the shared configuration components that ensure:\n1. DatabaseURLBuilder works consistently across backend, auth, and analytics services\n2. SharedJWTSecretManager maintains JWT consistency preventing WebSocket 403 errors\n3. PortDiscovery enables dynamic service URL discovery across environments  \n4. ConfigurationManager backup/restore functionality maintains system state\n5. Configuration API endpoints handle cross-service requests properly\n6. Cross-service configuration validation prevents cascade failures\n7. Environment-specific configuration loading (dev/test/staging/prod) works correctly\n8. Configuration dependency mapping prevents missing critical values\n9. ClickHouse remote configuration supports staging/production scenarios\n10. Configuration change tracking provides audit capabilities for compliance\n",
      "test_methods": [
        "test_database_url_builder_backend_service_integration",
        "test_database_url_builder_auth_service_integration",
        "test_database_url_builder_analytics_service_integration",
        "test_database_url_builder_cross_service_validation",
        "test_database_url_builder_cloud_sql_cross_service",
        "test_jwt_secret_manager_backend_auth_consistency",
        "test_jwt_secret_manager_environment_specific_secrets",
        "test_jwt_secret_manager_validation_across_services",
        "test_jwt_secret_manager_concurrent_access",
        "test_port_discovery_all_services_development",
        "test_port_discovery_test_environment_isolation",
        "test_port_discovery_staging_production_urls",
        "test_port_discovery_docker_service_resolution",
        "test_port_discovery_validation_and_conflicts",
        "test_configuration_backup_restore_functionality",
        "test_configuration_api_endpoints_cross_service",
        "test_cross_service_configuration_validation",
        "test_development_environment_configuration_loading",
        "test_test_environment_configuration_loading",
        "test_staging_environment_configuration_loading",
        "test_production_environment_configuration_loading",
        "test_configuration_dependency_validation_prevents_cascade_failures",
        "test_configuration_change_tracking_audit_capabilities",
        "test_clickhouse_staging_configuration",
        "test_clickhouse_production_configuration",
        "test_clickhouse_cloud_configuration",
        "test_clickhouse_configuration_validation",
        "test_jwt_secret_security_across_services",
        "test_database_credential_security",
        "test_oauth_client_secret_security"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_config_unified_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_config_unified_manager_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 32,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Integration Tests for UnifiedConfigManager\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal \n- Business Goal: System Stability - Prevent $12K MRR loss from configuration errors\n- Value Impact: Ensures configuration system supports chat functionality, agent execution\n- Strategic Impact: Prevents OAuth regression bugs that block enterprise customers\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS! Use real configuration manager instances\n- Test realistic multi-environment scenarios (dev/staging/prod) \n- Focus on configuration that supports WebSocket agent events (mission critical)\n- Test scenarios that catch OAuth regression bugs (critical business impact)\n- Test database connectivity configuration validation\n- Test JWT secret sharing across services\n\nThis test suite validates the configuration management system that enables:\n1. WebSocket agent events for chat functionality ($50K MRR dependent)\n2. Multi-user isolation for concurrent agent execution\n3. Cross-service authentication consistency \n4. Environment-specific configuration integrity\n5. Configuration hot-reload capabilities for development velocity\n\nCategories: integration\n",
      "test_methods": [
        "test_config_manager_singleton_consistency",
        "test_environment_detection_accuracy",
        "test_config_validation_integration",
        "test_config_hot_reload_capability",
        "test_config_caching_behavior",
        "test_development_config_fallbacks",
        "test_testing_config_isolation",
        "test_production_config_strictness",
        "test_staging_config_production_parity",
        "test_database_url_validation",
        "test_database_ssl_configuration",
        "test_database_connection_pooling_config",
        "test_database_environment_specific_urls",
        "test_jwt_secret_consistency_across_services",
        "test_environment_specific_jwt_secrets",
        "test_jwt_secret_validation_strength",
        "test_jwt_cross_service_compatibility",
        "test_oauth_dual_naming_convention_support",
        "test_oauth_environment_specific_validation",
        "test_oauth_secret_handling_security",
        "test_validation_mode_warn_permissive",
        "test_validation_mode_enforce_critical",
        "test_validation_mode_enforce_all_strict",
        "test_configuration_health_scoring",
        "test_websocket_authentication_config_support",
        "test_websocket_cors_configuration",
        "test_websocket_performance_configuration",
        "test_config_dependency_consistency",
        "test_cross_service_config_compatibility",
        "test_config_serialization_integrity",
        "test_config_environment_variable_coverage",
        "test_config_hot_reload_consistency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_cross_service_error_handling_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_cross_service_error_handling_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Cross-Service Error Handling Integration Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Foundation for ALL services\n- Business Goal: Ensure system resilience and fault tolerance across service boundaries\n- Value Impact: Prevents cascading failures, maintains user experience during outages, ensures multi-user isolation\n- Strategic Impact: System resilience is critical - failures without proper handling lose customer trust and revenue\n\nThis comprehensive test suite validates cross-service error handling patterns including:\n1. Service unavailability and fallback mechanisms\n2. Network timeout and retry behavior  \n3. Database/Redis connection failures and recovery\n4. Circuit breaker activation and recovery\n5. Error propagation and isolation\n6. User experience preservation during failures\n7. Multi-user state isolation during error conditions\n8. Graceful degradation patterns\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n- Uses REAL PostgreSQL (port 5434) and Redis (port 6381) - NO SERVICE MOCKS\n- Uses IsolatedEnvironment (never os.environ directly)\n- Follows SSOT patterns from test_framework/\n- Tests actual business logic under error conditions\n- Each test validates realistic cross-service scenarios\n- External service mocks ONLY for simulating error conditions\n- Authentication follows real JWT/OAuth flows\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_database_manager_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_database_manager_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive DatabaseManager Integration Test Suite\n\nCRITICAL: Integration tests for DatabaseManager following TEST_CREATION_GUIDE.md patterns.\nUses REAL database connections (SQLite for testing) to ensure genuine integration validation.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Foundation for ALL services\n- Business Goal: Ensure DatabaseManager reliably handles real-world database operations  \n- Value Impact: Prevents 500 errors, data corruption, and service outages in production\n- Strategic Impact: DatabaseManager is core infrastructure - failures cascade to all services\n\nTEST PHILOSOPHY: Real Services > Mocks\n- Uses real SQLite database connections for authentic integration testing\n- Tests actual DatabaseURLBuilder integration patterns\n- Validates real async session management and transaction handling\n- Covers realistic multi-user isolation scenarios\n- Tests genuine connection pooling, retry logic, and error recovery\n\nCOVERAGE TARGETS:\n1. Database connection pooling and lifecycle management \n2. Multi-user data isolation and security scenarios\n3. Transaction handling and rollback patterns\n4. Connection retry and circuit breaker behaviors\n5. Database migration and schema validation flows\n6. Concurrent access patterns and thread safety\n7. Performance under load (bulk operations)\n8. Comprehensive error handling and recovery\n9. Cross-service database consistency patterns\n10. Database URL validation and connection string handling\n\nCRITICAL: Follows CLAUDE.md requirements:\n- NO MOCKS for database operations (real SQLite connections)\n- Uses IsolatedEnvironment (never os.environ directly) \n- Follows SSOT patterns from test_framework/\n- Tests deliver genuine business value validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_execution_engine_comprehensive_real_services.py",
      "relative_path": "netra_backend/tests/integration/test_execution_engine_comprehensive_real_services.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "CRITICAL INTEGRATION TESTS: ExecutionEngine with Real Services and Business Value\n  \nBusiness Value Justification:\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure agents deliver 100% reliable execution for chat value\n- Value Impact: Agent execution is the CORE delivery mechanism for AI optimization insights\n- Strategic Impact: $500K+ ARR depends on reliable agent execution pipeline\n\nCRITICAL REQUIREMENTS per CLAUDE.md:\n1. NO MOCKS - Real agent execution, real tool dispatch, real WebSocket events, real LLM\n2. Real-time WebSocket event delivery validation (all 5 agent events MUST be sent)\n3. Multi-user agent execution isolation and concurrent execution patterns\n4. Tool dispatch integration and tool execution coordination\n5. Agent execution context management and user session preservation\n6. Agent execution error handling and recovery scenarios\n7. Agent execution timeout and cancellation mechanisms\n8. Cross-service coordination (backend \u2194 agents)\n9. Agent execution performance monitoring and resource tracking\n10. Business-critical workflows: triage \u2192 data \u2192 optimization\n\nFAILURE CONDITIONS:\n- Any mocked agent execution = ARCHITECTURAL VIOLATION\n- Missing WebSocket events = CHAT VALUE FAILURE\n- User isolation violations = SECURITY FAILURE\n- Tool dispatch failures = CORE FUNCTIONALITY FAILURE\n- Agent execution timeouts = BUSINESS VALUE FAILURE\n\nThis test validates the complete ExecutionEngine as the foundation for chat business value.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_gcp_error_reporting_complete_integration.py",
      "relative_path": "netra_backend/tests/integration/test_gcp_error_reporting_complete_integration.py",
      "category": "integration",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive integration tests for the complete GCP Error Reporting system.\n\nThis test suite validates the complete remediation implementation including:\n1. GCP Logging Handler Integration\n2. Enhanced Error Flow Pipeline  \n3. Authentication Context Integration\n4. Business Context Preservation\n\nBusiness Value Justification (BVJ):\n1. Segment: Platform/Internal + Enterprise validation\n2. Business Goal: Ensure enterprise-grade error monitoring works end-to-end\n3. Value Impact: Validates complete error flow from logger.error() to GCP Error objects\n4. Revenue Impact: Prevents production failures in enterprise monitoring features\n",
      "test_methods": [
        "test_remediation_success_metrics_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_interservice_communication_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_interservice_communication_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Interservice Communication Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal \n- Business Goal: Ensure reliable multi-service communication\n- Value Impact: Validates critical auth flows, user sessions, and service coordination\n- Strategic Impact: Core platform stability and multi-user isolation required for ALL segments\n\nThis test suite validates communication patterns between backend and auth services\nusing REAL services (PostgreSQL, Redis) to ensure production-level reliability.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_message_routing_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_message_routing_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Message Routing Integration Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Ensure reliable WebSocket message routing and multi-user isolation\n- Value Impact: Message routing is foundation of real-time AI chat value delivery\n- Strategic Impact: System reliability enables scalable multi-user platform\n\nThis comprehensive test suite validates message routing architecture:\n1. MessageRouter core functionality with handler registration/deregistration\n2. WebSocket message routing with user-specific delivery and isolation  \n3. Multi-user isolation via Factory pattern and UserExecutionContext\n4. Agent message integration with WebSocket event delivery\n\nCRITICAL: Integration tests use real components without mocks except for external services.\nAll tests validate actual business logic and integration points.\n\nSSOT Compliance:\n- Uses StronglyTypedUserExecutionContext for all user contexts\n- Uses shared.types for UserID, ThreadID, ConnectionID, WebSocketID\n- Uses test_framework.base_integration_test.BaseIntegrationTest base\n- Uses test_framework.ssot.e2e_auth_helper for user context creation\n- Follows CLAUDE.md requirements for integration testing\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_thread_creation_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_thread_creation_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Thread Creation Integration Tests - SSOT Compliant\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Enable seamless conversation continuity and reliable thread management\n- Value Impact: Users can maintain context across sessions and manage conversations effectively\n- Strategic Impact: Core chat functionality that enables all AI-powered interactions\n\nCRITICAL REQUIREMENTS COMPLIANCE:\n\u2713 NO MOCKS - Uses real PostgreSQL, real Redis, real WebSocket connections\n\u2713 Business Value Focus - Every test validates real business scenarios\n\u2713 Factory Pattern Compliance - Uses UserExecutionContext and factory patterns for multi-user isolation\n\u2713 WebSocket Events - Verifies WebSocket events are sent correctly\n\u2713 SSOT Compliance - Follows all SSOT patterns from test_framework/\n\nThis test suite provides 35+ comprehensive integration tests covering:\n1. Basic Thread Creation (10 tests) - Single user, concurrent, error handling, validation\n2. Multi-User Thread Isolation (10 tests) - User isolation, factory patterns, concurrent access\n3. WebSocket Integration (8 tests) - Event delivery, payload validation, real-time notifications\n4. Database Integration (7+ tests) - Transaction safety, cache sync, performance, constraints\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_thread_getting_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_thread_getting_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Thread Getting (Retrieval) Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Enable reliable conversation context retrieval and user experience continuity\n- Value Impact: Users can access their conversation history, maintain context across sessions, and retrieve specific discussions\n- Strategic Impact: Core platform functionality that enables persistent conversational AI experiences and user retention\n\nCRITICAL REQUIREMENTS:\n- Uses integration test patterns with controlled mocking for isolation\n- Tests cover all thread retrieval patterns for business value\n- Validates multi-user isolation and data security patterns\n- Tests performance patterns and error handling\n- Ensures business logic validation without external dependencies\n\nThread Getting Business Value:\n- Conversation Continuity: Users can resume previous discussions \n- Context Preservation: Maintain AI interaction state and history\n- Multi-Session Support: Access threads across different sessions/devices\n- Data Security: Only authorized users can access their threads\n- Performance: Fast retrieval enables responsive user experience\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_unified_configuration_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_unified_configuration_manager_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 18,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest UnifiedConfigurationManager Integration\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Development Velocity, Risk Reduction\n- Business Goal: Ensure configuration management works reliably across all environments\n- Value Impact: Configuration errors cause system downtime and cascade failures\n- Strategic Impact: Centralized configuration is critical for operational simplicity and stability\n\nCRITICAL: Tests the MEGA CLASS UnifiedConfigurationManager (up to 2000 lines) that consolidates\nALL configuration operations across the platform. This is the SSOT for configuration management.\n\nIntegration Test Requirements:\n- NO MOCKS - Real configuration files, real environment management, real validation\n- Real temporary files and directories for testing configuration persistence\n- Multiple environment scenarios (dev, test, staging, prod)\n- Thread safety and concurrent access validation\n- Business-critical configuration validation (OAuth, JWT, database URLs)\n- Configuration migration and backward compatibility scenarios\n",
      "test_methods": [
        "test_basic_configuration_loading",
        "test_multi_environment_configuration_isolation",
        "test_configuration_validation_and_error_handling",
        "test_service_specific_configuration_methods",
        "test_configuration_change_tracking_and_auditing",
        "test_concurrent_configuration_access_thread_safety",
        "test_configuration_factory_pattern_user_isolation",
        "test_configuration_caching_and_performance",
        "test_mission_critical_configuration_validation",
        "test_configuration_backup_and_recovery_scenarios",
        "test_configuration_migration_and_backward_compatibility",
        "test_cross_service_configuration_synchronization",
        "test_configuration_performance_under_load",
        "test_configuration_integration_with_isolated_environment",
        "test_real_world_configuration_scenarios",
        "test_configuration_manager_factory_manager_count",
        "test_convenience_functions",
        "test_health_status_monitoring"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_unified_websocket_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_unified_websocket_manager_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for UnifiedWebSocketManager\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure UnifiedWebSocketManager provides reliable, isolated, real-time communication\n- Value Impact: Validates WebSocket management that enables AI chat business value delivery\n- Strategic Impact: Mission-critical - Real-time chat is 90% of our business value\n\nThis test suite validates the complete UnifiedWebSocketManager functionality that enables\nsubstantive AI chat interactions and real-time user experience. These tests ensure:\n\n1. WebSocket connection lifecycle management (connect \u2192 authenticate \u2192 messaging \u2192 disconnect)\n2. Multi-user session isolation preventing cross-user data leakage\n3. Real-time event broadcasting and message routing between users\n4. Connection pool management and resource limits\n5. Authentication and authorization validation\n6. Connection recovery and reconnection handling\n7. Cross-service WebSocket coordination (backend \u2194 frontend)\n8. Performance under concurrent load and stress conditions\n9. Business-critical WebSocket event delivery (agent events, tool status, results)\n10. Connection health monitoring and circuit breaker patterns\n11. Message queuing and delivery guarantees\n12. Integration with AgentWebSocketBridge and agent execution systems\n13. Connection cleanup and resource management\n14. Error handling and graceful degradation scenarios\n\nTests use REAL WebSocket connections, REAL event broadcasting, and REAL user session\nmanagement - NO MOCKS in integration layer as per TEST_CREATION_GUIDE.md.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_universal_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_universal_registry_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Integration Tests for UniversalRegistry.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure UniversalRegistry enables reliable service discovery and coordination\n- Value Impact: UniversalRegistry is the SSOT for all registry patterns enabling service mesh, agent management, and platform coordination\n- Strategic Impact: CRITICAL - without proper service registry functionality, the platform cannot coordinate agents, WebSocket events, database connections, or cross-service communication\n\nThis test suite validates the core UniversalRegistry functionality that enables:\n1. Service registration and discovery across all platform services\n2. Multi-service registry isolation preventing cross-service contamination  \n3. Service health monitoring and availability tracking for circuit breakers\n4. Service registry load balancing and failover coordination\n5. Cross-service dependency management and service mesh patterns\n6. Business-critical registry operations for AgentRegistry, WebSocketManager, etc.\n7. Configuration management and environment-specific service discovery\n8. Security validation and authorization for registry operations\n9. Performance under concurrent load and resource management\n10. Integration with all major platform services and components\n\nCRITICAL: These tests use REAL services and REAL registry operations.\nNO MOCKS allowed except for external API dependencies.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_user_execution_context_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_user_execution_context_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for UserExecutionContext\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure complete user context isolation and secure multi-user agent execution\n- Value Impact: Guarantees user data security, request traceability, and proper session management\n- Strategic Impact: Enables secure multi-user platform operations and prevents data leakage\n\nThis test suite validates the core UserExecutionContext functionality that enables:\n- Secure multi-user agent execution with complete isolation\n- Chat context management for real-time user interactions\n- Cross-service context propagation for WebSocket events\n- Business-critical user session management for revenue protection\n\nCRITICAL: This test uses NO MOCKS - all tests use real user context validation,\nreal user session management, and real context inheritance patterns.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_websocket_authentication_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_websocket_authentication_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Authentication Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Ensure secure, reliable WebSocket authentication for multi-user platform\n- Value Impact: Prevents unauthorized access, enables secure real-time communications\n- Strategic Impact: Critical security infrastructure for chat-based AI value delivery\n- Revenue Impact: Protects customer data, enables premium features, prevents security breaches\n\nThis comprehensive test suite validates WebSocket authentication across all critical scenarios:\n- JWT authentication flows (header and subprotocol methods)\n- Token validation with auth service integration\n- Multi-user isolation and session management\n- Authentication error handling and recovery\n- WebSocket close codes and security protocols\n- Performance under realistic load conditions\n- Cross-origin request handling\n- Rate limiting and abuse prevention\n- Session persistence and reconnection flows\n- Authentication consistency with REST endpoints\n\nCRITICAL: Uses REAL services (PostgreSQL, Redis) and follows SSOT patterns from\nTEST_CREATION_GUIDE.md. Each test provides actual business value by validating\nsecurity mechanisms that protect customer data and enable premium features.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_websocket_authentication_flows_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_websocket_authentication_flows_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Authentication Flows - Comprehensive Integration Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Platform critical authentication\n- Business Goal: Ensure reliable WebSocket authentication enables valuable AI chat interactions\n- Value Impact: WebSocket auth failures = $120K+ MRR loss due to broken chat functionality  \n- Strategic Impact: Core platform stability for multi-user AI interactions\n\nCRITICAL BUSINESS CONTEXT:\nWebSocket authentication is the foundation for our core chat value proposition.\nWhen WebSocket auth fails, users cannot interact with AI agents, eliminating\nour primary value delivery mechanism and directly impacting revenue.\n\nTEST ARCHITECTURE:\nThis comprehensive suite validates the complete SSOT WebSocket authentication\npipeline using REAL services (PostgreSQL, Redis, Auth Service) with zero mocks.\nAll 25 tests focus on business-critical authentication scenarios that directly\nimpact user experience and platform stability.\n",
      "test_methods": [
        "test_comprehensive_suite_coverage"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_websocket_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_websocket_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Integration Tests - 40+ Real Service Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure reliable real-time communication infrastructure\n- Value Impact: WebSocket connections enable chat functionality, agent events, and real-time user experience\n- Strategic Impact: Critical for customer retention and chat-based AI value delivery\n\nCRITICAL REQUIREMENTS:\n- Tests use REAL services (NO MOCKS except external APIs)\n- All tests validate actual WebSocket connections via /ws endpoint  \n- Tests validate ALL 5 critical agent events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n- Uses IsolatedEnvironment, not os.environ\n- Uses BaseIntegrationTest as parent class\n- Includes proper authentication setup for WebSocket tests\n- Tests fail hard on any issues to detect real problems\n\nThis test suite validates WebSocket functionality that enables $30K+ MRR from chat-based AI interactions.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/test_websocket_routing_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/test_websocket_routing_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Message Routing Integration - Comprehensive WebSocket Routing Patterns\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure WebSocket message routing delivers reliable chat functionality\n- Value Impact: Validates that WebSocket infrastructure properly routes messages for AI interactions\n- Strategic Impact: Core platform reliability - WebSocket routing enables all user-agent communication\n\nThis module tests WebSocket-specific routing patterns, connection management,\nand event handling that are critical for delivering AI chat value to users.\n\nCRITICAL: These tests validate WebSocket routing integration points without Docker,\nusing sophisticated WebSocket mocks that simulate FastAPI WebSocket behavior.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/threads/test_thread_agent_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/threads/test_thread_agent_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nThread-Agent Integration Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Enable substantive AI-powered chat conversations\n- Value Impact: Validates complete chat workflow from thread creation through agent execution\n- Strategic Impact: Core platform functionality - thread-agent integration enables chat value delivery\n\nThis test suite validates the CRITICAL integration between threads and agents that enables\nchat functionality. It tests the complete workflow: thread creation \u2192 message \u2192 agent execution \u2192 response\n\nFocus Areas:\n1. Thread-Agent Binding: Secure agent execution within thread context\n2. Message Flow Integration: Complete message-to-agent execution workflow  \n3. State Management: Thread state updates during agent execution\n4. Context Propagation: User context availability throughout execution\n5. Performance Integration: Thread-agent interaction optimization\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - use real components with in-memory databases\n- Validate complete chat workflow with WebSocket events\n- Test multi-user isolation throughout thread-agent interactions\n- Use realistic chat conversation scenarios with real agent types\n\nTEST ARCHITECTURE:\nIntegration Level: Thread + Agent + ExecutionEngine + WebSocket events together\nReal Components: Real Thread/Agent instances, in-memory DB, real WebSocket events\nUser Context: Factory patterns for complete user isolation\nBusiness Scenarios: Realistic chat conversations enabling AI value delivery\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/threads/test_thread_lifecycle_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/threads/test_thread_lifecycle_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Thread Lifecycle Integration Tests - SSOT Compliant\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Enable complete thread management lifecycle for chat conversations\n- Value Impact: Users can create, manage, search, and delete conversations efficiently\n- Strategic Impact: Core infrastructure that enables all AI chat business value\n\nCRITICAL REQUIREMENTS COMPLIANCE:\n\u2713 NO MOCKS - Uses real PostgreSQL, real Redis, real WebSocket connections\n\u2713 Business Value Focus - Every test validates real business scenarios\n\u2713 Factory Pattern Compliance - Uses UserExecutionContext and factory patterns for multi-user isolation\n\u2713 WebSocket Events - Verifies all 5 critical WebSocket agent events are sent\n\u2713 SSOT Compliance - Follows all SSOT patterns from test_framework/\n\nThis test suite provides 25 comprehensive integration tests covering:\n1. Thread Creation Tests (8 tests) - Creation, metadata, WebSocket events, isolation\n2. Thread State Management Tests (8 tests) - Status updates, metadata, activity tracking\n3. Thread Retrieval Tests (5 tests) - Get by ID, list, search, access control\n4. Thread Deletion Tests (4 tests) - Soft delete, hard delete, cascade effects\n\nEach test validates complete business workflows with real services and WebSocket event delivery.\n",
      "test_methods": [
        "test_all_tests_completed"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/tools/test_unified_tool_dispatcher_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/tools/test_unified_tool_dispatcher_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for UnifiedToolDispatcher\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable tool dispatch for agent-driven user value\n- Value Impact: Users receive real-time tool execution updates and reliable results\n- Strategic Impact: Core platform functionality that enables ALL agent workflows\n\nThis test suite validates the complete UnifiedToolDispatcher implementation with:\n1. Real tool execution without mocks\n2. Real WebSocket connections for event delivery\n3. Real user context isolation patterns\n4. Real business scenarios that deliver user value\n\nCRITICAL: Tests use REAL services and REAL tool execution following TEST_CREATION_GUIDE.md\nNO MOCKS except for external APIs (LLM calls, third-party services)\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/websocket/test_agent_event_delivery_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/websocket/test_agent_event_delivery_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Agent Event Delivery WebSocket Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Core chat functionality\n- Business Goal: Enable real-time agent communication for substantive AI interactions\n- Value Impact: CRITICAL - Agent events deliver 90% of platform value through live AI progress\n- Strategic/Revenue Impact: $500K+ ARR depends on users seeing agent work in real-time\n\nMISSION CRITICAL: Tests the 5 WebSocket events that enable chat business value:\n1. agent_started - User sees agent began processing their problem\n2. agent_thinking - Real-time reasoning visibility (shows AI working on solutions)\n3. tool_executing - Tool usage transparency (demonstrates problem-solving approach)\n4. tool_completed - Tool results display (delivers actionable insights)\n5. agent_completed - User knows when valuable response is ready\n\nCRITICAL REQUIREMENTS:\n- NO MOCKS - Uses real WebSocket connections with real agent execution\n- Tests agent event delivery patterns for different scenarios\n- Validates event content contains business value data\n- Ensures proper event sequencing and timing\n- Tests multi-agent event coordination\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/websocket/test_websocket_agent_events_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/websocket/test_websocket_agent_events_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for WebSocket Agent Event Notifications\n\nMISSION: Create comprehensive integration tests for WebSocket agent event notifications\nfocusing on the 5 CRITICAL mission-critical events that enable substantive chat interactions.\n\nBusiness Value Justification (BVJ):\n- Segment: All segments (Free, Early, Mid, Enterprise) - Core Infrastructure\n- Business Goal: Chat Value Delivery & Real-time User Experience\n- Value Impact: Real-time AI interaction visibility drives user engagement and conversion\n- Strategic/Revenue Impact: WebSocket events are the PRIMARY delivery mechanism for AI value\n\nCRITICAL REQUIREMENTS FROM CLAUDE.md SECTION 6:\nThe following events MUST be sent during agent execution to enable meaningful AI interactions:\n\n1. **agent_started** - User must see agent began processing their problem\n2. **agent_thinking** - Real-time reasoning visibility (shows AI is working on valuable solutions)\n3. **tool_executing** - Tool usage transparency (demonstrates problem-solving approach)\n4. **tool_completed** - Tool results display (delivers actionable insights)\n5. **agent_completed** - User must know when valuable response is ready\n\nINTEGRATION LEVEL REQUIREMENTS:\n- NO MOCKS allowed for business logic - use real agent execution components\n- Mock only WebSocket transport layer for integration testing\n- Each test must validate real agent event behavior\n- Focus on agent event notification flow integration\n- Validate that all events are sent in correct order\n- Test multi-user concurrent event handling\n- Test event delivery reliability under load\n\nDELIVERABLE: Comprehensive test coverage with at least 20 integration tests validating\nWebSocket agent event notifications focusing on the 5 critical events.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/websocket_agent_events/test_agent_completed_events.py",
      "relative_path": "netra_backend/tests/integration/websocket_agent_events/test_agent_completed_events.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Integration Tests: agent_completed WebSocket Events - Real Service Testing\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Agent Completion Transparency for User Satisfaction\n- Value Impact: Users know when AI has finished solving their problems\n- Strategic Impact: Core chat functionality enabling $500K+ ARR through completion transparency\n\nCRITICAL: These tests validate agent completion transparency - users MUST know when AI\nhas finished processing to deliver substantive chat business value and user satisfaction.\n\nNO MOCKS per CLAUDE.md - Uses ONLY real WebSocket connections for authentic testing.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/websocket_agent_events/test_tool_completed_events.py",
      "relative_path": "netra_backend/tests/integration/websocket_agent_events/test_tool_completed_events.py",
      "category": "integration",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Integration Tests: tool_completed WebSocket Events - Real Service Testing\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Tool Result Transparency for User Satisfaction\n- Value Impact: Users see AI tool results, building confidence in solutions\n- Strategic Impact: Core chat functionality enabling $500K+ ARR through result transparency\n\nCRITICAL: These tests validate tool completion transparency - users MUST see AI tool\nresults to understand how problems were solved and deliver substantive chat business value.\n\nNO MOCKS per CLAUDE.md - Uses ONLY real WebSocket connections for authentic testing.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/integration/websocket_core/test_websocket_agent_integration_comprehensive.py",
      "relative_path": "netra_backend/tests/integration/websocket_core/test_websocket_agent_integration_comprehensive.py",
      "category": "integration",
      "service": "backend",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Agent Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure real-time user feedback during agent execution  \n- Value Impact: WebSocket events prevent user abandonment and provide transparency\n- Strategic Impact: Chat UX is our primary value delivery mechanism\n\nIntegration Points Tested:\n1. WebSocket message delivery across components\n2. Agent execution event propagation \n3. Multi-user WebSocket isolation\n4. Event ordering and timing guarantees\n5. Connection management during agent execution\n6. Error handling and recovery via WebSocket\n7. Trace context propagation in WebSocket events\n8. Performance monitoring of WebSocket delivery\n",
      "test_methods": [
        "test_websocket_user1",
        "test_websocket_user2"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/monitoring/test_agent_monitoring_comprehensive.py",
      "relative_path": "netra_backend/tests/monitoring/test_agent_monitoring_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Monitoring and Observability Testing (Iterations 36-40).\n\nTests comprehensive monitoring, metrics collection, alerting,\nand observability features for the agent system.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/performance/test_agent_performance_comprehensive.py",
      "relative_path": "netra_backend/tests/performance/test_agent_performance_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Performance Testing (Iterations 31-35 completion).\n\nComprehensive performance tests for agent operations including\nlatency, throughput, memory usage, and optimization patterns.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/real_services/test_comprehensive_integration.py",
      "relative_path": "netra_backend/tests/real_services/test_comprehensive_integration.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests - NO MOCKS\n\nEnd-to-end integration tests using all real services together:\nWebSocket + Database + Redis + Agent Execution + LLM APIs\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: Risk Reduction & System Reliability\n- Value Impact: Ensures complete system works together in production\n- Strategic Impact: Prevents integration failures and ensures user experience\n\nThis test suite validates:\n- Complete user chat flows with real WebSocket connections\n- Agent execution with real LLM calls and database persistence\n- Session management with real Redis caching\n- Error handling and recovery across all service boundaries\n- Performance under integrated load scenarios\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/recovery/test_agent_error_recovery_comprehensive.py",
      "relative_path": "netra_backend/tests/recovery/test_agent_error_recovery_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Error Recovery Testing (Iterations 36-40 completion).\n\nTests comprehensive error recovery, resilience patterns,\nand fault tolerance mechanisms for agent operations.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/security/test_agent_security_comprehensive.py",
      "relative_path": "netra_backend/tests/security/test_agent_security_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAgent Security Testing (Iterations 31-35).\n\nComprehensive security tests for agent operations including\nauthentication, authorization, data protection, and security boundaries.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/startup/test_comprehensive_startup.py",
      "relative_path": "netra_backend/tests/startup/test_comprehensive_startup.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/test_comprehensive_database_operations.py",
      "relative_path": "netra_backend/tests/test_comprehensive_database_operations.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Database Operations Tests - 12 Required Tests\nTesting database operations with mocked connections for reliability.\nEach function \u22648 lines per requirements.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/test_gcp_staging_comprehensive_deployment_validation.py",
      "relative_path": "netra_backend/tests/test_gcp_staging_comprehensive_deployment_validation.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGCP Staging Comprehensive Deployment Validation - Failing Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all customer segments)\n- Business Goal: Comprehensive Deployment Reliability and System Stability\n- Value Impact: Prevents deployment failures through comprehensive pre-deployment validation\n- Strategic/Revenue Impact: Reliable deployments critical for platform availability and $1M+ ARR\n\nThese failing tests provide comprehensive validation of deployment readiness and common failure patterns.\nThe tests are designed to FAIL until comprehensive deployment validation is implemented.\n\nCritical Areas Tested:\n1. All secrets properly trimmed and validated (no whitespace/control characters)\n2. Environment-specific validation strictness (dev vs staging vs production)\n3. Service dependency validation and health checks\n4. Database driver and connection validation across all services\n5. Configuration consistency across microservices\n6. Pre-deployment comprehensive validation suite\n",
      "test_methods": [
        "test_all_secrets_trimmed_no_whitespace"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/test_tool_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/test_tool_registry_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive test runner for UnifiedToolRegistry\n\nDemonstrates that the registry works correctly with the new get_tool_categories method.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/test_websocket_comprehensive.py",
      "relative_path": "netra_backend/tests/test_websocket_comprehensive.py",
      "category": "unknown",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive WebSocket Tests - 12 Required Test Scenarios\n\nTests all 12 required WebSocket test scenarios with real connections:\n1. Connection establishment with auth\n2. Auth validation in handshake \n3. Message routing to correct handlers\n4. Broadcasting to multiple clients\n5. Error handling and recovery\n6. Reconnection logic\n7. Rate limiting enforcement\n8. Message ordering guarantees\n9. Binary message handling\n10. Connection cleanup on disconnect\n11. Multi-room support\n12. Performance under load\n\nBusiness Value Justification (BVJ):\n1. Segment: Growth & Enterprise\n2. Business Goal: Protect $30K+ MRR from poor real-time experience\n3. Value Impact: Ensures reliable WebSocket functionality for all customer tiers\n4. Revenue Impact: Prevents customer churn from connection/communication failures\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/base/test_agent_errors_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/base/test_agent_errors_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 44,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for AgentErrors classes.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Development Velocity & System Reliability\n- Business Goal: Risk Reduction & Platform Stability\n- Value Impact: Ensures structured error handling enables precise error tracking and recovery\n- Strategic Impact: Prevents cascade failures, improves debugging efficiency, enables reliable agent execution\n\nThese tests ensure all agent error classes work correctly, provide proper context,\nand enable effective error handling and recovery patterns across the agent system.\n",
      "test_methods": [
        "test_basic_initialization",
        "test_full_initialization_with_all_parameters",
        "test_context_parameter_variations",
        "test_recovery_suggestions_parameter_variations",
        "test_retryability_flag_behavior",
        "test_error_context_immutability_protection",
        "test_empty_string_parameters",
        "test_large_context_handling",
        "test_basic_validation_error",
        "test_validation_error_with_field",
        "test_validation_error_field_variations",
        "test_validation_error_inheritance_properties",
        "test_validation_error_with_context_enrichment",
        "test_common_validation_scenarios",
        "test_basic_external_service_error",
        "test_external_service_error_with_status_code",
        "test_various_status_codes",
        "test_service_name_variations",
        "test_default_recovery_suggestions_immutable",
        "test_external_service_error_with_context_enrichment",
        "test_zero_and_negative_status_codes",
        "test_basic_database_error",
        "test_database_error_with_table",
        "test_database_error_table_variations",
        "test_database_error_inheritance_properties",
        "test_database_error_with_context_enrichment",
        "test_common_database_error_scenarios",
        "test_inheritance_hierarchy",
        "test_retryability_patterns",
        "test_error_context_consistency",
        "test_str_representation_consistency",
        "test_error_chaining_scenarios",
        "test_very_long_error_messages",
        "test_unicode_error_messages",
        "test_none_and_empty_parameters_comprehensive",
        "test_numeric_parameters_as_strings",
        "test_circular_reference_in_context",
        "test_deeply_nested_context",
        "test_thread_safety_simulation",
        "test_user_registration_validation_scenario",
        "test_payment_processing_external_service_scenario",
        "test_data_pipeline_database_scenario",
        "test_agent_coordination_error_scenario",
        "test_error_aggregation_pattern"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_execution_core_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_execution_core_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for AgentExecutionCore Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Platform Stability - Ensure agents execute reliably to deliver value\n- Value Impact: Agent execution is core to AI optimization - failures prevent value delivery\n- Strategic Impact: Platform reliability directly impacts user retention and satisfaction\n\nThis test suite validates the business-critical path of agent execution including:\n- Death detection and recovery mechanisms\n- Trace context propagation for observability \n- Timeout handling to prevent hung processes\n- WebSocket integration for real-time user feedback\n- Error boundary protection for graceful failures\n- Metrics collection for performance monitoring\n\nIMPORTANT: These tests focus on BUSINESS LOGIC with minimal infrastructure dependencies.\nThey use real business objects and validate core business rules.\n",
      "test_methods": [
        "test_configuration_constants_support_business_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_execution_core_comprehensive_unit.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_execution_core_comprehensive_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for AgentExecutionCore\n\nTests the core agent execution engine focusing on business logic, error boundaries,\ntimeout handling, WebSocket integration, and trace context management.\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n1. Uses absolute imports \n2. Follows SSOT patterns from test_framework/ssot/\n3. Uses StronglyTypedUserExecutionContext and proper type safety\n4. Tests MUST RAISE ERRORS (no try/except blocks that hide failures)\n5. Focuses on individual methods/functions in isolation\n\nBusiness Value: Platform/Internal - System Stability & Development Velocity\nEnsures the critical agent execution engine works correctly under all conditions.\n",
      "test_methods": [
        "test_init_creates_proper_dependencies",
        "test_calculate_performance_metrics",
        "test_get_agent_or_error_success",
        "test_get_agent_or_error_not_found",
        "test_create_websocket_callback"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_instance_factory_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_instance_factory_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 19,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for AgentInstanceFactory\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure robust agent instance creation with proper context isolation\n- Value Impact: Prevents WebSocket event failures, ensures proper sub-agent context\n- Strategic Impact: MISSION CRITICAL - Core infrastructure for agent management\n\nThis test suite validates the AgentInstanceFactory class, which is a CRITICAL SSOT component\nfor agent management in the Netra platform. It ensures:\n- Proper singleton pattern implementation\n- Agent creation with complete context isolation\n- WebSocket manager integration for event delivery\n- Factory configuration and pre-configuration patterns\n- Error handling for unknown agents and missing dependencies\n- Concurrent agent creation and resource cleanup\n- Performance optimization features\n\nCRITICAL: AgentInstanceFactory creates sub-agents with proper context to prevent\nWebSocket event delivery failures. Any bugs here could cause silent agent execution\nfailures and loss of real-time user feedback.\n\nAccording to MISSION_CRITICAL_NAMED_VALUES_INDEX:\n- Critical cascade impact: Sub-agents created without proper context, WebSocket events fail\n- Accessed via singleton pattern: get_agent_instance_factory()\n",
      "test_methods": [
        "test_singleton_pattern_returns_same_instance",
        "test_singleton_pattern_across_modules",
        "test_singleton_reset_creates_new_instance",
        "test_factory_initialization_defaults",
        "test_factory_initialization_performance_config",
        "test_configure_with_agent_class_registry_success",
        "test_configure_with_legacy_agent_registry_fallback",
        "test_configure_none_websocket_bridge_raises_error",
        "test_configure_empty_agent_class_registry_continues_with_warning",
        "test_configure_with_global_registry_fallback",
        "test_validate_agent_dependencies_success",
        "test_validate_agent_dependencies_missing_llm_manager_raises_error",
        "test_validate_agent_dependencies_by_class_name_matching",
        "test_validate_agent_dependencies_unknown_agent_no_error",
        "test_factory_metrics_structure",
        "test_websocket_emitter_initialization",
        "test_performance_config_integration",
        "test_weak_references_configuration",
        "test_class_caching_functionality"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_registry_base_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_registry_base_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for AgentRegistry - SSOT Base Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Platform Stability & Development Velocity\n- Value Impact: Ensures agent registry system works correctly for multi-user isolation patterns\n- Strategic Impact: Core platform functionality - agent management enables chat value delivery\n\nCRITICAL MISSION: Validates comprehensive AgentRegistry functionality with:\n1. Singleton pattern initialization and SSOT compliance\n2. User isolation features (UserAgentSession, memory management)\n3. Agent creation and registration with proper isolation patterns\n4. WebSocket manager integration and per-user bridges\n5. Factory pattern support for tool dispatchers\n6. Backward compatibility method delegation\n7. Registry health monitoring and diagnostics\n8. Cleanup and memory leak prevention mechanisms\n9. Thread-safe concurrent execution for 10+ users\n10. Edge case handling and error conditions\n\nThis comprehensive test suite covers ALL major functionality areas:\n- AgentRegistry initialization and configuration validation\n- UserAgentSession lifecycle management and isolation\n- AgentLifecycleManager memory leak prevention\n- WebSocket manager integration and propagation patterns\n- Tool dispatcher factory integration with UnifiedToolDispatcher\n- Agent registration, creation, retrieval, and cleanup\n- Concurrent access patterns and thread safety validation\n- Health monitoring, diagnostics, and metrics reporting\n- Backward compatibility method delegation and legacy support\n- Error handling, validation, and edge case coverage\n- Multi-user isolation scenarios and resource cleanup\n\nCRITICAL REQUIREMENTS:\n- Uses SSOT test patterns from test_framework.ssot.base_test_case\n- Tests with REAL instances (AgentRegistry, UserAgentSession, etc.) - NO mocks for business logic\n- Tests all async methods properly with await\n- Includes comprehensive edge case and error condition testing\n- Tests multi-user isolation scenarios and concurrent access patterns\n- Validates WebSocket integration and per-user bridge isolation\n- Tests memory leak prevention and cleanup mechanisms\n- Follows absolute import patterns and CLAUDE.md compliance\n",
      "test_methods": [
        "test_register_default_agents_sets_flag",
        "test_register_default_agents_idempotent",
        "test_register_default_agents_registers_core_agents",
        "test_list_agents_returns_registered_keys",
        "test_remove_agent_delegates_to_universal_registry",
        "test_get_agent_registry_returns_registry_instance",
        "test_get_agent_registry_handles_existing_global_registry"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_registry_complete.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_registry_complete.py",
      "category": "unit",
      "service": "backend",
      "test_count": 25,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete AgentRegistry Unit Tests - 100% Coverage for Mission-Critical SSOT Components\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Secure multi-user agent execution with complete isolation\n- Value Impact: Enables concurrent 10+ user execution without contamination\n- Strategic Impact: Foundation for scalable multi-tenant AI platform\n\nCRITICAL MISSION: Complete test coverage for AgentRegistry ensuring:\n1. Factory-based user isolation (NO global state access)\n2. Per-user agent registries with complete isolation  \n3. Memory leak prevention and lifecycle management\n4. Thread-safe concurrent execution for 10+ users\n5. WebSocket bridge isolation per user session\n6. UserAgentSession complete user isolation\n7. UnifiedToolDispatcher integration with user scoping\n8. Agent creation with proper user context\n9. Session cleanup and memory management\n10. Concurrent session handling and state isolation\n\nThis comprehensive test suite provides 100% coverage for:\n- UserAgentSession: Complete user isolation patterns\n- AgentLifecycleManager: Memory leak prevention\n- AgentRegistry: Multi-user agent management\n- WebSocket integration and propagation\n- Tool dispatcher creation and isolation\n- Concurrent user scenarios (10+ users)\n- Agent factory registration and execution\n- Session cleanup and resource management\n- Error handling and validation\n- Legacy compatibility and migration patterns\n\nSECURITY FOCUS: Tests validate complete user isolation preventing data leakage\nbetween concurrent users and ensuring proper resource cleanup to prevent memory leaks.\n",
      "test_methods": [
        "test_user_id",
        "test_user_context",
        "test_user_session_initialization_validates_user_id",
        "test_user_session_get_metrics_comprehensive",
        "test_lifecycle_manager_initialization",
        "test_agent_registry_initialization_comprehensive",
        "test_agent_registry_initialization_validation",
        "test_legacy_tool_dispatcher_property_deprecated",
        "test_legacy_tool_dispatcher_setter_deprecated",
        "test_register_default_agents_sets_registration_flag",
        "test_register_default_agents_idempotent_behavior",
        "test_register_default_agents_attempts_all_registrations",
        "test_register_method_backward_compatibility",
        "test_register_method_handles_registration_errors",
        "test_get_registry_health_comprehensive_metrics",
        "test_diagnose_websocket_wiring_detects_missing_components",
        "test_get_factory_integration_status_complete_metrics",
        "test_list_agents_returns_registered_keys",
        "test_remove_agent_delegates_to_universal_registry",
        "test_remove_agent_returns_false_for_nonexistent",
        "test_get_agent_registry_returns_proper_instance",
        "test_get_agent_registry_handles_none_tool_dispatcher",
        "test_get_agent_registry_caching_behavior",
        "test_memory_leak_prevention_weak_references",
        "test_user_execution_context_validation_edge_cases"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_registry_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive AgentRegistry Unit Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Platform Stability & Development Velocity\n- Value Impact: Ensures agent registration system works correctly for multi-user isolation\n- Strategic Impact: Core platform functionality - agent management enables chat value delivery\n\nCRITICAL MISSION: Validates that AgentRegistry properly manages agents with:\n1. WebSocket manager integration via set_websocket_manager()\n2. Tool dispatcher enhancement for user isolation\n3. Agent routing and execution orchestration\n4. User session management and cleanup\n5. Factory pattern support for agent creation\n6. Thread-safe concurrent operations\n\nThis comprehensive test suite covers:\n- Agent registration and deregistration\n- WebSocket manager integration and propagation\n- User session isolation and cleanup\n- Tool dispatcher creation and enhancement\n- Concurrent access and thread safety\n- Error handling and validation\n- Registry health monitoring\n- Factory pattern execution\n- Legacy compatibility support\n- Memory leak prevention\n",
      "test_methods": [
        "test_user_id",
        "test_user_context",
        "test_register_default_agents_sets_flag",
        "test_register_default_agents_idempotent",
        "test_register_default_agents_registers_core_agents",
        "test_user_session_initialization",
        "test_user_session_validates_user_id",
        "test_user_session_get_metrics",
        "test_list_agents_returns_registered_keys",
        "test_remove_agent_delegates_to_universal_registry",
        "test_get_agent_registry_returns_registry_instance",
        "test_get_agent_registry_handles_existing_global_registry"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_agent_registry_enhanced_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_agent_registry_enhanced_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\n\ud83d\ude80 Enhanced Comprehensive Unit Tests for AgentRegistry Class\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Platform Stability & Development Velocity & Risk Reduction\n- Value Impact: Ensures AgentRegistry (SSOT for agent management) works correctly for multi-user isolation, \n  WebSocket events delivery, and complete user session lifecycle management\n- Strategic Impact: CRITICAL platform functionality - AgentRegistry enables substantive chat value delivery\n  by orchestrating all agent interactions, WebSocket notifications, and user isolation patterns\n\nMISSION CRITICAL: This comprehensive test suite validates that AgentRegistry properly manages:\n1. \u2705 WebSocket manager integration and real-time event propagation\n2. \u2705 Tool dispatcher enhancement with UnifiedToolDispatcher SSOT patterns\n3. \u2705 User session management with complete isolation and security\n4. \u2705 Agent factory registration and async execution patterns\n5. \u2705 Thread-safe concurrent operations for 10+ users\n6. \u2705 Memory leak prevention and lifecycle management\n7. \u2705 Backward compatibility with legacy patterns\n8. \u2705 Error handling and graceful degradation\n9. \u2705 Registry health monitoring and diagnostics\n10. \u2705 Integration with UniversalRegistry SSOT architecture\n\nEnhanced Coverage Areas (Beyond Existing Tests):\n- Deep WebSocket bridge integration patterns\n- Advanced async factory patterns and error scenarios\n- Complex concurrency edge cases and race conditions\n- Extended memory leak detection and cleanup verification\n- Advanced tool dispatcher factory customization\n- Registry state consistency under load\n- Agent lifecycle event ordering and validation\n- Legacy migration compatibility scenarios\n- Advanced diagnostic and monitoring features\n- Error propagation and recovery patterns\n\nCLAUDE.md COMPLIANCE:\n- \u274c CHEATING ON TESTS = ABOMINATION - All tests MUST fail hard when system breaks\n- \u2705 REAL SERVICES > MOCKS - Use real UniversalRegistry, real UserExecutionContext instances\n- \u2705 ABSOLUTE IMPORTS - No relative imports (../../)\n- \u2705 TESTS MUST RAISE ERRORS - No try/except masking failures\n- \u2705 SSOT COMPLIANCE - Uses test_framework.ssot.base.BaseTestCase as foundation\n- \u2705 BUSINESS VALUE FOCUSED - Every test validates chat value delivery capability\n",
      "test_methods": [
        "test_user_id",
        "test_user_context"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_execution_engine_complete.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_execution_engine_complete.py",
      "category": "unit",
      "service": "backend",
      "test_count": 39,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ExecutionEngine\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Reliable agent execution and real-time communication\n- Value Impact: Enables multi-user concurrent execution with proper isolation\n- Strategic Impact: Core platform functionality - agent execution must work\n\nCRITICAL FEATURES TESTED:\n1. ExecutionEngine class with all pipeline execution methods\n2. RequestScopedExecutionEngine for per-user isolation\n3. UserExecutionContext integration and isolation  \n4. WebSocket event delivery (all 5 critical events)\n5. Concurrent user execution (5+ users simultaneously)\n6. Pipeline step execution and error handling\n7. Agent state management and transitions\n8. Performance characteristics (<2s response times)\n9. Factory methods: create_request_scoped_engine(), etc.\n10. Deprecated global state warnings and migration\n\nThis test file achieves 100% coverage of execution_engine.py functionality\nincluding concurrency, isolation, and WebSocket integration.\n",
      "test_methods": [
        "test_direct_construction_blocked",
        "test_direct_construction_error_message_details",
        "test_factory_construction_requires_user_context",
        "test_factory_construction_with_invalid_user_context",
        "test_factory_init_from_factory_creates_engine",
        "test_factory_init_creates_unique_instances",
        "test_websocket_bridge_validation",
        "test_websocket_bridge_security_validation",
        "test_engine_initialization_sets_correct_attributes",
        "test_engine_constants_are_set_correctly",
        "test_initialization_with_and_without_user_context",
        "test_execution_tracker_initialization",
        "test_component_initialization_completeness",
        "test_execution_stats_initialization",
        "test_death_monitoring_callback_registration",
        "test_valid_execution_context_passes",
        "test_empty_user_id_raises_error",
        "test_none_user_id_raises_error",
        "test_registry_placeholder_run_id_raises_error",
        "test_empty_run_id_raises_error",
        "test_user_context_consistency_validation",
        "test_user_context_run_id_mismatch_warning",
        "test_validation_with_empty_agent_name",
        "test_validation_with_special_characters_in_ids",
        "test_validation_with_very_long_ids",
        "test_validation_with_unicode_characters",
        "test_validation_caching_performance",
        "test_create_request_scoped_engine_factory",
        "test_create_request_scoped_engine_with_concurrency_limit",
        "test_create_execution_context_manager_factory",
        "test_create_execution_context_manager_with_params",
        "test_detect_global_state_usage_utility",
        "test_user_execution_context_integration",
        "test_engine_without_user_context",
        "test_has_user_context_method",
        "test_user_context_validation_integration",
        "test_flow_logger_integration",
        "test_removed_components_verification",
        "test_condition"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_execution_engine_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_execution_engine_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 28,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: 100% Unit Test Coverage for ExecutionEngine\n\nBusiness Value Justification (BVJ):\n- Segment: ALL user tiers (Free, Early, Mid, Enterprise) - affects every user interaction\n- Business Goal: Agent Execution Reliability & Multi-User Support & Chat Value Delivery\n- Value Impact: Enables AI chat functionality - 90% of platform business value depends on this component\n- Strategic Impact: Core infrastructure for agent pipeline execution - failure means complete platform failure\n\nCRITICAL REQUIREMENTS FROM CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors, no mocking business logic\n2. NO MOCKS for core business logic - Use real ExecutionEngine instances\n3. ABSOLUTE IMPORTS ONLY - No relative imports (. or ..)\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Must test real agent execution flows\n6. MISSION CRITICAL WebSocket Events - Must test all 5 critical events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n\nCRITICAL EXECUTION ENGINE REQUIREMENTS:\n- Must support UserExecutionContext integration for multi-user isolation\n- Must handle agent pipeline execution with proper state management\n- Must integrate with WebSocket events for real-time chat functionality  \n- Must provide concurrency control with semaphore-based limits\n- Must handle both legacy ExecutionEngine and RequestScopedExecutionEngine patterns\n\nTest Categories:\n1. Construction and Initialization (DirectConstructionBlocked, FactoryMethods, ValidationSecurity)\n2. UserExecutionContext Integration (Isolation, StateManagement, ConcurrentUsers)  \n3. Agent Execution Core (SingleAgent, Pipeline, Concurrency, Performance)\n4. WebSocket Event Delivery (All5CriticalEvents, EventOrdering, ErrorHandling)\n5. Error Handling and Recovery (Timeouts, Failures, Retries, FallbackStrategies)\n6. State Management and Persistence (UserStateIsolation, HistoryLimits, Statistics)\n7. Performance and Monitoring (ExecutionStats, DeathMonitoring, Heartbeats)\n8. Factory Patterns and Migration (RequestScoped, ContextManager, LegacySupport)\n9. Cleanup and Resource Management (Shutdown, MemoryLeaks, GracefulDegradation)\n10. Advanced Scenarios (MultiUserConcurrency, EdgeCases, ErrorRecovery)\n\nThis test file achieves 100% coverage of execution_engine.py (465 lines) with 70+ test methods,\n1,800+ lines of production-quality test code ensuring reliable agent execution infrastructure.\n",
      "test_methods": [
        "test_direct_construction_blocked_with_detailed_error",
        "test_direct_construction_blocked_with_user_context",
        "test_factory_init_from_factory_comprehensive",
        "test_factory_creates_unique_isolated_instances",
        "test_websocket_bridge_validation_comprehensive",
        "test_initialization_constants_and_limits",
        "test_death_monitoring_initialization_comprehensive",
        "test_user_context_validation_integration_comprehensive",
        "test_has_user_context_method_comprehensive",
        "test_removed_components_verification_comprehensive",
        "test_create_request_scoped_engine_comprehensive",
        "test_create_execution_context_manager_comprehensive",
        "test_detect_global_state_usage_comprehensive",
        "test_can_retry_method_comprehensive",
        "test_prepare_retry_context_comprehensive",
        "test_create_timeout_result_comprehensive",
        "test_create_error_result_comprehensive",
        "test_should_stop_pipeline_comprehensive",
        "test_extract_step_params_comprehensive",
        "test_extract_base_context_params_comprehensive",
        "test_build_step_context_dict_comprehensive",
        "test_create_step_context_comprehensive",
        "test_get_context_flow_id_comprehensive",
        "test_validate_execution_context_boundary_conditions",
        "test_validate_execution_context_unicode_support",
        "test_validate_execution_context_whitespace_edge_cases",
        "test_validate_execution_context_user_context_mismatch_scenarios",
        "test_validate_execution_context_run_id_variations"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_execution_engine_factory_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_execution_engine_factory_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 13,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Unit Tests for ExecutionEngineFactory SSOT Class\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (ALL user tiers depend on this)\n- Business Goal: Ensure multi-user system stability and prevent cascade failures\n- Value Impact: ExecutionEngineFactory is CRITICAL for user isolation - prevents data leakage between users\n- Strategic Impact: Foundation for production multi-tenant deployment - failure cascades to all users\n\nCRITICAL IMPORTANCE:\n- ExecutionEngineFactory creates isolated UserExecutionEngine instances for each user request\n- Prevents shared state contamination between concurrent users (10+ users simultaneously)\n- Manages resource limits to prevent resource exhaustion attacks\n- Handles WebSocket manager integration for real-time agent events (mission critical for chat value)\n- Provides automatic lifecycle management and cleanup to prevent memory leaks\n- Enforces per-user concurrency limits to maintain system stability\n\nThis comprehensive test suite validates ALL factory methods, user isolation patterns,\nresource management, error conditions, and factory lifecycle management.\n",
      "test_methods": [
        "test_factory_initialization_success",
        "test_factory_initialization_missing_websocket_bridge",
        "test_factory_initialization_with_minimal_dependencies",
        "test_set_tool_dispatcher_factory",
        "test_get_factory_metrics_initial_state",
        "test_get_factory_metrics_with_active_engines",
        "test_get_active_engines_summary_empty",
        "test_get_active_engines_summary_with_engines",
        "test_get_active_engines_summary_with_error",
        "test_get_active_contexts_empty",
        "test_get_active_contexts_multiple_users",
        "test_factory_initialization_performance",
        "test_metrics_collection_performance"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_user_agent_session_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_user_agent_session_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UserAgentSession\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Prevent agent execution contamination between users - MISSION CRITICAL\n- Value Impact: Ensures complete user isolation preventing security vulnerabilities\n- Strategic Impact: Foundation for multi-user AI chat sessions - prevents data leakage\n\nThis test suite validates the UserAgentSession class, which provides complete user isolation\nfor agent execution. It ensures:\n- User-scoped agent instances with proper isolation\n- WebSocket bridge per user with factory pattern integration\n- Memory leak prevention and resource cleanup\n- Thread-safe concurrent execution for 10+ users\n- Agent registry isolation patterns\n\nCRITICAL SECURITY REQUIREMENTS:\nUserAgentSession is the foundation that prevents user contamination in agent execution.\nAny bugs here could cause catastrophic user data leakage between users.\n\nTesting Philosophy:\n- Real UserExecutionContext instances (not mocks for core business logic)\n- Strongly typed IDs following SSOT patterns\n- Comprehensive security isolation tests\n- Memory management validation\n- WebSocket integration without mocking core functionality\n",
      "test_methods": [
        "test_basic_initialization_with_valid_user_id",
        "test_initialization_with_empty_user_id_raises_error",
        "test_initialization_with_none_user_id_raises_error",
        "test_initialization_with_non_string_user_id_raises_error",
        "test_get_metrics_returns_proper_session_information"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_user_execution_context_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_user_execution_context_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 45,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UserExecutionContext\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure robust user isolation and context management\n- Value Impact: Prevents user data leakage, enables reliable multi-user operations\n- Strategic Impact: Core platform stability - MISSION CRITICAL for user trust\n\nThis test suite validates the UserExecutionContext class, which is the SSOT component\nfor user isolation in the Netra platform. It ensures:\n- Complete user context isolation between users\n- Proper request state management\n- WebSocket event routing integrity\n- Database session management\n- Error handling and validation\n- Thread safety and concurrency protection\n\nCRITICAL: UserExecutionContext is the foundation for multi-user isolation.\nAny bugs here could cause catastrophic user data leakage.\n",
      "test_methods": [
        "test_basic_initialization_with_required_fields",
        "test_initialization_with_all_optional_fields",
        "test_frozen_dataclass_immutability",
        "test_validation_empty_required_fields",
        "test_validation_non_string_required_fields",
        "test_validation_dangerous_placeholder_values",
        "test_validation_dangerous_pattern_prefixes",
        "test_validation_metadata_structure",
        "test_validation_metadata_reserved_keys",
        "test_from_request_basic",
        "test_from_request_with_all_parameters",
        "test_from_request_auto_generated_request_id",
        "test_create_child_context_basic",
        "test_create_child_context_with_additional_metadata",
        "test_create_child_context_nested_depth_tracking",
        "test_create_child_context_validation",
        "test_with_db_session",
        "test_with_websocket_connection",
        "test_context_modification_immutability",
        "test_verify_isolation_basic",
        "test_verify_isolation_detects_shared_objects",
        "test_verify_isolation_duplicate_ids_warning",
        "test_to_dict_basic",
        "test_to_dict_with_db_session",
        "test_to_dict_metadata_isolation",
        "test_get_correlation_id_format",
        "test_get_correlation_id_short_ids",
        "test_get_correlation_id_uniqueness",
        "test_validate_user_context_success",
        "test_validate_user_context_type_error",
        "test_shared_objects_registry_functions",
        "test_metadata_isolation_on_init",
        "test_request_id_auto_generation_uniqueness",
        "test_timestamp_precision_and_timezone",
        "test_concurrent_context_creation",
        "test_concurrent_child_context_creation",
        "test_user_isolation_scenario",
        "test_request_tracking_scenario",
        "test_websocket_routing_scenario",
        "test_database_session_lifecycle_scenario",
        "test_error_isolation_and_validation",
        "test_performance_characteristics",
        "test_complete_system_integration_scenario",
        "test_comprehensive_edge_cases_validation",
        "test_final_business_value_assurance"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_user_execution_engine_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_user_execution_engine_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 15,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UserExecutionEngine SSOT Class\n\nTests the core UserExecutionEngine class that orchestrates complete agent execution\npipeline, ensuring WebSocket events, user context isolation, and business value delivery.\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n1. Uses absolute imports and follows SSOT patterns from test_framework/\n2. Tests MUST RAISE ERRORS (no try/except blocks that hide failures) \n3. Tests all 5 critical WebSocket events (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n4. Validates user context isolation and agent orchestration patterns\n5. Tests error handling, recovery, and graceful degradation\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free \u2192 Enterprise) - Core chat functionality \n- Business Goal: Ensure reliable agent execution and real-time user experience\n- Value Impact: UserExecutionEngine orchestrates SupervisorAgent \u2192 Sub-Agents workflow that delivers $500K+ ARR\n- Strategic Impact: This is the core of Golden Path user flow that provides substantive AI value\n- Revenue Impact: Without working UserExecutionEngine, chat has NO business value\n\nThis UserExecutionEngine is MISSION CRITICAL because it:\n- Orchestrates the complete agent execution pipeline (SupervisorAgent \u2192 Data \u2192 Optimization \u2192 Report agents)\n- Ensures all 5 WebSocket events are sent to provide user experience\n- Manages user context isolation for multi-user concurrent execution\n- Delivers the complete business value through agent orchestration\n",
      "test_methods": [
        "test_user_context",
        "test_init_creates_engine_with_proper_isolation",
        "test_init_validates_required_parameters",
        "test_init_validates_user_context",
        "test_init_configures_resource_limits",
        "test_user_context_properties",
        "test_is_active_state_management",
        "test_validate_execution_context_user_matching",
        "test_validate_execution_context_required_fields",
        "test_create_timeout_result",
        "test_update_user_history_with_size_limit",
        "test_get_user_execution_stats_comprehensive",
        "test_get_user_execution_stats_empty_data",
        "test_string_representations",
        "test_get_tool_dispatcher_test_mode"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_websocket_notifier_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_websocket_notifier_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for WebSocketNotifier Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: User Experience - Real-time feedback during AI operations\n- Value Impact: WebSocket events provide transparency and progress updates that prevent user abandonment\n- Strategic Impact: Real-time communication is core to modern AI UX expectations\n\nCRITICAL: Although WebSocketNotifier is deprecated in favor of AgentWebSocketBridge,\nit remains BUSINESS-CRITICAL as it handles guaranteed event delivery and concurrency optimization\nthat directly impact user experience and platform reliability.\n\nThis test suite validates:\n- Guaranteed delivery of critical events (agent_started, tool_executing, agent_completed)\n- Event queuing and backlog management for high-load scenarios\n- User feedback mechanisms during long-running operations  \n- Error recovery and fallback notification systems\n- Concurrent user support with proper event ordering\n",
      "test_methods": [
        "test_critical_events_configuration_supports_business_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/supervisor/test_websocket_notifier_comprehensive_unit.py",
      "relative_path": "netra_backend/tests/unit/agents/supervisor/test_websocket_notifier_comprehensive_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocketNotifier\n\nTests the deprecated WebSocketNotifier class focusing on message creation,\npayload building, delivery guarantees, and event queuing functionality.\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n1. Uses absolute imports \n2. Follows SSOT patterns from test_framework/ssot/\n3. Uses StronglyTypedUserExecutionContext and proper type safety\n4. Tests MUST RAISE ERRORS (no try/except blocks that hide failures)\n5. Focuses on individual methods/functions in isolation\n\nBusiness Value: Platform/Internal - System Stability & Development Velocity\nEnsures deprecated WebSocket notification system works correctly during transition period.\n\nNOTE: This component is DEPRECATED. Use AgentWebSocketBridge instead.\nThese tests ensure stability during the transition period.\n",
      "test_methods": [
        "test_init_shows_deprecation_warning",
        "test_init_configures_test_mode",
        "test_init_configures_performance_settings",
        "test_build_enhanced_thinking_payload_urgency_calculation",
        "test_get_tool_context_hints",
        "test_determine_error_severity",
        "test_generate_default_recovery_suggestions",
        "test_generate_user_friendly_error_message",
        "test_mark_operation_active",
        "test_update_operation_activity",
        "test_build_agent_status_changed_payload",
        "test_get_timestamp_returns_utc_float"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_agent_state_management_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_agent_state_management_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for Agent State Management Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Data Integrity - Ensure business data is properly validated and structured\n- Value Impact: State management ensures agent results are consistently formatted for business consumption\n- Strategic Impact: Reliable data validation prevents business logic errors and enables automation\n\nThis test suite validates the business-critical path of agent state management including:\n- Business result validation for cost savings and performance improvements\n- Data structure consistency for business reporting and dashboards  \n- Field parsing and conversion for robust business data handling\n- Metadata preservation for business audit trails and traceability\n- Typed models that prevent business logic errors\n- Validation rules that protect business data integrity\n\nCRITICAL: These tests focus on BUSINESS LOGIC that ensures AI agents produce\nreliable, validated business data that can be safely consumed by business systems.\n",
      "test_methods": [
        "test_optimizations_result_validates_business_cost_savings",
        "test_optimizations_result_validates_performance_improvements",
        "test_optimizations_result_parses_complex_business_recommendations",
        "test_action_plan_result_structures_business_execution_plan",
        "test_action_plan_result_parses_business_resources_and_metrics",
        "test_report_result_structures_business_reports",
        "test_report_result_parses_business_attachments",
        "test_synthetic_data_result_validates_business_data_quality",
        "test_plan_step_structures_business_workflow_steps",
        "test_business_metadata_preservation_across_models",
        "test_enterprise_scale_optimization_result_validation",
        "test_multi_department_action_plan_complexity"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_base_agent_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_base_agent_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 50,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive BaseAgent Unit Test Suite - 100% Coverage Focus\n\nMISSION-CRITICAL TEST SUITE: Complete validation of BaseAgent SSOT patterns and infrastructure.\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise)  \n- Business Goal: Platform Reliability & System Availability\n- Value Impact: BaseAgent reliability = Core platform foundation = $2M+ ARR protection\n- Strategic Impact: Every agent in the system inherits from BaseAgent, so reliability here\n  cascades to ALL agent operations, directly impacting user chat experience and business value delivery\n\nCOVERAGE TARGET: 100% of BaseAgent critical methods and patterns including:\n- State management and lifecycle transitions (lines 234-287)\n- WebSocket bridge integration and event emission (lines 904-1020) \n- Token management and cost optimization (lines 374-491)\n- Session isolation validation (lines 492-531)\n- Reliability infrastructure patterns (lines 1020-1100)\n- Factory method patterns (lines 1477-1759)\n- Abstract method contracts and execution patterns\n\nCRITICAL: Uses REAL services approach with minimal mocks per CLAUDE.md standards.\nOnly external dependencies are mocked - all internal components tested with real instances.\n",
      "test_methods": [
        "test_basic_initialization_with_defaults",
        "test_initialization_with_reliability_enabled",
        "test_initialization_with_legacy_tool_dispatcher_warning",
        "test_initialization_with_user_context",
        "test_session_isolation_validation_on_init",
        "test_initial_state_is_pending",
        "test_valid_state_transitions",
        "test_running_to_failed_transition",
        "test_failed_to_pending_retry_transition",
        "test_invalid_state_transitions_raise_errors",
        "test_completed_state_only_allows_shutdown",
        "test_shutdown_is_terminal_state",
        "test_websocket_bridge_adapter_initialization",
        "test_set_websocket_bridge_method",
        "test_has_websocket_context_detection",
        "test_propagate_websocket_context_to_state",
        "test_track_llm_usage_creates_enhanced_context",
        "test_optimize_prompt_for_context_returns_tuple",
        "test_get_cost_optimization_suggestions",
        "test_get_token_usage_summary",
        "test_validate_session_isolation_success",
        "test_validate_session_isolation_failure",
        "test_get_session_manager_success",
        "test_get_session_manager_invalid_context_type",
        "test_unified_reliability_handler_initialization",
        "test_reliability_manager_property_access",
        "test_unified_reliability_handler_property",
        "test_legacy_reliability_property_delegates",
        "test_execution_engine_initialization",
        "test_execution_monitor_initialization",
        "test_get_circuit_breaker_status_with_reliability_enabled",
        "test_get_circuit_breaker_status_with_reliability_disabled",
        "test_get_health_status_comprehensive",
        "test_determine_overall_health_status_healthy",
        "test_determine_overall_health_status_degraded",
        "test_create_with_context_factory_method",
        "test_create_with_context_invalid_context_type",
        "test_create_legacy_with_warnings_factory",
        "test_create_agent_with_context_factory",
        "test_validate_modern_implementation_compliant_agent",
        "test_validate_modern_implementation_legacy_agent",
        "test_assert_user_execution_context_pattern_compliant",
        "test_assert_user_execution_context_pattern_critical_violations",
        "test_get_migration_status",
        "test_store_metadata_result_with_serialization",
        "test_store_metadata_result_without_serialization",
        "test_store_metadata_batch",
        "test_get_metadata_value_with_metadata_attribute",
        "test_get_metadata_value_with_agent_context_fallback",
        "test_get_metadata_value_no_context_attributes"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_base_agent_comprehensive_enhanced.py",
      "relative_path": "netra_backend/tests/unit/agents/test_base_agent_comprehensive_enhanced.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Enhanced BaseAgent Unit Tests - Additional Critical Coverage\n\nThis file provides additional comprehensive tests for BaseAgent that complement the existing\ntest_base_agent_comprehensive.py file, focusing on areas that are critical for multi-user\nproduction scenarios and edge cases.\n\nBusiness Value Justification:\n- Segment: Platform/Internal | Testing Infrastructure & Production Stability  \n- Business Goal: Risk Reduction & Platform Reliability\n- Value Impact: Ensures BaseAgent handles concurrent multi-user scenarios correctly\n- Strategic Impact: Prevents agent failures under load that would cause user-facing errors\n\nCRITICAL AREAS COVERED:\n- Multi-user concurrent execution and isolation\n- Performance under load and resource management  \n- Advanced error handling and recovery scenarios\n- WebSocket event performance and timing\n- Edge cases and race conditions\n- Memory leak prevention and cleanup\n- Abstract method enforcement and execution patterns\n\nIMPORTANT: Uses real BaseAgent instances with minimal mocks per CLAUDE.md requirements.\n",
      "test_methods": [
        "test_agent_creation_and_cleanup_pattern",
        "test_health_status_with_degraded_components",
        "test_factory_method_patterns",
        "test_abstract_method_enforcement",
        "test_modern_implementation_validation",
        "test_migration_status_reporting",
        "test_user_execution_context_pattern_assertion"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_execution_engine_consolidated_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_execution_engine_consolidated_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 30,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Comprehensive Unit Tests for Consolidated ExecutionEngine\n\nBusiness Value Justification (BVJ):\n- Segment: ALL user tiers (Free, Early, Mid, Enterprise) - affects every user interaction\n- Business Goal: Agent Execution Reliability & Multi-User Isolation & Chat Value Delivery\n- Value Impact: Enables AI chat functionality - 95% of platform business value depends on this consolidated SSOT component  \n- Strategic Impact: Core infrastructure for unified agent execution - failure means complete platform failure\n\nCRITICAL REQUIREMENTS FROM CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors, no mocking business logic\n2. NO MOCKS for core business logic - Use real ExecutionEngine instances\n3. ABSOLUTE IMPORTS ONLY - No relative imports (. or ..)\n4. Tests must RAISE ERRORS - No try/except blocks masking failures  \n5. Real services over mocks - Must test real execution flows\n6. MISSION CRITICAL WebSocket Events - Must test all 5 critical events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n\nCONSOLIDATED EXECUTION ENGINE REQUIREMENTS:\n- Must support 10+ concurrent users with complete isolation (<2s response time)\n- Must handle extension pattern for feature composition without duplication\n- Must integrate all WebSocket events for real-time chat functionality\n- Must provide request-scoped isolation through RequestScopedExecutionEngine  \n- Must support factory methods for different engine configurations\n- Must handle all extension types: User, MCP, Data, WebSocket\n- Must provide comprehensive metrics and performance tracking\n- Must support graceful cleanup and resource management\n\nTest Coverage Areas:\n1. Engine Configuration and Initialization (EngineConfig validation, extension loading)\n2. Extension Pattern Implementation (UserExecutionExtension, MCPExecutionExtension, DataExecutionExtension, WebSocketExtension)\n3. Core Execution Engine Functionality (agent execution, timeout handling, error recovery)\n4. Request-Scoped Execution (isolation, context management, cleanup)\n5. Factory Pattern Implementation (ExecutionEngineFactory with all factory methods)\n6. WebSocket Event Integration (all 5 critical events, error handling)\n7. Performance and Metrics (execution timing, success rates, resource tracking)\n8. Multi-User Isolation (concurrent execution, user-specific resources)\n9. Error Handling and Recovery (extension failures, execution timeouts, cleanup failures)\n10. Lifecycle Management (initialization, cleanup, resource management)\n\nThis test file achieves 100% coverage of execution_engine_consolidated.py (856+ lines) with 50+ test methods,\nensuring reliable unified agent execution infrastructure supporting multi-user concurrent operations.\n",
      "test_methods": [
        "test_engine_config_default_values",
        "test_engine_config_custom_values",
        "test_engine_config_validation",
        "test_agent_execution_context_creation",
        "test_agent_execution_context_with_all_fields",
        "test_agent_execution_result_success",
        "test_agent_execution_result_failure",
        "test_user_execution_extension_initialization",
        "test_mcp_execution_extension_initialization",
        "test_data_execution_extension_initialization",
        "test_websocket_extension_initialization",
        "test_websocket_extension_without_bridge",
        "test_execution_engine_initialization",
        "test_execution_engine_initialization_with_config",
        "test_extension_loading",
        "test_metrics_collection",
        "test_metrics_empty_state",
        "test_request_scoped_engine_creation",
        "test_with_request_scope_factory_method",
        "test_factory_set_defaults",
        "test_factory_create_engine_basic",
        "test_factory_create_engine_with_user_context",
        "test_factory_create_engine_with_defaults",
        "test_factory_create_user_engine",
        "test_factory_create_data_engine",
        "test_factory_create_mcp_engine",
        "test_factory_create_request_scoped_engine",
        "test_create_execution_engine_deprecation",
        "test_get_execution_engine_factory_deprecation",
        "test_metrics_performance_threshold_assertion"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_execution_engine_consolidated_comprehensive_focused.py",
      "relative_path": "netra_backend/tests/unit/agents/test_execution_engine_consolidated_comprehensive_focused.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ExecutionEngineConsolidated - SINGLE SOURCE OF TRUTH (Focused Implementation)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (serves ALL customer segments - Free, Early, Mid, Enterprise)\n- Business Goal: Agent Execution Reliability & Multi-User Isolation & Chat Value Delivery\n- Value Impact: Enables EVERY AI chat interaction - 95% of platform business value depends on this SSOT component  \n- Strategic Impact: Core infrastructure for unified agent execution - failure means complete platform failure\n\nCRITICAL: ExecutionEngineConsolidated is the BUSINESS-CRITICAL SSOT class providing:\n1. Extension pattern for feature composition without duplication (60% reduction in duplicate code)\n2. Request-scoped isolation for 10+ concurrent users (<2s response time requirement)\n3. All 5 critical WebSocket events for chat value delivery (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n4. Factory patterns for different execution configurations (User, Data, MCP optimized)\n5. Comprehensive metrics and performance tracking for SLA compliance\n6. Error handling and recovery for maximum reliability\n\nThis comprehensive test suite ensures 100% coverage of all critical business logic paths,\nsecurity aspects, and operational scenarios following CLAUDE.md requirements.\n\nULTRA THINK DEEPLY: Every test validates REAL business value and security requirements.\n\nREQUIREMENTS:\n- NO mocks for core business logic - test real instances where possible\n- Tests MUST RAISE ERRORS - no try/except masking failures  \n- ABSOLUTE IMPORTS only per CLAUDE.md\n- Use SSOT patterns from test_framework\n- Comprehensive coverage including all edge cases and error conditions\n- Multi-user isolation testing (CRITICAL for preventing user data leakage)\n- WebSocket integration testing (CRITICAL for chat value delivery)\n- Performance requirement validation (<2s execution, 10+ concurrent users)\n\nCHEATING ON TESTS = ABOMINATION\n",
      "test_methods": [
        "test_engine_config_default_values_business_requirements",
        "test_engine_config_performance_optimization_settings",
        "test_engine_config_security_settings",
        "test_engine_config_feature_flag_combinations",
        "test_factory_business_configuration_patterns",
        "test_factory_default_configuration_inheritance",
        "test_factory_specialized_engine_configurations"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_supervisor_agent_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_supervisor_agent_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive SupervisorAgent Unit Test Suite - MISSION CRITICAL for Chat Delivery\n\nBUSINESS VALUE JUSTIFICATION (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise)  \n- Business Goal: Platform Reliability & Chat Delivery Infrastructure\n- Value Impact: SupervisorAgent orchestration reliability = 100% of AI chat functionality = Direct revenue impact\n- Strategic Impact: Every chat interaction depends on SupervisorAgent orchestration. Failures = immediate user impact.\n\nMISSION CRITICAL REQUIREMENTS:\n- SupervisorAgent is the core orchestration engine for ALL AI chat interactions\n- All WebSocket events for chat delivery must work correctly  \n- Multi-user concurrent execution MUST be properly isolated\n- Error handling and recovery MUST work to maintain chat availability\n\nTEST COVERAGE TARGET: 100% of SupervisorAgent critical business logic including:\n- UserExecutionContext integration and isolation (lines 135-252)\n- Agent lifecycle orchestration (lines 304-344, 552-721) \n- WebSocket event coordination for chat delivery (lines 810-833)\n- Multi-user concurrency safety (lines 163, 245-252)\n- Error handling and recovery patterns (lines 668-709, 723-773)\n- Agent dependency validation (lines 514-551)\n- Dynamic workflow execution (lines 904-1055)\n\nCRITICAL: Uses REAL instances approach - minimal mocking per CLAUDE.md standards.\nTests must FAIL HARD on any issues - no try/except masking allowed.\n",
      "test_methods": [
        "test_supervisor_initialization_with_user_context",
        "test_agent_dependency_validation_ssot",
        "test_supervisor_factory_method",
        "test_get_required_agent_names_ssot",
        "test_agent_dependencies_ssot_structure",
        "test_string_representations",
        "test_get_stats_and_performance_metrics"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_tool_dispatcher_core_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_tool_dispatcher_core_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for ToolDispatcher Core Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: AI Tool Execution Reliability - Core to agent-based optimization\n- Value Impact: Tool dispatching enables AI agents to interact with business systems\n- Strategic Impact: Reliable tool execution is fundamental to platform value delivery\n\nThis test suite validates the business-critical path of tool dispatching including:\n- Request-scoped architecture for multi-user isolation\n- Tool registration and validation for business operations\n- WebSocket integration for real-time tool execution feedback\n- Error handling and graceful degradation\n- Factory pattern enforcement for user context isolation\n- Tool execution with proper state management\n\nCRITICAL: These tests focus on BUSINESS LOGIC that enables AI agents to execute\ntools that provide actionable business insights (cost optimization, data analysis, etc.)\n",
      "test_methods": [
        "test_direct_instantiation_prevented_for_user_isolation",
        "test_factory_created_dispatcher_has_business_tools",
        "test_dynamic_tool_registration_supports_business_flexibility",
        "test_tool_dispatch_request_model_validates_input",
        "test_tool_dispatch_response_model_structures_output",
        "test_error_result_creation_provides_business_clarity"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_tool_dispatcher_core_comprehensive_unit.py",
      "relative_path": "netra_backend/tests/unit/agents/test_tool_dispatcher_core_comprehensive_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 20,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ToolDispatcher Core\n\nTests the core tool dispatcher functionality focusing on request-scoped architecture,\ntool registration, dispatch logic, WebSocket integration, and security patterns.\n\nCRITICAL REQUIREMENTS from CLAUDE.md:\n1. Uses absolute imports \n2. Follows SSOT patterns from test_framework/ssot/\n3. Uses StronglyTypedUserExecutionContext and proper type safety\n4. Tests MUST RAISE ERRORS (no try/except blocks that hide failures)\n5. Focuses on individual methods/functions in isolation\n\nBusiness Value: Platform/Internal - System Stability & Development Velocity\nEnsures the core tool dispatch system works correctly with proper user isolation.\n",
      "test_methods": [
        "test_init_prevents_direct_instantiation",
        "test_init_from_factory_creates_proper_components",
        "test_tools_property_exposes_registry",
        "test_has_websocket_support_property",
        "test_has_tool_checks_registry",
        "test_register_tool_with_basetool",
        "test_register_tool_with_function_creates_wrapper",
        "test_register_tool_with_async_function",
        "test_set_websocket_bridge_updates_executor",
        "test_set_websocket_bridge_to_none",
        "test_diagnose_websocket_wiring_comprehensive",
        "test_diagnose_websocket_wiring_missing_bridge",
        "test_create_tool_input_structure",
        "test_create_error_result_structure",
        "test_create_tool_not_found_response",
        "test_tool_dispatch_request_model",
        "test_tool_dispatch_request_default_parameters",
        "test_tool_dispatch_response_model",
        "test_tool_dispatch_response_default_fields",
        "test_function"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_tool_dispatcher_execution_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_tool_dispatcher_execution_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for ToolExecutionEngine Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Tool Execution Reliability - Enable AI agents to execute business tools\n- Value Impact: Tool execution engine powers agent interactions with business systems \n- Strategic Impact: Reliable tool execution is critical for delivering AI optimization value\n\nThis test suite validates the business-critical path of tool execution including:\n- Delegation to unified tool execution architecture\n- Proper error handling and business result conversion\n- State management for business context preservation\n- Integration with WebSocket notifications for user feedback\n- Tool result formatting for business consumption\n- Performance tracking for business insights\n\nCRITICAL: These tests focus on BUSINESS LOGIC that enables AI agents to execute\ntools and deliver actionable business results (cost savings, data insights, etc.)\n",
      "test_methods": [
        "test_initialization_creates_unified_engine_with_websocket_support"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_tool_dispatcher_validation_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_tool_dispatcher_validation_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 10,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for ToolDispatcherValidation Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Data Security & Integrity - Protect business operations from invalid tool inputs\n- Value Impact: Validation prevents malicious or malformed data from disrupting business processes\n- Strategic Impact: Input validation is critical for platform security and business data protection\n\nThis test suite validates the business-critical path of tool input/output validation including:\n- Tool name validation to prevent injection attacks on business systems\n- Parameter validation to protect sensitive business data\n- Result validation to ensure business data integrity\n- State object validation for business context preservation\n- Run ID validation for business process traceability\n- Sanitization of potentially harmful business data\n- Security controls that protect business operations\n\nCRITICAL: These tests focus on BUSINESS LOGIC that ensures AI tools execute\nsafely with validated inputs that protect business data and operations.\n",
      "test_methods": [
        "test_tool_name_validation_protects_business_systems",
        "test_parameter_validation_protects_sensitive_business_data",
        "test_sensitive_parameter_detection_protects_business_secrets",
        "test_tool_result_validation_ensures_business_data_integrity",
        "test_state_object_validation_preserves_business_context",
        "test_run_id_validation_enables_business_process_traceability",
        "test_parameter_sanitization_protects_business_operations",
        "test_validation_result_structure_enables_business_decision_making",
        "test_enterprise_scale_parameter_validation",
        "test_multi_tenant_tool_name_isolation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_tool_execution_engines_comprehensive_focused.py",
      "relative_path": "netra_backend/tests/unit/agents/test_tool_execution_engines_comprehensive_focused.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Comprehensive Unit Tests for Tool Dispatcher Execution Engines\n\nBusiness Value Justification (BVJ):\n- Segment: ALL customer segments (Free, Early, Mid, Enterprise) - affects every user interaction\n- Business Goal: Tool Execution Reliability & Multi-User Isolation & Chat Value Delivery\n- Value Impact: Tool execution = 90% of agent value (per CLAUDE.md) - complete platform failure if broken\n- Strategic Impact: Core infrastructure enabling AI chat functionality across all business tiers\n\nCRITICAL REQUIREMENTS FROM CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors, no mocking business logic\n2. NO MOCKS for core business logic - Use real Tool Execution Engine instances  \n3. ABSOLUTE IMPORTS ONLY - No relative imports (. or ..)\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Must test real execution flows\n6. MISSION CRITICAL WebSocket Events - Must test tool_executing and tool_completed events\n7. User isolation MANDATORY - Multi-user system requires factory patterns\n\nTOOL EXECUTION ENGINE REQUIREMENTS:\n- UnifiedToolExecutionEngine: SSOT for all tool execution with WebSocket notifications\n- ToolExecutionEngine (dispatcher): Delegates to unified implementation with state management\n- Services ToolExecutionEngine: Permission checking and security validation\n- Must handle 10+ concurrent users with complete isolation (<2s response time)\n- Must generate WebSocket events: tool_executing, tool_completed\n- Must prevent unauthorized tool access through permission validation\n- Must support error handling and graceful degradation\n- Must track execution metrics and performance\n\nTest Coverage Areas (50+ tests for 100% coverage):\n1. UnifiedToolExecutionEngine Business Logic (execution, WebSocket events, error handling)\n2. Tool Dispatcher Execution Engine (delegation, state management, response conversion)\n3. Services Layer Execution Engine (permission validation, security checks)\n4. WebSocket Event Generation (tool_executing, tool_completed events)\n5. User Context Isolation (multi-user execution prevention)\n6. Security Validation (permission checks, unauthorized access prevention)\n7. Tool Permission Service Integration (usage recording, permission validation)\n8. Performance and Metrics (execution timing, success rates, resource tracking)\n9. Error Handling and Recovery (timeout handling, exception management, cleanup)\n10. Concurrent Tool Execution (multiple users, resource contention, isolation)\n\nThis comprehensive test suite ensures 100% coverage of all tool execution critical paths,\nvalidating every aspect of tool execution infrastructure that enables platform business value.\n\nULTRA THINK DEEPLY: Every test validates REAL business value and security requirements.\n",
      "test_methods": [
        "test_unified_tool_execution_engine_initialization",
        "test_unified_tool_execution_engine_with_websocket_bridge",
        "test_unified_tool_execution_engine_with_permission_service",
        "test_enhanced_tool_execution_engine_alias",
        "test_dispatcher_engine_initialization",
        "test_dispatcher_engine_with_websocket_manager",
        "test_services_engine_initialization",
        "test_mock_user_creation_for_interface_only_in_tests",
        "test_convert_execution_result_to_response"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_unified_tool_execution_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_unified_tool_execution_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for UnifiedToolExecution Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Unified Tool Execution - Single source of truth for AI tool operations\n- Value Impact: Unified execution ensures consistent tool behavior across all business agents\n- Strategic Impact: SSOT architecture eliminates execution inconsistencies and improves platform reliability\n\nThis test suite validates the business-critical path of unified tool execution including:\n- Single source of truth for all tool execution patterns\n- WebSocket notification integration for real-time user feedback\n- Permission checks and security validation for business tools\n- Resource management and rate limiting for business scalability\n- Error handling and timeout protection for business continuity\n- Metrics tracking for business performance insights\n\nCRITICAL: These tests focus on BUSINESS LOGIC that ensures all AI agents\nexecute tools consistently to deliver reliable business value.\n",
      "test_methods": [
        "test_ssot_compatibility_maintains_business_interfaces"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/agents/test_user_context_tool_factory_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/agents/test_user_context_tool_factory_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UserContextToolFactory\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Multi-User Safety, Risk Reduction, Platform Stability\n- Value Impact: Factory creates isolated tool systems preventing $10M+ churn from user data leakage\n- Strategic Impact: Foundation for scalable multi-tenant agent execution with complete resource isolation\n\nThis test suite ensures UserContextToolFactory delivers 100% user isolation for multi-user chat,\npreventing data leaks and enabling concurrent agent execution across all customer segments.\n",
      "test_methods": [
        "test_class_exists_and_has_required_methods",
        "test_get_app_tool_classes_function_exists",
        "test_validate_tool_system_success",
        "test_validate_tool_system_missing_required_keys",
        "test_validate_tool_system_invalid_tools_type",
        "test_validate_tool_system_empty_tools_warning",
        "test_validate_system_with_none_input",
        "test_get_app_tool_classes_returns_list",
        "test_get_app_tool_classes_handles_request_context_failure"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/business/test_billing_calculator_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/business/test_billing_calculator_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 62,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Unit Tests for BillingCalculator.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Second most business-critical class for revenue protection\n- Business Goal: Revenue Protection & Customer Trust - Prevent under/over-charging that causes revenue loss/churn  \n- Value Impact: Ensures accurate billing calculations for subscription fees, usage costs, and overage charges\n- Strategic Impact: Mathematical precision in billing directly impacts customer satisfaction and revenue integrity\n\nThis test suite provides 100% comprehensive unit test coverage for BillingCalculator\nfollowing CLAUDE.md best practices and TEST_CREATION_GUIDE.md patterns.\n\nCRITICAL: This class calculates all billing amounts and directly impacts revenue accuracy.\nComprehensive testing prevents under/over-charging customers which could cause\nrevenue loss or customer churn.\n",
      "test_methods": [
        "test_billing_calculator_initialization_success",
        "test_billing_calculator_initialization_idempotent",
        "test_billing_calculator_initialization_thread_safety_concept",
        "test_calculate_usage_cost_basic_empty_data",
        "test_calculate_usage_cost_basic_populated_data",
        "test_calculate_usage_cost_zero_values",
        "test_calculate_usage_cost_negative_values_handling",
        "test_calculate_usage_cost_very_large_values",
        "test_calculate_usage_cost_decimal_precision",
        "test_calculate_usage_cost_string_values_handling",
        "test_calculate_usage_cost_none_values_handling",
        "test_calculate_monthly_fee_free_plan",
        "test_calculate_monthly_fee_early_plan",
        "test_calculate_monthly_fee_mid_plan",
        "test_calculate_monthly_fee_enterprise_plan",
        "test_calculate_monthly_fee_case_insensitive",
        "test_calculate_monthly_fee_unknown_plan",
        "test_calculate_monthly_fee_none_plan",
        "test_calculate_monthly_fee_empty_string",
        "test_calculate_monthly_fee_whitespace_plan",
        "test_calculate_monthly_fee_decimal_precision",
        "test_calculate_monthly_fee_consistency",
        "test_calculate_overage_cost_no_overage",
        "test_calculate_overage_cost_exact_limit",
        "test_calculate_overage_cost_with_overage",
        "test_calculate_overage_cost_small_overage",
        "test_calculate_overage_cost_large_overage",
        "test_calculate_overage_cost_zero_rate",
        "test_calculate_overage_cost_negative_overage_rate",
        "test_calculate_overage_cost_zero_usage",
        "test_calculate_overage_cost_zero_limit",
        "test_calculate_overage_cost_negative_usage",
        "test_calculate_overage_cost_negative_limit",
        "test_calculate_overage_cost_decimal_precision",
        "test_calculate_overage_cost_rounding_behavior",
        "test_calculate_total_bill_free_plan",
        "test_calculate_total_bill_early_plan",
        "test_calculate_total_bill_mid_plan",
        "test_calculate_total_bill_enterprise_plan",
        "test_calculate_total_bill_unknown_plan",
        "test_calculate_total_bill_empty_usage_data",
        "test_calculate_total_bill_none_usage_data",
        "test_calculate_total_bill_decimal_arithmetic_precision",
        "test_calculate_total_bill_consistency",
        "test_calculate_total_bill_all_plans_structure",
        "test_billing_calculator_memory_efficiency",
        "test_billing_calculator_concurrent_access_concept",
        "test_billing_calculator_extreme_values",
        "test_billing_calculator_string_injection_safety",
        "test_billing_calculator_unicode_handling",
        "test_billing_calculator_type_conversion_safety",
        "test_decimal_precision_consistency",
        "test_overage_calculation_precision",
        "test_rounding_behavior_consistency",
        "test_large_number_handling",
        "test_monetary_arithmetic_accuracy",
        "test_zero_handling_precision",
        "test_complete_billing_workflow_free_user",
        "test_complete_billing_workflow_enterprise_user",
        "test_billing_across_all_plans_consistency",
        "test_overage_scenarios_realistic_usage",
        "test_billing_calculator_business_rules_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/business/test_credit_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/business/test_credit_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest CreditManager SSOT Class - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - credit management affects all user tiers\n- Business Goal: Revenue Protection & Credit System Integrity\n- Value Impact: Prevents credit calculation errors, protects against credit fraud, ensures accurate billing\n- Strategic Impact: $2M+ annual revenue protection through proper credit management and transaction tracking\n\nCRITICAL TESTING COMPLIANCE:\n- NO CHEATING ON TESTS = ABOMINATION - All tests fail hard when system breaks\n- NO MOCKS for business logic - Use real CreditManager instances\n- ABSOLUTE IMPORTS ONLY - No relative imports\n- ERROR RAISING - No try/except masking failures\n- REAL BUSINESS VALUE - Each test validates actual business logic\n",
      "test_methods": [
        "test_init_without_session",
        "test_init_with_session"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/business/test_subscription_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/business/test_subscription_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Unit Tests for SubscriptionManager - Revenue Protection\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Revenue Protection and Subscription Lifecycle Management\n- Value Impact: Prevents revenue loss from subscription failures, ensures proper billing transitions\n- Strategic Impact: Directly protects $75K+ MRR through reliable subscription management\n\nThis test suite ensures the most business-critical class for revenue protection\noperates correctly across all subscription lifecycle scenarios.\n\nCRITICAL: These tests validate subscription state management, billing transitions,\nand revenue protection mechanisms that directly impact business cash flow.\n\nCRITICAL TESTING COMPLIANCE:\n- NO CHEATING ON TESTS = ABOMINATION - All tests fail hard when system breaks\n- ABSOLUTE IMPORTS ONLY - No relative imports\n- ERROR RAISING - No try/except masking failures  \n- REAL BUSINESS VALUE - Each test validates actual business logic\n",
      "test_methods": [
        "test_init_without_session",
        "test_init_with_session",
        "test_manager_attributes_exist",
        "test_manager_initialization_thread_safety",
        "test_manager_instantiation_multiple_times",
        "test_manager_with_different_sessions"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/business/test_usage_tracker_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/business/test_usage_tracker_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 22,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Unit Tests for UsageTracker.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Critical billing infrastructure for all tiers\n- Business Goal: Revenue Protection & Consumption Tracking - Track user consumption accurately for billing\n- Value Impact: Prevents revenue loss through accurate usage tracking and billing calculations\n- Strategic Impact: Foundation for monetization through consumption-based billing and rate limiting\n\nThis test suite provides 100% comprehensive unit test coverage for UsageTracker\nfollowing CLAUDE.md best practices and TEST_CREATION_GUIDE.md patterns.\n\nCRITICAL: This class tracks all user consumption that directly impacts billing accuracy.\nComprehensive testing prevents under-tracking (revenue loss) or over-tracking (customer churn).\nUsage tracking forms the foundation of our consumption-based pricing model.\n",
      "test_methods": [
        "test_usage_tracker_initialization_success",
        "test_usage_tracker_initialization_pricing_loaded",
        "test_usage_tracker_initialization_rate_limits_configured",
        "test_usage_tracker_initialization_multiple_instances",
        "test_usage_event_creation_basic",
        "test_usage_event_creation_with_metadata",
        "test_usage_event_post_init_string_conversion",
        "test_usage_event_post_init_metadata_initialization",
        "test_get_pricing_returns_all_types",
        "test_update_pricing_valid_updates",
        "test_update_pricing_invalid_usage_type",
        "test_update_pricing_zero_price",
        "test_update_pricing_affects_new_events",
        "test_get_rate_limits_structure",
        "test_update_rate_limits_valid_updates",
        "test_update_rate_limits_invalid_usage_type",
        "test_update_rate_limits_partial_config",
        "test_update_rate_limits_affects_future_checks",
        "test_get_stats_empty_tracker",
        "test_get_stats_disabled_tracker",
        "test_clear_data_functionality",
        "test_usage_event_string_enum_conversion_invalid"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/clients/test_auth_client_config_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/clients/test_auth_client_config_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 53,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest AuthClientConfigManager and Related Configuration Classes\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - affects all services and environments  \n- Business Goal: Security & System Reliability - ensures secure authentication workflows\n- Value Impact: Prevents security breaches through proper auth configuration management\n- Strategic Impact: $5M+ security risk mitigation through validated authentication infrastructure\n\nThis comprehensive test suite validates the SSOT AuthClientConfigManager system that controls\nauthentication for the entire platform. These tests ensure:\n1. Configuration loading works correctly across all environments\n2. Security validation prevents misconfigurations that could cause breaches\n3. Environment isolation prevents config leakage between dev/staging/prod\n4. OAuth configuration generation works for all supported providers\n5. Error handling protects against silent authentication failures\n\nCRITICAL: All tests follow CLAUDE.md requirements:\n- NO CHEATING ON TESTS = Tests must fail hard when system breaks\n- NO MOCKS for business logic - Use real AuthClientConfigManager instances\n- ABSOLUTE IMPORTS ONLY - No relative imports\n- ERROR RAISING - No try/except masking failures\n",
      "test_methods": [
        "test_auth_client_config_manager_initialization",
        "test_auth_client_config_manager_singleton_behavior",
        "test_get_config_lazy_loading",
        "test_get_security_config_lazy_loading",
        "test_reload_config_clears_cache",
        "test_validate_config_with_valid_configuration",
        "test_validate_config_with_missing_service_url",
        "test_validate_config_with_invalid_security_config",
        "test_validate_config_handles_exceptions",
        "test_oauth_config_generator_initialization",
        "test_oauth_config_generator_development_environment",
        "test_oauth_config_generator_production_environment",
        "test_oauth_config_generator_staging_environment",
        "test_oauth_config_generator_invalid_environment_fallback",
        "test_get_provider_config_google",
        "test_get_provider_config_invalid_provider",
        "test_get_oauth_config_method",
        "test_auth_client_config_initialization_with_defaults",
        "test_auth_client_config_initialization_with_parameters",
        "test_auth_client_config_post_init_development_environment",
        "test_auth_client_config_post_init_staging_environment",
        "test_auth_client_config_post_init_production_environment",
        "test_auth_client_config_base_url_property",
        "test_auth_client_config_health_url_property",
        "test_auth_client_config_to_dict_method",
        "test_auth_client_security_config_initialization_defaults",
        "test_auth_client_security_config_initialization_with_secrets",
        "test_auth_client_security_config_is_valid_with_service_secret",
        "test_auth_client_security_config_is_valid_without_service_secret",
        "test_auth_client_security_config_is_valid_with_empty_service_secret",
        "test_oauth_config_initialization_defaults",
        "test_oauth_config_initialization_with_parameters",
        "test_oauth_config_from_env_method",
        "test_oauth_config_is_configured_with_valid_credentials",
        "test_oauth_config_is_configured_missing_client_id",
        "test_oauth_config_is_configured_missing_client_secret",
        "test_oauth_config_is_configured_empty_credentials",
        "test_load_auth_client_config_default_values",
        "test_load_auth_client_config_from_environment",
        "test_load_auth_security_config_default_values",
        "test_load_auth_security_config_from_environment",
        "test_get_auth_config_global_function",
        "test_get_auth_security_config_global_function",
        "test_development_config_isolation",
        "test_production_config_isolation",
        "test_staging_config_isolation",
        "test_config_no_cross_environment_contamination",
        "test_auth_client_config_invalid_ssl_setting",
        "test_oauth_config_malformed_redirect_uri",
        "test_auth_config_manager_config_loading_exception",
        "test_oauth_config_generator_missing_environment_variables",
        "test_auth_client_config_extreme_timeout_values",
        "test_auth_client_config_negative_values"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/configuration/test_configuration_loader_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/configuration/test_configuration_loader_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 34,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ConfigurationLoader - SSOT Configuration Access\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all segments)\n- Business Goal: Development Velocity & Risk Reduction \n- Value Impact: Ensures configuration loading works reliably across ALL environments\n- Strategic Impact: ConfigurationLoader is the primary facade for config access - failure blocks entire platform\n\nCRITICAL: ConfigurationLoader provides the main interface for configuration access.\nThis is the entry point that ALL services use to get configuration.\n\nTest Requirements from CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors\n2. NO mocks unless absolutely necessary - Use real configuration classes\n3. ABSOLUTE IMPORTS only - No relative imports\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Use real environment detection, real config classes\n\nTesting Areas:\n1. Configuration Loading - load(), caching, lazy initialization\n2. Environment Detection - development, staging, production, testing\n3. Configuration Creation - proper config class instantiation per environment\n4. Caching Behavior - LRU cache, reload functionality  \n5. Service Configuration Access - redis, llm, auth service configs\n6. Environment Helper Methods - is_production(), is_development(), etc.\n7. Database URL Access - postgres, clickhouse URLs\n8. Configuration Validation - validate() method\n9. Global Function Access - get_configuration(), reload_configuration()\n10. Error Handling - invalid environments, config creation failures\n11. Hot Reload - force reload scenarios\n12. Configuration State - cache consistency, state management\n",
      "test_methods": [
        "test_configuration_loader_creates_real_instance",
        "test_configuration_loader_has_required_methods",
        "test_load_creates_real_config_instance",
        "test_load_caching_behavior",
        "test_load_with_different_environments",
        "test_get_environment_returns_current_environment",
        "test_is_production_detects_production_environment",
        "test_is_development_detects_development_environment",
        "test_is_testing_detects_testing_environment",
        "test_creates_development_config_for_development_environment",
        "test_creates_staging_config_for_staging_environment",
        "test_creates_production_config_for_production_environment",
        "test_creates_testing_config_for_testing_environment",
        "test_defaults_to_development_config_for_unknown_environment",
        "test_reload_without_force_returns_cached_config",
        "test_reload_with_force_clears_cache_and_reloads",
        "test_reload_cache_clear_functionality",
        "test_get_database_url_returns_postgres_url_by_default",
        "test_get_database_url_returns_clickhouse_url_when_specified",
        "test_get_service_config_returns_redis_configuration",
        "test_get_service_config_returns_llm_configuration",
        "test_get_service_config_returns_auth_configuration",
        "test_get_service_config_returns_empty_dict_for_unknown_service",
        "test_validate_returns_true_for_valid_configuration",
        "test_validate_returns_false_for_invalid_configuration",
        "test_get_configuration_returns_app_config",
        "test_reload_configuration_without_force",
        "test_reload_configuration_with_force",
        "test_global_configuration_loader_instance_exists",
        "test_config_creation_failure_fallback",
        "test_missing_config_attributes_handled_gracefully",
        "test_concurrent_access_to_configuration_loader",
        "test_configuration_loading_performance",
        "test_memory_usage_with_multiple_reloads"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/configuration/test_configuration_management_comprehensive_unit.py",
      "relative_path": "netra_backend/tests/unit/core/configuration/test_configuration_management_comprehensive_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 26,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Configuration Management\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Critical Infrastructure)\n- Business Goal: Prevent configuration-related system failures and outages\n- Value Impact: Configuration reliability directly impacts system uptime and user experience\n- Strategic Impact: Stable configuration management enables multi-environment deployments\n\nThis test suite validates:\n1. Configuration loading and validation\n2. Environment-specific configuration handling\n3. Configuration caching and reload mechanisms\n4. Error handling for missing or invalid configurations\n5. Configuration security and validation\n6. Multi-service configuration coordination\n",
      "test_methods": [
        "test_get_settings_returns_app_config",
        "test_get_config_alias_works",
        "test_get_settings_fallback_on_exception",
        "test_reload_config_success",
        "test_reload_config_graceful_failure",
        "test_configuration_validator_initialization",
        "test_configuration_validator_required_test_vars",
        "test_configuration_validator_valid_environment_values",
        "test_configuration_validator_invalid_environment_values",
        "test_configuration_validator_testing_flag_consistency",
        "test_configuration_validator_database_url_validation",
        "test_configuration_validator_invalid_database_url",
        "test_configuration_validator_service_port_allocation",
        "test_configuration_validator_service_enabled_logic",
        "test_configuration_validator_docker_mode_detection",
        "test_configuration_validator_docker_config_consistency",
        "test_configuration_validator_service_flag_conflicts",
        "test_configuration_validator_global_flag_conflicts",
        "test_validate_test_config_helper_function",
        "test_validate_test_config_failure_handling",
        "test_is_service_enabled_helper_function",
        "test_get_service_port_helper_function",
        "test_configuration_validator_singleton_behavior",
        "test_configuration_validator_port_conflict_detection",
        "test_configuration_validator_service_specific_validation",
        "test_configuration_validator_database_name_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/configuration/test_configuration_validator_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/configuration/test_configuration_validator_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 29,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ConfigurationValidator - SSOT Configuration Validation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all segments)  \n- Business Goal: Risk Reduction & Platform Stability\n- Value Impact: Prevents $12K MRR loss from configuration errors - critical for production reliability\n- Strategic Impact: ConfigurationValidator ensures all configurations are valid before system startup\n\nCRITICAL: ConfigurationValidator is the SSOT for configuration validation across all environments.\nPrevents deployment of invalid configurations that would cause system failures.\n\nTest Requirements from CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors\n2. NO mocks unless absolutely necessary - Use real configuration validation\n3. ABSOLUTE IMPORTS only - No relative imports\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Use real validation logic, real environment detection\n\nTesting Areas:\n1. Validator Initialization - environment detection, rule loading, sub-validator setup\n2. Validation Mode Logic - WARN, ENFORCE_CRITICAL, ENFORCE_ALL modes\n3. Complete Configuration Validation - orchestration of all validation modules\n4. Progressive Validation - environment-specific enforcement levels\n5. Configuration Health Score - scoring algorithm for configuration completeness\n6. Critical Field Detection - identification of mission-critical configuration fields\n7. Environment-Specific Rules - development vs production validation rules\n8. Sub-validator Orchestration - database, LLM, auth, environment validators\n9. Error Categorization - critical vs non-critical error classification\n10. Validation Results - ValidationResult structure and scoring\n11. Real Configuration Testing - actual AppConfig instances\n12. Multi-Environment Validation - testing across dev/staging/prod environments\n",
      "test_methods": [
        "test_configuration_validator_creates_real_instance",
        "test_validation_rules_loaded_for_all_environments",
        "test_critical_fields_loaded_for_all_components",
        "test_environment_detection_works",
        "test_validation_mode_enum_values",
        "test_development_environment_uses_warn_mode",
        "test_production_environment_uses_enforce_all_mode",
        "test_validate_complete_config_returns_validation_result",
        "test_validation_result_score_in_valid_range",
        "test_validation_with_multiple_config_types",
        "test_progressive_validation_warn_mode_converts_errors_to_warnings",
        "test_progressive_validation_enforce_all_mode_keeps_all_errors",
        "test_health_score_calculation_with_no_issues",
        "test_health_score_penalties_for_errors_and_warnings",
        "test_health_score_bounded_correctly",
        "test_count_critical_fields_returns_valid_counts",
        "test_completeness_bonus_calculation",
        "test_component_field_counting",
        "test_environment_refresh_updates_validators",
        "test_validation_rules_differ_between_environments",
        "test_sub_validators_initialized_correctly",
        "test_error_collection_calls_all_validators",
        "test_development_config_validation",
        "test_production_config_validation",
        "test_testing_config_validation",
        "test_validation_result_has_required_properties",
        "test_validation_result_consistency",
        "test_validation_handles_invalid_config_gracefully",
        "test_validation_with_none_config_values"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/managers/test_unified_configuration_manager_complete_coverage.py",
      "relative_path": "netra_backend/tests/unit/core/managers/test_unified_configuration_manager_complete_coverage.py",
      "category": "unit",
      "service": "backend",
      "test_count": 32,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Coverage Test Suite for UnifiedConfigurationManager\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects ALL user tiers)\n- Business Goal: Platform Stability & Configuration Reliability\n- Value Impact: 100% test coverage ensures zero configuration failures\n- Strategic Impact: Foundation for entire AI platform - configuration failures = system-wide failures\n\nCRITICAL: This test file ensures 100% coverage of ALL UnifiedConfigurationManager functionality.\nComplements the existing comprehensive test file by covering remaining edge cases and error paths.\n\nTest Requirements from CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test MUST fail hard on errors, no mocking business logic  \n2. NO MOCKS unless absolutely necessary - Use real UnifiedConfigurationManager instances\n3. ABSOLUTE IMPORTS ONLY - No relative imports (. or ..)\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Must use real IsolatedEnvironment integration\n\nAdditional Coverage Areas:\n1. WebSocket integration error handling\n2. Configuration file loading edge cases  \n3. Environment detection fallback scenarios\n4. Memory management under stress\n5. Unicode edge cases and special characters\n6. Configuration entry display value masking\n7. Thread safety under extreme load\n8. Factory cleanup and resource management\n9. Audit trail edge cases\n10. Performance boundary testing\n",
      "test_methods": [
        "test_parametrized_configuration_scaling",
        "test_parametrized_concurrent_scaling",
        "test_websocket_integration_with_real_async_mock",
        "test_websocket_change_listener_error_handling",
        "test_websocket_sensitive_value_masking_edge_cases",
        "test_configuration_file_loading_with_missing_files",
        "test_configuration_file_loading_with_invalid_json",
        "test_configuration_file_loading_with_permission_errors",
        "test_nested_dictionary_flattening_edge_cases",
        "test_environment_detection_fallback_scenarios",
        "test_environment_detection_with_empty_values",
        "test_memory_management_under_extreme_load",
        "test_change_history_memory_management",
        "test_cache_memory_management_with_ttl",
        "test_unicode_configuration_keys_and_values",
        "test_configuration_with_null_bytes_and_control_characters",
        "test_extremely_long_configuration_values",
        "test_extreme_concurrent_access_scenarios",
        "test_concurrent_factory_stress_testing",
        "test_configuration_entry_edge_case_validation",
        "test_configuration_entry_type_conversion_edge_cases",
        "test_configuration_entry_sensitive_value_edge_cases",
        "test_performance_with_extremely_large_configurations",
        "test_performance_under_memory_pressure",
        "test_audit_trail_with_rapid_changes",
        "test_audit_trail_thread_safety",
        "test_change_listener_exception_isolation",
        "test_factory_resource_cleanup_comprehensive",
        "test_mission_critical_values_comprehensive_validation",
        "test_status_reporting_with_all_configurations",
        "test_isolated_environment_compliance_during_initialization",
        "test_configuration_operations_use_isolated_environment"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/managers/test_unified_configuration_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/managers/test_unified_configuration_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 78,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedConfigurationManager - MEGA CLASS SSOT\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all segments)\n- Business Goal: Platform Stability & Risk Reduction  \n- Value Impact: Ensures configuration consistency across all environments (DEV/STAGING/PROD)\n- Strategic Impact: CRITICAL - This is the SSOT for ALL configuration management (1,890 lines)\n\nCRITICAL: This is an approved MEGA CLASS with specific requirements:\n- Must use IsolatedEnvironment for all environment variable access\n- Must validate against MISSION_CRITICAL_NAMED_VALUES_INDEX\n- Must provide service-specific configuration methods\n- Must support multi-user configuration isolation\n\nTest Requirements from CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors\n2. NO mocks unless absolutely necessary - Use real IsolatedEnvironment, real validation\n3. ABSOLUTE IMPORTS only - No relative imports\n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Use real environment variables, real file system\n\nTesting Areas:\n1. Basic Configuration Operations - get, set, delete, exists, clear\n2. Type Coercion & Conversion - string, int, float, bool, list, dict conversions\n3. Multi-source Precedence - environment, file, default value precedence\n4. Validation & Error Handling - invalid keys, type mismatches, validation failures\n5. Service-specific Configuration - auth, database, redis, websocket configs\n6. Multi-user Isolation - user-scoped configurations don't leak between users\n7. IsolatedEnvironment Integration - proper env access patterns\n8. Critical Named Values - validation against MISSION_CRITICAL_NAMED_VALUES_INDEX\n9. Thread Safety - concurrent access scenarios\n10. Configuration Persistence - save/load operations\n11. Performance Characteristics - large configuration handling\n12. Error Boundaries - Unicode, special characters, extremely long values\n",
      "test_methods": [
        "test_initialization_creates_real_instance",
        "test_basic_get_set_operations",
        "test_configuration_deletion",
        "test_get_all_configurations",
        "test_keys_filtering",
        "test_get_int_conversion",
        "test_get_float_conversion",
        "test_get_bool_conversion",
        "test_get_str_conversion",
        "test_get_list_conversion",
        "test_get_dict_conversion",
        "test_source_precedence_order",
        "test_configuration_file_loading",
        "test_environment_variable_mapping",
        "test_configuration_entry_validation",
        "test_validation_rules",
        "test_comprehensive_validation",
        "test_mission_critical_values_validation",
        "test_error_handling_in_operations",
        "test_database_configuration",
        "test_redis_configuration",
        "test_llm_configuration",
        "test_agent_configuration",
        "test_websocket_configuration",
        "test_security_configuration",
        "test_dashboard_configuration",
        "test_factory_global_manager",
        "test_factory_user_specific_managers",
        "test_factory_service_specific_managers",
        "test_factory_combined_user_service_managers",
        "test_factory_manager_counts",
        "test_cache_clearing_across_managers",
        "test_convenience_functions",
        "test_concurrent_read_write_operations",
        "test_concurrent_cache_operations",
        "test_concurrent_validation_operations",
        "test_concurrent_factory_operations",
        "test_cache_enable_disable",
        "test_cache_ttl_expiration",
        "test_cache_invalidation_on_set",
        "test_cache_invalidation_on_delete",
        "test_selective_cache_clearing",
        "test_cache_clear_all",
        "test_websocket_manager_integration",
        "test_websocket_change_notifications",
        "test_websocket_sensitive_value_masking",
        "test_websocket_events_enable_disable",
        "test_change_history_tracking",
        "test_change_history_size_limit",
        "test_change_listeners",
        "test_audit_disable",
        "test_change_listener_exception_handling",
        "test_comprehensive_status_report",
        "test_health_status_reporting",
        "test_status_with_validation_errors",
        "test_unicode_and_special_characters",
        "test_none_and_empty_values",
        "test_type_conversion_edge_cases",
        "test_validation_edge_cases",
        "test_concurrent_error_scenarios",
        "test_memory_cleanup_on_large_operations",
        "test_large_configuration_handling",
        "test_cache_performance_characteristics",
        "test_validation_performance",
        "test_concurrent_performance",
        "test_isolated_environment_usage",
        "test_no_direct_os_environ_access",
        "test_environment_isolation_between_managers",
        "test_dashboard_config_manager_compatibility",
        "test_data_agent_config_manager_compatibility",
        "test_llm_config_manager_compatibility",
        "test_main_convenience_function",
        "test_extremely_nested_configuration_keys",
        "test_configuration_with_complex_data_structures",
        "test_boundary_value_testing",
        "test_rapid_configuration_changes",
        "test_configuration_serialization_edge_cases",
        "test_listener"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/managers/test_unified_lifecycle_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/managers/test_unified_lifecycle_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedLifecycleManager - LARGEST MEGA CLASS SSOT\n\nTest Unified Lifecycle Manager - LARGEST MEGA CLASS SSOT (1,950 lines)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Zero-Downtime Operations & Platform Reliability  \n- Value Impact: Ensures 1,950 lines of lifecycle logic work correctly for chat service\n- Strategic Impact: Foundation for chat service reliability (90% platform value)\n\nThis is the MOST COMPREHENSIVE test suite in the system, testing the LARGEST approved\nMEGA CLASS (1,950 lines) that consolidates 100+ legacy managers into one SSOT.\n\nCRITICAL REQUIREMENTS:\n- NO mocks for core business logic (CHEATING ON TESTS = ABOMINATION)\n- Test ALL 5 WebSocket events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n- Test multi-user isolation with factory patterns\n- Test zero-downtime operations and graceful shutdowns\n- Test atomic operations with rollback on failure\n- Test health monitoring and performance metrics\n- Test legacy manager compatibility\n- Test concurrent user scenarios under load\n- Test error recovery and circuit breakers\n\nCRITICAL: This manager is the foundation of platform stability. Every test validates\nreal-world scenarios ensuring users can reliably access AI chat services without interruption.\n",
      "test_methods": [
        "test_shutdown_handler"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/managers/test_unified_state_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/managers/test_unified_state_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 73,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedStateManager - MEGA CLASS SSOT\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects ALL user tiers and AI agent operations)\n- Business Goal: Agent State Consistency & WebSocket Synchronization\n- Value Impact: Critical for AI agent context preservation - enables intelligent responses\n- Strategic Impact: Foundation for multi-user chat state - failure breaks AI conversation context\n\nCRITICAL: This is a MEGA CLASS exception (1,820 lines) approved for SSOT state management.\nConsolidates 50+ state managers into single source of truth including:\n- AgentStateManager, SessionlessAgentStateManager\n- MessageStateManager, ThreadStateManager  \n- SessionStateManager, TabStateManager\n- WebSocketStateManager, ReconnectionStateManager\n- MigrationStateManager, StateManagerCore\n- All supervisor and sub-agent state managers\n\nTest Requirements from CLAUDE.md:\n1. CHEATING ON TESTS = ABOMINATION - Every test must fail hard on errors\n2. NO mocks unless absolutely necessary - Use real UnifiedStateManager instances\n3. ABSOLUTE IMPORTS only - No relative imports  \n4. Tests must RAISE ERRORS - No try/except blocks masking failures\n5. Real services over mocks - Test real state operations\n6. Race condition awareness - State management requires careful async/thread handling\n7. MULTI-USER system - Test user isolation and concurrent access\n\nTesting Areas:\n1. Core State Operations - get, set, delete, exists, update, clear operations\n2. Scoped State Isolation - user, session, thread, agent scope testing with full isolation\n3. Thread-Safe Operations - concurrent access, fine-grained locking, race conditions\n4. TTL-Based Expiration - time-based state cleanup, expiration handling, edge cases\n5. WebSocket State Synchronization - real-time state sync, WebSocket integration\n6. State Querying & Filtering - complex queries, filtering operations, bulk operations\n7. Multi-User Isolation - user-specific state, cross-contamination prevention\n8. Performance Characteristics - memory usage, lookup speed, concurrency throughput\n9. Agent Context Preservation - agent state persistence, conversation continuity\n10. Legacy Manager Consolidation - integration patterns, migration handling\n11. Error Handling & Recovery - invalid states, corrupted data, recovery mechanisms\n12. State Validation & Integrity - data consistency, validation rules, integrity checks\n13. Bulk Operations - batch state operations, mass updates, bulk queries\n14. State Migration & Versioning - state format changes, version compatibility\n15. Event System - state change notifications, listener management, event processing\n16. Context Managers - session, agent, thread context helpers\n17. Factory Pattern - user isolation, global vs user-specific managers\n18. Background Tasks - cleanup loops, event processing, resource management\n",
      "test_methods": [
        "test_basic_get_set_operations",
        "test_delete_operations",
        "test_update_operations",
        "test_keys_listing",
        "test_complex_data_types",
        "test_state_entry_creation",
        "test_state_entry_expiration",
        "test_state_entry_updates",
        "test_state_entry_ttl_extension",
        "test_state_entry_serialization",
        "test_user_scoped_state",
        "test_session_scoped_state",
        "test_thread_scoped_state",
        "test_agent_scoped_state",
        "test_websocket_scoped_state",
        "test_cross_scope_isolation",
        "test_concurrent_set_operations",
        "test_concurrent_update_operations",
        "test_concurrent_different_scope_operations",
        "test_concurrent_read_write_operations",
        "test_basic_ttl_expiration",
        "test_ttl_with_different_scopes",
        "test_ttl_extension",
        "test_ttl_with_bulk_operations",
        "test_websocket_manager_integration",
        "test_websocket_event_emission_disabled",
        "test_websocket_state_operations",
        "test_basic_state_query",
        "test_multi_filter_query",
        "test_time_based_filtering",
        "test_pattern_based_filtering",
        "test_query_with_limit",
        "test_expired_state_filtering",
        "test_bulk_get_operations",
        "test_bulk_set_operations",
        "test_bulk_delete_operations",
        "test_scope_clearing_operations",
        "test_agent_state_clearing",
        "test_user_manager_isolation",
        "test_concurrent_multi_user_operations",
        "test_user_scoped_state_isolation_comprehensive",
        "test_factory_pattern_isolation",
        "test_context_helper_deletion",
        "test_memory_limit_enforcement",
        "test_large_data_handling",
        "test_concurrent_access_performance",
        "test_index_performance",
        "test_invalid_state_operations",
        "test_unicode_and_special_characters",
        "test_circular_reference_handling",
        "test_state_corruption_recovery",
        "test_concurrent_expiration_handling",
        "test_legacy_function_compatibility",
        "test_factory_pattern_consolidation",
        "test_status_reporting",
        "test_health_status_monitoring",
        "test_metrics_collection",
        "test_scope_and_type_statistics",
        "test_change_listener_management",
        "test_event_listener_exception_handling",
        "test_state_change_event_types",
        "test_environment_config_loading",
        "test_environment_config_invalid_values",
        "test_empty_query_results",
        "test_query_with_all_filters",
        "test_query_sorting_behavior",
        "test_state_scope_validation",
        "test_state_type_validation",
        "test_data_integrity_after_operations",
        "test_recovery_from_index_corruption",
        "test_memory_pressure_handling",
        "test_concurrent_shutdown_safety",
        "test_factory_manager_isolation_verification"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/registry/test_universal_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/registry/test_universal_registry_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 93,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive unit tests for Universal Registry - CRITICAL SSOT component.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Platform Stability, Development Velocity, Risk Reduction\n- Value Impact: Validates the critical SSOT registry system that underlies ALL\n  agent, tool, and service management operates correctly in multi-user scenarios\n- Strategic Impact: Prevents cascade failures - registry failures would break\n  agent execution, tool dispatch, and service discovery causing system unavailability\n\nTest Coverage Strategy:\n- 100% line coverage of universal_registry.py\n- All method paths and error conditions\n- Thread safety for multi-user concurrent access\n- Factory patterns for user isolation\n- Specialized registry implementations\n- Global registry singleton management\n- Edge cases and failure scenarios\n\nCRITICAL: NO MOCKS unless absolutely necessary - use real registry instances\nCRITICAL: Tests must FAIL HARD when system breaks (no silent failures)\n",
      "test_methods": [
        "test_registry_item_creation",
        "test_registry_item_with_tags",
        "test_mark_accessed",
        "test_registry_initialization",
        "test_register_singleton",
        "test_register_with_tags",
        "test_register_factory",
        "test_register_factory_duplicate_factory",
        "test_register_duplicate_without_override",
        "test_register_duplicate_with_override",
        "test_get_singleton",
        "test_get_via_factory",
        "test_get_nonexistent",
        "test_create_instance_with_factory",
        "test_create_instance_no_factory",
        "test_list_keys",
        "test_remove_item",
        "test_clear_registry",
        "test_freeze_registry",
        "test_freeze_already_frozen",
        "test_add_validation_handler",
        "test_multiple_validation_handlers",
        "test_validation_handler_exception",
        "test_validation_updates_metrics",
        "test_get_metrics",
        "test_metrics_disabled",
        "test_validate_health_healthy",
        "test_validate_health_empty_registry",
        "test_validate_health_unused_items",
        "test_validate_health_high_failure_rate",
        "test_validate_health_degraded_status_high_failure_rate",
        "test_load_from_config_basic",
        "test_load_from_config_frozen",
        "test_len",
        "test_contains",
        "test_repr",
        "test_concurrent_registration",
        "test_concurrent_access_and_registration",
        "test_concurrent_freeze_and_operations",
        "test_concurrent_metrics_access",
        "test_concurrent_validation_and_registration",
        "test_agent_registry_initialization",
        "test_agent_validation_with_mock",
        "test_agent_validation_with_real_agent",
        "test_agent_validation_with_invalid_type",
        "test_agent_validation_with_primitive_types",
        "test_set_websocket_manager",
        "test_set_websocket_bridge",
        "test_set_websocket_bridge_none_fails",
        "test_create_agent_with_context",
        "test_create_agent_with_context_no_agent",
        "test_create_agent_with_context_no_websocket_method",
        "test_tool_dispatcher_property_lazy_creation",
        "test_tool_dispatcher_property_returns_same_instance",
        "test_tool_dispatcher_auto_enhance_with_websocket_manager",
        "test_set_tool_dispatcher_method",
        "test_set_tool_dispatcher_with_websocket_manager",
        "test_websocket_manager_enhances_existing_tool_dispatcher",
        "test_mock_tool_dispatcher_enhance_method",
        "test_enhance_tool_dispatcher_with_real_dispatcher_import_error",
        "test_enhance_tool_dispatcher_no_dispatcher",
        "test_agent_validation_with_class_subclass_check",
        "test_agent_validation_import_error_fallback",
        "test_enhance_tool_dispatcher_with_real_dispatcher_success",
        "test_tool_registry_initialization",
        "test_service_registry_initialization",
        "test_service_registry_register_service",
        "test_strategy_registry_initialization",
        "test_get_global_registry_agent",
        "test_get_global_registry_tool",
        "test_get_global_registry_service",
        "test_get_global_registry_strategy",
        "test_get_global_registry_invalid",
        "test_get_global_registry_case_insensitive",
        "test_global_registry_thread_safety",
        "test_create_scoped_registry",
        "test_create_scoped_registry_all_types",
        "test_create_scoped_registry_generic",
        "test_empty_key_registration",
        "test_none_value_registration",
        "test_factory_with_none_context",
        "test_factory_context_isolation_comprehensive",
        "test_factory_exception_handling",
        "test_factory_with_different_exception_types",
        "test_large_registry_performance",
        "test_registry_with_circular_references",
        "test_registry_item_metadata_mutation",
        "test_concurrent_clear_and_access",
        "test_stress_test_factory_creation_concurrent",
        "test_concurrent_tag_operations",
        "test_multiple_registries_isolation",
        "test_registry_with_real_context_patterns",
        "test_registry_metrics_real_usage_simulation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_app_state_contracts_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_app_state_contracts_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 40,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest App State Contract-Driven Development Framework\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Platform Stability - Prevent integration failures that break entire platform\n- Value Impact: Contract validation prevents architectural integration failures like WebSocket bridge issues that cause 90% platform value loss\n- Strategic Impact: Prevents cascade failures in startup sequence that make platform unusable, protecting revenue from all segments (Free, Early, Mid, Enterprise)\n\nThis comprehensive test suite validates the contract-driven development framework that prevents\nintegration failures during system startup. The app_state_contracts.py module implements\nsystematic validation of component dependencies to prevent issues like the WebSocket bridge\nfailure that disconnected agent execution from user chat delivery.\n\nCritical Business Context:\n- WebSocket events deliver 90% of platform value through real-time agent reasoning\n- Contract violations during startup can render entire platform non-functional\n- Missing components or improper dependency order causes silent failures\n- Business impact ranges from service degradation to complete revenue loss\n\nThe tests validate:\n1. Contract definition accuracy for business-critical components\n2. Validation logic that catches integration issues before they cause failures\n3. Business impact assessment that guides operational priorities\n4. Dependency order validation that prevents initialization race conditions\n5. Error handling that provides actionable troubleshooting guidance\n",
      "test_methods": [
        "test_validator_initialization_success",
        "test_validate_all_contracts_success_scenario",
        "test_validate_contracts_missing_critical_component",
        "test_validate_contracts_phase_specific_validation",
        "test_validate_dependency_order_success",
        "test_validate_dependency_order_violations",
        "test_enforce_startup_contracts_success",
        "test_enforce_startup_contracts_failure_raises_exception",
        "test_business_impact_assessment_accuracy",
        "test_websocket_bridge_validator_success",
        "test_websocket_bridge_validator_missing_component",
        "test_websocket_bridge_validator_wrong_type",
        "test_websocket_bridge_validator_missing_connection_pool",
        "test_websocket_bridge_validator_missing_methods",
        "test_execution_engine_factory_validator_success",
        "test_execution_engine_factory_validator_missing_websocket_bridge",
        "test_websocket_connection_pool_validator_success",
        "test_websocket_connection_pool_validator_missing_methods",
        "test_app_state_contract_dataclass",
        "test_validation_result_dataclass",
        "test_contract_phase_enum",
        "test_app_state_contract_violation_exception",
        "test_abstract_validator_interface",
        "test_validate_app_state_contracts_function",
        "test_enforce_app_state_contracts_function",
        "test_enforce_app_state_contracts_function_raises_on_violations",
        "test_create_app_state_contract_report_function",
        "test_create_app_state_contract_report_with_violations",
        "test_multiple_contract_violations_aggregation",
        "test_business_impact_severity_calculation",
        "test_operational_troubleshooting_guidance",
        "test_cascade_failure_prevention",
        "test_warning_vs_error_classification",
        "test_validation_performance_timing",
        "test_validator_creation_performance",
        "test_contract_enforcement_performance",
        "test_contract_validation_with_none_components",
        "test_contract_validation_with_partial_initialization",
        "test_contract_definition_completeness",
        "test_validator_coverage_completeness"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_auth_startup_validator_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_auth_startup_validator_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest AuthStartupValidator - Critical Authentication Configuration Validation\n\nBusiness Value Justification (BVJ):\n- Segment: All customer segments (Free, Early, Mid, Enterprise)\n- Business Goal: Security and User Access Reliability\n- Value Impact: Prevents authentication failures that would lock out 100% of users\n- Strategic Impact: Critical security validation - single point of failure prevention\n\nCRITICAL: This test suite validates the AuthStartupValidator that ensures all\nauthentication components are properly configured before system startup.\nFailure in this validator means 100% user lockout and complete service unavailability.\n",
      "test_methods": [
        "test_validator_initialization_development",
        "test_validator_initialization_production",
        "test_validator_initialization_staging",
        "test_auth_component_enum_values",
        "test_auth_validation_result_success",
        "test_auth_validation_result_failure",
        "test_auth_validation_result_default_critical",
        "test_auth_validation_error_exception"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_auth_startup_validator_comprehensive_enhanced.py",
      "relative_path": "netra_backend/tests/unit/core/test_auth_startup_validator_comprehensive_enhanced.py",
      "category": "unit",
      "service": "backend",
      "test_count": 3,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest AuthStartupValidator SSOT - Enhanced Comprehensive Security-Critical Authentication Validation\n\nBusiness Value Justification (BVJ):\n- Segment: All customer segments (Free, Early, Mid, Enterprise) - SECURITY FOUNDATION\n- Business Goal: Prevent authentication system vulnerabilities and ensure 100% uptime\n- Value Impact: Prevents complete service outages, user lockouts, and security breaches\n- Strategic Impact: CRITICAL - Authentication is the gateway to ALL business value delivery\n\nSECURITY MISSION CRITICAL: This test suite validates the SSOT AuthStartupValidator that prevents:\n1. Authentication bypass vulnerabilities\n2. OAuth misconfiguration leading to security breaches  \n3. JWT secret exposure or weakness\n4. Service credential leaks\n5. CORS misconfiguration allowing unauthorized access\n6. Token expiry configuration vulnerabilities\n7. Circuit breaker failures leading to cascading auth failures\n8. Cache configuration vulnerabilities\n\nAuthStartupValidator is the SINGLE POINT OF VALIDATION for all auth configuration.\nFailure in this validator means 100% user lockout, complete business value loss,\nand potential security breaches exposing customer data.\n\nThis enhanced test suite goes beyond basic validation to test:\n- Security attack scenarios and injection attempts\n- Environment-specific security policies (test/staging/prod differences)\n- Integration with external auth services and OAuth providers  \n- Circuit breaker and cache security boundaries\n- Production hardening requirements\n- Attack pattern detection and prevention\n- Configuration drift detection\n- Cross-service authentication security\n",
      "test_methods": [
        "test_validator_security_critical_initialization_production",
        "test_validator_defense_against_environment_spoofing",
        "test_validator_defense_against_case_sensitivity_attacks"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_execution_tracker_business_logic_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_execution_tracker_business_logic_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Tests for ExecutionTracker Business Logic - Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Agent Reliability - Prevent silent agent failures from degrading user experience  \n- Value Impact: Execution tracking ensures agent operations complete successfully or fail visibly\n- Strategic Impact: Reliable agent execution is fundamental to platform trust and business value delivery\n\nThis test suite validates the business-critical path of execution tracking including:\n- Silent agent death detection to prevent business process hangs\n- Timeout enforcement to prevent resource waste and user abandonment\n- Execution state monitoring for business process transparency\n- Metrics collection for business performance insights\n- Recovery mechanisms for business continuity\n- Multi-user execution isolation for enterprise scalability\n\nCRITICAL: These tests focus on BUSINESS LOGIC that ensures AI agents execute\nreliably and provide visible failures when business processes encounter issues.\n",
      "test_methods": [
        "test_execution_record_serialization_enables_business_reporting",
        "test_singleton_execution_tracker_ensures_business_consistency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_resource_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_resource_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 33,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for ResourceManager - SSOT Compatibility Layer\n\nThis test suite validates the ResourceManager class, which serves as a unified compatibility \nlayer for all resource management across the system, coordinating database, Redis, and \nreliability managers while ensuring complete user isolation.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal \n- Business Goal: System Stability & Resource Management\n- Value Impact: Ensures reliable resource coordination for multi-user system\n- Strategic Impact: SSOT pattern eliminates resource management duplication and failures\n\nCRITICAL REQUIREMENTS (CLAUDE.md Compliance):\n- CHEATING ON TESTS = ABOMINATION - All tests must fail hard when system breaks\n- NO business logic mocks - Use real resource instances where possible\n- ABSOLUTE IMPORTS only - no relative imports allowed\n- Tests must RAISE ERRORS - no try/except blocks masking failures\n- Multi-user system awareness in all resource coordination tests\n\nTest Coverage Focus:\n1. Core Resource Management - SSOT compatibility layer functionality\n2. Resource Coordination - Database, Redis, reliability manager integration  \n3. Multi-User Resource Isolation - Per-user allocation and cleanup\n4. Error Handling & Resilience - Failure patterns and recovery mechanisms\n",
      "test_methods": [
        "test_resource_manager_initialization_creates_ssot_layer",
        "test_resource_manager_tracks_initialization_state",
        "test_isolated_environment_integration_ssot_compliance",
        "test_register_resource_adds_to_ssot_registry",
        "test_register_resource_handles_registration_failures",
        "test_unregister_resource_removes_from_ssot_registry",
        "test_get_resource_retrieves_from_ssot_registry",
        "test_get_resource_handles_uninitialized_manager",
        "test_get_resource_status_reports_complete_system_state",
        "test_resource_status_includes_health_information",
        "test_resource_status_handles_failing_resources",
        "test_resource_context_provides_safe_access",
        "test_resource_context_handles_missing_resources",
        "test_resource_context_calls_cleanup_on_exit",
        "test_cleanup_calls_all_resource_cleanup_methods",
        "test_cleanup_handles_failing_resource_cleanup",
        "test_cleanup_handles_different_cleanup_patterns",
        "test_initialize_discovers_available_resources",
        "test_initialize_is_idempotent",
        "test_initialize_handles_import_failures_gracefully",
        "test_separate_resource_managers_provide_isolation",
        "test_resource_status_isolation_between_users",
        "test_resource_cleanup_isolation",
        "test_get_resource_manager_returns_global_instance",
        "test_global_register_resource_uses_global_manager",
        "test_get_system_resource_status_reports_global_state",
        "test_global_functions_handle_uninitialized_state",
        "test_resource_manager_continues_operating_after_resource_failures",
        "test_resource_manager_handles_resource_registration_edge_cases",
        "test_resource_context_handles_resource_failures_during_access",
        "test_database_manager_integration_pattern",
        "test_reliability_manager_integration_pattern",
        "test_redis_connection_manager_integration_pattern"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_startup_validation_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_startup_validation_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 37,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest StartupValidator - System Initialization Validation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (enables all customer segments)\n- Business Goal: Platform Stability and Reliability\n- Value Impact: Ensures system components are properly initialized before serving customers\n- Strategic Impact: Prevents startup failures that would result in 100% service unavailability\n\nThis comprehensive test suite validates ALL StartupValidator functionality:\n- Component validation orchestration\n- Factory pattern recognition\n- Error handling and reporting\n- Status determination logic\n- Critical path validation integration\n- Report generation and logging\n",
      "test_methods": [
        "test_startup_validator_init",
        "test_global_startup_validator_instance",
        "test_convenience_function_delegates_to_global_instance",
        "test_component_validation_creation",
        "test_component_validation_default_values",
        "test_component_status_enum_values",
        "test_component_status_enum_equality",
        "test_component_status_in_collections",
        "test_get_status_zero_actual_critical",
        "test_get_status_zero_actual_non_critical",
        "test_get_status_below_expected_always_warning",
        "test_get_status_meets_expected_healthy",
        "test_get_status_edge_cases",
        "test_add_failed_validation_creates_entry",
        "test_add_failed_validation_multiple_entries",
        "test_add_failed_validation_with_logger",
        "test_determine_success_no_validations",
        "test_determine_success_only_healthy_validations",
        "test_determine_success_warning_non_critical",
        "test_determine_success_critical_failure",
        "test_determine_success_failed_status",
        "test_determine_success_mixed_critical_failures",
        "test_generate_report_structure",
        "test_generate_report_metadata_calculation",
        "test_generate_report_status_counts",
        "test_generate_report_critical_failures",
        "test_generate_report_overall_health",
        "test_generate_report_categories_grouping",
        "test_generate_report_healthy_scenario",
        "test_generate_report_no_timing_data",
        "test_log_results_success_scenario",
        "test_log_results_failure_scenario",
        "test_log_results_zero_count_warnings",
        "test_log_results_no_zero_count_components",
        "test_component_validation_with_extreme_values",
        "test_memory_efficiency_with_large_validation_sets",
        "test_startup_validator_comprehensive_coverage_verification"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_startup_validator_complete.py",
      "relative_path": "netra_backend/tests/unit/core/test_startup_validator_complete.py",
      "category": "unit",
      "service": "backend",
      "test_count": 49,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Startup Validator System - Complete Test Coverage for StartupValidator\n\nBusiness Value Justification (BVJ):\n- Segment: All (Platform/Internal)\n- Business Goal: System Stability and Deployment Safety  \n- Value Impact: Prevents broken deployments that would cause 100% system outages\n- Strategic Impact: Reduces MTTR and prevents revenue-impacting downtime\n\nThis comprehensive test suite ensures 100% coverage of startup_validator.py\nincluding all validation methods, error scenarios, concurrent execution,\nand business value validation.\n\nCRITICAL: These tests prevent broken deployments and system failures.\n",
      "test_methods": [
        "test_validation_status_enum_values",
        "test_validation_status_is_enum",
        "test_validation_status_string_representation",
        "test_validation_status_comparison",
        "test_validation_result_creation",
        "test_validation_result_with_error",
        "test_validation_result_is_dataclass",
        "test_validation_result_default_values",
        "test_validation_result_serialization",
        "test_startup_validator_initialization",
        "test_startup_validator_is_class",
        "test_validate_id_generation_success",
        "test_validate_id_generation_invalid_run_id",
        "test_validate_id_generation_wrong_thread_extraction",
        "test_validate_id_generation_wrong_signature",
        "test_validate_id_generation_exception",
        "test_validate_websocket_components_success",
        "test_validate_websocket_components_extraction_failure",
        "test_validate_websocket_components_import_error",
        "test_validate_thread_service_success",
        "test_validate_thread_service_two_argument_bug",
        "test_validate_thread_service_prepare_run_data_failure",
        "test_validate_thread_service_wrong_thread_id",
        "test_validate_repositories_success",
        "test_validate_repositories_import_error",
        "test_validate_imports_success",
        "test_validate_imports_partial_failure",
        "test_validate_method_signatures_success",
        "test_validate_method_signatures_wrong_signature",
        "test_validate_agent_registry_success",
        "test_validate_agent_registry_not_healthy",
        "test_validate_agent_registry_initialization_failure",
        "test_validate_configuration_success",
        "test_validate_configuration_missing_settings",
        "test_validate_configuration_import_error",
        "test_print_summary_with_results",
        "test_print_summary_status_symbols",
        "test_print_summary_empty_results",
        "test_require_startup_validation_decorator",
        "test_require_startup_validation_decorator_warning",
        "test_validator_with_none_values",
        "test_validator_with_unicode_messages",
        "test_validator_memory_management",
        "test_validator_system_exit_scenarios",
        "test_validation_memory_efficiency",
        "test_startup_validator_prevents_silent_failures",
        "test_validation_comprehensive_coverage",
        "test_function",
        "test_function"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_unified_id_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_unified_id_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 60,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for UnifiedIDManager\n\nMISSION CRITICAL: This class is the SSOT for all ID generation, thread ID management,\nand run ID creation. ID consistency failures cause cascade failures across the platform.\n\nBusiness Value Justification:\n- Segment: Platform/Internal  \n- Business Goal: System Reliability and ID Consistency\n- Value Impact: Prevents ID-related cascade failures, ensures thread-run consistency\n- Strategic Impact: Critical for WebSocket routing, user context validation, multi-user isolation\n\nCoverage Requirements:\n- 100% line coverage of UnifiedIDManager class methods\n- Thread safety validation under concurrent operations\n- Format validation for all supported ID patterns\n- Integration with UserExecutionContext validation\n- Edge cases and error scenario handling\n- Performance validation for bulk operations\n\nTest Categories:\n- Happy Path Tests: Core ID generation works correctly\n- Format Validation Tests: Various ID formats (UUID, structured, hex)\n- Extraction Tests: Parse IDs from different input formats  \n- Edge Case Tests: Empty inputs, malformed IDs, boundary conditions\n- Consistency Tests: Generated IDs maintain format consistency\n- Thread Safety Tests: Concurrent ID generation (critical for multi-user)\n- Integration Tests: ID validation used by UserExecutionContext\n",
      "test_methods": [
        "test_generate_run_id_basic",
        "test_generate_run_id_uniqueness",
        "test_extract_thread_id_basic",
        "test_extract_thread_id_complex",
        "test_extract_thread_id_edge_cases",
        "test_validate_run_id_valid_formats",
        "test_validate_run_id_invalid_formats",
        "test_validate_run_id_permissive_behavior",
        "test_parse_run_id_valid",
        "test_parse_run_id_invalid",
        "test_generate_thread_id_basic",
        "test_generate_thread_id_uniqueness",
        "test_generate_id_all_types",
        "test_generate_id_with_prefix",
        "test_generate_id_with_context",
        "test_generate_id_counter_increment",
        "test_register_existing_id_success",
        "test_register_existing_id_duplicate",
        "test_is_valid_id_registered",
        "test_is_valid_id_unregistered",
        "test_release_id_success",
        "test_release_id_nonexistent",
        "test_get_active_ids",
        "test_count_active_ids",
        "test_cleanup_released_ids",
        "test_get_stats",
        "test_reset_counters",
        "test_clear_all",
        "test_is_valid_id_format_uuid",
        "test_is_valid_id_format_structured",
        "test_is_valid_id_format_compound_patterns",
        "test_is_valid_id_format_invalid",
        "test_is_valid_id_format_edge_cases",
        "test_convenience_functions",
        "test_global_id_manager_singleton",
        "test_concurrent_id_generation",
        "test_concurrent_run_id_generation",
        "test_concurrent_registration_and_release",
        "test_integration_with_strongly_typed_ids",
        "test_userexecutioncontext_validation_patterns",
        "test_bulk_id_generation_performance",
        "test_bulk_classmethod_performance",
        "test_edge_case_empty_and_none_inputs",
        "test_edge_case_malformed_inputs",
        "test_edge_case_extreme_lengths",
        "test_edge_case_unicode_and_special_characters",
        "test_regression_double_prefix_prevention",
        "test_regression_websocket_routing_fix",
        "test_regression_startup_validator_requirements",
        "test_convert_uuid_to_structured_valid",
        "test_convert_uuid_to_structured_with_prefix",
        "test_convert_uuid_to_structured_invalid",
        "test_convert_structured_to_uuid_valid",
        "test_convert_structured_to_uuid_invalid",
        "test_register_uuid_as_structured",
        "test_validate_and_normalize_id_uuid_format",
        "test_validate_and_normalize_id_structured_format",
        "test_validate_and_normalize_id_invalid_format",
        "test_is_valid_id_format_compatible_various_types",
        "test_private_helper_methods"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/test_websocket_message_handler_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/test_websocket_message_handler_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 38,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocket Message Handler SSOT Class\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Core infrastructure component\n- Business Goal: Ensure reliable WebSocket message processing for chat functionality\n- Value Impact: WebSocket message handler enables real-time agent communication, which is 90% of our value delivery\n- Strategic Impact: Critical foundation for multi-user chat system, agent event delivery, and user experience quality\n\nThis test suite validates the SSOT WebSocketMessageHandler class that manages:\n1. Message state lifecycle and acknowledgment handling  \n2. Queue management with capacity limits and error handling\n3. Duplicate message prevention and memory optimization\n4. Message processing workflows for all WebSocket event types\n5. Race condition handling and thread safety patterns\n\nTests focus on real business scenarios that could impact chat functionality and user experience.\nEach test validates actual business logic rather than just code execution paths.\n\nAuthor: Claude Code - Unit Test Creation Agent\nDate: 2025-09-08\nSSOT Compliance: Uses absolute imports, IsolatedEnvironment, proper test organization\n",
      "test_methods": [
        "test_create_message_state_with_ack_required",
        "test_create_message_state_without_ack_required",
        "test_create_message_state_with_complex_message",
        "test_queue_pending_message_within_capacity",
        "test_queue_pending_message_at_capacity_limit",
        "test_queue_pending_message_exceeds_capacity",
        "test_can_queue_message_empty_queue",
        "test_can_queue_message_partial_queue",
        "test_add_to_queue_logging",
        "test_track_sent_message_if_required_ack_needed",
        "test_track_sent_message_if_required_no_ack",
        "test_is_ack_message_valid_ack",
        "test_is_ack_message_invalid_cases",
        "test_is_pong_message_valid_pong",
        "test_is_pong_message_invalid_cases",
        "test_is_duplicate_message_new_message",
        "test_is_duplicate_message_existing_message",
        "test_is_duplicate_message_none_id",
        "test_record_received_message_new",
        "test_record_received_message_none_id",
        "test_record_received_message_memory_optimization",
        "test_handle_acknowledgment_existing_message",
        "test_handle_acknowledgment_nonexistent_message",
        "test_create_ack_message_format",
        "test_generate_message_id_uniqueness",
        "test_get_pending_count_empty",
        "test_get_pending_count_with_messages",
        "test_get_unacked_count_empty",
        "test_get_unacked_count_with_messages",
        "test_clear_pending_messages",
        "test_get_pending_messages_copy",
        "test_message_state_creation_edge_cases",
        "test_concurrent_queue_operations",
        "test_received_messages_memory_cleanup_threshold",
        "test_memory_usage_tracking_realistic_scenario",
        "test_message_prioritization_business_logic",
        "test_handler_performance_large_message_count",
        "test_memory_efficiency_large_datasets"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/core/tools/test_unified_tool_dispatcher_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/core/tools/test_unified_tool_dispatcher_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive unit tests for UnifiedToolDispatcher - SECOND PRIORITY SSOT class.\n\nThis test suite validates the most critical SSOT class responsible for 90% of agent value\ndelivery through tool execution. Tests ensure factory-enforced isolation, multi-user \nsafety, WebSocket event emission, and permission boundaries.\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise, Platform/Internal) \n- Business Goal: Platform Stability, Risk Reduction, Multi-User Safety\n- Value Impact: Tool execution = 90% of agent value delivery to customers\n- Strategic Impact: Request-scoped isolation prevents $10M+ churn from user data leakage\n\nCRITICAL REQUIREMENTS:\n- Factory pattern enforcement (NO direct instantiation)\n- Request-scoped isolation for multi-user safety  \n- WebSocket events for ALL tool executions (chat UX)\n- Permission validation and admin tool boundaries\n- Comprehensive error handling and metrics tracking\n\nTest Architecture:\n- NO mocks for business logic (CHEATING = ABOMINATION)\n- Real instances with minimal external dependencies\n- ABSOLUTE IMPORTS only\n- Tests must RAISE ERRORS - no try/except masking\n",
      "test_methods": [
        "test_direct_instantiation_raises_runtime_error",
        "test_factory_pattern_enforcement_comprehensive",
        "test_error_message_provides_correct_guidance",
        "test_create_for_request_success",
        "test_create_for_request_validation",
        "test_create_for_admin_success",
        "test_create_for_admin_validation",
        "test_create_legacy_global_deprecated",
        "test_websocket_bridge_property"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/database/test_clickhouse_database_operations_comprehensive_unit.py",
      "relative_path": "netra_backend/tests/unit/database/test_clickhouse_database_operations_comprehensive_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ClickHouse Database Operations\n\nBusiness Value Justification (BVJ):\n- Segment: All (Platform/Internal, Enterprise data analytics)\n- Business Goal: Ensure reliable data storage and retrieval for analytics\n- Value Impact: Data integrity protects customer analytics and business intelligence\n- Strategic Impact: Core database operations enable platform scalability and analytics features\n\nThis test suite validates:\n1. Connection management and validation\n2. Query execution and parameter handling \n3. Data insertion and batch operations\n4. Error handling and timeout management\n5. Environment-specific configuration\n6. Database health monitoring\n",
      "test_methods": [
        "test_connection_parameter_validation_success",
        "test_connection_parameter_validation_control_characters",
        "test_connection_parameter_validation_port_range",
        "test_connection_parameter_validation_empty_host",
        "test_environment_aware_timeout_configuration_staging",
        "test_environment_aware_timeout_configuration_production",
        "test_environment_aware_timeout_configuration_development",
        "test_connection_failure_with_context",
        "test_optional_connection_in_staging_when_not_required",
        "test_ping_operation",
        "test_ping_without_connection",
        "test_ping_exception_handling"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/database/test_session_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/database/test_session_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 24,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for DatabaseSessionManager (RequestScopedSessionFactory)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Critical SSOT Component\n- Business Goal: Ensure database session isolation prevents cross-user data corruption\n- Value Impact: Validates critical component that prevents database sessions from leaking between users\n- Strategic Impact: Foundation for secure multi-user database operations\n\nCRITICAL FOCUS: This component prevents \"Database sessions leak between users, data corruption\"\naccording to MISSION_CRITICAL_NAMED_VALUES_INDEX.xml\n\nThis test suite validates:\n- Complete user isolation between database sessions  \n- Proper transaction boundaries\n- Session cleanup even during failures\n- No cross-contamination of database operations\n- Resource cleanup and connection management\n- Context manager functionality with managed_session()\n\n@compliance CLAUDE.md - SSOT principles and real service testing\n@compliance TEST_CREATION_GUIDE.md - Real tests over mocks\n@compliance MISSION_CRITICAL_NAMED_VALUES_INDEX.xml - Critical cascade impact validation\n",
      "test_methods": [
        "test_session_manager_initialization",
        "test_get_session_context_manager",
        "test_managed_session_global_function",
        "test_validate_agent_session_isolation_stub",
        "test_database_session_manager_initialization",
        "test_validate_request_scoped_with_global_flag",
        "test_validate_request_scoped_without_global_flag",
        "test_validate_request_scoped_no_global_flag_attribute",
        "test_session_metrics_initialization",
        "test_session_metrics_mark_activity",
        "test_session_metrics_record_error",
        "test_session_metrics_close_calculates_total_time",
        "test_connection_pool_metrics_initialization",
        "test_update_peak_concurrent_sessions",
        "test_record_pool_exhaustion",
        "test_record_leak",
        "test_factory_initialization",
        "test_factory_background_cleanup_starts",
        "test_get_pool_metrics",
        "test_get_session_metrics",
        "test_validate_db_session_with_real_session",
        "test_validate_db_session_with_mock",
        "test_validate_db_session_with_invalid_object",
        "test_validate_db_session_mock_not_allowed"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/db/test_database_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/db/test_database_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive DatabaseManager Unit Test Suite - P0 Revenue-Blocking Component Coverage\n\nCRITICAL: DatabaseManager is identified as the #1 P0 revenue-blocking component requiring test coverage.\nThis is a Mega Class Exception (~1,825 lines) serving as SSOT for all database operations.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Foundation for ALL services\n- Business Goal: Platform stability and reliability to prevent 500 errors in staging/production\n- Value Impact: DatabaseManager failures = complete platform outage = immediate revenue loss\n- Strategic Impact: Foundation class for entire database layer - affects every database operation\n\nRECENT CRITICAL FAILURES:\n- Staging 500 errors traced to database configuration issues\n- Missing database URL validation causing startup failures\n- Connection pool misconfigurations causing service outages\n- Migration URL format errors in deployment pipelines\n\nCOVERAGE TARGET: 100% critical path coverage including:\n- DatabaseManager initialization with DatabaseURLBuilder integration\n- Engine creation and management across all environments\n- Session lifecycle management with proper transaction handling\n- Error scenarios that have caused production issues\n- Health check functionality\n- Configuration validation and edge cases\n- Migration URL generation\n- Connection pooling and cleanup\n\nCRITICAL: Uses real database connections where appropriate (not mocks for E2E portions).\nFollows SSOT patterns from test_framework/ and absolute import requirements per CLAUDE.md.\n",
      "test_methods": [
        "test_get_migration_url_sync_format",
        "test_get_migration_url_with_asyncpg_conversion",
        "test_get_migration_url_failure",
        "test_global_database_manager_singleton",
        "test_migration_url_comprehensive_formats",
        "test_coverage_completeness_verification",
        "test_business_value_justification_coverage"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/error_handling/test_comprehensive_error_handling_unit.py",
      "relative_path": "netra_backend/tests/unit/error_handling/test_comprehensive_error_handling_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 11,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Error Handling Unit Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Maintain customer trust and platform reliability\n- Value Impact: Prevents silent failures that waste user time and provides clear feedback\n- Strategic Impact: Reduces support escalations and customer churn from confusion\n\nThese tests validate error boundary patterns, message clarity, graceful degradation,\nlogging, metrics, and retry mechanisms without external dependencies.\n\nCRITICAL: Error handling is fundamental to customer experience. Poor error handling\nleads to customer frustration, lost revenue, and increased support costs.\n",
      "test_methods": [
        "test_configuration_error_boundary",
        "test_database_connection_error_boundary",
        "test_agent_execution_error_boundary",
        "test_authentication_error_messages",
        "test_validation_error_messages",
        "test_database_read_degradation",
        "test_error_logging_structure",
        "test_error_metrics_collection",
        "test_circuit_breaker_pattern",
        "test_resource_cleanup_on_error",
        "test_transaction_rollback_on_error"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_agent_execution_sequence_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_agent_execution_sequence_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Agent Execution Sequence Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure correct Data\u2192Optimization\u2192Report sequence delivers maximum AI value\n- Value Impact: Proper execution order maximizes analysis quality and user satisfaction\n- Strategic/Revenue Impact: Critical for $500K+ ARR - correct sequence enables upselling and retention\n\nCRITICAL: This test validates the business logic for the agent execution sequence that delivers\nthe core AI value proposition. The Data\u2192Optimization\u2192Report sequence is fundamental to\nproviding actionable insights that justify customer spend and enable business growth.\n\nKey Sequence Areas Tested:\n1. Data Agent Execution - Must run first to gather and validate user data\n2. Optimization Agent Execution - Must run after data to provide cost/performance insights\n3. Report Agent Execution - Must run last to synthesize findings into business value\n4. Agent Handoff Logic - Business rules for passing context between agents\n5. Execution State Management - Business state tracking throughout the sequence\n",
      "test_methods": [
        "test_data_agent_first_execution_business_requirement",
        "test_optimization_agent_requires_data_agent_business_rule",
        "test_report_agent_requires_complete_sequence_business_rule",
        "test_complete_golden_path_sequence_business_outcomes",
        "test_agent_handoff_context_business_continuity",
        "test_execution_phase_transitions_business_logic",
        "test_business_quality_gates_validation",
        "test_execution_sequence_performance_business_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_agent_execution_workflow_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_agent_execution_workflow_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Agent Execution Workflow Business Logic\n\nTests the core agent execution workflow business logic that orchestrates\nAI agent processing in the golden path, with mocked LLM responses to\ntest business logic without external LLM dependencies.\n\nBusiness Value:\n- Validates agent workflow orchestration for cost analysis scenarios\n- Tests agent state management and execution order (Data \u2192 Optimization \u2192 Reporting)\n- Verifies agent communication and result aggregation business logic\n- Tests agent error handling and recovery workflows\n",
      "test_methods": [
        "test_agent_session_user_isolation_business_rules",
        "test_agent_result_aggregation_business_logic",
        "test_agent_execution_performance_business_requirements",
        "test_agent_token_usage_business_optimization",
        "test_agent_cost_analysis_business_value",
        "test_agent_optimization_business_value",
        "test_agent_reporting_business_value",
        "test_agent_workflow_end_to_end_business_value"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_agent_orchestration_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_agent_orchestration_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Execution Order Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure Data \u2192 Optimization \u2192 Report sequence for coherent AI analysis\n- Value Impact: Proper agent orchestration prevents incomplete or contradictory results\n- Strategic Impact: Enforces the critical execution order that delivers complete business value\n\nCRITICAL: This test validates the business logic for the Data \u2192 Optimization \u2192 Report execution sequence\nthat has been identified as essential for delivering coherent and complete AI analysis to users.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the decision-making algorithms and orchestration patterns that ensure proper agent execution order.\n",
      "test_methods": [
        "test_critical_execution_order_business_rule",
        "test_execution_plan_creation_business_logic",
        "test_data_dependency_validation_logic",
        "test_execution_sequence_validation_business_rules",
        "test_parallel_execution_grouping_logic",
        "test_business_value_assessment_logic",
        "test_agent_execution_start_logic",
        "test_agent_completion_and_progression_logic",
        "test_phase_transition_logic",
        "test_execution_health_monitoring_logic",
        "test_business_rule_enforcement_comprehensive",
        "test_end_to_end_orchestration_business_value"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_auth_flows_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_auth_flows_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 17,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: User Authentication Flows Business Logic\n\nTests core authentication business logic that drives the golden path user flow,\nfocusing on business rules, validation, and authentication state management\nwithout requiring external auth services.\n\nBusiness Value:\n- Ensures authentication logic works correctly for 90% of user scenarios\n- Validates JWT token creation, validation, and user context management\n- Tests user permission and role-based access control\n- Verifies password security and user data protection\n",
      "test_methods": [
        "test_jwt_token_creation_business_rules",
        "test_jwt_token_expiration_business_rules",
        "test_user_authentication_context_creation",
        "test_authenticated_user_creation_business_logic",
        "test_password_security_business_requirements",
        "test_user_permissions_business_logic",
        "test_authentication_state_management",
        "test_multi_user_auth_isolation_business_rules",
        "test_auth_config_environment_business_logic",
        "test_authentication_error_handling_business_rules",
        "test_strongly_typed_user_id_business_logic",
        "test_jwt_validation_comprehensive_business_rules",
        "test_user_context_validation_business_rules",
        "test_permission_validation_business_logic",
        "test_authentication_edge_cases_business_handling",
        "test_concurrent_auth_business_isolation",
        "test_authentication_business_value_metrics"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_authentication_token_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_authentication_token_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Authentication Token Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure secure authentication enables trusted access to AI platform\n- Value Impact: Secure token validation prevents unauthorized access while enabling seamless user experience\n- Strategic/Revenue Impact: Critical for $500K+ ARR - enterprise security and compliance requirements\n\nCRITICAL: This test validates the business logic for JWT/OAuth token processing that enables\nsecure access to the AI platform. Authentication failures block business value delivery,\nwhile security vulnerabilities can cause enterprise customer loss and regulatory violations.\n\nKey Authentication Areas Tested:\n1. JWT Token Creation - Secure token generation with proper claims\n2. Token Validation - Business rules for token verification and security\n3. OAuth Flow Processing - Third-party authentication integration business logic\n4. Permission Management - Role-based access control for different user tiers\n5. Session Lifecycle - Token refresh, expiration, and cleanup business logic\n",
      "test_methods": [
        "test_jwt_token_creation_business_requirements",
        "test_enterprise_token_business_privileges",
        "test_jwt_token_validation_business_security",
        "test_oauth_callback_processing_business_logic",
        "test_permission_escalation_prevention_business_security",
        "test_multi_tier_token_business_differentiation",
        "test_token_lifecycle_business_management",
        "test_business_subscription_validation_in_tokens"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_cost_optimization_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_cost_optimization_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Cost Optimization Business Value Logic\n\nBusiness Value Justification (BVJ):\n- Segment: Early, Mid, Enterprise (core revenue generating tiers)\n- Business Goal: Validate cost analysis calculations that drive $500K+ ARR\n- Value Impact: Ensures accuracy of cost savings recommendations that justify platform value\n- Strategic Impact: Core algorithm validation for AI-driven cost optimization - our primary value proposition\n\nCRITICAL: This test validates the business logic calculations that determine cost optimization \nrecommendations. These calculations directly impact customer ROI and platform justification.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the algorithms and calculations that deliver quantifiable business value to customers.\n",
      "test_methods": [
        "test_cost_analysis_thresholds_business_logic",
        "test_rightsizing_recommendation_calculation_logic",
        "test_reserved_instances_recommendation_logic",
        "test_comprehensive_cost_analysis_business_value",
        "test_platform_roi_calculation_logic",
        "test_recommendation_prioritization_business_logic",
        "test_executive_summary_generation_logic",
        "test_business_impact_tier_calculation_logic",
        "test_minimum_cost_threshold_business_logic",
        "test_cost_optimization_accuracy_for_customer_segments"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_data_validation_transformation_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_data_validation_transformation_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 15,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Data Validation and Transformation Business Logic\n\nTests critical data validation and transformation business logic that ensures\ndata integrity and proper formatting throughout the golden path user flow.\n\nBusiness Value:\n- Validates data integrity for cost calculations and financial reporting\n- Tests input/output data transformations for agent communication\n- Verifies business rule enforcement in data processing\n- Tests data sanitization and security validation logic\n",
      "test_methods": [
        "test_user_data_validation_business_requirements",
        "test_user_update_validation_business_logic",
        "test_token_usage_validation_business_requirements",
        "test_cost_calculation_data_validation_business_rules",
        "test_agent_execution_result_validation_business_logic",
        "test_strongly_typed_user_context_validation_business_rules",
        "test_cost_data_transformation_business_requirements",
        "test_agent_response_transformation_business_logic",
        "test_json_serialization_business_requirements",
        "test_currency_formatting_business_requirements",
        "test_percentage_calculation_business_accuracy",
        "test_user_input_sanitization_business_security",
        "test_cost_data_validation_business_integrity",
        "test_api_response_structure_validation_business_requirements",
        "test_business_rule_enforcement_data_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_error_handling_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_error_handling_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Error Handling Business Logic\n\nTests error handling business logic for golden path scenarios to ensure\ngraceful degradation, proper error reporting, and business continuity\nwhen failures occur in the user journey.\n\nBusiness Value:\n- Validates error handling maintains business continuity\n- Tests error classification and user-friendly messaging\n- Verifies error recovery mechanisms for critical business flows\n- Tests error monitoring and alerting for business operations\n",
      "test_methods": [
        "test_authentication_error_business_handling",
        "test_cost_calculation_error_business_fallback",
        "test_agent_execution_error_business_recovery",
        "test_database_error_business_user_messaging",
        "test_error_severity_classification_business_rules",
        "test_error_recovery_strategy_business_logic",
        "test_error_user_communication_business_standards",
        "test_error_tracking_business_metrics",
        "test_error_alerting_business_thresholds",
        "test_error_business_impact_assessment",
        "test_partial_failure_business_workflow_continuation",
        "test_error_recovery_business_sla_compliance"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_error_recovery_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_error_recovery_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: Error Recovery Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure graceful degradation maintains business continuity and user trust\n- Value Impact: Error recovery prevents user abandonment and maintains service reliability\n- Strategic/Revenue Impact: Critical for $500K+ ARR - system resilience enables enterprise trust and retention\n\nCRITICAL: This test validates the business logic for error recovery and graceful degradation\nthat maintains business operations when technical failures occur. Enterprise customers expect\n99.9% uptime and graceful handling of failures without losing business value delivery.\n\nKey Error Recovery Areas Tested:\n1. Authentication Error Recovery - Graceful auth failure handling without blocking users\n2. Database Connection Recovery - Business continuity during database issues  \n3. LLM Service Recovery - AI service failures with fallback strategies\n4. WebSocket Connection Recovery - Real-time communication failure handling\n5. Agent Execution Recovery - AI agent failure recovery with partial results delivery\n",
      "test_methods": [
        "test_authentication_error_recovery_business_continuity",
        "test_llm_service_error_fallback_business_strategy",
        "test_database_error_critical_business_impact_recovery",
        "test_websocket_error_graceful_degradation_business_logic",
        "test_agent_execution_error_business_value_preservation",
        "test_multiple_concurrent_errors_business_prioritization",
        "test_business_health_reporting_error_impact_analysis",
        "test_error_recovery_performance_business_requirements",
        "test_circuit_breaker_business_protection_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_factory_initialization_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_factory_initialization_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Factory Initialization Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure WebSocket infrastructure initializes reliably\n- Value Impact: Prevents FactoryInitializationError that blocks all chat functionality\n- Strategic Impact: Eliminates system startup failures that prevent $500K+ ARR delivery\n\nCRITICAL: This test validates the business logic for factory initialization patterns\nthat prevent FactoryInitializationError exceptions which completely block chat functionality.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the decision-making algorithms and validation patterns for SSOT factory creation.\n",
      "test_methods": [
        "test_factory_configuration_validation_success",
        "test_factory_configuration_validation_missing_dependencies",
        "test_factory_configuration_validation_invalid_values",
        "test_ssot_compliance_validation_success",
        "test_ssot_compliance_validation_violations",
        "test_initialization_feasibility_assessment_success",
        "test_initialization_feasibility_assessment_environment_failure",
        "test_emergency_fallback_factory_creation",
        "test_factory_health_score_calculation",
        "test_business_value_preservation_through_fallbacks",
        "test_configuration_validation_edge_cases",
        "test_factory_initialization_error_recovery_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_golden_path_suite.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_golden_path_suite.py",
      "category": "unit",
      "service": "backend",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Test Suite Runner\n\nComprehensive test suite runner for all golden path unit tests.\nThis module validates that the golden path unit tests follow SSOT patterns\nand provide comprehensive business logic coverage.\n\nBusiness Value:\n- Ensures golden path unit tests cover all critical business scenarios\n- Validates test suite completeness for business logic validation\n- Provides unified entry point for golden path unit test execution\n- Validates test patterns follow SSOT and business requirements\n",
      "test_methods": [
        "test_all_golden_path_modules_present",
        "test_test_modules_follow_business_patterns",
        "test_business_coverage_completeness",
        "test_test_naming_conventions_business_clarity",
        "test_mock_usage_appropriate_for_unit_tests"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_message_routing_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_message_routing_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 11,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Message Routing Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure messages route to correct agents for coherent AI responses\n- Value Impact: Prevents user confusion from wrong agent responses and maintains conversation quality\n- Strategic Impact: Enables intelligent message classification that delivers appropriate AI expertise\n\nCRITICAL: This test validates the business logic for message routing that ensures users get\nresponses from the most appropriate AI agents based on their request content and context.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the decision-making algorithms and classification patterns for intelligent message routing.\n",
      "test_methods": [
        "test_message_classification_business_logic",
        "test_agent_capability_matching_logic",
        "test_context_aware_routing_logic",
        "test_fallback_routing_logic",
        "test_business_value_prioritization_logic",
        "test_routing_strategy_selection_logic",
        "test_agent_performance_consideration_logic",
        "test_routing_confidence_calculation_logic",
        "test_alternative_agents_suggestion_logic",
        "test_routing_performance_analysis_logic",
        "test_enterprise_customer_routing_priority_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_service_availability_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_service_availability_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Service Availability Validation Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prevent silent agent failures that block AI value delivery\n- Value Impact: Ensures graceful degradation when services unavailable\n- Strategic Impact: Maintains user confidence and prevents abandonment when services fail\n\nCRITICAL: This test validates business logic that detects service unavailability \nand provides graceful fallback responses instead of silent failures that damage user trust.\n\nThis test focuses on BUSINESS LOGIC validation, not actual service integration.\nTests the decision-making algorithms for service health assessment and fallback handling.\n",
      "test_methods": [
        "test_required_services_identification",
        "test_service_health_state_tracking",
        "test_system_capability_assessment_full_health",
        "test_system_capability_assessment_degraded_mode",
        "test_system_capability_assessment_maintenance_mode",
        "test_agent_execution_decision_logic_full_capability",
        "test_agent_execution_decision_logic_degraded_mode",
        "test_agent_execution_decision_logic_maintenance_mode",
        "test_fallback_strategy_generation_logic",
        "test_business_impact_assessment_accuracy",
        "test_graceful_degradation_user_communication",
        "test_service_failure_threshold_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_user_context_isolation.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_user_context_isolation.py",
      "category": "unit",
      "service": "backend",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest User Context Isolation Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure complete user isolation prevents data leaks between customers\n- Value Impact: Protects customer confidentiality and prevents competitive intelligence exposure\n- Strategic Impact: Enables multi-tenant SaaS model critical for $500K+ ARR scalability\n\nCRITICAL: This test validates the business logic for user context isolation that prevents\ncustomer data from leaking between users, which is essential for enterprise trust and compliance.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the decision-making algorithms and validation patterns for user context isolation.\n",
      "test_methods": [
        "test_user_context_creation_isolation_boundaries",
        "test_cross_user_resource_access_prevention",
        "test_user_id_format_validation_security",
        "test_context_conflict_detection_logic",
        "test_request_context_validation_security",
        "test_isolation_violation_detection_and_logging",
        "test_resource_scope_pattern_matching_logic",
        "test_context_cleanup_prevents_resource_leaks",
        "test_isolation_report_business_metrics",
        "test_multi_tenant_business_value_protection"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_user_context_isolation_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_user_context_isolation_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: User Context Isolation Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure complete user isolation prevents data leaks and maintains enterprise trust\n- Value Impact: Protects customer confidentiality, enables multi-tenant architecture for scale\n- Strategic/Revenue Impact: Critical for $500K+ ARR - enterprise customers require guaranteed isolation\n\nCRITICAL: This test validates the business logic for user context isolation using Factory patterns\nthat prevent customer data from leaking between users. Enterprise trust and regulatory compliance\ndepend on this isolation working correctly across all user execution contexts.\n\nKey Isolation Areas Tested:\n1. UserExecutionContextFactory - Ensures complete user session isolation\n2. Authentication Context - JWT tokens and user credentials isolated per user\n3. WebSocket Context - Real-time communication channels isolated per user  \n4. Agent State - AI agent execution state isolated per user\n5. Data Access - User data and analysis results isolated per user\n",
      "test_methods": [
        "test_user_execution_context_factory_isolation_business_requirements",
        "test_authentication_context_isolation_business_requirements",
        "test_websocket_context_isolation_business_requirements",
        "test_agent_execution_state_isolation_business_requirements",
        "test_cross_user_access_prevention_business_requirements",
        "test_concurrent_user_isolation_business_requirements",
        "test_user_context_cleanup_business_requirements",
        "test_regulatory_compliance_isolation_business_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_websocket_event_emission.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_websocket_event_emission.py",
      "category": "unit",
      "service": "backend",
      "test_count": 11,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Event Emission Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure all 5 critical WebSocket events are emitted for user visibility\n- Value Impact: Users see real-time AI progress, preventing abandonment during processing\n- Strategic Impact: Delivers 90% of business value through visible AI agent interactions\n\nCRITICAL: This test validates the business logic for the 5 mission-critical WebSocket events\nthat enable users to see AI agent progress. Without these events, users think the system is broken.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the decision-making algorithms and event generation patterns for user value delivery.\n",
      "test_methods": [
        "test_required_events_definition_accuracy",
        "test_agent_started_event_generation_logic",
        "test_thinking_phase_event_generation_logic",
        "test_tool_execution_events_generation_logic",
        "test_agent_completion_event_generation_logic",
        "test_business_value_score_calculation_logic",
        "test_event_priority_handling_logic",
        "test_event_emission_completeness_assessment",
        "test_event_data_validation_logic",
        "test_user_experience_message_generation_logic",
        "test_business_value_preservation_through_events"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_websocket_event_emission_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_websocket_event_emission_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: WebSocket Event Emission Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure critical WebSocket events enable real-time user visibility\n- Value Impact: Users see AI progress, preventing abandonment and increasing chat completion rates\n- Strategic/Revenue Impact: Delivers 90% of $500K+ ARR chat functionality through visible agent interactions\n\nCRITICAL: This test validates the business logic for the 5 mission-critical WebSocket events\nthat enable users to see AI agent progress during the Golden Path user flow. Without proper\nevent emission, users think the system is broken and abandon their sessions.\n\nKey Events Tested:\n1. agent_started - Confirms AI received user request\n2. agent_thinking - Shows real-time reasoning progress  \n3. tool_executing - Demonstrates problem-solving approach\n4. tool_completed - Delivers actionable insights\n5. agent_completed - Indicates valuable response is ready\n",
      "test_methods": [
        "test_agent_started_event_business_requirements",
        "test_tool_execution_event_business_requirements",
        "test_golden_path_event_sequence_business_validation",
        "test_event_payload_json_serialization_business_requirements",
        "test_multi_user_event_isolation_business_requirements",
        "test_event_emission_error_handling_business_continuity",
        "test_event_callback_business_integration"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_websocket_handshake_timing.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_websocket_handshake_timing.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Handshake Timing Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prevent connection failures that block chat value\n- Value Impact: Ensures reliable WebSocket handshake prevents user abandonment\n- Strategic Impact: Eliminates 1011 errors that cost $500K+ ARR in chat functionality\n\nCRITICAL: This test validates the business logic that prevents race conditions in \nWebSocket handshakes that have been causing staging failures and user value loss.\n\nThis test focuses on BUSINESS LOGIC validation, not system integration.\nTests the algorithms and decision-making functions that prevent race conditions.\n",
      "test_methods": [
        "test_handshake_initiation_success",
        "test_race_condition_detection_logic",
        "test_concurrent_handshake_limit_enforcement",
        "test_handshake_phase_transition_validation",
        "test_handshake_timeout_detection_logic",
        "test_progressive_delay_calculation_logic",
        "test_handshake_cleanup_on_completion",
        "test_race_condition_prevention_timing_accuracy",
        "test_business_value_preservation_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/golden_path/test_websocket_management_business_logic.py",
      "relative_path": "netra_backend/tests/unit/golden_path/test_websocket_management_business_logic.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Unit Tests: WebSocket Connection Management Business Logic\n\nTests the core WebSocket connection management business logic that enables\nreal-time communication in the golden path user flow, without requiring\nactual WebSocket connections.\n\nBusiness Value:\n- Validates WebSocket connection state management for 90% of user scenarios\n- Tests connection handler business logic and message routing\n- Verifies user isolation and concurrent connection handling\n- Tests WebSocket event generation and message formatting\n",
      "test_methods": [
        "test_websocket_message_creation_business_rules",
        "test_websocket_context_user_isolation_business_rules",
        "test_agent_message_handler_business_flow",
        "test_connection_handler_business_state_management",
        "test_websocket_message_validation_business_rules",
        "test_concurrent_websocket_connections_business_isolation",
        "test_websocket_context_creation_business_efficiency",
        "test_websocket_business_value_tracking",
        "test_websocket_business_error_recovery_logic"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/llm/test_llm_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/llm/test_llm_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for LLMManager - THIRD PRIORITY SSOT Class\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (serves ALL customer segments)\n- Business Goal: System Stability & Security - Central LLM management\n- Value Impact: Provides secure, user-scoped LLM operations preventing $10M+ security breaches\n- Strategic Impact: Foundation for ALL agent intelligence operations across platform\n\nCRITICAL: LLMManager is a THIRD PRIORITY SSOT class providing:\n1. Factory pattern replaces singleton for multi-user safety\n2. User-scoped caching prevents conversation mixing between users\n3. Central LLM management for all agent operations\n4. Structured response support with Pydantic models\n5. Health checking and metrics collection\n\nREQUIREMENTS per CLAUDE.md:\n- NO mocks for business logic - use real instances\n- Tests must RAISE ERRORS - no try/except masking failures\n- ABSOLUTE IMPORTS only\n- Use SSOT base test case and patterns\n- Comprehensive coverage of all methods and scenarios\n\nCHEATING ON TESTS = ABOMINATION\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/llm/test_llm_manager_comprehensive_focused.py",
      "relative_path": "netra_backend/tests/unit/llm/test_llm_manager_comprehensive_focused.py",
      "category": "unit",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for LLMManager - SINGLE SOURCE OF TRUTH (Focused Implementation)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (serves ALL customer segments - Free, Early, Mid, Enterprise)\n- Business Goal: System Stability & Security - Secure LLM operations with user isolation  \n- Value Impact: Prevents $10M+ security breaches through proper user context isolation\n- Strategic Impact: Foundation for ALL agent intelligence operations across the platform\n\nCRITICAL: LLMManager is the SECURITY-CRITICAL SSOT class providing:\n1. Factory pattern for multi-user safety (prevents conversation mixing)\n2. User-scoped caching prevents data leakage between users\n3. Central LLM management with configuration abstraction\n4. Structured response support for agent decision-making\n5. Health monitoring and graceful error handling\n6. WebSocket integration for real-time agent communications\n\nThis comprehensive test suite ensures 100% coverage of all critical business logic paths,\nsecurity aspects, and operational scenarios following CLAUDE.md requirements.\n\nULTRA THINK DEEPLY: Every test validates REAL business value and security requirements.\n\nREQUIREMENTS:\n- NO mocks for core business logic - test real instances where possible\n- Tests MUST RAISE ERRORS - no try/except masking failures\n- ABSOLUTE IMPORTS only per CLAUDE.md\n- Use SSOT patterns from test_framework\n- Comprehensive coverage including all edge cases and error conditions\n- Multi-user isolation testing (CRITICAL for preventing $10M+ breaches)\n- WebSocket integration testing (CRITICAL for chat value delivery)\n\nCHEATING ON TESTS = ABOMINATION\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/logging/test_debug_utilities_completeness.py",
      "relative_path": "netra_backend/tests/unit/logging/test_debug_utilities_completeness.py",
      "category": "unit",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Debug Utilities Completeness - Unit Tests for Debug Information Quality\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Development Velocity & Operations)\n- Business Goal: Enable engineers to debug production issues in minutes not hours\n- Value Impact: Faster issue resolution = better customer experience and reduced downtime costs\n- Strategic Impact: Core operational capability that enables reliable service delivery\n\nThis test suite validates that our debug utilities provide complete information for:\n1. Production issue diagnosis\n2. Performance troubleshooting\n3. Multi-user system debugging\n4. Cross-service error tracing\n",
      "test_methods": [
        "test_user_context_debug_information",
        "test_error_debug_information_completeness",
        "test_performance_debug_information",
        "test_multi_user_debug_isolation",
        "test_websocket_debug_information",
        "test_auth_debug_information_completeness"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/netra_mcp/modules/test_thread_tools_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/netra_mcp/modules/test_thread_tools_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for ThreadTools MCP Module\n\nBusiness Value: Platform/Internal - Thread Management Infrastructure & AI Chat Sessions\n- Validates thread lifecycle management operations for multi-user AI chat\n- Ensures MCP tool registration and execution reliability\n- Provides coverage for thread creation and history retrieval business logic\n- Supports core chat functionality that delivers 90% of platform value\n\nTest Coverage Target: 100% of all public and private methods\nTest Categories: Thread Creation, Thread History, Error Handling, Validation, Edge Cases\n\nCRITICAL REQUIREMENTS:\n- Tests real business logic without bypassing validation\n- Uses SSOT patterns from test_framework\n- Strongly typed IDs from shared.types.core_types\n- Comprehensive error handling validation\n- Thread service integration testing\n",
      "test_methods": [
        "test_thread_tools_initialization",
        "test_register_all_tools",
        "test_prepare_thread_metadata_with_data",
        "test_prepare_thread_metadata_with_none",
        "test_prepare_thread_metadata_with_empty_dict",
        "test_format_thread_result",
        "test_format_service_error",
        "test_thread_tools_with_different_mcp_instances",
        "test_metadata_source_injection_business_rule"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/performance/test_comprehensive_performance_unit.py",
      "relative_path": "netra_backend/tests/unit/performance/test_comprehensive_performance_unit.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nUnit Performance Tests - Comprehensive Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure algorithmic efficiency prevents customer churn\n- Value Impact: Fast response times reduce abandonment rates by 40%\n- Strategic Impact: Optimized algorithms reduce server costs by 25%\n\nCRITICAL: These unit tests validate performance of core algorithms without\nexternal dependencies. Poor algorithm performance compounds at scale.\n",
      "test_methods": [
        "test_agent_state_creation_performance",
        "test_user_context_performance",
        "test_data_structure_performance",
        "test_memory_efficiency_algorithms",
        "test_cpu_intensive_algorithm_performance",
        "test_string_operation_performance",
        "test_concurrency_performance_patterns",
        "test_performance_sla_validation",
        "test_memory_usage_sla"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/schemas/test_startup_types_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/schemas/test_startup_types_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 52,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Startup Types - Pydantic Models for Status Tracking\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (enables all customer segments)\n- Business Goal: Data Integrity and System Observability\n- Value Impact: Ensures startup status data is validated and consistent\n- Strategic Impact: Enables reliable startup monitoring and troubleshooting\n\nCRITICAL: These models are the SSOT for all startup status tracking.\nTests MUST validate field constraints, enum values, and data serialization.\n",
      "test_methods": [
        "test_service_type_values",
        "test_service_type_string_conversion",
        "test_service_type_invalid_value_raises_error",
        "test_service_type_case_sensitive",
        "test_environment_values",
        "test_environment_string_conversion",
        "test_environment_invalid_value_raises_error",
        "test_environment_case_sensitive",
        "test_last_startup_creation_valid",
        "test_last_startup_with_errors_and_warnings",
        "test_last_startup_duration_validation",
        "test_last_startup_defaults",
        "test_migration_status_creation_defaults",
        "test_migration_status_with_data",
        "test_migration_status_optional_fields",
        "test_service_config_creation_defaults",
        "test_service_config_with_data",
        "test_service_config_empty_validation_errors",
        "test_crash_entry_creation_minimal",
        "test_crash_entry_creation_complete",
        "test_crash_entry_service_type_validation",
        "test_health_check_history_creation_defaults",
        "test_health_check_history_with_data",
        "test_health_check_history_mixed_types",
        "test_startup_status_creation_defaults",
        "test_startup_status_creation_complete",
        "test_startup_status_crash_history_limit_validator",
        "test_startup_status_crash_history_under_limit",
        "test_startup_status_crash_history_exactly_50",
        "test_startup_event_creation_minimal",
        "test_startup_event_creation_complete",
        "test_startup_event_context_default",
        "test_error_phase_values",
        "test_error_phase_string_conversion",
        "test_error_phase_invalid_value_raises_error",
        "test_error_type_values",
        "test_error_type_string_conversion",
        "test_error_type_invalid_value_raises_error",
        "test_startup_error_creation_minimal",
        "test_startup_error_creation_complete",
        "test_error_pattern_creation_minimal",
        "test_error_pattern_creation_complete",
        "test_error_pattern_frequency_validation",
        "test_error_trend_creation_minimal",
        "test_error_trend_creation_complete",
        "test_startup_status_model_dict_serialization",
        "test_crash_entry_json_serialization",
        "test_error_pattern_round_trip_serialization",
        "test_empty_list_fields_behavior",
        "test_none_values_for_optional_fields",
        "test_datetime_timezone_handling",
        "test_large_data_handling"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/services/test_agent_websocket_bridge_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/services/test_agent_websocket_bridge_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 3,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for AgentWebSocketBridge\n\nBusiness Value: ULTRA HIGH - Bridge between agents and WebSocket events\n- SSOT for agent-WebSocket integration lifecycle\n- Enables real-time agent event streaming (core business value)  \n- Integration point between multiple critical systems\n\nThis test suite covers the most critical agent event functionality:\n1. Agent lifecycle event generation (agent_started, agent_thinking, etc.)\n2. Agent execution context integration\n3. WebSocket event emission during agent operations\n4. Error handling during agent execution\n5. Concurrent agent executions with event isolation\n6. Agent event queuing and retry logic\n7. Integration with UnifiedWebSocketManager\n\nCRITICAL: This file is ~2,439 lines - focuses on most critical business value paths.\nPriority: Agent lifecycle events \u2192 WebSocket integration \u2192 Error handling \u2192 Performance\n",
      "test_methods": [
        "test_bridge_initialization_state",
        "test_integration_config_defaults",
        "test_non_singleton_bridge_creation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/services/test_thread_run_registry_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/services/test_thread_run_registry_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nThreadRunRegistry SSOT - Comprehensive Unit Test Suite\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: System Stability & Chat Value Delivery  \n- Value Impact: Ensures 100% reliable WebSocket event routing for $75K+ MRR chat functionality\n- Strategic Impact: Eliminates WebSocket notification failures that cause user engagement loss\n\nThis comprehensive test suite validates the critical ThreadRunRegistry SSOT class that enables\nreliable thread-to-run mapping for WebSocket event delivery. Complete test coverage ensures\nthe registry maintains thread safety, singleton consistency, and business SLA compliance.\n\nTest Categories:\n1. Singleton Pattern & SSOT Consistency (20+ tests)\n2. Registration & Lookup Core Business Logic (25+ tests)  \n3. Thread Safety & Concurrent Access (20+ tests)\n4. TTL & Cleanup Business Logic (15+ tests)\n5. Metrics & Monitoring (10+ tests)\n6. Performance & Scalability (15+ tests)\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/services/test_websocket_error_validation_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/services/test_websocket_error_validation_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive tests for WebSocket error validation and loud error patterns.\n\nTests the enhanced error handling in agent message handling components,\nensuring that silent failures are eliminated and business-critical errors\nare logged with maximum visibility.\n\nBVJ: Platform/Internal | Stability | Ensure reliable WebSocket error detection\n",
      "test_methods": [
        "test_validate_mission_critical_events",
        "test_validate_missing_required_fields",
        "test_validate_malformed_event_structure",
        "test_validate_cross_user_leakage_detection",
        "test_validate_connection_readiness",
        "test_validation_statistics",
        "test_validator_singleton_behavior"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/services/websocket/test_quality_message_router_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/services/websocket/test_quality_message_router_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nQualityMessageRouter - Comprehensive Unit Test Suite\n\nBusiness Value Justification:\n- Segment: Platform/Internal & All User Tiers (Free, Early, Mid, Enterprise)\n- Business Goal: System Reliability & Quality Monitoring Infrastructure\n- Value Impact: Ensures 100% reliable quality-related WebSocket message routing for system health monitoring\n- Strategic Impact: Enables proactive quality management that maintains user trust and service reliability\n\nThis comprehensive test suite validates the critical QualityMessageRouter class that routes all quality-related\nWebSocket messages to appropriate handlers. Complete test coverage ensures reliable quality monitoring infrastructure\nthat enables proactive system health management across all user tiers and business scenarios.\n\nTest Categories:\n1. Handler Initialization & Dependency Injection (7+ tests)\n2. Message Routing & Session Continuity (12+ tests) \n3. Broadcasting & Subscriber Management (6+ tests)\n4. Integration & Error Handling (8+ tests)\n5. Performance & Scalability (2+ tests)\n",
      "test_methods": [
        "test_router_initializes_with_all_required_handlers",
        "test_router_stores_service_dependencies",
        "test_metrics_handler_creation",
        "test_alert_handler_creation",
        "test_enhanced_start_handler_creation",
        "test_validation_handler_creation",
        "test_report_handler_creation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/startup_checks/test_startup_checks_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/startup_checks/test_startup_checks_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 36,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Startup Checks Module - Comprehensive System Validation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (enables all customer segments)\n- Business Goal: Platform Stability and Reliability  \n- Value Impact: Ensures all system components are operational before serving customers\n- Strategic Impact: Prevents partial system failures and service degradation\n\nThis comprehensive test suite validates ALL startup_checks functionality:\n- Package structure and imports\n- StartupCheckResult data model\n- StartupChecker orchestration class\n- run_startup_checks utility function\n- DatabaseChecker connectivity validation\n- EnvironmentChecker configuration validation\n- ServiceChecker external service connectivity\n- SystemChecker resource validation\n- Integration scenarios and error handling\n- Real system integration where possible\n",
      "test_methods": [
        "test_package_imports_work",
        "test_backward_compatibility_alias",
        "test_package_all_exports",
        "test_module_independence",
        "test_startup_check_result_creation_basic",
        "test_startup_check_result_creation_full",
        "test_startup_check_result_default_values",
        "test_startup_check_result_attributes_mutable",
        "test_startup_check_result_string_representation",
        "test_startup_checker_initialization",
        "test_startup_checker_test_thread_aware_mode",
        "test_startup_checker_staging_environment_detection",
        "test_startup_checker_get_check_functions",
        "test_database_checker_initialization",
        "test_database_checker_mock_mode_detection",
        "test_database_checker_create_mock_result",
        "test_database_checker_get_assistant_tools",
        "test_database_checker_get_assistant_metadata",
        "test_environment_checker_initialization",
        "test_environment_checker_staging_detection",
        "test_environment_checker_get_required_vars_development",
        "test_environment_checker_get_required_vars_production",
        "test_environment_checker_get_optional_vars",
        "test_service_checker_initialization",
        "test_service_checker_environment_property",
        "test_service_checker_staging_property",
        "test_service_checker_prepare_redis_test_data",
        "test_service_checker_create_llm_result_no_providers",
        "test_service_checker_create_llm_result_partial_providers",
        "test_service_checker_create_llm_result_all_providers",
        "test_system_checker_test_single_directory_success",
        "test_system_checker_test_single_directory_failure",
        "test_system_checker_get_network_endpoints",
        "test_system_checker_parse_endpoint",
        "test_startup_checks_checker_factory_isolation",
        "test_comprehensive_test_suite_complete"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_auth_client_core_complete.py",
      "relative_path": "netra_backend/tests/unit/test_auth_client_core_complete.py",
      "category": "unit",
      "service": "backend",
      "test_count": 8,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for auth_client_core.py achieving 100% coverage.\nTests all authentication operations, resilience modes, circuit breakers, and caching.\n",
      "test_methods": [
        "test_init_with_config_secret",
        "test_init_with_env_secret_fallback",
        "test_init_without_any_secret",
        "test_init_production_without_auth_service",
        "test_init_production_without_secret",
        "test_auth_operation_types",
        "test_auth_resilience_modes",
        "test_get_auth_resilience_service_singleton"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_auth_client_core_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_auth_client_core_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 11,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for auth_client_core.py achieving 100% coverage.\nTests all authentication operations, resilience modes, circuit breakers, and caching.\n",
      "test_methods": [
        "test_init_with_config_secret",
        "test_init_with_env_secret_fallback",
        "test_init_without_any_secret",
        "test_resilience_mode_property",
        "test_circuit_breaker_state_property",
        "test_validate_jwt_format_valid",
        "test_validate_jwt_format_invalid_parts",
        "test_validate_jwt_format_invalid_encoding",
        "test_validate_jwt_format_empty",
        "test_validate_jwt_format_none",
        "test_get_auth_service_client_singleton"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_backend_environment_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_backend_environment_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 126,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Backend Environment Configuration - Comprehensive Unit Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (All tiers depend on configuration)\n- Business Goal: System Stability & Configuration Consistency\n- Value Impact: Ensures reliable environment configuration for service operation\n- Strategic Impact: Prevents configuration-related outages that impact all users\n\nThis test file provides comprehensive coverage of the BackendEnvironment class,\ntesting all methods, environment variable handling, validation, type conversions,\nand fallback behavior. Critical for ensuring service stability.\n\nCRITICAL: This validates the SSOT environment configuration that all backend\noperations depend on. Failures here indicate cascade failure potential.\n",
      "test_methods": [
        "test_init_creates_environment_instance",
        "test_init_validation_provides_test_defaults_in_test_context",
        "test_init_validation_logs_missing_variables_production_context",
        "test_init_validation_builds_database_url",
        "test_get_jwt_secret_key_uses_unified_secrets",
        "test_get_jwt_secret_key_environment_priority",
        "test_get_jwt_secret_key_fallback_chain",
        "test_get_secret_key_returns_value",
        "test_get_secret_key_returns_empty_when_missing",
        "test_get_fernet_key_returns_value",
        "test_get_fernet_key_returns_empty_when_missing",
        "test_get_database_url_async_by_default",
        "test_get_database_url_sync_when_requested",
        "test_get_database_url_returns_empty_when_cannot_build",
        "test_get_database_url_logs_safe_message",
        "test_get_postgres_host_returns_value",
        "test_get_postgres_host_returns_default",
        "test_get_postgres_port_returns_int",
        "test_get_postgres_port_returns_default_for_invalid",
        "test_get_postgres_port_returns_default_when_missing",
        "test_get_postgres_user_returns_value",
        "test_get_postgres_user_returns_default",
        "test_get_postgres_password_returns_value",
        "test_get_postgres_password_returns_empty_when_missing",
        "test_get_postgres_db_returns_value",
        "test_get_postgres_db_returns_default",
        "test_get_redis_url_returns_value",
        "test_get_redis_url_returns_default",
        "test_get_redis_host_returns_value",
        "test_get_redis_host_returns_default",
        "test_get_redis_port_returns_int",
        "test_get_redis_port_returns_default_for_invalid",
        "test_get_redis_port_returns_default_when_missing",
        "test_get_openai_api_key_returns_value",
        "test_get_openai_api_key_returns_empty_when_missing",
        "test_get_anthropic_api_key_returns_value",
        "test_get_anthropic_api_key_returns_empty_when_missing",
        "test_get_auth_service_url_returns_value",
        "test_get_auth_service_url_returns_default",
        "test_get_frontend_url_returns_value",
        "test_get_frontend_url_returns_default",
        "test_get_backend_url_returns_value",
        "test_get_backend_url_returns_default",
        "test_get_environment_returns_value_lowercase",
        "test_get_environment_returns_default",
        "test_is_production_true_for_production",
        "test_is_production_false_for_non_production",
        "test_is_staging_true_for_staging",
        "test_is_staging_false_for_non_staging",
        "test_is_development_true_for_development_variants",
        "test_is_development_false_for_non_development",
        "test_is_testing_true_for_testing_variants",
        "test_is_testing_true_for_testing_flag",
        "test_is_testing_false_for_non_testing",
        "test_get_cors_origins_returns_list",
        "test_get_cors_origins_strips_whitespace",
        "test_get_cors_origins_returns_default",
        "test_get_cors_origins_handles_single_origin",
        "test_get_log_level_returns_uppercase",
        "test_get_log_level_returns_default",
        "test_should_enable_debug_true_for_true_values",
        "test_should_enable_debug_false_for_false_values",
        "test_should_enable_debug_false_when_missing",
        "test_is_feature_enabled_true_for_enabled_feature",
        "test_is_feature_enabled_handles_case_conversion",
        "test_is_feature_enabled_false_for_disabled_feature",
        "test_is_feature_enabled_false_when_missing",
        "test_get_rate_limit_requests_returns_int",
        "test_get_rate_limit_requests_returns_default_for_invalid",
        "test_get_rate_limit_requests_returns_default_when_missing",
        "test_get_rate_limit_period_returns_int",
        "test_get_rate_limit_period_returns_default_for_invalid",
        "test_get_rate_limit_period_returns_default_when_missing",
        "test_get_websocket_timeout_returns_int",
        "test_get_websocket_timeout_returns_default_for_invalid",
        "test_get_websocket_timeout_returns_default_when_missing",
        "test_get_websocket_ping_interval_returns_int",
        "test_get_websocket_ping_interval_returns_default_for_invalid",
        "test_get_websocket_ping_interval_returns_default_when_missing",
        "test_get_agent_timeout_returns_int",
        "test_get_agent_timeout_returns_default_for_invalid",
        "test_get_agent_timeout_returns_default_when_missing",
        "test_get_max_agent_retries_returns_int",
        "test_get_max_agent_retries_returns_default_for_invalid",
        "test_get_max_agent_retries_returns_default_when_missing",
        "test_get_cache_ttl_returns_int",
        "test_get_cache_ttl_returns_default_for_invalid",
        "test_get_cache_ttl_returns_default_when_missing",
        "test_is_cache_enabled_true_for_true_values",
        "test_is_cache_enabled_false_for_false_values",
        "test_is_cache_enabled_default_true_when_missing",
        "test_get_method_returns_value",
        "test_get_method_returns_default",
        "test_get_method_returns_none_when_missing_no_default",
        "test_set_method_sets_value",
        "test_set_method_with_custom_source",
        "test_exists_method_returns_true_for_existing",
        "test_exists_method_returns_false_for_missing",
        "test_get_all_method_returns_dict",
        "test_validate_returns_success_for_valid_config",
        "test_validate_detects_missing_required_variables",
        "test_validate_detects_missing_database_url",
        "test_validate_detects_insecure_defaults_in_production",
        "test_validate_allows_dev_secrets_in_development",
        "test_validate_generates_warnings_for_missing_api_keys",
        "test_validate_warns_debug_in_production",
        "test_validate_returns_complete_structure",
        "test_get_backend_env_returns_singleton",
        "test_convenience_get_jwt_secret_key_function",
        "test_convenience_get_database_url_function",
        "test_convenience_get_database_url_sync_function",
        "test_convenience_get_environment_function",
        "test_convenience_is_production_function",
        "test_convenience_is_development_function",
        "test_multiple_instances_use_same_env",
        "test_empty_string_handling",
        "test_boolean_conversion_edge_cases",
        "test_metrics_recorded_during_test_execution",
        "test_execution_performance_within_bounds",
        "test_isolated_environment_integration",
        "test_database_url_builder_integration",
        "test_unified_secrets_integration",
        "test_environment_isolation_maintained",
        "test_logging_integration_no_errors",
        "test_error_handling_integration",
        "test_thread_safety_simulation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_base_agent_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_base_agent_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 5,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": [
        "test_timing_collector_lifecycle_management",
        "test_correlation_id_generation_uniqueness_tracking",
        "test_config_loading_error_resilience",
        "test_subagent_logging_configuration_states",
        "test_user_id_websocket_manager_assignment"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_compliance_validation_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_compliance_validation_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 4,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest iteration 70: Comprehensive compliance validation.\nValidates GDPR, SOC2, and audit requirements for enterprise compliance.\n",
      "test_methods": [
        "test_gdpr_data_subject_rights_enforcement",
        "test_soc2_access_control_compliance",
        "test_audit_trail_completeness_and_integrity",
        "test_data_encryption_compliance_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_config_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_config_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 24,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for netra_backend.app.config\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise\n- Business Goal: Zero configuration-related incidents and system stability  \n- Value Impact: Prevents cascading system failures from configuration errors\n- Strategic Impact: Ensures reliable configuration management as SSOT for all backend services\n- Revenue Impact: Avoids downtime costs and maintains customer trust through stable configuration\n\nThis test suite provides 100% coverage of the critical configuration module that serves as the\nSingle Source of Truth (SSOT) for all backend configuration access. Configuration errors are\na leading cause of system failures, making comprehensive testing essential for business continuity.\n\nCRITICAL REQUIREMENTS:\n- Tests the unified configuration interface in netra_backend/app/config.py\n- Validates all public functions and error conditions\n- Tests thread safety and concurrent access scenarios\n- Validates integration with UnifiedConfigManager\n- Tests lazy loading behavior of __getattr__\n- Ensures proper error handling and fallback behavior\n- Tests environment variable handling through IsolatedEnvironment\n- Validates configuration integrity checks\n- Tests both success and failure scenarios for maximum coverage\n\nTESTING APPROACH:\n- Real configuration objects (no mocks for config schemas)\n- Minimal mocking limited to external dependencies only\n- Thread safety validation with concurrent access\n- Error injection testing for resilience validation\n- Performance testing for lazy loading efficiency\n",
      "test_methods": [
        "test_get_config_returns_app_config_instance",
        "test_get_config_caching_behavior",
        "test_reload_config_without_force",
        "test_reload_config_with_force",
        "test_validate_configuration_success",
        "test_getattr_settings_lazy_loading",
        "test_getattr_settings_uses_cache",
        "test_getattr_invalid_attribute_raises_error",
        "test_get_config_thread_safety",
        "test_lazy_loading_thread_safety",
        "test_get_config_handles_manager_errors",
        "test_validate_configuration_handles_errors",
        "test_reload_config_handles_manager_errors",
        "test_config_manager_integration",
        "test_environment_variable_integration",
        "test_get_config_performance",
        "test_lazy_loading_performance",
        "test_multiple_reload_cycles",
        "test_concurrent_reload_and_access",
        "test_config_module_exports",
        "test_config_consistency_across_calls",
        "test_configuration_type_safety",
        "test_complete_api_coverage",
        "test_business_value_metrics"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_database_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_database_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 31,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Database Module Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure database operations are reliable and performant\n- Value Impact: Prevents data loss, ensures system stability, enables all database-dependent features\n- Strategic Impact: Foundation for all data operations - user data, agent execution, optimization results\n\nThis comprehensive test suite validates ALL database functionality:\n- DatabaseManager SSOT implementation\n- Database and AsyncDatabase classes\n- Connection management and pooling\n- URL construction via DatabaseURLBuilder\n- Error handling and recovery\n- Session lifecycle management\n- Health checks and monitoring\n- Environment-specific configurations\n- Transaction handling and rollback\n- Connection failures and recovery scenarios\n\nCRITICAL: This module manages ALL database operations for the backend.\nDatabase failures could prevent:\n- User authentication and registration\n- Agent execution and results storage\n- Optimization data persistence\n- System configuration management\n- Audit trails and analytics\n",
      "test_methods": [
        "test_database_manager_initialization",
        "test_get_engine_not_initialized",
        "test_database_url_construction_with_database_url_builder",
        "test_get_migration_url_sync_format",
        "test_create_application_engine",
        "test_global_database_manager_singleton",
        "test_database_initialization",
        "test_database_pool_class_selection",
        "test_database_pool_sizing",
        "test_database_connect_success",
        "test_database_connect_with_retry",
        "test_database_connect_failure_after_retries",
        "test_database_get_db_session_management",
        "test_database_get_db_session_error_handling",
        "test_database_deprecation_warning",
        "test_database_close",
        "test_async_database_initialization",
        "test_async_database_initialization_with_url_override",
        "test_database_url_builder_integration",
        "test_database_url_formatting_for_asyncpg",
        "test_database_url_fallback_to_config",
        "test_database_url_builder_failure_raises_error",
        "test_database_timeout_config_development",
        "test_database_timeout_config_staging",
        "test_cloud_sql_optimized_config_staging",
        "test_cloud_sql_optimized_config_development",
        "test_pool_exhaustion_handling",
        "test_shim_imports_from_ssot",
        "test_shim_deprecation_warning",
        "test_backward_compatibility_functions",
        "test_database_module_business_value_coverage"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_logging_config_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_logging_config_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 60,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Logging Configuration SSOT\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (All segments depend on this)\n- Business Goal: System Observability and Monitoring\n- Value Impact: Critical debugging and monitoring infrastructure for production systems\n- Strategic Impact: Essential for maintaining system reliability and performance\n\nCRITICAL: This module is imported 643 times across the platform - failure here affects ALL services.\n\nThis test suite validates:\n1. Unified logger initialization and configuration\n2. Context management and correlation IDs\n3. Sensitive data filtering in production logs\n4. Performance tracking and execution decorators\n5. Environment-specific behavior (test/staging/production)\n6. WebSocket integration and trace propagation\n7. Error handling and fallback mechanisms\n8. Cross-service compatibility\n",
      "test_methods": [
        "test_all_exports_available",
        "test_backward_compatibility_aliases",
        "test_context_variables_from_logging_context",
        "test_logger_initialization",
        "test_config_loading_with_fallback",
        "test_config_loading_caching",
        "test_config_loading_with_unified_config",
        "test_gcp_environment_forces_json_logging",
        "test_secrets_loading_phase_handling",
        "test_setup_logging_initialization",
        "test_setup_logging_idempotency",
        "test_debug_logging",
        "test_info_logging",
        "test_warning_logging",
        "test_error_logging_with_exception_info",
        "test_critical_logging_with_exception_info",
        "test_sensitive_data_filtering",
        "test_context_inclusion",
        "test_set_context",
        "test_clear_context",
        "test_context_isolation",
        "test_log_performance",
        "test_log_api_call",
        "test_execution_time_decorator_sync",
        "test_execution_time_decorator_with_exception",
        "test_get_central_logger_returns_singleton",
        "test_get_logger_alias",
        "test_log_execution_time_decorator",
        "test_central_logger_singleton",
        "test_message_filtering",
        "test_dict_filtering",
        "test_credit_card_filtering",
        "test_email_partial_redaction",
        "test_testing_environment_behavior",
        "test_production_environment_behavior",
        "test_staging_environment_behavior",
        "test_config_loading_exception_fallback",
        "test_handler_configuration_exception_handling",
        "test_logging_method_with_filter_exception",
        "test_multiple_logger_instances",
        "test_context_variable_isolation",
        "test_standard_library_interception_compatibility",
        "test_json_formatter",
        "test_gcp_json_formatter",
        "test_console_format_string",
        "test_handler_config_creation",
        "test_console_handler_in_testing",
        "test_file_handler_creation",
        "test_unified_trace_context_integration",
        "test_child_context_creation",
        "test_config_loading_performance",
        "test_logging_method_performance",
        "test_empty_message_handling",
        "test_malformed_dict_handling",
        "test_circular_import_prevention",
        "test_context_variable_cleanup",
        "test_handler_removal_safety",
        "test_unicode_message_handling",
        "test_high_frequency_logging",
        "test_function"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_smd_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_smd_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 37,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Startup Module Deterministic (smd.py)\n\nBusiness Value Justification:\n- Revenue Impact: Protects $500K+ ARR by ensuring deterministic startup sequence\n- Business Segment: Platform/Internal - Critical Infrastructure Stability\n- Value Impact: Prevents catastrophic startup failures that would block chat (90% of business value)\n- Strategic Impact: Ensures multi-user system can scale reliably without ambiguous failures\n\nCRITICAL: This file tests the MOST IMPORTANT startup module in the system.\nIf chat cannot work, the service MUST NOT start - this is core business logic.\n\nTest Coverage Categories:\n1. Deterministic startup sequences (7 phases)\n2. Critical service failure handling (NO graceful degradation)\n3. Chat infrastructure validation (90% of business value protection)\n4. Environment configuration and isolation\n5. Error handling and fail-fast behavior\n6. Service dependency management\n7. Health checks and readiness probes\n8. Performance and timing requirements\n9. Concurrent startup scenarios\n10. WebSocket bridge integration requirements\n",
      "test_methods": [
        "test_startup_phase_enum_values",
        "test_startup_phase_ordering_deterministic",
        "test_startup_phase_string_representation",
        "test_deterministic_startup_error_creation",
        "test_deterministic_startup_error_inheritance",
        "test_deterministic_startup_error_with_cause",
        "test_startup_orchestrator_initialization",
        "test_startup_state_initialization_on_app",
        "test_startup_orchestrator_logger_configuration",
        "test_set_current_phase_first_time",
        "test_set_current_phase_transition",
        "test_complete_phase_timing_calculation",
        "test_fail_phase_error_tracking",
        "test_validate_critical_services_exist_success",
        "test_validate_critical_services_missing_service_fails",
        "test_validate_critical_services_none_service_fails",
        "test_validate_critical_services_missing_usercontext_config_fails",
        "test_database_initialization_failure_is_fatal",
        "test_redis_initialization_failure_is_fatal",
        "test_key_manager_failure_is_fatal",
        "test_llm_manager_none_is_fatal",
        "test_agent_supervisor_none_prevents_startup",
        "test_thread_service_none_prevents_startup",
        "test_websocket_bridge_none_prevents_startup",
        "test_startup_timing_measurement_accuracy",
        "test_phase_timing_persists_through_transitions",
        "test_startup_completion_requires_all_phases",
        "test_startup_completion_with_failed_phases_prevents_completion",
        "test_multiple_phase_transitions_maintain_consistency",
        "test_concurrent_phase_failure_and_success_handling",
        "test_startup_state_consistency_during_failure",
        "test_get_env_wrapper_function",
        "test_environment_isolation_in_get_env",
        "test_environment_validation_called",
        "test_environment_validation_failure_propagates",
        "test_mark_startup_complete_success",
        "test_handle_startup_failure_comprehensive_logging"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_startup_health_checks_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_startup_health_checks_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Startup Health Checks - Critical Service Validation\n\nBusiness Value Justification (BVJ):\n- Segment: All customer segments (prevents 100% service failures)\n- Business Goal: Platform Reliability and Availability\n- Value Impact: Prevents NoneType errors and ensures service stability\n- Strategic Impact: Critical failure prevention - blocks startup until services ready\n\nCRITICAL: These health checks prevent cascade failures identified in Five Whys analysis.\nTests MUST validate all critical services and their failure modes.\n",
      "test_methods": [
        "test_service_status_enum_values",
        "test_service_status_string_conversion",
        "test_health_check_result_creation_minimal",
        "test_health_check_result_creation_complete",
        "test_health_check_result_dataclass_equality",
        "test_startup_health_checker_initialization",
        "test_startup_health_checker_critical_services_defined",
        "test_startup_health_checker_optional_services_defined",
        "test_startup_health_checker_app_assignment",
        "test_critical_services_list_matches_expectations",
        "test_optional_services_list_matches_expectations",
        "test_no_overlap_between_critical_and_optional"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_startup_module_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_startup_module_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 29,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Startup Module\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Critical Infrastructure\n- Business Goal: Prevent startup failures that block chat functionality (90% of business value)\n- Value Impact: Ensures reliable application initialization across all environments\n- Strategic Impact: $500K+ ARR protection by preventing production startup failures\n\nThis comprehensive test suite covers all critical startup paths in startup_module.py (1520 lines).\nThe startup module is a SSOT component with NO existing unit tests, making this mission critical\nfor production stability.\n\nTest Coverage Areas:\n1. Path setup and imports\n2. Database connection management and table creation\n3. Performance optimization initialization\n4. Environment and logging configuration\n5. Database migration management\n6. Service initialization order\n7. ClickHouse setup and error handling\n8. WebSocket and agent supervisor creation\n9. Health checks and monitoring\n10. Complete startup orchestration flows\n11. Error scenarios and graceful degradation\n12. Multi-environment support (dev/staging/prod)\n13. Performance characteristics and timing\n14. Resource cleanup and memory management\n15. Concurrent initialization scenarios\n",
      "test_methods": [
        "test_setup_paths_adds_project_root_to_sys_path",
        "test_setup_paths_handles_path_resolution_failure",
        "test_import_all_models_registers_database_models",
        "test_initialize_logging_returns_timing_and_logger",
        "test_setup_multiprocessing_env_detects_pytest",
        "test_validate_database_environment_skips_in_pytest",
        "test_perform_database_validation_exits_on_failure",
        "test_run_database_migrations_executes_in_normal_mode",
        "test_run_database_migrations_skips_in_fast_mode",
        "test_is_mock_database_url_detects_mock_patterns",
        "test_is_mock_database_url_detects_real_urls",
        "test_is_postgres_service_mock_mode_reads_config",
        "test_initialize_core_services_sets_app_state",
        "test_setup_security_services_configures_clickhouse_availability",
        "test_register_websocket_handlers_creates_dispatcher",
        "test_create_tool_registry_returns_instance",
        "test_create_tool_dispatcher_emits_deprecation_warning",
        "test_create_agent_supervisor_success",
        "test_create_agent_supervisor_fails_in_production_without_websocket",
        "test_build_supervisor_agent_creates_proper_instance",
        "test_setup_agent_state_configures_services",
        "test_log_startup_complete_logs_timing",
        "test_startup_timing_performance_under_threshold",
        "test_database_url_detection_across_environments",
        "test_startup_module_supports_chat_functionality_requirements",
        "test_startup_module_prevents_silent_failures",
        "test_startup_module_enforces_environment_isolation",
        "test_startup_module_memory_usage_under_threshold",
        "test_startup_module_all_functions_documented"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_startup_module_smd_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_startup_module_smd_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 22,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for Startup Module - CRITICAL Business Infrastructure SMD\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - CRITICAL System Infrastructure (90% of platform value)\n- Business Goal: Prevent startup failures that destroy $2M+ ARR by breaking chat functionality  \n- Value Impact: Ensures reliable system initialization across all environments (dev/staging/prod)\n- Strategic Impact: Chat delivers 90% of business value - startup failures = complete revenue loss\n- Risk Mitigation: Comprehensive testing prevents production outages, data corruption, and security breaches\n- Operational Excellence: Proper validation enables 99.9% uptime SLA and rapid incident response\n\nMISSION CRITICAL REQUIREMENTS:\nThis comprehensive test suite validates ALL critical startup paths required for chat functionality.\nEvery test failure indicates potential catastrophic business impact from broken system startup.\n\nKey Business Risks Addressed:\n1. Database connection failures breaking user data access ($500K+ ARR risk)\n2. WebSocket initialization failures breaking real-time chat ($1M+ ARR risk)  \n3. Agent supervisor failures breaking AI responses ($1.5M+ ARR risk)\n4. Service dependency failures causing cascade breakdowns ($2M+ ARR risk)\n5. Performance degradation reducing user satisfaction and conversion\n\nCRITICAL TESTING PRINCIPLES:\n- ALL tests MUST fail hard when system breaks - NO try/except masking\n- Use SSOT patterns from test_framework/ssot/ exclusively\n- Follow absolute import patterns per CLAUDE.md requirements  \n- Tests must validate business-critical chat functionality paths\n- Real services preferred over mocks where feasible\n- Performance thresholds based on business SLA requirements\n",
      "test_methods": [
        "test_critical_chat_components_initialization_order",
        "test_initialize_logging_performance_meets_business_sla",
        "test_setup_paths_enables_critical_imports_for_chat_functionality",
        "test_database_url_detection_supports_all_business_environments",
        "test_postgres_service_mock_mode_detection_for_environment_safety",
        "test_database_migration_execution_prevents_schema_drift",
        "test_websocket_handler_registration_enables_realtime_chat_events",
        "test_websocket_tool_dispatcher_deprecation_warnings_for_security",
        "test_agent_supervisor_creation_enables_ai_chat_responses",
        "test_supervisor_agent_built_with_business_critical_dependencies",
        "test_agent_state_setup_configures_business_services",
        "test_model_import_performance_meets_business_requirements",
        "test_initialize_core_services_configures_business_critical_components",
        "test_setup_security_services_enables_multi_tenant_protection",
        "test_setup_multiprocessing_environment_for_scalability",
        "test_validate_database_environment_enforces_business_security",
        "test_log_startup_complete_provides_business_metrics",
        "test_run_database_migrations_comprehensive_coverage",
        "test_perform_database_validation_environment_specific",
        "test_migration_error_handling_business_continuity_comprehensive",
        "test_database_migration_error_handling_preserves_business_continuity",
        "test_startup_function_documentation_supports_business_operations"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_unified_authentication_service_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_unified_authentication_service_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedAuthenticationService - SINGLE SOURCE OF TRUTH\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - Security Infrastructure  \n- Business Goal: System Stability & Security Compliance\n- Value Impact: Ensures authentication works correctly to restore $120K+ MRR \n- Strategic Impact: Critical security infrastructure that enables all user operations\n\nThis test suite validates the SSOT authentication service that consolidates\n4 duplicate authentication paths into a single, reliable implementation.\n\nCRITICAL: This service is MISSION CRITICAL for platform revenue.\nAuthentication failures directly translate to lost customer access.\n\nTests follow CLAUDE.md principles:\n- Use real services over mocks where possible\n- Test business value and failure scenarios  \n- Use IsolatedEnvironment for all env access\n- Test enhanced resilience features added for circuit breaker integration\n- Validate all authentication contexts and methods\n- Test WebSocket authentication paths that are critical for chat value\n",
      "test_methods": [
        "test_get_authentication_stats",
        "test_singleton_instance",
        "test_error_classification",
        "test_websocket_token_extraction_methods",
        "test_business_value_integration",
        "test_final_metrics_summary"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_unified_websocket_authenticator_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_unified_websocket_authenticator_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 9,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedWebSocketAuthenticator - SSOT WebSocket Auth Business Logic\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - WebSocket Security Infrastructure  \n- Business Goal: Restore WebSocket functionality and eliminate authentication failures\n- Value Impact: Ensures WebSocket auth works correctly to restore $120K+ MRR chat functionality\n- Strategic Impact: Critical WebSocket security that enables real-time AI chat interactions\n\nThis test suite validates the SSOT WebSocket authenticator business logic that replaced\n4 duplicate WebSocket authentication implementations and fixes 1011 WebSocket errors.\n\nCRITICAL: This authenticator is MISSION CRITICAL for chat revenue.\nWebSocket auth failures directly block users from AI chat interactions.\n\nTests follow CLAUDE.md principles:\n- Focus on business logic validation (NOT infrastructure)  \n- Use IsolatedEnvironment for all env access\n- Test security-critical scenarios: JWT validation, user isolation, session expiry\n- Test E2E context detection and bypass logic\n- Validate WebSocket state handling and error responses\n- Test authentication statistics and monitoring\n",
      "test_methods": [
        "test_websocket_auth_result_to_dict_conversion",
        "test_websocket_auth_result_to_dict_failure",
        "test_get_websocket_auth_stats_business_metrics",
        "test_websocket_close_code_mapping_security",
        "test_extract_e2e_context_from_headers",
        "test_extract_e2e_context_from_environment_staging",
        "test_extract_e2e_context_no_detection",
        "test_safe_websocket_state_logging",
        "test_get_websocket_authenticator_singleton_pattern"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_user_auth_service_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_user_auth_service_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 4,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest UserAuthService Comprehensive - Real Service Testing with SSOT Patterns\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform)\n- Business Goal: Platform Stability - Ensure authentication backbone reliability\n- Value Impact: Authentication is the gateway to all platform features - failures block all business value\n- Strategic Impact: Core security and access control that enables $ARR growth and customer trust\n\nThis test suite validates the UserAuthService backward compatibility shim using real service behavior.\nIt exposes the critical authenticate() method bug and ensures proper delegation to AuthServiceClient.\n\nCRITICAL BUSINESS REQUIREMENTS:\n- Authentication failures = immediate revenue loss (users cannot access paid features)\n- Backward compatibility maintains existing integrations (prevents breaking changes)\n- Token validation enables multi-user isolation (core platform requirement)\n- Real error handling prevents silent auth failures that compromise security\n\nTEST APPROACH:\n- Uses minimal mocking - only for external dependencies\n- Tests real AuthServiceClient integration behavior\n- Follows SSOT patterns from test_framework/\n- Exposes and documents the authenticate() method name mismatch bug\n- Validates business-critical token validation pathways\n",
      "test_methods": [
        "test_module_imports_correctly_for_production_use",
        "test_module_configuration_for_business_operations",
        "test_auth_client_instance_configuration",
        "test_service_backwards_compatibility_interface"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/test_websocket_auth_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/test_websocket_auth_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 29,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocket Authentication Module\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Platform Stability and Security - Enable secure multi-user WebSocket connections\n- Value Impact: Protects $100K+ ARR by ensuring authenticated users can access real-time chat without security breaches\n- Strategic Impact: MISSION CRITICAL - WebSocket auth failures = immediate revenue loss as users cannot access core AI chat value\n\nCRITICAL: WebSocket authentication is the gateway to our core business value delivery.\nWithout secure, reliable WebSocket connections, users cannot:\n1. Receive real-time agent responses (lost engagement)\n2. Access multi-user isolated sessions (data leaks)\n3. Trust the platform security (churn risk)\n\nThese tests validate that our authentication system delivers business value by:\n- Preventing unauthorized access to premium AI features\n- Ensuring multi-user isolation works correctly\n- Validating that paying customers can always access their AI agents\n- Protecting against security breaches that would damage our reputation\n\nTest Coverage Target: 100% of critical authentication flows in unified_websocket_auth.py\n\nSOOT COMPLIANCE UPDATE:\nThis test file has been updated to test the new UnifiedWebSocketAuthenticator instead of\nthe eliminated WebSocketAuthenticator. Many tests have been skipped because:\n\n1. ConnectionSecurityManager - eliminated in SSOT consolidation\n2. RateLimiter - moved to dedicated module  \n3. Token extraction methods - moved to UnifiedAuthenticationService\n4. authenticate_websocket() method - replaced with authenticate_websocket_connection()\n5. secure_websocket_context() - eliminated, replaced with direct authentication\n\nThe remaining active tests focus on the core WebSocket authentication functionality\nthat is now provided by UnifiedWebSocketAuthenticator in SSOT-compliant manner.\n",
      "test_methods": [
        "test_auth_info_creation",
        "test_auth_info_default_authenticated",
        "test_authenticator_initialization",
        "test_extract_token_from_websocket_authorization_header",
        "test_extract_token_from_websocket_subprotocol",
        "test_extract_token_from_websocket_query_params",
        "test_extract_token_from_websocket_no_token",
        "test_extract_token_invalid_base64_subprotocol",
        "test_get_websocket_auth_stats",
        "test_get_websocket_auth_stats_no_attempts",
        "test_security_manager_initialization",
        "test_mark_secure_and_is_secure",
        "test_register_connection",
        "test_unregister_connection",
        "test_validate_connection_security_success",
        "test_validate_connection_security_not_registered",
        "test_validate_connection_security_not_secure",
        "test_validate_connection_security_too_many_violations",
        "test_report_security_violation",
        "test_get_security_summary",
        "test_rate_limiter_initialization",
        "test_rate_limiter_custom_initialization",
        "test_get_websocket_authenticator_singleton",
        "test_get_connection_security_manager_singleton",
        "test_extract_token_malformed_authorization_header",
        "test_extract_token_multiple_subprotocols",
        "test_security_manager_unregister_nonexistent_connection",
        "test_security_manager_report_violation_no_details",
        "test_websocket_auth_stats_zero_attempts_edge_case"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket/test_websocket_integration_comprehensive_focused.py",
      "relative_path": "netra_backend/tests/unit/websocket/test_websocket_integration_comprehensive_focused.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Comprehensive WebSocket Integration Unit Tests - Business Value Focused\n\nBusiness Value Justification (BVJ):\n- Segment: ALL user tiers (Free, Early, Mid, Enterprise) - affects every user interaction\n- Business Goal: Chat Value Delivery & User Isolation & Real-Time Communication\n- Value Impact: WebSocket events enable 90% of platform business value through chat functionality  \n- Strategic Impact: Core infrastructure for agent-user communication - failure means revenue loss\n\nCRITICAL REQUIREMENTS FROM CLAUDE.md Section 6.1 & 6.2:\n1. WebSocket events enable substantive chat interactions - they serve the business goal of delivering AI value\n2. ALL 5 critical events MUST be sent: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n3. WebSocket integration is MISSION CRITICAL for chat UX delivering 90% of business value\n4. User isolation during WebSocket event delivery is MANDATORY for multi-user system\n5. NO MOCKS for business logic - use real WebSocket components where possible\n6. CHEATING ON TESTS = ABOMINATION - tests must fail hard on errors\n\nTARGET: 50+ comprehensive tests covering:\n- WebSocket event generation for all 5 critical events  \n- User isolation during WebSocket event delivery\n- Event ordering and timing validation\n- Error handling and resilience patterns\n- Performance under concurrent WebSocket operations\n- Integration with agent execution engines\n\nCOMPONENTS UNDER TEST:\n- UserWebSocketEmitter (per-user isolated event emission)\n- WebSocketEventRouter (event routing infrastructure)\n- WebSocket connection management and user isolation\n- Event delivery patterns and reliability\n",
      "test_methods": [
        "test_websocket_integration_comprehensive_smoke_test"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_connection_state_machine_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_connection_state_machine_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 17,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocket ConnectionStateMachine\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: Stability & Risk Reduction for $500K+ ARR WebSocket Infrastructure\n- Value Impact: Protect critical WebSocket race condition fixes that enable chat-based AI value delivery\n- Strategic Impact: Prevent regression of \"every 3 minutes staging failure\" that blocks user interactions\n\nCRITICAL TESTING REQUIREMENTS:\n1. Tests MUST FAIL on old broken implementation (without proper state separation)\n2. Tests MUST PASS on new implementation with ApplicationConnectionState management\n3. Cover ALL race condition scenarios that caused production failures\n4. Validate thread safety and concurrent access patterns\n5. Ensure integration with existing is_websocket_connected_and_ready() function\n\nROOT CAUSE ADDRESSED: \nThe system previously conflated \"WebSocket accepted\" (transport ready) with \"ready to process messages\" \n(fully operational). This state machine enforces proper separation and prevents race conditions.\n",
      "test_methods": [
        "test_state_classification_methods",
        "test_state_enum_completeness",
        "test_initialization_sets_correct_defaults",
        "test_valid_state_transitions_follow_defined_path",
        "test_invalid_state_transitions_are_rejected",
        "test_force_failed_state_emergency_mechanism",
        "test_state_transition_history_tracking",
        "test_callback_notification_system",
        "test_high_load_state_corruption_scenario",
        "test_transition_failure_rollback_races",
        "test_integration_with_is_websocket_connected_and_ready_function",
        "test_registry_pattern_validation",
        "test_connection_state_machine_lifecycle",
        "test_error_handling_and_recovery_patterns",
        "test_message_processing_readiness_validation",
        "test_setup_duration_tracking_for_performance_slas",
        "test_graceful_degradation_scenarios"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_isolated_websocket_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_isolated_websocket_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 24,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive unit tests for IsolatedWebSocketManager.\n\nThis test suite provides 100% method coverage of the IsolatedWebSocketManager class\nwith focus on security, user isolation, and strongly typed ID integration.\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free \u2192 Enterprise)\n- Business Goal: Ensure WebSocket communication security and prevent user data leakage\n- Value Impact: Validates complete user isolation in multi-user AI chat sessions\n- Strategic Impact: Prevents security breaches that could destroy business trust\n\nTest Coverage Areas:\n1. Initialization & Context Validation - Proper setup with UserExecutionContext\n2. Connection Management - Add/remove connections with user validation\n3. Message Routing - Isolated message delivery per user\n4. Security Validation - Connection ownership and access control\n5. Strongly Typed IDs - Integration with shared.types.core_types\n6. Resource Management - Cleanup and memory leak prevention\n7. Error Handling - Invalid connections, malformed messages, timeouts\n8. Metrics & Health - Manager statistics and health monitoring\n",
      "test_methods": [
        "test_init_valid_context",
        "test_init_invalid_context_type",
        "test_init_none_context",
        "test_get_connection_success",
        "test_get_connection_nonexistent",
        "test_get_connection_inactive_manager",
        "test_get_user_connections",
        "test_get_user_connections_empty",
        "test_is_connection_active_valid_user",
        "test_is_connection_active_different_user_security",
        "test_is_connection_active_no_connections",
        "test_is_connection_active_invalid_websocket",
        "test_update_connection_thread_success",
        "test_update_connection_thread_nonexistent_connection",
        "test_update_connection_thread_no_thread_attribute",
        "test_get_connection_id_by_websocket_found",
        "test_get_connection_id_by_websocket_not_found",
        "test_get_connection_health_valid_user",
        "test_get_connection_health_different_user_isolation",
        "test_get_manager_stats",
        "test_strongly_typed_id_integration",
        "test_connection_id_type_safety",
        "test_validate_active_inactive_manager",
        "test_update_activity_metrics"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_message_queue_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_message_queue_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 6,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocket MessageQueue\n\nBusiness Value Justification:\n- Segment: Platform/Internal  \n- Business Goal: Stability & Risk Reduction for $500K+ ARR Chat Infrastructure\n- Value Impact: Protect critical message ordering and loss prevention for chat-based AI value delivery\n- Strategic Impact: Prevent message loss during connection setup that blocks substantive user interactions\n\nCRITICAL TESTING REQUIREMENTS:\n1. Tests MUST validate FIFO ordering is preserved under ALL conditions\n2. Tests MUST ensure critical messages are NEVER lost even during overflow conditions  \n3. Tests MUST validate state-aware queuing works during connection phases\n4. Tests MUST validate flush operations complete successfully in priority order\n5. Tests MUST validate queue metrics accurately reflect actual performance\n\nTARGET: MessageQueue prevents message loss during connection setup and ensures proper ordering.\nThis is critical infrastructure enabling substantive chat interactions for $500K+ ARR.\n",
      "test_methods": [
        "test_queued_message_creation_with_defaults",
        "test_queued_message_mark_attempt",
        "test_queued_message_calculate_queue_duration",
        "test_queued_message_expiration",
        "test_queued_message_retry_logic",
        "test_registry_singleton_pattern"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_message_router_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_message_router_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 13,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMessageRouter - Comprehensive Unit Test Suite\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: System Stability & Chat Value Delivery\n- Value Impact: Ensures 100% reliable WebSocket message routing for $75K+ MRR chat functionality\n- Strategic Impact: Validates message routing infrastructure that enables all WebSocket agent events\n\nThis comprehensive test suite validates the critical MessageRouter class that routes all WebSocket \nmessages to appropriate handlers. Complete test coverage ensures reliable message delivery for \nagent events (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed).\n\nTest Categories:\n1. Router Initialization & Handler Setup (10+ tests)\n2. Core Message Routing Logic (15+ tests)\n3. Handler Management & Dynamic Registration (10+ tests)\n4. Statistics & Monitoring (8+ tests)\n5. Error Handling & Recovery (7+ tests)\n6. Performance & Concurrency (10+ tests)\n",
      "test_methods": [
        "test_router_initializes_with_default_handlers",
        "test_router_has_fallback_handler",
        "test_router_initializes_routing_stats",
        "test_router_sets_startup_grace_period",
        "test_add_handler_increases_handler_count",
        "test_remove_handler_decreases_handler_count",
        "test_remove_nonexistent_handler_handles_gracefully",
        "test_add_multiple_handlers_maintains_order",
        "test_handler_registration_enables_routing",
        "test_statistics_initialization_state",
        "test_startup_grace_period_prevents_early_warnings",
        "test_startup_time_recorded_correctly",
        "test_grace_period_configuration"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_unified_websocket_manager_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_unified_websocket_manager_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for UnifiedWebSocketManager\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure Real-Time Chat Reliability ($500K+ ARR)\n- Value Impact: WebSocket events enable 90% of platform business value\n- Strategic Impact: MISSION CRITICAL - Platform foundation for chat-based AI interactions\n\nThis test suite provides comprehensive coverage of the UnifiedWebSocketManager class,\nwhich is the Single Source of Truth (SSOT) for WebSocket connection management.\n\nCRITICAL COVERAGE AREAS:\n1. Connection lifecycle management (connect, disconnect, cleanup)\n2. User isolation and multi-user safety (prevents data leakage)\n3. Authentication integration and 403 error handling\n4. Message broadcasting and event delivery\n5. Connection pool management and thread safety\n6. Error recovery and message queuing\n7. Concurrent connection handling and race conditions\n8. Background task monitoring and health checks\n9. Performance metrics and diagnostics\n10. Edge cases that could cause chat failures\n\nThis is P0 Chat Critical testing - ensures the foundation of real-time user interactions.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_websocket_auth_serialization_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_websocket_auth_serialization_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Authentication Serialization Tests\n\nThis test suite validates that all WebSocket authentication response paths\nuse safe JSON serialization and handle WebSocketState enums correctly.\n\nCRITICAL: Tests the fix for \"Object of type WebSocketState is not JSON serializable\"\n",
      "test_methods": [
        "test_get_websocket_authenticator_singleton_safe_serialization"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_websocket_handlers_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_websocket_handlers_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Handlers Unit Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - ALL customer segments depend on this\n- Business Goal: Protect $500K+ ARR chat functionality  \n- Value Impact: Tests protect core message processing that enables ALL chat interactions\n- Strategic Impact: CRITICAL - Any bugs here directly impact revenue and user experience\n\nGOLDEN PATH FOCUS:\nThis test suite validates the CRITICAL message handling functions that enable \nour core business value delivery through chat interactions. Every message \ntype and handler function is tested to prevent revenue-impacting failures.\n\nFollowing CLAUDE.md principle: Tests MUST raise errors, no try/except blocks.\nFollowing TEST_CREATION_GUIDE.md: Real services > mocks, business value focus.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_websocket_manager_factory_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_websocket_manager_factory_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 12,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for WebSocketManagerFactory - CRITICAL SECURITY MISSION\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise) \n- Business Goal: Prevent user message cross-contamination in multi-user AI chat\n- Value Impact: CRITICAL SECURITY - Ensures user isolation in WebSocket communications\n- Strategic Impact: Foundation security for real-time AI interactions\n\nMISSION CRITICAL: These tests prevent the most serious security vulnerability:\nuser message cross-contamination between different users in AI chat sessions.\n\nTarget Classes:\n- WebSocketManagerFactory (Line 1153): Factory pattern for isolated instances\n- IsolatedWebSocketManager (Line 581): Per-connection manager with private state  \n- ConnectionLifecycleManager (Line 391): Connection lifecycle and cleanup\n\nTest Categories:\n1. Factory Pattern Tests: Creation, retrieval, cleanup of isolated managers\n2. User Isolation Tests: No cross-contamination between users\n3. Connection Lifecycle Tests: Proper registration, cleanup, health monitoring\n4. Security Tests: Message routing isolation, memory leak prevention\n5. Concurrency Tests: Multiple users simultaneously \n6. WebSocket Event Tests: Proper event routing per user\n\nCRITICAL COVERAGE REQUIREMENTS:\n- 100% line coverage of all three classes\n- Tests detect user message cross-contamination vulnerabilities\n- Tests validate proper resource cleanup \n- All concurrency and isolation scenarios covered\n",
      "test_methods": [
        "test_factory_initialization_default_config",
        "test_factory_initialization_custom_config",
        "test_global_factory_instance_singleton_pattern",
        "test_factory_metrics_initialization",
        "test_resource_limit_checking",
        "test_factory_initialization_error_handling",
        "test_defensive_user_execution_context_creation",
        "test_ssot_user_context_validation",
        "test_staging_safe_context_validation",
        "test_factory_metrics_tracking",
        "test_factory_security_metrics_tracking",
        "test_suite_coverage_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_websocket_manager_factory_security_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_websocket_manager_factory_security_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 13,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Security Unit Tests for WebSocketManagerFactory - CRITICAL SECURITY MISSION\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise) \n- Business Goal: Prevent user message cross-contamination in multi-user AI chat\n- Value Impact: CRITICAL SECURITY - Ensures user isolation in WebSocket communications\n- Strategic Impact: Foundation security for real-time AI interactions\n\nMISSION CRITICAL: These tests prevent the most serious security vulnerability:\nuser message cross-contamination between different users in AI chat sessions.\n\nTarget Classes:\n- WebSocketManagerFactory (Line 1153): Factory pattern for isolated instances\n- IsolatedWebSocketManager (Line 581): Per-connection manager with private state  \n- ConnectionLifecycleManager (Line 391): Connection lifecycle and cleanup\n\nTest Categories:\n1. Factory Pattern Tests: Creation, retrieval, cleanup of isolated managers\n2. User Isolation Tests: No cross-contamination between users\n3. Connection Lifecycle Tests: Proper registration, cleanup, health monitoring\n4. Security Tests: Message routing isolation, memory leak prevention\n5. Concurrency Tests: Multiple users simultaneously \n6. WebSocket Event Tests: Proper event routing per user\n\nCRITICAL COVERAGE REQUIREMENTS:\n- 100% line coverage of all three classes\n- Tests detect user message cross-contamination vulnerabilities\n- Tests validate proper resource cleanup \n- All concurrency and isolation scenarios covered\n",
      "test_methods": [
        "test_factory_initialization_sets_correct_defaults",
        "test_factory_initialization_respects_custom_parameters",
        "test_get_websocket_manager_factory_returns_singleton",
        "test_manager_initialization_creates_isolated_state",
        "test_manager_initialization_validates_user_context",
        "test_manager_implements_websocket_protocol",
        "test_get_connection_health_enforces_user_isolation",
        "test_lifecycle_manager_initialization",
        "test_register_connection_validates_user_ownership",
        "test_register_connection_accepts_correct_user",
        "test_create_defensive_user_execution_context_creates_valid_context",
        "test_create_defensive_user_execution_context_validates_user_id",
        "test_validate_ssot_user_context_validates_type"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests/unit/websocket_core/test_websocket_serialization_comprehensive.py",
      "relative_path": "netra_backend/tests/unit/websocket_core/test_websocket_serialization_comprehensive.py",
      "category": "unit",
      "service": "backend",
      "test_count": 15,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Serialization Tests\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: System Stability & Risk Reduction  \n- Value Impact: Prevents 1011 WebSocket errors that break $120K+ MRR chat functionality\n- Strategic Impact: Ensures serialization safety for all WebSocket communications\n\nTests the comprehensive _serialize_message_safely function to handle:\n- WebSocketState enums (CRITICAL for 1011 error prevention)\n- Generic enums\n- Pydantic models\n- Datetime objects\n- Complex nested structures\n",
      "test_methods": [
        "test_starlette_websocket_state_serialization",
        "test_fastapi_websocket_state_serialization",
        "test_websocket_state_in_dictionary",
        "test_websocket_state_in_nested_structure",
        "test_already_serializable_dict",
        "test_regular_enum_serialization",
        "test_datetime_serialization",
        "test_list_serialization",
        "test_set_serialization",
        "test_unknown_object_fallback",
        "test_connection_diagnostics_json_serializable",
        "test_diagnostics_with_no_websocket",
        "test_large_nested_structure",
        "test_circular_reference_prevention",
        "test_websocket_error_message_serialization"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/integration/test_isolated_environment_comprehensive_integration.py",
      "relative_path": "shared/tests/integration/test_isolated_environment_comprehensive_integration.py",
      "category": "integration",
      "service": "shared",
      "test_count": 16,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for IsolatedEnvironment Class\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Service Independence\n- Business Goal: Ensure the MOST CRITICAL SSOT module works perfectly across all service boundaries\n- Value Impact: IsolatedEnvironment is used by EVERY service - failure cascades to entire platform\n- Strategic Impact: Platform stability, service independence, and multi-user isolation depend on this module\n\nTesting Strategy:\n- Real environment configurations and files (NO MOCKS)\n- Environment isolation between different contexts\n- Configuration loading from multiple sources with precedence rules\n- Multi-user environment separation\n- Cross-service environment consistency\n- Configuration migration scenarios\n- Environment-specific behavior (dev, test, staging, prod)\n- Thread safety under concurrent access\n- Error handling and edge cases\n- Deterministic and independent test execution\n\nCRITICAL: This test suite validates the foundation of ALL services and MUST always pass.\nAny failure in this module can cascade to break the entire platform.\n",
      "test_methods": [
        "test_environment_isolation_between_contexts",
        "test_configuration_loading_precedence_rules",
        "test_multi_user_environment_separation",
        "test_cross_service_environment_consistency",
        "test_configuration_migration_scenarios",
        "test_environment_specific_behavior",
        "test_thread_safety_under_concurrent_access",
        "test_configuration_validation_and_error_handling",
        "test_sensitive_value_masking",
        "test_legacy_compatibility_interfaces",
        "test_deterministic_and_independent_execution",
        "test_unicode_and_encoding_handling",
        "test_memory_usage_and_performance",
        "test_concurrent_singleton_access",
        "test_environment_state_transitions",
        "test_shell_command_expansion"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_config_builder_base_comprehensive_unit.py",
      "relative_path": "shared/tests/unit/test_config_builder_base_comprehensive_unit.py",
      "category": "unit",
      "service": "shared",
      "test_count": 103,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive unit tests for ConfigBuilderBase SSOT class.\nTests the single source of truth for configuration builder patterns.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all services and user segments)\n- Business Goal: Development Velocity, System Reliability, Technical Debt Reduction\n- Value Impact: Prevents $50K/year in maintenance costs from inconsistent config logic\n- Strategic Impact: Foundation for all configuration builders ensuring SSOT compliance\n\nCRITICAL BUSINESS PROBLEM SOLVED:\nThis test suite validates that ConfigBuilderBase eliminates 200+ lines of duplicate\nenvironment detection logic across multiple configuration builders, preventing\ninconsistent behavior and maintenance burden.\n\nSSOT PRINCIPLE ENFORCEMENT:\nEvery test validates that environment detection, validation patterns, and configuration\nutilities exist in EXACTLY ONE PLACE and work consistently across all scenarios.\n\nTesting Coverage Goals:\n\u2713 Environment detection across 8+ environment variables\n\u2713 Priority order handling for multiple environment variables\n\u2713 Cloud Run K_SERVICE detection logic\n\u2713 Pattern matching with case insensitivity \n\u2713 Environment variable utilities (bool, int, list parsing)\n\u2713 Validation framework for required fields and constraints\n\u2713 Logging and security (credential masking)\n\u2713 IsolatedEnvironment integration\n\u2713 Thread safety and performance under load\n\u2713 Abstract method enforcement\n\u2713 Debug information generation\n",
      "test_methods": [
        "test_basic_initialization",
        "test_initialization_with_env_vars",
        "test_initialization_with_none_values",
        "test_abstract_methods_enforcement",
        "test_logger_initialization",
        "test_environment_detection_priority_order",
        "test_production_patterns",
        "test_staging_patterns",
        "test_development_patterns",
        "test_cloud_run_k_service_detection",
        "test_case_insensitive_matching",
        "test_whitespace_handling",
        "test_multiple_environment_variables_priority",
        "test_default_to_development",
        "test_invalid_environment_values_default_to_development",
        "test_is_development",
        "test_is_staging",
        "test_is_production",
        "test_get_env_var_basic",
        "test_get_env_var_with_default",
        "test_get_env_bool_true_values",
        "test_get_env_bool_false_values",
        "test_get_env_bool_default_values",
        "test_get_env_bool_whitespace_handling",
        "test_get_env_int_valid_integers",
        "test_get_env_int_invalid_values",
        "test_get_env_int_nonexistent_variable",
        "test_get_env_int_whitespace_handling",
        "test_get_env_list_basic_functionality",
        "test_get_env_list_custom_separator",
        "test_get_env_list_whitespace_handling",
        "test_get_env_list_empty_items_filtered",
        "test_get_env_list_empty_string",
        "test_get_env_list_nonexistent_variable",
        "test_get_env_list_single_item",
        "test_validate_required_variable_present",
        "test_validate_required_variable_missing",
        "test_validate_optional_variable_missing",
        "test_validate_min_length_satisfied",
        "test_validate_min_length_violated",
        "test_validate_combined_requirements",
        "test_get_common_debug_info_structure",
        "test_get_common_debug_info_environment_detection",
        "test_get_safe_log_summary",
        "test_log_common_info_basic",
        "test_log_common_info_with_additional",
        "test_abstract_validate_method_called",
        "test_abstract_get_debug_info_called",
        "test_failing_validation_implementation",
        "test_get_environment_specific_defaults_default",
        "test_validate_for_environment_default",
        "test_config_environment_values",
        "test_config_environment_string_representation",
        "test_config_environment_comparison",
        "test_config_environment_iteration",
        "test_validate_required_fields_all_present",
        "test_validate_required_fields_missing_fields",
        "test_validate_required_fields_empty_requirements",
        "test_validate_field_types_correct_types",
        "test_validate_field_types_incorrect_types",
        "test_validate_field_types_missing_fields_ignored",
        "test_validate_field_types_empty_config",
        "test_mask_sensitive_value_basic",
        "test_mask_sensitive_value_with_visible_chars",
        "test_mask_sensitive_value_empty_string",
        "test_mask_sensitive_value_none",
        "test_mask_sensitive_value_short_value",
        "test_mask_sensitive_value_custom_mask_char",
        "test_mask_sensitive_value_various_lengths",
        "test_mask_url_credentials_with_password",
        "test_mask_url_credentials_no_password",
        "test_mask_url_credentials_empty_string",
        "test_mask_url_credentials_none",
        "test_mask_url_credentials_invalid_url",
        "test_mask_url_credentials_complex_cases",
        "test_create_safe_config_summary_basic",
        "test_create_safe_config_summary_case_insensitive",
        "test_create_safe_config_summary_non_string_values",
        "test_create_safe_config_summary_empty_config",
        "test_create_safe_config_summary_no_sensitive_keys",
        "test_isolated_environment_integration",
        "test_isolated_environment_overlay",
        "test_isolated_environment_none_removal",
        "test_environment_detection_performance",
        "test_concurrent_access_thread_safety",
        "test_memory_usage_large_environments",
        "test_unicode_environment_values",
        "test_very_long_environment_values",
        "test_special_characters_in_values",
        "test_numeric_string_environment_keys",
        "test_boolean_conversion_edge_cases",
        "test_integer_conversion_edge_cases",
        "test_list_parsing_edge_cases",
        "test_ssot_principle_enforcement",
        "test_eliminates_duplicate_environment_detection_logic",
        "test_consistent_utility_methods_across_implementations",
        "test_debug_information_consistency",
        "test_logging_safety_across_implementations",
        "test_validation_framework_consistency",
        "test_configuration_maintenance_cost_reduction",
        "test_absolute_imports_compliance",
        "test_ssot_compliance_validation",
        "test_business_value_metrics_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_database_url_builder_comprehensive_unit.py",
      "relative_path": "shared/tests/unit/test_database_url_builder_comprehensive_unit.py",
      "category": "unit",
      "service": "shared",
      "test_count": 77,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nULTRA COMPREHENSIVE Unit Tests for DatabaseUrlBuilder - SECOND MOST CRITICAL SSOT CLASS\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - CORE DATABASE INFRASTRUCTURE\n- Business Goal: ZERO-FAILURE database connectivity across ALL services \n- Value Impact: 100% system reliability - ALL services depend on this SINGLE SOURCE OF TRUTH\n- Strategic Impact: Platform exists or fails based on database connectivity working correctly\n\nCRITICAL MISSION: This is the SECOND MOST IMPORTANT module in the entire platform.\nEvery service, every database connection, every data operation depends on DatabaseUrlBuilder.\nANY bug in this class cascades to COMPLETE SYSTEM OUTAGES affecting ALL customers.\n\nTesting Coverage Goals:\n\u2713 100% line coverage - Every single line must be tested\n\u2713 100% branch coverage - Every conditional path must be validated  \n\u2713 100% business logic coverage - Every database connectivity scenario must pass\n\u2713 Performance critical paths - Validated with benchmarks\n\u2713 Thread safety under heavy load - Concurrent access validation\n\u2713 Error handling - All failure modes tested\n\u2713 Windows compatibility - UTF-8 encoding and path support\n\u2713 Multi-environment system support - Service independence verified\n\u2713 Security validation - Credential protection and URL sanitization\n\nULTRA CRITICAL IMPORTANCE: \n- URL construction MUST work for ALL database types and configurations\n- Cloud SQL Unix socket connections MUST be handled correctly\n- TCP connections with and without SSL MUST work flawlessly\n- Docker hostname resolution MUST prevent connection failures\n- Environment variable parsing MUST be bulletproof\n- Credential encoding MUST preserve special characters\n- URL normalization MUST prevent service incompatibilities\n- Driver-specific formatting MUST work for all supported drivers\n- Validation MUST catch configuration errors before they cause outages\n- Security MUST protect credentials in logs and error messages\n",
      "test_methods": [
        "test_basic_instantiation_with_env_vars",
        "test_instantiation_with_minimal_env",
        "test_instantiation_with_empty_env",
        "test_environment_normalization",
        "test_docker_detection_via_environment_variables",
        "test_docker_detection_via_dockerenv_file",
        "test_docker_detection_via_cgroup",
        "test_docker_detection_cgroup_error_handling",
        "test_docker_hostname_resolution_logic",
        "test_cloud_sql_detection",
        "test_cloud_sql_async_url_construction",
        "test_cloud_sql_sync_url_construction",
        "test_cloud_sql_psycopg_url_construction",
        "test_cloud_sql_url_none_when_not_cloud_sql",
        "test_tcp_config_detection",
        "test_tcp_async_url_construction",
        "test_tcp_url_with_docker_hostname_resolution",
        "test_tcp_sync_url_construction",
        "test_tcp_url_with_ssl_parameters",
        "test_tcp_url_default_values",
        "test_tcp_psycopg_url_construction",
        "test_development_default_urls",
        "test_development_auto_url_with_tcp_config",
        "test_development_auto_url_fallback_to_defaults",
        "test_test_memory_url",
        "test_test_postgres_url_with_config",
        "test_test_postgres_url_with_docker_resolution",
        "test_test_auto_url_priority_logic",
        "test_test_postgres_url_with_defaults",
        "test_docker_compose_url_construction",
        "test_docker_compose_url_with_defaults",
        "test_docker_compose_url_credential_encoding",
        "test_staging_auto_url_cloud_sql_priority",
        "test_staging_auto_url_tcp_with_ssl_fallback",
        "test_staging_auto_url_returns_none_without_config",
        "test_production_auto_url_cloud_sql_priority",
        "test_production_auto_url_tcp_with_ssl_fallback",
        "test_production_auto_url_returns_none_without_config",
        "test_get_url_for_environment_staging",
        "test_get_url_for_environment_production",
        "test_get_url_for_environment_test",
        "test_get_url_for_environment_development_default",
        "test_validation_staging_production_requires_config",
        "test_validation_development_test_allow_missing_config",
        "test_validation_cloud_sql_format_checking",
        "test_validation_credential_patterns",
        "test_validation_successful_cases",
        "test_debug_info_structure",
        "test_get_safe_log_message_masks_credentials",
        "test_mask_url_for_logging_comprehensive",
        "test_normalize_postgres_url_basic_normalization",
        "test_normalize_postgres_url_cloud_sql_ssl_removal",
        "test_format_url_for_driver_asyncpg",
        "test_format_url_for_driver_psycopg2",
        "test_format_url_for_driver_psycopg",
        "test_format_url_for_driver_base",
        "test_format_for_asyncpg_driver_direct_usage",
        "test_validate_url_for_driver_comprehensive",
        "test_url_construction_performance",
        "test_concurrent_url_construction",
        "test_memory_usage_with_large_environments",
        "test_invalid_environment_variable_types",
        "test_malformed_cloud_sql_paths",
        "test_url_construction_with_special_characters",
        "test_environment_variable_edge_cases",
        "test_validation_edge_cases",
        "test_unicode_handling_in_urls",
        "test_windows_path_separators",
        "test_case_sensitivity_handling",
        "test_normalize_url_instance_method",
        "test_get_driver_requirements_comprehensive",
        "test_future_hook_methods_not_implemented",
        "test_all_builder_property_access",
        "test_complete_database_connectivity_workflow",
        "test_all_url_types_generated_correctly",
        "test_business_critical_scenarios_coverage",
        "test_platform_reliability_requirements"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_isolated_environment_comprehensive.py",
      "relative_path": "shared/tests/unit/test_isolated_environment_comprehensive.py",
      "category": "unit",
      "service": "shared",
      "test_count": 65,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest IsolatedEnvironment Comprehensive Coverage\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Service Independence\n- Business Goal: Ensure the MOST CRITICAL SSOT module works perfectly\n- Value Impact: IsolatedEnvironment is used by EVERY service and ALL tests - failure cascades to entire platform\n- Strategic Impact: Platform stability, test reliability, and service independence depend on this module\n\nCRITICAL IMPORTANCE: This module is the foundation of environment variable management across\nthe entire Netra platform. It prevents configuration drift, ensures test isolation, and\nenables service independence. Any bug in this module can cascade to ALL services.\n\nTesting Strategy:\n- 100% code coverage of all methods and properties\n- Real environment isolation testing (no mocks)\n- Thread safety validation with concurrent access\n- Environment variable operations (get, set, delete, validation)\n- Source tracking functionality\n- Context manager and cleanup behavior\n- Error handling and edge cases\n- Multi-user system compatibility\n- Windows encoding support\n",
      "test_methods": [
        "test_singleton_instance_creation",
        "test_get_instance_method",
        "test_get_env_function_consistency",
        "test_thread_safe_singleton_creation",
        "test_isolation_enable_disable",
        "test_isolation_prevents_os_environ_pollution",
        "test_preserved_variables_in_os_environ",
        "test_sync_with_os_environ_in_test_context",
        "test_set_and_get_basic",
        "test_set_with_source_tracking",
        "test_delete_operations",
        "test_unset_alias",
        "test_update_multiple_variables",
        "test_get_all_variables",
        "test_mask_sensitive_value_function",
        "test_sanitize_database_url",
        "test_sanitize_generic_value",
        "test_shell_expansion_disabled_in_test",
        "test_shell_expansion_disabled_flag",
        "test_protect_variable",
        "test_protect_alias_method",
        "test_change_callbacks",
        "test_callback_error_handling",
        "test_load_from_file_basic",
        "test_load_from_file_override_behavior",
        "test_load_from_file_error_handling",
        "test_get_subprocess_env_isolation_mode",
        "test_get_subprocess_env_additional_vars",
        "test_get_subprocess_env_convenience_function",
        "test_environment_name_detection",
        "test_environment_type_checks",
        "test_staging_database_validation_success",
        "test_staging_database_validation_failures",
        "test_concurrent_read_write_operations",
        "test_concurrent_isolation_operations",
        "test_reset_functionality",
        "test_reset_to_original_state",
        "test_get_changes_since_init",
        "test_environment_cache",
        "test_get_all_with_prefix",
        "test_clear_in_isolation_mode",
        "test_clear_requires_isolation_mode",
        "test_get_debug_info",
        "test_convenience_functions",
        "test_validation_result_creation",
        "test_validation_all",
        "test_validation_with_standard_test_config",
        "test_secret_loader_class",
        "test_load_secrets_function",
        "test_environment_validator_class",
        "test_explicit_unset_tracking",
        "test_optimized_persistence_defaults",
        "test_invalid_input_handling",
        "test_file_loading_edge_cases",
        "test_singleton_consistency_detection",
        "test_auto_load_env_disabled_scenarios",
        "test_shell_expansion_error_conditions",
        "test_test_context_detection_edge_cases",
        "test_legacy_get_environment_manager_function",
        "test_database_url_sanitization_error_handling",
        "test_preserved_variables_deletion",
        "test_disable_isolation_with_restore_original",
        "test_get_all_with_prefix_unset_variables",
        "test_large_scale_operations",
        "test_callback"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_isolated_environment_comprehensive_unit.py",
      "relative_path": "shared/tests/unit/test_isolated_environment_comprehensive_unit.py",
      "category": "unit",
      "service": "shared",
      "test_count": 38,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nULTRA COMPREHENSIVE Unit Tests for IsolatedEnvironment - MOST CRITICAL SSOT CLASS\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - FOUNDATION INFRASTRUCTURE\n- Business Goal: ZERO-FAILURE environment management across ALL services \n- Value Impact: 100% system stability - ALL services depend on this SINGLE SOURCE OF TRUTH\n- Strategic Impact: Platform exists or fails based on this module working correctly\n\nCRITICAL MISSION: This is the MOST IMPORTANT module in the entire platform.\nEvery service, every test, every configuration depends on IsolatedEnvironment.\nANY bug in this class cascades to COMPLETE SYSTEM FAILURE.\n\nTesting Coverage Goals:\n\u2713 100% line coverage - Every single line must be tested\n\u2713 100% branch coverage - Every conditional path must be validated  \n\u2713 100% business logic coverage - Every business scenario must pass\n\u2713 Performance critical paths - Validated with benchmarks\n\u2713 Thread safety under heavy load - Concurrent access validation\n\u2713 Error handling - All failure modes tested\n\u2713 Windows compatibility - UTF-8 encoding support\n\u2713 Multi-user system support - Service independence verified\n\nULTRA CRITICAL IMPORTANCE: \n- Singleton pattern MUST be thread-safe under ALL conditions\n- Environment isolation MUST prevent configuration drift \n- Source tracking MUST work for debugging production issues\n- Sensitive value masking MUST protect secrets in logs\n- Test context detection MUST work for proper test isolation\n- File loading MUST handle all .env file formats correctly\n- Database URL sanitization MUST preserve credentials integrity\n- Shell expansion MUST be secure and controllable\n- All convenience functions MUST maintain backward compatibility\n- Performance MUST scale to 10K+ environment variables\n",
      "test_methods": [
        "test_singleton_memory_consistency",
        "test_singleton_double_initialization_protection",
        "test_singleton_thread_safety_stress_test",
        "test_configuration_drift_prevention",
        "test_service_independence_validation",
        "test_multi_user_context_isolation",
        "test_secret_management_business_logic",
        "test_high_volume_variable_management",
        "test_concurrent_performance_under_load",
        "test_invalid_input_handling_comprehensive",
        "test_extreme_value_handling",
        "test_file_loading_error_scenarios",
        "test_callback_error_resilience",
        "test_sensitive_value_masking_comprehensive",
        "test_database_url_credential_protection",
        "test_control_character_sanitization",
        "test_validation_result_dataclass_comprehensive",
        "test_staging_database_validation_comprehensive",
        "test_environment_detection_normalization",
        "test_shell_expansion_patterns_comprehensive",
        "test_shell_expansion_error_conditions",
        "test_shell_expansion_disable_flags",
        "test_secret_loader_comprehensive",
        "test_environment_validator_comprehensive",
        "test_convenience_functions_comprehensive",
        "test_get_environment_manager_legacy",
        "test_utf8_encoding_support",
        "test_windows_path_handling",
        "test_module_level_singleton_consistency",
        "test_test_context_detection_edge_cases",
        "test_get_test_environment_defaults_coverage",
        "test_auto_load_env_file_scenarios",
        "test_unset_variable_handling_comprehensive",
        "test_sanitization_edge_cases",
        "test_disabled_isolation_clear_error",
        "test_reset_to_original_without_backup",
        "test_standard_test_config_compatibility",
        "test_complete_business_workflow_simulation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_jwt_secret_manager_comprehensive_unit.py",
      "relative_path": "shared/tests/unit/test_jwt_secret_manager_comprehensive_unit.py",
      "category": "unit",
      "service": "shared",
      "test_count": 28,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nULTRA COMPREHENSIVE Unit Tests for JwtSecretManager - CRITICAL AUTHENTICATION SECURITY\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - AUTHENTICATION SECURITY (CRITICAL)\n- Business Goal: ZERO-FAILURE JWT authentication across ALL services and user sessions\n- Value Impact: 100% authentication security - ALL user access depends on this SINGLE SOURCE OF TRUTH  \n- Strategic Impact: Platform authentication exists or fails based on this module working correctly\n\nCRITICAL MISSION: This is the THIRD MOST IMPORTANT module in the platform.\nAll JWT authentication, WebSocket connections, and user sessions depend on JwtSecretManager.\nANY bug in this class cascades to COMPLETE AUTHENTICATION FAILURE affecting 100% of users.\n\nTesting Coverage Goals:\n\u2713 100% line coverage - Every single line must be tested\n\u2713 100% branch coverage - Every conditional path must be validated\n\u2713 100% business logic coverage - Every authentication security scenario must pass\n\u2713 Performance critical paths - Secret access under heavy concurrent load\n\u2713 Multi-environment security - Different environments use different secrets\n\u2713 Secret rotation validation - Key rotation doesn't break active sessions\n\u2713 Enterprise security compliance - Secrets meet strength requirements\n\u2713 Cross-service consistency - Unified secret resolution prevents mismatch failures\n\nWORKING VERSION: This test suite focuses on testing the JWT manager as it actually behaves\nin the test environment, rather than trying to mock away all the test defaults.\n",
      "test_methods": [
        "test_singleton_consistency_across_access_patterns",
        "test_singleton_thread_safety_under_load",
        "test_singleton_global_state_consistency",
        "test_environment_specific_secret_priority",
        "test_generic_jwt_secret_key_fallback",
        "test_test_environment_behavior",
        "test_secret_caching_behavior",
        "test_secret_whitespace_stripping",
        "test_explicit_algorithm_configuration",
        "test_algorithm_defaults",
        "test_algorithm_caching_behavior",
        "test_valid_configuration_validation",
        "test_short_secret_warning",
        "test_unusual_algorithm_warning",
        "test_validation_error_handling",
        "test_debug_info_comprehensive",
        "test_debug_info_security_no_secret_exposure",
        "test_cache_clearing_functionality",
        "test_get_unified_jwt_secret_function",
        "test_get_unified_jwt_algorithm_function",
        "test_validate_unified_jwt_config_function",
        "test_legacy_get_jwt_secret_redirect",
        "test_legacy_get_service_secret",
        "test_legacy_validate_jwt_secret",
        "test_legacy_clear_cache_redirect",
        "test_high_frequency_secret_access_performance",
        "test_concurrent_authentication_simulation",
        "test_complete_authentication_workflow_simulation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/shared/tests/unit/test_secret_manager_builder_comprehensive_unit.py",
      "relative_path": "shared/tests/unit/test_secret_manager_builder_comprehensive_unit.py",
      "category": "unit",
      "service": "shared",
      "test_count": 74,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCLAUDE.md Compliant Unit Tests for SecretManagerBuilder - Grade A Revision\n\nThis test suite addresses all Grade D violations identified in the previous version:\n- Eliminates business logic mocks (only infrastructure mocking)\n- Implements hard failure patterns (no graceful degradation)\n- Uses real SecretManagerBuilder instances with actual environment integration\n- Focuses on business value through real JWT configuration scenarios\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all services)\n- Business Goal: System Reliability, JWT Configuration Reliability\n- Value Impact: Validates unified secret management eliminates JWT configuration failures\n- Strategic Impact: Prevents configuration cascade failures across services\n\nCRITICAL COMPLIANCE WITH CLAUDE.md REQUIREMENTS:\n\u2705 ABSOLUTE IMPORTS ONLY - from shared.secret_manager_builder import\n\u2705 NO MOCK ABUSE - Only infrastructure mocking, real business logic execution\n\u2705 FAIL HARD - Tests raise exceptions, no try/except swallowing\n\u2705 SSOT COMPLIANCE - Validates single source of truth principles\n\u2705 BUSINESS VALUE FOCUS - Tests real JWT configuration scenarios\n\nTotal Coverage: 70+ comprehensive tests across all functionality areas.\n",
      "test_methods": [
        "test_real_initialization_default_parameters",
        "test_real_initialization_with_custom_service",
        "test_real_initialization_with_environment_variables",
        "test_real_auth_builder_parent_relationship",
        "test_real_multiple_instances_independence",
        "test_real_environment_detection_development",
        "test_real_environment_detection_staging",
        "test_real_environment_detection_production",
        "test_real_config_builder_base_inheritance",
        "test_real_initialization_empty_service",
        "test_real_validation_success_with_valid_jwt_secret",
        "test_real_validation_failure_no_jwt_secret_hard_error",
        "test_real_validation_failure_short_jwt_secret_hard_error",
        "test_real_validation_development_environment",
        "test_real_validation_staging_environment",
        "test_real_validation_production_environment",
        "test_real_validation_multiple_services_consistency",
        "test_real_validation_with_custom_environment_variables",
        "test_real_validation_concurrent_access",
        "test_real_validation_rapid_succession",
        "test_real_validation_memory_usage",
        "test_real_validation_hex_secret_compatibility",
        "test_real_validation_environment_variable_isolation",
        "test_real_validation_failure_propagation",
        "test_real_auth_builder_jwt_secret_retrieval",
        "test_real_auth_builder_service_secret_retrieval",
        "test_real_auth_builder_jwt_secret_validation",
        "test_real_auth_builder_explicit_secret_validation",
        "test_real_auth_builder_invalid_secret_validation",
        "test_real_auth_builder_empty_secret_validation",
        "test_real_auth_builder_parent_access",
        "test_real_auth_builder_multiple_instances",
        "test_real_auth_builder_consistent_secret_retrieval",
        "test_real_auth_builder_concurrent_access",
        "test_real_auth_builder_validation_with_none_parameter",
        "test_real_auth_builder_different_environments",
        "test_real_auth_builder_performance_rapid_access",
        "test_real_auth_builder_edge_case_secrets",
        "test_real_auth_builder_state_isolation",
        "test_real_business_jwt_configuration_development_flow",
        "test_real_business_jwt_configuration_staging_deployment",
        "test_real_business_jwt_configuration_production_security",
        "test_real_business_multi_service_consistency_scenario",
        "test_real_business_configuration_failure_prevention",
        "test_real_business_adapter_pattern_value",
        "test_real_business_ssot_compliance_validation",
        "test_real_business_environment_specific_configuration",
        "test_real_business_concurrent_user_simulation",
        "test_real_business_rapid_deployment_scenario",
        "test_real_business_error_reporting_clarity",
        "test_real_business_debug_information_usefulness",
        "test_real_business_service_isolation_validation",
        "test_real_business_configuration_change_impact",
        "test_real_business_scalability_validation",
        "test_real_get_secret_manager_builder_function",
        "test_real_get_secret_manager_builder_custom_service",
        "test_real_validate_secret_manager_function_success",
        "test_real_validate_secret_manager_function_failure",
        "test_real_validate_secret_manager_custom_service",
        "test_real_get_jwt_secret_unified_function",
        "test_real_get_jwt_secret_unified_custom_service",
        "test_real_convenience_functions_independence",
        "test_real_convenience_functions_error_handling",
        "test_real_convenience_functions_performance",
        "test_real_integration_with_isolated_environment",
        "test_real_integration_thread_safety",
        "test_real_integration_memory_management",
        "test_real_integration_environment_switching",
        "test_real_integration_concurrent_environments",
        "test_real_integration_configuration_persistence",
        "test_real_integration_error_propagation",
        "test_real_integration_performance_under_load",
        "test_real_integration_state_isolation_validation",
        "test_real_integration_comprehensive_scenario"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/test_framework/tests/test_ssot_complete.py",
      "relative_path": "test_framework/tests/test_ssot_complete.py",
      "category": "unknown",
      "service": "global",
      "test_count": 17,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive tests for the complete SSOT Test Framework\n\nThis module provides a comprehensive test suite for all SSOT components\nto validate functionality and ensure P0 compliance requirements are met.\n",
      "test_methods": [
        "test_main",
        "test_ssot_imports_successful",
        "test_framework_version_and_compliance",
        "test_ssot_status_function",
        "test_base_test_case_initialization",
        "test_base_test_case_environment_isolation",
        "test_base_test_case_resource_tracking",
        "test_specialized_test_cases",
        "test_mock_factory_initialization",
        "test_mock_factory_singleton",
        "test_basic_mock_creation",
        "test_database_utility_factory",
        "test_websocket_event_types",
        "test_docker_environment_types",
        "test_no_duplicate_implementations",
        "test_consistent_interfaces",
        "test_ssot_framework_completeness"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/critical/test_jwt_authentication_comprehensive.py",
      "relative_path": "tests/critical/test_jwt_authentication_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 3,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCRITICAL FAILING TEST SUITE: JWT Authentication Comprehensive\nPurpose: Expose all authentication vulnerabilities and ensure system resilience\nExpected: Tests should be DIFFICULT and reveal actual problems\n\nThis suite tests EVERY critical authentication pathway using REAL SERVICES ONLY.\nNo mocks allowed - this is production-level validation.\n\nBusiness Value Justification (BVJ):\n- Segment: All users - Critical security foundation  \n- Business Goal: Prevent authentication breaches that could cause $1M+ ARR loss\n- Value Impact: Ensures authentication system can handle real-world attacks and failures\n- Strategic Impact: Authentication is the foundation of user trust and platform security\n\nCRITICAL AREAS TESTED:\n1. JWT token validation failures in WebSocket connections\n2. Auth service communication breakdowns and recovery\n3. JWT secret mismatches between services \n4. Token expiration handling and refresh flows\n5. Service-to-service authentication with SERVICE_SECRET\n6. WebSocket authentication middleware edge cases\n7. Circuit breaker patterns under failure conditions\n8. Token blacklist functionality and race conditions\n9. Multi-user authentication isolation\n10. Authentication timing attacks and security bypasses\n",
      "test_methods": [
        "test_context",
        "test_service_secret_vs_jwt_secret_isolation",
        "test_service_secret_configuration_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/critical/test_websocket_comprehensive_failure_suite.py",
      "relative_path": "tests/critical/test_websocket_comprehensive_failure_suite.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/critical/test_websocket_events_comprehensive_validation.py",
      "relative_path": "tests/critical/test_websocket_events_comprehensive_validation.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCRITICAL: Comprehensive WebSocket Agent Events Validation Suite\n\nBUSINESS CRITICAL REQUIREMENTS:\nThis test suite validates the COMPLETE WebSocket agent event system that enables\nsubstantive chat interactions - the core business value delivery mechanism.\n\nMISSION: Ensure ALL WebSocket agent events work flawlessly under ALL conditions.\n- Business Impact: $500K+ ARR at risk if WebSocket events fail\n- User Experience: Complete chat functionality depends on these events\n- System Reliability: Multi-user concurrent execution must be bulletproof\n\nEVENTS TESTED (The 5 Critical Events for Chat Value):\n1. agent_started - User must know agent began processing\n2. agent_thinking - Real-time reasoning visibility \n3. tool_executing - Tool usage transparency\n4. tool_completed - Tool results delivery\n5. agent_completed - Final response ready notification\n\nTEST PHILOSOPHY:\nThese tests are INTENTIONALLY DIFFICULT and comprehensive. They will:\n- Use ONLY real WebSocket connections (NEVER mocks)\n- Test edge cases that commonly cause silent failures\n- Validate concurrent multi-user scenarios (10+ users)  \n- Test performance under load (25+ connections)\n- Verify event ordering and timing guarantees\n- Test failure recovery and retry mechanisms\n- Validate cross-user isolation (security critical)\n- Test timeout and error handling\n- Verify event content structure validation\n\nIF THESE TESTS FAIL, THE PRODUCT IS BROKEN.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/critical/test_websocket_notification_failures_comprehensive.py",
      "relative_path": "tests/critical/test_websocket_notification_failures_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/critical/test_websocket_security_comprehensive.py",
      "relative_path": "tests/critical/test_websocket_security_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "CRITICAL WEBSOCKET SECURITY TEST SUITE\n\ud83d\udea8 MISSION CRITICAL: Multi-User WebSocket Security Isolation\n\nThis test suite validates the WebSocket security architecture to prevent:\n1. Singleton pattern usage that causes user data leakage\n2. Factory pattern violations that allow authentication bypass\n3. User context corruption in multi-user environments  \n4. Memory leaks in WebSocket connection management\n5. Race conditions in concurrent WebSocket connections\n\nSECURITY IMPACT: $500K+ ARR at risk if WebSocket security fails\nPRIMARY THREAT: User A seeing User B's data via WebSocket messages\n\nBased on SPEC/learnings/websocket_v2_migration_critical_miss_20250905.xml:\n- 90% of agent traffic flows through WebSocket (vs 10% REST)\n- Silent data leakage is most dangerous vulnerability type\n- Factory patterns MUST be enforced at ALL entry points\n- UserExecutionContext MUST be created for EVERY WebSocket message\n\nREQUIREMENTS:\n- Uses ONLY real WebSocket connections (per CLAUDE.md \"MOCKS = Abomination\")\n- Tests all critical security isolation patterns\n- Validates complete user context isolation\n- Ensures no shared state between users\n- Tests concurrent multi-user scenarios\n\nCRITICAL: ANY FAILURE HERE BLOCKS DEPLOYMENT\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/agents/supervisor/test_agent_execution_core_comprehensive_e2e.py",
      "relative_path": "tests/e2e/agents/supervisor/test_agent_execution_core_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive E2E Tests for AgentExecutionCore with Real Authentication and Multi-User Isolation\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Core agent execution affects every user tier\n- Business Goal: Ensure reliable, secure agent execution with complete user isolation\n- Value Impact: Users must receive real-time feedback and isolated execution contexts\n- Strategic Impact: Comprehensive E2E validation prevents production failures and security breaches\n\nThese E2E tests validate complete user workflows with:\n- REAL authentication using JWT/OAuth (MANDATORY per CLAUDE.md)\n- REAL WebSocket connections with authenticated sessions\n- REAL multi-user isolation and session management\n- ALL 5 critical WebSocket events: started, thinking, tool_executing, tool_completed, completed\n- REAL service integrations: PostgreSQL, Redis, WebSocket, LLM (when available)\n- Complete user journeys from login to agent response with proper isolation\n\nCRITICAL COMPLIANCE:\n- ALL E2E tests MUST use authentication via test_framework/ssot/e2e_auth_helper.py\n- ZERO MOCKS allowed in E2E tests (per CLAUDE.md Section 7.3)\n- Real Everything > Integration > Unit test hierarchy\n- Proper pytest markers: @pytest.mark.e2e, @pytest.mark.authenticated\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/agents/supervisor/test_agent_execution_websocket_events_comprehensive_e2e.py",
      "relative_path": "tests/e2e/agents/supervisor/test_agent_execution_websocket_events_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "E2E Comprehensive Tests for Agent Execution WebSocket Events.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - WebSocket events are core to user experience\n- Business Goal: Ensure reliable real-time user feedback during agent execution\n- Value Impact: Users must receive timely updates for long-running agent processes\n- Strategic Impact: Complete WebSocket event validation prevents user abandonment due to unclear agent status\n\nThese E2E tests validate ALL required WebSocket events with complete system stack:\n- Real authentication (JWT/OAuth) \n- Real WebSocket connections with event ordering validation\n- Real agent execution with tool integration\n- All 5 required WebSocket events: started, thinking, tool_executing, tool_completed, completed\n- Event delivery guarantees and failure handling\n- Concurrent user event isolation\n\nCRITICAL: ALL E2E tests MUST use authentication - no exceptions.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/agents/test_complete_agent_workflows_authentication_e2e.py",
      "relative_path": "tests/e2e/agents/test_complete_agent_workflows_authentication_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Tests for Complete Agent Workflows with Authentication (Staging)\nTest #10 of Agent Registry and Factory Patterns Test Suite - FINAL TEST\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise (Complete authenticated multi-agent workflows for enterprise customers)\n- Business Goal: Validate end-to-end authenticated agent workflows deliver complete business value\n- Value Impact: Ensures enterprise customers can execute complex authenticated AI workflows reliably\n- Strategic Impact: $5M+ ARR validation - Complete authenticated workflows are core enterprise value proposition\n\nCRITICAL MISSION: Test Complete Agent Workflows with Authentication ensuring:\n1. End-to-end authenticated agent workflows execute successfully with real JWT/OAuth\n2. Complete business workflows (data analysis \u2192 insights \u2192 actions) work end-to-end  \n3. WebSocket events provide complete real-time visibility throughout authenticated workflows\n4. User context and permissions are enforced throughout complete workflow execution\n5. Factory patterns maintain complete isolation during authenticated multi-user workflows\n6. Resource cleanup and security are maintained in complete authenticated scenarios\n7. Performance meets enterprise SLA requirements for complete authenticated workflows\n8. Error handling and recovery work in complete authenticated production-like scenarios\n\nFOCUS: Complete E2E staging validation with real authentication, real multi-agent workflows,\n        and real WebSocket connections to validate complete enterprise business value delivery.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/configuration/test_staging_configuration_complete_flow.py",
      "relative_path": "tests/e2e/configuration/test_staging_configuration_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 4,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Tests: Staging Configuration Complete Flow with Authentication\n\nCRITICAL: Tests complete configuration flows in staging environment with real authentication.\nValidates end-to-end configuration works with OAuth, WebSocket, and database connections.\n\nBusiness Value: Platform/Internal - Prevents staging environment failures blocking deployments\nTest Coverage: Complete staging flows, OAuth integration, WebSocket connections, database access\n",
      "test_methods": [
        "test_staging_websocket_configuration_flow",
        "test_staging_oauth_credential_isolation_regression",
        "test_staging_domain_configuration_regression",
        "test_staging_database_configuration_security_regression"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/database/test_complete_database_workflows_e2e.py",
      "relative_path": "tests/e2e/database/test_complete_database_workflows_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Tests for Complete Database Workflows with Authentication\n\nBusiness Value Justification (BVJ):\n- Segment: All (Multi-user system requires authenticated database operations)\n- Business Goal: Ensure data integrity and security in multi-user scenarios\n- Value Impact: Authenticated database workflows protect customer data and enable secure operations\n- Strategic Impact: Real-world database operations with authentication validate business-critical data flows\n\nThis test suite validates:\n1. Complete database workflows with authenticated users\n2. Multi-user data isolation and security\n3. Database operations through web service APIs\n4. Data persistence across service restarts\n5. Cross-service database consistency\n6. Error handling in authenticated contexts\n7. Performance under authenticated load\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/error_handling/test_comprehensive_error_handling_e2e.py",
      "relative_path": "tests/e2e/error_handling/test_comprehensive_error_handling_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Error Handling E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate complete customer error experience with full authentication\n- Value Impact: Ensures customers receive helpful error feedback in real-world scenarios\n- Strategic Impact: Prevents customer churn from poor error handling during critical workflows\n\nThese tests validate the complete customer error experience using real services,\nreal authentication, and real WebSocket connections. NO MOCKS ALLOWED.\n\nCRITICAL: E2E error handling tests must use REAL authentication to validate\nmulti-user error isolation and real-world customer scenarios.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/frontend/test_frontend_auth_complete_journey.py",
      "relative_path": "tests/e2e/frontend/test_frontend_auth_complete_journey.py",
      "category": "e2e",
      "service": "frontend",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nfrom shared.isolated_environment import get_env\nfrom shared.isolated_environment import IsolatedEnvironment\nFrontend Authentication Complete Journey E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers (Free \u2192 Enterprise)\n- Business Goal: Protect $2M+ ARR from authentication failures\n- Value Impact: Ensures 99.9% successful auth flow completion\n- Strategic Impact: Critical revenue protection through user activation\n\nTests complete frontend authentication flows with real services.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/github_integration/test_complete_github_issue_workflow.py",
      "relative_path": "tests/e2e/github_integration/test_complete_github_issue_workflow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E tests for complete GitHub issue workflow.\n\nCRITICAL: These tests use REAL services and REAL authentication per CLAUDE.md.\nTests are designed to INITIALLY FAIL to prove functionality doesn't exist.\nAll E2E tests MUST use authentication except for auth validation tests.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_authenticated_complete_user_journey_business_value.py",
      "relative_path": "tests/e2e/golden_path/test_authenticated_complete_user_journey_business_value.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuthenticated Complete User Journey Business Value E2E Test - Phase 1 Implementation\n\nCRITICAL AUTHENTICATION COMPLIANCE: This test validates the complete authenticated user journey\nthat generates business value, ensuring ALL E2E tests use proper authentication.\n\nPhase 1 Objective: Authentication Compliance Validation\n- MANDATORY use of E2EWebSocketAuthHelper\n- MANDATORY authentication for ALL user actions\n- MANDATORY validation that authentication works end-to-end\n- PROOF that tests fail without authentication\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - $500K+ ARR protection\n- Business Goal: Validate complete authenticated golden path user journey\n- Value Impact: Ensures authenticated users receive AI cost optimization insights\n- Strategic Impact: Protects primary revenue flow through authenticated business journey\n\nCRITICAL REQUIREMENTS (per CLAUDE.md Section 3.4):\n1. MANDATORY authentication via E2EWebSocketAuthHelper - NO EXCEPTIONS\n2. MANDATORY failure if authentication is missing or bypassed\n3. MANDATORY real services (--real-services flag)\n4. MANDATORY validation of all 5 WebSocket events with authentication context\n5. MANDATORY business value delivery through authenticated channels\n6. NO MOCKS - real authentication, real WebSocket, real database\n7. Must demonstrate authentication prevents unauthorized access\n\nGOLDEN PATH FLOW TESTED WITH AUTHENTICATION:\n```\nUser Authentication \u2192 JWT Token \u2192 WebSocket Auth \u2192 Agent Execution \u2192\nWebSocket Events (authenticated) \u2192 Business Value \u2192 Persistence \u2192 Success\n```\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_complete_golden_path_business_value.py",
      "relative_path": "tests/e2e/golden_path/test_complete_golden_path_business_value.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Golden Path: Business Value Delivery E2E Test\n\nCRITICAL BUSINESS MISSION: This test validates the COMPLETE user journey that generates $500K+ ARR.\nIt tests the PRIMARY revenue-generating flow from user connection through AI-powered cost optimization results.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate complete revenue-generating user journey + system stability\n- Value Impact: Ensures users receive cost optimization insights (core value proposition)\n- Strategic Impact: Protects $500K+ ARR through reliable chat experience\n\nThis test validates the COMPLETE golden path from user connection to business value delivery.\nFailure indicates fundamental revenue-threatening system breakdown.\n\nCRITICAL REQUIREMENTS:\n1. MUST validate COMPLETE user journey that generates business value\n2. MUST use REAL services, REAL authentication, REAL WebSocket, REAL LLM\n3. MUST validate all 5 critical WebSocket events in correct order\n4. MUST validate actual business value (cost optimization insights delivered)\n5. MUST follow SSOT patterns from test_framework/\n6. MUST be designed to fail hard on any deviation\n\nGOLDEN PATH FLOW TO TEST:\n```\nUser Opens Chat \u2192 WebSocket Auth \u2192 Sends \"Optimize my AI costs\" \u2192 \nAgent Pipeline (Data\u2192Optimization\u2192Report) \u2192 WebSocket Events \u2192 \nCost Savings Results \u2192 Database Persistence \u2192 User Sees Value\n```\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_complete_golden_path_user_journey_e2e.py",
      "relative_path": "tests/e2e/golden_path/test_complete_golden_path_user_journey_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Golden Path User Journey E2E Test\n\nCRITICAL: This test validates the COMPLETE end-to-end user journey that generates business value.\nThis is the PRIMARY revenue-protection test validating the full user experience from\nauthentication through WebSocket connection to actionable cost optimization delivery.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - $500K+ ARR protection\n- Business Goal: Validate complete golden path user journey with real business value delivery\n- Value Impact: Ensures users receive actionable AI cost optimization insights (core value prop)\n- Strategic Impact: Protects primary revenue flow through comprehensive journey validation\n\nGOLDEN PATH FLOW TESTED:\n```\nUser Opens Browser \u2192 Authentication \u2192 WebSocket Connection \u2192 \nSend Message \u2192 Agent Execution \u2192 All 5 WebSocket Events \u2192 \nBusiness Value Delivery (Cost Savings) \u2192 Thread Persistence \u2192 Success\n```\n\nCRITICAL REQUIREMENTS (per CLAUDE.md):\n1. MANDATORY authentication via E2EWebSocketAuthHelper\n2. MANDATORY full Docker stack (--real-services)\n3. MANDATORY validation of all 5 WebSocket events\n4. MANDATORY business value validation (cost savings > 0)\n5. NO MOCKS - real services only\n6. Must fail hard on any business value deviation\n7. 60-second timeout maximum per test\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_race_condition_scenarios.py",
      "relative_path": "tests/e2e/golden_path/test_race_condition_scenarios.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Race Condition Scenarios for Golden Path\n\nCRITICAL E2E TEST: This validates race condition handling in Cloud Run environments\nthat can break the WebSocket handshake and Golden Path user experience.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable WebSocket connections in production environments\n- Value Impact: Race condition failures = lost users = revenue loss\n- Strategic Impact: Production reliability for $500K+ ARR chat platform\n\nGOLDEN PATH CRITICAL ISSUE #1: Race Conditions in WebSocket Handshake\nE2E test scenarios:\n1. Rapid connection attempts in Cloud Run environment simulation\n2. Message sending before handshake completion\n3. Multiple concurrent handshakes from same user\n4. Service restart during active connections\n\nMUST use REAL WebSocket connections and Docker services - NO MOCKS\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_websocket_agent_events_validation.py",
      "relative_path": "tests/e2e/golden_path/test_websocket_agent_events_validation.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Agent Events Validation - Supporting Test for Golden Path\n\nThis test validates the critical WebSocket agent events infrastructure that enables\nthe golden path business value delivery. It focuses specifically on the 5 mandatory\nWebSocket events that provide real-time visibility into agent execution.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure real-time chat visibility works (enables user engagement)\n- Value Impact: Users see agent progress, building trust and reducing abandonment\n- Strategic Impact: Foundation for golden path user experience\n\nCRITICAL WEBSOCKET EVENTS (per CLAUDE.md Section 6):\n1. agent_started - User must see agent began processing their problem\n2. agent_thinking - Real-time reasoning visibility (shows AI working on solutions)\n3. tool_executing - Tool usage transparency (demonstrates problem-solving approach)  \n4. tool_completed - Tool results display (delivers actionable insights)\n5. agent_completed - User must know when valuable response is ready\n\nThis test ensures these events are delivered correctly and in proper sequence.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/golden_path/test_websocket_authentication_validation_e2e.py",
      "relative_path": "tests/e2e/golden_path/test_websocket_authentication_validation_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Authentication Validation E2E Test - Phase 1 Implementation\n\nCRITICAL AUTHENTICATION COMPLIANCE: This test validates that WebSocket authentication\nis properly enforced and that ALL WebSocket operations require proper authentication.\n\nPhase 1 Objective: WebSocket Authentication Validation\n- MANDATORY authentication for ALL WebSocket connections\n- MANDATORY failure when authentication is missing\n- MANDATORY validation that WebSocket events include authentication context\n- PROOF that WebSocket operations fail without proper authentication\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Security Critical\n- Business Goal: Secure WebSocket communications for all users\n- Value Impact: Prevents unauthorized access to real-time AI features\n- Strategic Impact: Protects intellectual property and user data in WebSocket flows\n\nCRITICAL REQUIREMENTS (per CLAUDE.md Section 6.2):\n1. MANDATORY authentication via E2EWebSocketAuthHelper for ALL WebSocket connections\n2. MANDATORY failure if WebSocket connection attempted without authentication\n3. MANDATORY validation that WebSocket events are delivered only to authenticated users\n4. MANDATORY user isolation in WebSocket event delivery\n5. NO anonymous WebSocket connections allowed\n6. Must demonstrate authentication prevents unauthorized WebSocket access\n\nWEBSOCKET AUTHENTICATION VALIDATION FLOW:\n```\nAuthentication Required \u2192 WebSocket Headers \u2192 Connection Validation \u2192\nEvent Delivery (authenticated) \u2192 User Isolation \u2192 Security Validation \u2192 Success\n```\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/infrastructure/test_gcp_redis_connectivity_golden_path.py",
      "relative_path": "tests/e2e/infrastructure/test_gcp_redis_connectivity_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Infrastructure Test: GCP Redis Connectivity Golden Path\n\nCRITICAL: This test suite exposes the CRITICAL Redis connection failure in GCP Staging\nthat breaks the golden path user flow (90% of business value - AI chat functionality).\n\nRoot Cause: GCP Infrastructure connectivity failure between Cloud Run and Memory Store Redis\nIssue: 7.51s timeout pattern causing complete chat functionality breakdown\nImpact: WebSocket readiness validation fails, causing startup failures\n\nBusiness Value Justification:\n- Segment: Platform/Internal (protects all customer segments)\n- Business Goal: Platform Stability & Chat Value Protection\n- Value Impact: Prevents complete breakdown of AI chat functionality (core value proposition)\n- Strategic Impact: Ensures golden path user flow reliability in production environment\n\nCLAUDE.md Compliance:\n- Authentication: Uses E2EAuthHelper with real JWT authentication (MANDATORY for E2E tests)\n- Real Services: Tests actual GCP infrastructure, no mocks (MANDATORY for E2E tests)\n- Failure Design: Tests MUST fail when Redis infrastructure issue exists\n- Error Detection: Tests MUST raise errors, no try/except blocks hiding failures\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_authentication_comprehensive_e2e.py",
      "relative_path": "tests/e2e/integration/test_authentication_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Authentication E2E Test Suite for Netra Apex\n\nCRITICAL CONTEXT: Authentication Flow Coverage\nComprehensive E2E tests for authentication workflows covering OAuth, JWT lifecycle,\nsession management, and cross-service authentication propagation.\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Prevent authentication failures that block user access\n3. Value Impact: Direct impact on user onboarding and retention\n4. Revenue Impact: Protects $29,614 value (authentication component)\n\nModule Architecture Compliance: Under 300 lines, functions under 8 lines\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_comprehensive_auth_flow.py",
      "relative_path": "tests/e2e/integration/test_comprehensive_auth_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Auth Flow Integration Test - Dev Environment\nTests complete authentication flow from registration to logout using real auth service.\n\nBVJ (Business Value Justification):\n1. Segment: All customer segments - authentication is core funnel\n2. Business Goal: Validate auth system reliability in dev environment  \n3. Value Impact: Prevents auth failures that block development and testing\n4. Revenue Impact: Ensures dev environment matches production auth behavior\n\nREQUIREMENTS:\n- Uses real auth service with real database\n- Tests complete user lifecycle: register -> login -> validate -> logout\n- JWT token generation, validation, and invalidation\n- Session management and cleanup\n- Must work in dev environment configuration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_database_comprehensive_e2e.py",
      "relative_path": "tests/e2e/integration/test_database_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Database E2E Test Suite for Netra Apex\n\nCRITICAL CONTEXT: Database Operations Coverage\nComprehensive E2E tests for database workflows covering transaction consistency,\ndata synchronization, multi-database integration, and failure recovery.\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure data integrity and prevent corruption\n3. Value Impact: Critical for billing accuracy and customer trust\n4. Revenue Impact: Prevents $50K+ revenue loss from data corruption\n\nModule Architecture Compliance: Under 300 lines, functions under 8 lines\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_dev_launcher_startup_complete.py",
      "relative_path": "tests/e2e/integration/test_dev_launcher_startup_complete.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_staging_complete_e2e.py",
      "relative_path": "tests/e2e/integration/test_staging_complete_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Staging Environment E2E Test Suite\nBusiness Value: Validates complete staging deployment functionality.\nEnsures all services work correctly in staging before production deployment.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_websocket_comprehensive_e2e.py",
      "relative_path": "tests/e2e/integration/test_websocket_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive WebSocket E2E Test Suite for Netra Apex\n\nCRITICAL CONTEXT: WebSocket Communication Coverage\nComprehensive E2E tests for WebSocket workflows covering connection lifecycle,\nmessage routing, multi-user scenarios, and error handling.\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure real-time communication reliability\n3. Value Impact: Direct impact on user experience and agent responsiveness\n4. Revenue Impact: Critical for real-time AI optimization features\n\nModule Architecture Compliance: Under 300 lines, functions under 8 lines\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_websocket_event_completeness.py",
      "relative_path": "tests/e2e/integration/test_websocket_event_completeness.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "WebSocket Event Flow Completeness Test\n\nP0 CRITICAL - UX BROKEN\nBVJ: All customer tiers | UX Fix | Frontend UI layers don't update | Users see blank screens\nSPEC: websocket_communication.xml\n\nThis test verifies ALL required WebSocket events are sent with correct payloads and that\nfrontend receives events in correct order within the 10-second requirement.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_websocket_event_completeness_integration_core.py",
      "relative_path": "tests/e2e/integration/test_websocket_event_completeness_integration_core.py",
      "category": "e2e",
      "service": "global",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Test module: test_websocket_event_completeness_integration_core.py\n\nThis file has been auto-generated to fix syntax errors.\nOriginal content had structural issues that prevented parsing.\n",
      "test_methods": [
        "test_placeholder",
        "test_basic_functionality"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_websocket_event_completeness_integration_helpers.py",
      "relative_path": "tests/e2e/integration/test_websocket_event_completeness_integration_helpers.py",
      "category": "e2e",
      "service": "global",
      "test_count": 2,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Test module: test_websocket_event_completeness_integration_helpers.py\n\nThis file has been auto-generated to fix syntax errors.\nOriginal content had structural issues that prevented parsing.\n",
      "test_methods": [
        "test_placeholder",
        "test_basic_functionality"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/integration/test_websocket_jwt_complete.py",
      "relative_path": "tests/e2e/integration/test_websocket_jwt_complete.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCLAUDE.md COMPLIANT: Complete WebSocket JWT Authentication Flow Test with MANDATORY Authentication\n\nCRITICAL E2E Test: Complete JWT token authentication flow for WebSocket connections using SSOT authentication.\nTests the end-to-end security chain with MANDATORY authentication as per CLAUDE.md Section 6.\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free, Early, Mid, Enterprise) | Goal: Core Security | Impact: $100K+ MRR Protection\n- Security breach = 100% Enterprise customer loss\n- Prevents authentication bypass vulnerabilities in real-time AI interactions\n- Ensures JWT token validation consistency across Auth \u2192 Backend \u2192 WebSocket services\n- Tests token refresh, expiry, and reconnection flows critical for user retention\n- Validates unauthorized access blocking for compliance requirements\n\nCLAUDE.md COMPLIANCE:\n\u2705 ALL e2e tests MUST use authentication (JWT/OAuth) - MANDATORY\n\u2705 Real services only - NO MOCKS allowed (ABOMINATION if violated)\n\u2705 Tests fail hard - no bypassing/cheating (ABOMINATION if violated)\n\u2705 Use test_framework/ssot/e2e_auth_helper.py (SSOT) for authentication - MANDATORY\n\u2705 NO exceptions for auth requirement except tests that directly validate auth system\n\nPerformance Requirements:\n- JWT Generation: <100ms\n- Token Validation: <50ms\n- WebSocket Connection: <2s\n- Token Refresh: <500ms\n- Unauthorized Rejection: <1s\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_auth_complete_flow.py",
      "relative_path": "tests/e2e/journeys/test_auth_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCRITICAL E2E Authentication Flow Tests - Main Test Suite\n\nBVJ (Business Value Justification):\n1. Segment: All customer segments (Free \u2192 Paid conversion critical)\n2. Business Goal: Protect $200K+ MRR through authentication funnel validation\n3. Value Impact: Prevents authentication failures that cost user conversions\n4. Revenue Impact: Each test failure caught saves $10K+ MRR monthly\n\nREQUIREMENTS:\n- Real authentication logic and JWT operations\n- Controlled service dependencies for reliability\n- Must complete in <5 seconds\n- 450-line file limit, 25-line function limit\n- Multi-device session security validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_auth_complete_user_onboarding.py",
      "relative_path": "tests/e2e/journeys/test_auth_complete_user_onboarding.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\n\ud83c\udf1f E2E TEST SUITE: Complete User Authentication Onboarding Journey\n\nTests the complete end-to-end user onboarding experience from first visit to successful chat.\nThis validates the ENTIRE authentication flow that new users experience.\n\nBusiness Value Justification (BVJ):\n- Segment: Free tier + Paid conversions - New user acquisition funnel\n- Business Goal: Maximize User Onboarding Success - Reduce friction to first value\n- Value Impact: $200K+ ARR - 30% improvement in onboarding = 30% more revenue\n- Strategic Impact: Growth Engine - Onboarding success drives organic expansion\n\nCOMPLETE USER JOURNEY:\n1. User visits platform (anonymous)\n2. User registers/signs up (conversion point)\n3. User receives authentication confirmation\n4. User logs in successfully  \n5. User accesses chat interface\n6. User sends first message to agent\n7. User receives agent response (first value!)\n\nCRITICAL SUCCESS CRITERIA:\n- Registration flow completes without errors\n- Authentication tokens work immediately after signup  \n- Chat becomes accessible immediately after auth\n- First agent interaction delivers value within 30 seconds\n- No authentication friction throughout journey\n\nFAILURE = USER ABANDONMENT = LOST REVENUE OPPORTUNITY\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_complete_user_journey.py",
      "relative_path": "tests/e2e/journeys/test_complete_user_journey.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete User Journey Integration Tests - COMPREHENSIVE USER PATH COVERAGE\n\nBVJ (Business Value Justification):\n- Segment: ALL (Free, Early, Mid, Enterprise) | Goal: User Acquisition | Impact: $500K+ MRR\n- Value Impact: Complete user journey validation prevents integration failures causing 100% user loss\n- Strategic Impact: Each working user journey = $99-999/month recurring revenue\n- Risk Mitigation: Catches cross-service integration failures before production\n- Performance Impact: Ensures sub-30s complete journey times for optimal conversion\n\nCOMPREHENSIVE Test Coverage:\n\u2705 ALL Authentication Paths: Email/Password, OAuth (Google, GitHub, Microsoft), Social Login\n\u2705 MFA/2FA Flows: SMS, TOTP, Backup codes\n\u2705 Password Recovery: Email reset, security questions, account unlock\n\u2705 10+ User Personas: Free, Early, Mid, Enterprise, Admin, Developer, Manager, etc.\n\u2705 Complete Journey Timing: <30s total, <3s login, <2s WebSocket, <8s first response\n\u2705 Signup to AI Insights: Registration \u2192 Verification \u2192 Login \u2192 Chat \u2192 Tool Execution \u2192 Results\n\u2705 Multi-user session isolation with concurrent testing\n\u2705 Error recovery and edge case handling\n\u2705 Real service integration (no mocks)\n\u2705 WebSocket agent events validation\n\u2705 Business value delivery validation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_new_user_complete_real.py",
      "relative_path": "tests/e2e/journeys/test_new_user_complete_real.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_oauth_complete_flow.py",
      "relative_path": "tests/e2e/journeys/test_oauth_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCritical OAuth E2E Test - Login \u2192 Dashboard \u2192 Chat History\n\n**BUSINESS VALUE JUSTIFICATION (BVJ):**\n1. **Segment**: Enterprise & Growth - OAuth validation for enterprise deals\n2. **Business Goal**: Prevent OAuth failures blocking enterprise customer acquisition\n3. **Value Impact**: Critical path validation for $1M+ ARR accounts with SSO requirements\n4. **Revenue Impact**: Protects enterprise conversion pipeline and prevents churn\n\n**CRITICAL E2E FLOW:**\n- OAuth provider callback \u2192 Real Auth service user creation\n- Real profile sync to Backend service \u2192 Real database persistence  \n- Real dashboard load with chat history \u2192 <5 second execution\n- NO internal service mocking - only external OAuth provider mocked\n\n**ARCHITECTURE:** 450-line limit, 25-line functions, real service integration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/journeys/test_user_journey_complete_real.py",
      "relative_path": "tests/e2e/journeys/test_user_journey_complete_real.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/logging/test_end_to_end_logging_completeness.py",
      "relative_path": "tests/e2e/logging/test_end_to_end_logging_completeness.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest End-to-End Logging Completeness - E2E Tests for Production Debugging\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Operations & Customer Success)\n- Business Goal: Enable rapid diagnosis and resolution of production issues\n- Value Impact: Reduce customer-impacting incident resolution time from hours to minutes\n- Strategic Impact: Foundation for reliable operations that maintain customer trust\n\nThis test suite validates that complete end-to-end logging enables:\n1. Full customer journey tracing from login to results\n2. Production issue diagnosis with complete context\n3. Performance bottleneck identification across the stack\n4. Customer-specific debugging without data leakage\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/performance/test_comprehensive_performance_e2e.py",
      "relative_path": "tests/e2e/performance/test_comprehensive_performance_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Performance Tests - Comprehensive Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate complete user workflows perform at business-critical speeds\n- Value Impact: E2E performance prevents customer churn - 1 second delay = 7% conversion loss\n- Strategic Impact: Performance validation for Enterprise SLAs and scalability commitments\n\nCRITICAL: These E2E tests validate COMPLETE user journeys with REAL services.\nE2E performance failures indicate systemic issues that impact ALL customers.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/performance/test_rate_limiting_complete.py",
      "relative_path": "tests/e2e/performance/test_rate_limiting_complete.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCRITICAL E2E Test: Comprehensive Rate Limiting Implementation (Real Testing)\n\nBusiness Value Justification (BVJ):\n1. Segment: Platform/Internal\n2. Business Goal: API abuse prevention = service degradation prevention = all customer impact prevention\n3. Value Impact: Protects infrastructure, ensures fair usage, enables tier-based pricing\n4. Revenue Impact: $50K+ MRR through preventing abuse and supporting pricing tiers\n\nARCHITECTURAL COMPLIANCE:\n- Maximum file size: 500 lines (enforced)\n- Maximum function size: 25 lines (enforced)  \n- Single responsibility: Comprehensive rate limiting validation\n- Tests REAL rate limiting with actual API calls and proper error handling\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/resilience/test_error_recovery_complete.py",
      "relative_path": "tests/e2e/resilience/test_error_recovery_complete.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "E2E Error Recovery and Circuit Breaker Test - Complete System Resilience\n\nBusiness Value Justification (BVJ):\n    - Segment: All tiers - system availability prevents 100% revenue loss during outages\n- Business Goal: Prevent cascading failures that cause total system shutdown\n- Value Impact: Maintains service availability during partial infrastructure failures\n- Revenue Impact: Protects entire customer base from service interruptions\n\nCRITICAL REQUIREMENTS:\n    - Test REAL error isolation between services (no mocks)\n- Validate circuit breaker activation within failure threshold\n- Test automatic recovery within 30 seconds (per SLA requirement)\n- Verify NO cascading failures across service boundaries\n- Must recover gracefully without data loss\n\nThis test validates the circuit breaker pattern implementation and error recovery\nmechanisms against real service failures, ensuring business continuity.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/service_dependencies/test_service_dependency_golden_path.py",
      "relative_path": "tests/e2e/service_dependencies/test_service_dependency_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nEnd-to-end tests for service dependency resolution in golden path user flows.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Service Dependency Resolution  \n- Value Impact: Validates complete user chat experience depends on service orchestration\n- Strategic Impact: Prevents service dependency failures from blocking $500K+ ARR functionality\n\nThese tests validate that service dependency resolution enables the complete golden path\nuser experience including authenticated chat sessions, agent execution, and real-time updates.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/service_dependencies/test_service_dependency_golden_path_simple.py",
      "relative_path": "tests/e2e/service_dependencies/test_service_dependency_golden_path_simple.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nSimplified E2E tests for service dependency resolution components.\n\nTests the core functionality of the service dependency system without\nrequiring complex test framework dependencies.\n",
      "test_methods": [
        "test_retry_mechanism_configuration"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/services/monitoring/gcp/test_gcp_error_reporting_e2e_comprehensive.py",
      "relative_path": "tests/e2e/services/monitoring/gcp/test_gcp_error_reporting_e2e_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E: GCP Error Reporting End-to-End Comprehensive Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise & Mid-tier\n- Business Goal: Real-world error reporting validation with authentication\n- Value Impact: Ensures complete error monitoring works in production-like scenarios\n- Strategic/Revenue Impact: Critical for Enterprise customers requiring end-to-end monitoring\n\nCRITICAL E2E AUTH REQUIREMENT: ALL e2e tests MUST use authentication per CLAUDE.md\nThese tests validate complete end-to-end error reporting flows with real authentication.\n\nEXPECTED INITIAL STATE: FAIL - proves missing GCP integration components\nSuccess requires complete real-world error reporting pipeline.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_agent_optimization_complete_flow.py",
      "relative_path": "tests/e2e/staging/test_agent_optimization_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete Agent Optimization E2E Flows\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Mid/Early (All paid tiers)\n- Business Goal: Ensure agents deliver substantive AI-powered optimization insights\n- Value Impact: Users receive actionable cost savings and performance improvements\n- Strategic Impact: Core value proposition - AI agents must work end-to-end\n\nCRITICAL AUTHENTICATION REQUIREMENT:\nALL tests in this module MUST use authentication (JWT/OAuth) as per CLAUDE.md\nsection 3.4 and 7.3. This ensures real-world multi-user scenarios are tested.\n\nCRITICAL E2E REQUIREMENTS:\n- Full Stack Testing: Uses complete Docker stack with real services\n- Real LLM Integration: Uses actual LLM APIs for agent execution\n- NO MOCKS: Everything must be real - databases, Redis, WebSocket, LLM, auth  \n- WebSocket Events: Validates all 5 critical events during agent execution\n- Business Value Focus: Tests complete user journeys and value delivery\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_auth_complete_workflows.py",
      "relative_path": "tests/e2e/staging/test_auth_complete_workflows.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Staging Tests: Complete Authentication Workflows\n====================================================\n\nThis module tests complete authentication workflows end-to-end in the staging environment.\nTests REAL authentication flows, JWT token lifecycle, OAuth integration, and session management.\n\nBusiness Value:\n- Validates critical authentication flows prevent $50K+ MRR loss from auth failures\n- Ensures multi-user isolation works in production-like environment\n- Tests complete user journey from registration to authenticated actions\n- Validates OAuth integration with real external providers\n\nCRITICAL E2E REQUIREMENTS:\n- MUST use real authentication (JWT/OAuth)\n- MUST test complete business workflows\n- MUST validate actual business value delivery\n- MUST test with real staging environment configuration\n- NO MOCKS ALLOWED - uses real services and LLMs\n\nTest Coverage:\n1. Complete user registration to first authenticated action\n2. OAuth login flow with external provider simulation\n3. JWT token refresh and lifecycle management\n4. Multi-step authentication with session persistence\n5. Authentication failure recovery and error handling\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_complete_agent_workflows.py",
      "relative_path": "tests/e2e/staging/test_complete_agent_workflows.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Agent Workflow E2E Tests for Staging Environment\n\nBusiness Value Justification (BVJ):\n- Segment: Early/Mid/Enterprise - All paid tiers\n- Business Goal: Validate end-to-end AI agent value delivery in staging\n- Value Impact: Ensures customers receive complete AI-powered cost optimization \n- Strategic/Revenue Impact: $500K+ ARR protected - Prevents staging deployment failures\n\nThis test suite validates complete agent workflows with REAL authentication and services:\n1. Real WebSocket connections with JWT authentication\n2. Complete agent execution chains with all 5 required events\n3. Business value delivery (cost savings, insights, recommendations)\n4. Multi-user isolation and concurrent operations\n5. Staging environment configuration validation\n\n\ud83d\udea8 CRITICAL E2E REQUIREMENTS:\n- ALL tests use authentication (JWT/OAuth) - NO EXCEPTIONS\n- Real WebSocket connections with all 5 agent events validated\n- Real agent execution with LLM and tool calls\n- Staging environment URLs and configurations\n- Multi-user isolation testing\n\nRequired WebSocket Events:\n1. agent_started - User sees agent began processing\n2. agent_thinking - Real-time reasoning visibility  \n3. tool_executing - Tool usage transparency\n4. tool_completed - Tool results delivery\n5. agent_completed - Final results delivery\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_complete_thread_lifecycle.py",
      "relative_path": "tests/e2e/staging/test_complete_thread_lifecycle.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete Thread Lifecycle in Staging Environment\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable thread management for sustained user engagement and conversation continuity\n- Value Impact: Thread lifecycle failures break user chat experience and lead to data loss, directly impacting customer retention\n- Strategic Impact: Core foundation for multi-user chat platform - thread management is critical for delivering AI value\n\nThis comprehensive E2E test suite validates complete thread lifecycle in staging environment:\n1. Full thread creation to completion lifecycle with real user scenarios\n2. Thread persistence across user sessions and reconnections  \n3. Message continuity and ordering throughout thread lifecycle\n4. Agent execution context preservation within thread lifecycle\n5. Thread state management during concurrent operations\n6. Recovery scenarios and error handling in thread lifecycle\n7. Performance validation under realistic load conditions\n\nCRITICAL REQUIREMENTS:\n- MANDATORY OAuth/JWT authentication flows for all operations\n- ALL 5 WebSocket events MUST be sent and validated (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n- Real staging environment with actual services - NO MOCKS\n- Real LLM agent execution within authenticated thread context\n- Comprehensive Business Value delivery validation\n\nCRITICAL: This test demonstrates substantive AI value delivery through complete thread lifecycle.\nExpected: 5-7 test methods that prove end-to-end business value in staging environment.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_complete_tool_workflows_with_authentication.py",
      "relative_path": "tests/e2e/staging/test_complete_tool_workflows_with_authentication.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "E2E staging tests for complete tool workflows with authentication.\n\nThese tests validate end-to-end tool execution workflows in a staging environment\nwith real authentication, ensuring the complete user experience works properly.\n\nBusiness Value: Free/Early/Mid/Enterprise - Complete User Experience\nValidates that authenticated users can execute tools and receive real-time feedback.\n\nTest Coverage:\n- Complete authenticated tool execution workflows\n- JWT-based authentication with tool dispatching\n- OAuth integration with multi-user tool execution\n- Real WebSocket connections with authenticated sessions\n- Staging environment tool registry and discovery\n- Multi-tenant tool execution with proper isolation\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/staging/test_websocket_agent_events_comprehensive.py",
      "relative_path": "tests/e2e/staging/test_websocket_agent_events_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Agent Events Comprehensive E2E Tests for Staging\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal + All Customer Tiers\n- Business Goal: Ensure mission-critical WebSocket event delivery for real-time AI value\n- Value Impact: Enables $500K+ ARR through transparent AI agent execution visibility\n- Strategic/Revenue Impact: Prevents customer churn from poor real-time experience\n\nThis test suite validates ALL 5 required WebSocket events for agent execution:\n1. agent_started - User sees agent began processing their problem  \n2. agent_thinking - Real-time reasoning visibility (shows AI working on valuable solutions)\n3. tool_executing - Tool usage transparency (demonstrates problem-solving approach)\n4. tool_completed - Tool results display (delivers actionable insights)\n5. agent_completed - User knows when valuable response is ready\n\n\ud83d\udea8 MISSION CRITICAL: These events enable substantive chat interactions - core business value!\n\n\ud83d\udea8 CRITICAL E2E REQUIREMENTS:\n- ALL tests use real authentication (JWT/OAuth) - NO EXCEPTIONS\n- Real WebSocket connections to staging services\n- Validate ALL 5 WebSocket events in correct sequence\n- Test event delivery timing and content quality\n- Validate multi-user WebSocket isolation\n- Real agent execution with LLM integration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_agent_orchestration_e2e_comprehensive.py",
      "relative_path": "tests/e2e/test_agent_orchestration_e2e_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCOMPREHENSIVE E2E TEST 2: Agent Orchestration Flow - Production Ready with MANDATORY AUTHENTICATION\n\nThis comprehensive E2E test suite validates complete agent orchestration workflows\nwith real system components, complex agent handoffs, and error recovery scenarios.\n\nBusiness Value Justification:\n- Segment: Enterprise ($50K+ MRR protection)\n- Business Goal: Ensure multi-agent coordination operates flawlessly in production\n- Value Impact: Validates complete user journeys with 3+ agents and state preservation\n- Strategic Impact: Protects AI optimization workflows generating $2M+ annual value\n\n\ud83d\udea8 CRITICAL: ALL E2E TESTS MUST USE AUTHENTICATION\nThis ensures proper multi-user isolation and real-world scenario testing.\n\nTest Architecture:\n- NO MOCKS: Real services, real LLMs, real WebSocket connections\n- MANDATORY AUTHENTICATION: All tests use JWT/OAuth authentication flows\n- Comprehensive Event Validation: All WebSocket events tracked and validated\n- Complex Handoff Testing: Multi-turn conversations with state preservation\n- Error Recovery: Graceful failure handling and fallback scenarios\n- Performance Benchmarks: Production-level performance validation\n\nCRITICAL: This test must pass for production deployment.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_agent_responses_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_agent_responses_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Agent Response E2E Tests for Final Implementation Agent\n\nBusiness Value Justification (BVJ):\n    1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure agent response system works correctly end-to-end\n3. Value Impact: Core AI agent functionality that delivers primary platform value\n4. Revenue Impact: Critical for value delivery and customer retention\n\nTest Coverage:\n    - Agent initialization and startup\n- Request routing to appropriate agents\n- Response generation and formatting\n- Error handling in agent responses\n- Multi-turn conversation handling\n- Agent state management\n- Response time validation\n- Agent tool execution\n- Context preservation\n- Fallback response mechanisms\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_agent_websocket_events_comprehensive.py",
      "relative_path": "tests/e2e/test_agent_websocket_events_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive E2E test for agent WebSocket event communication.\n\nBusiness Value: $120K+ MRR protection by ensuring agent communication works end-to-end.\nThis test validates that ALL required agent lifecycle events are sent and received correctly.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_auth_complete_flow.py",
      "relative_path": "tests/e2e/test_auth_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Authentication E2E Test Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure secure, reliable user authentication across all flows\n- Value Impact: Users must be able to authenticate to access AI optimization services\n- Strategic Impact: Core platform security and user onboarding functionality\n\nCRITICAL: This test validates REAL authentication flows with REAL services.\nAll 5 WebSocket events are verified where applicable.\nTests use IsolatedEnvironment for configuration (NOT os.environ).\n\nCompliance with TEST_CREATION_GUIDE.md:\n- Uses real services, no inappropriate mocks\n- Validates all 5 WebSocket events for agent interactions\n- Implements proper error handling and edge cases\n- Uses SSOT utilities from test_framework/\n- Includes comprehensive security tests\n- Follows proper cleanup patterns\n",
      "test_methods": [
        "test_user_factory"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_auth_flow_comprehensive.py",
      "relative_path": "tests/e2e/test_auth_flow_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_auth_service_comprehensive_e2e_suite.py",
      "relative_path": "tests/e2e/test_auth_service_comprehensive_e2e_suite.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nAuth Service Comprehensive E2E Test Suite (Tests 2-5)\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Complete end-to-end authentication system validation\n- Value Impact: Ensures entire auth system works correctly in production-like environment\n- Strategic Impact: Critical validation of authentication platform reliability\n\nThese tests validate:\n1. Multi-user concurrent authentication flows\n2. Authentication error handling and recovery\n3. Cross-service authentication integration\n4. Performance under realistic load\n5. Security boundary enforcement at scale\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_auth_websocket_complete_flow.py",
      "relative_path": "tests/e2e/test_auth_websocket_complete_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\n\ud83c\udf1f E2E TEST SUITE: Complete Authentication WebSocket Flow\n\nTests the complete end-to-end authentication + WebSocket flow that delivers chat value.\nThis validates the CRITICAL path from authentication to successful agent interactions.\n\nBusiness Value Justification (BVJ):\n- Segment: ALL authenticated users - 100% of paying customers\n- Business Goal: Seamless Auth-to-Chat Experience - Core value delivery path  \n- Value Impact: $500K+ ARR - This flow IS our product's core value\n- Strategic Impact: Platform Foundation - Auth + WebSocket + Agents = Complete platform\n\nCOMPLETE AUTH-WEBSOCKET FLOW:\n1. User authentication (token creation/validation)\n2. WebSocket connection with auth context\n3. User identity verification via WebSocket\n4. Agent request submission with auth\n5. Agent events delivered via authenticated WebSocket\n6. Complete response received with proper user context\n\nCRITICAL SUCCESS CRITERIA:\n- Authentication tokens work seamlessly with WebSocket\n- All 5 agent events delivered to authenticated user\n- User identity maintained throughout WebSocket session\n- Multi-user isolation enforced via WebSocket auth\n- Error handling preserves authentication state\n\nFAILURE = NO CHAT VALUE = NO BUSINESS VALUE = $0 REVENUE\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_authentication_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_authentication_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Authentication E2E Test Suite - CLAUDE.md Compliant\n\nCRITICAL: ALL E2E tests MUST use authentication (JWT/OAuth) except tests that directly validate auth itself.\nThis file tests complete authentication flows using REAL services and SSOT patterns.\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments - Authentication is foundation for all access\n2. Business Goal: Validate complete authentication flows with real services\n3. Value Impact: Prevents authentication failures that block user onboarding and retention\n4. Revenue Impact: Protects platform integrity and ensures secure multi-user access\n\nCLAUDE.md Compliance:\n- Uses test_framework.ssot.e2e_auth_helper for ALL authentication\n- NO mocks in E2E tests - uses REAL authentication services\n- NO pytest.skip() - all tests must execute or fail hard\n- Tests MUST raise errors on failure\n- Uses REAL HTTP clients with REAL authentication\n- NO try/except blocks hiding failures\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_chat_ui_flow_comprehensive.py",
      "relative_path": "tests/e2e/test_chat_ui_flow_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_clickhouse_complete_analytics_workflow_e2e.py",
      "relative_path": "tests/e2e/test_clickhouse_complete_analytics_workflow_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest ClickHouse Complete Analytics Workflow - E2E Test\n\nBusiness Value Justification (BVJ):\n- Segment: Mid and Enterprise \n- Business Goal: End-to-end analytics pipeline reliability\n- Value Impact: Complete analytics accuracy drives customer retention (95% satisfaction)\n- Strategic Impact: Enables premium analytics features for enterprise customers (+$25K ARR)\n\nThis E2E test validates the complete ClickHouse analytics workflow from data ingestion\nto dashboard delivery, ensuring the entire pipeline works reliably with authentication.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_agent_optimization_workflow.py",
      "relative_path": "tests/e2e/test_complete_agent_optimization_workflow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Agent Optimization Workflow E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Validate complete AI workload optimization delivery\n- Value Impact: Users receive actionable cost savings and performance improvements\n- Strategic Impact: Core platform value proposition - optimization workflows must work end-to-end\n\nThese tests validate the COMPLETE business workflow from user request to delivered optimization recommendations.\nTests use real authentication, real services, real LLM, and validate all 5 critical WebSocket events.\n\nCRITICAL E2E REQUIREMENTS:\n1. Real authentication (JWT/OAuth) - NO MOCKS\n2. Real services (Docker stack) - NO MOCKS  \n3. Real LLM integration for agent execution\n4. All 5 WebSocket events MUST be verified\n5. Complete business value delivery validation\n6. Multi-user isolation testing\n7. End-to-end optimization workflows\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_authenticated_chat_workflow_e2e.py",
      "relative_path": "tests/e2e/test_complete_authenticated_chat_workflow_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Test: Complete Authenticated Chat Workflow - MISSION CRITICAL Revenue Protection\n\nBUSINESS IMPACT: Tests the complete chat workflow that generates 90% of platform revenue.\nThis E2E test validates the end-to-end golden path from user authentication to agent response.\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise/Platform - Complete Chat Infrastructure  \n- Business Goal: Revenue Protection - Ensure golden path delivers $500K+ ARR\n- Value Impact: Validates complete authenticated chat workflow customers depend on\n- Strategic Impact: Tests the PRIMARY VALUE-GENERATING FLOW of the entire platform\n\nCRITICAL SUCCESS METRICS:\n\u2705 User authenticates successfully with JWT/OAuth\n\u2705 WebSocket connection established with auth headers  \n\u2705 Agent execution triggered with real LLM integration\n\u2705 All 5 critical WebSocket events delivered (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n\u2705 Real agent response with business value delivered to user\n\u2705 End-to-end timing < 30 seconds for good UX\n\nCOMPLIANCE:\n@compliance CLAUDE.md - E2E AUTH MANDATORY (Section 7.3) \n@compliance CLAUDE.md - WebSocket events enable substantive chat (Section 6)\n@compliance CLAUDE.md - NO MOCKS in E2E tests\n@compliance CLAUDE.md - Real services, real LLM for E2E\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_authentication_journeys_batch4.py",
      "relative_path": "tests/e2e/test_complete_authentication_journeys_batch4.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete Authentication Journeys Batch 4 - E2E Tests with Real Authentication\n\nBusiness Value Justification (BVJ):\n- Segment: All segments - Authentication is foundational to platform access\n- Business Goal: Ensure seamless user authentication experience across all touchpoints\n- Value Impact: Authentication journeys enable $120K+ MRR by providing secure access to platform\n- Revenue Impact: Failed authentication = lost customers, secure auth = enterprise trust\n\nCRITICAL: These tests validate complete user authentication journeys with REAL services.\nNO mocks in authentication paths - must use real JWT, real WebSocket, real database.\nTests must validate actual user workflows that generate business revenue.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_authentication_security_comprehensive.py",
      "relative_path": "tests/e2e/test_complete_authentication_security_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Authentication Security E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: End-to-end authentication security validation\n- Value Impact: Ensures users can securely authenticate and access the platform\n- Strategic Impact: Critical foundation for all user interactions and data protection\n\nThese tests validate:\n1. Complete user registration and login flows\n2. Multi-factor authentication when enabled\n3. OAuth integration with real provider simulation\n4. Session management across browser tabs\n5. Security boundary enforcement\n",
      "test_methods": [
        "test_user_data"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_authentication_security_e2e.py",
      "relative_path": "tests/e2e/test_complete_authentication_security_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Complete Authentication Security E2E - BATCH 4 Authentication Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: End-to-end authentication security ensures platform-wide trust\n- Value Impact: Complete security coverage protects all user interactions and business data\n- Strategic Impact: E2E authentication security critical for enterprise adoption and compliance\n\nFocus: Complete authentication flow, cross-service security, real-world attack scenarios\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_chat_conversations_business_value.py",
      "relative_path": "tests/e2e/test_complete_chat_conversations_business_value.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete Chat Conversations with Business Value E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate complete chat experience delivers measurable business value\n- Value Impact: Users must receive actionable insights and solutions through chat interface\n- Strategic Impact: Chat is primary value delivery mechanism - conversations must provide real solutions\n\nThese tests validate COMPLETE chat conversations that deliver REAL business value:\n1. Multi-turn conversations with context preservation\n2. Agent handoffs and collaboration\n3. Real-time WebSocket updates throughout conversation\n4. Actionable business recommendations and insights\n5. Conversation persistence and retrieval\n6. User engagement and satisfaction indicators\n\nCRITICAL E2E REQUIREMENTS:\n1. Real authentication throughout conversation - NO MOCKS\n2. Real services with persistent chat state - NO MOCKS\n3. Real LLM integration for natural conversations\n4. All 5 WebSocket events for every agent interaction\n5. Conversation context preservation across turns\n6. Measurable business value in every response\n7. Multi-agent coordination in complex scenarios\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_system_health_validation.py",
      "relative_path": "tests/e2e/test_complete_system_health_validation.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComplete System Health Validation E2E Test\n=========================================\n\nComprehensive end-to-end test that validates all critical system components work together.\nThis test serves as a system-wide health check and integration validation.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Critical Infrastructure)  \n- Business Goal: Zero-downtime system initialization and health monitoring\n- Value Impact: Ensures reliable system startup for all user segments\n- Strategic Impact: Prevents cascading failures and maintains service availability\n- Revenue Impact: Protects $1M+ potential revenue loss from system downtime\n\nCRITICAL REQUIREMENTS - NO MOCKS ALLOWED:\n- Test real Docker services (backend:8000, auth:8081, postgres:5434, redis:6381)\n- Real database connectivity testing with actual PostgreSQL transactions\n- Real service health endpoint validation\n- Real WebSocket connection testing \n- Authentication using actual JWT tokens and auth flows\n- Multi-user isolation validation\n\nThis test MUST fail hard if any service is unavailable or mocked.\n",
      "test_methods": [
        "test_system_resource_availability"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_system_startup_health_validation.py",
      "relative_path": "tests/e2e/test_complete_system_startup_health_validation.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nenv = get_env()\nComprehensive System Startup and Health Validation E2E Test\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Critical Infrastructure)  \n- Business Goal: Zero-downtime system initialization and health monitoring\n- Value Impact: Ensures reliable system startup for all user segments\n- Strategic Impact: Prevents cascading failures and maintains service availability\n- Revenue Impact: Protects $100K+ potential revenue loss from system downtime\n\nCRITICAL REQUIREMENTS:\n- Test complete system startup from cold state\n- Validate service orchestration and dependency resolution\n- Test health checks across all services and databases\n- Validate migration recovery scenarios\n- Test port allocation and conflict resolution\n- Validate WebSocket endpoint registration\n- Test graceful shutdown and cleanup\n- Windows/Linux compatibility\n- Real services integration (no mocks for core flows)\n\nThis E2E test validates the entire system startup sequence including:\n1. Environment validation and configuration loading\n2. Database connectivity and migration validation\n3. Service startup orchestration (auth \u2192 backend \u2192 websocket coordination)\n4. Health check cascading and dependency validation\n5. Port allocation with conflict resolution\n6. Service discovery and registration\n7. WebSocket endpoint validation and real-time connectivity\n8. Graceful shutdown and resource cleanup\n\nMaximum 800 lines, comprehensive system validation.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_user_prompt_to_report_flow.py",
      "relative_path": "tests/e2e/test_complete_user_prompt_to_report_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL E2E TEST: Complete User Prompt to Report Generation Flow\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prove core value proposition works end-to-end\n- Value Impact: Users receive actionable AI insights that solve real problems\n- Strategic Impact: Core validation of $3M+ ARR business model\n\nThis test validates the COMPLETE business value chain:\nUser sends prompt \u2192 Agent processes \u2192 Tool execution \u2192 Final report with actionable insights\n\nREQUIREMENTS FROM CLAUDE.md:\n- NO MOCKS AT ALL - Uses REAL services only (WebSocket, Database, LLM)\n- Tests the 5 REQUIRED WebSocket events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n- Real authentication with JWT tokens via E2EAuthHelper\n- Complete flow validation with business value assessment\n- Report content quality validation\n- Performance timing validation under 2 minutes\n\nKEY ARCHITECTURAL COMPLIANCE:\n- Uses SSOT E2EAuthHelper for authentication\n- Uses IsolatedEnvironment per unified_environment_management.xml\n- Real WebSocket connections with actual backend\n- Validates WebSocket agent integration per websocket_agent_integration_critical.xml\n- Tests business value delivery, not just technical functionality\n\nANY FAILURE HERE INDICATES CORE VALUE PROPOSITION IS BROKEN.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_user_prompt_to_report_flow_enhanced.py",
      "relative_path": "tests/e2e/test_complete_user_prompt_to_report_flow_enhanced.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL E2E TEST: Enhanced Complete User Prompt to Report Generation Flow\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Prove core value proposition works end-to-end with enhanced validation\n- Value Impact: Users receive actionable AI insights that solve real problems\n- Strategic Impact: Core validation of $3M+ ARR business model with comprehensive testing\n\nThis test validates the COMPLETE business value chain with enhanced:\n1. Sophisticated business value scoring algorithms\n2. Comprehensive event sequence validation\n3. Performance profiling and monitoring\n4. Error scenario testing and edge cases\n5. Resource monitoring and cleanup\n\nREQUIREMENTS FROM CLAUDE.md:\n- NO MOCKS AT ALL - Uses REAL services only (WebSocket, Database, LLM)\n- Tests the 5 REQUIRED WebSocket events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n- Real authentication with JWT tokens via E2EAuthHelper\n- Complete flow validation with enhanced business value assessment\n- Report content quality validation with sophisticated algorithms\n- Performance timing validation under 2 minutes\n- Comprehensive error handling and edge case testing\n\nKEY ARCHITECTURAL COMPLIANCE:\n- Uses SSOT E2EAuthHelper for authentication\n- Uses IsolatedEnvironment per unified_environment_management.xml\n- Real WebSocket connections with actual backend\n- Validates WebSocket agent integration per websocket_agent_integration_critical.xml\n- Tests business value delivery with enhanced validation algorithms\n- Comprehensive resource monitoring and cleanup\n\nANY FAILURE HERE INDICATES CORE VALUE PROPOSITION IS BROKEN.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_complete_user_registration_login_flow.py",
      "relative_path": "tests/e2e/test_complete_user_registration_login_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Tests: Complete User Registration and Login Flow\n\nBusiness Value Justification (BVJ):\n- Segment: All (registration and login are fundamental to user acquisition)\n- Business Goal: Ensure new user onboarding works end-to-end\n- Value Impact: Registration/login failures prevent user acquisition and retention\n- Strategic Impact: User conversion funnel - failures directly impact revenue\n\nThis module tests the complete user registration and login flow with real services,\nincluding authentication, database persistence, and WebSocket connections.\n\nCRITICAL REQUIREMENTS per CLAUDE.md:\n- MUST use E2EAuthHelper for authentication (except auth validation tests)\n- Uses real services with Docker\n- NO MOCKS in E2E tests\n- Validates WebSocket events if testing agents\n- Uses SSOT E2E patterns\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_comprehensive_message_flow.py",
      "relative_path": "tests/e2e/test_comprehensive_message_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_comprehensive_stability_validation.py",
      "relative_path": "tests/e2e/test_comprehensive_stability_validation.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive System Stability and Resilience Validation Tests\n\nThis module provides enhanced tests for system stability, focusing on:\n- Circuit breaker resilience under real-world conditions\n- Service startup and dependency validation\n- Recovery mechanisms and graceful degradation\n- Flaky test detection and stability verification\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise & Platform\n- Business Goal: Ensure 99.9% uptime and reliable service recovery\n- Value Impact: Prevents revenue loss during failures and builds customer confidence\n- Strategic Impact: Protects potential $100K+ MRR through system stability\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_comprehensive_system_resilience_recovery.py",
      "relative_path": "tests/e2e/test_comprehensive_system_resilience_recovery.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive System Resilience and Recovery E2E Test\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise & Platform (Critical Business Continuity)\n- Business Goal: Ensure system availability and data integrity under all failure conditions\n- Value Impact: Prevents catastrophic downtime and ensures reliable service delivery\n- Strategic Impact: Enables confident scaling and deployment with proven resilience\n- Revenue Impact: Protects against $1M+ potential revenue loss from system-wide failures\n\nCRITICAL REQUIREMENTS:\n- Test complete system failure and recovery scenarios\n- Validate circuit breaker activation and recovery across all services\n- Test cascading failure prevention and service isolation\n- Validate data integrity preservation during failures\n- Test load balancing and failover mechanisms\n- Validate graceful degradation under resource constraints\n- Test disaster recovery procedures and rollback capabilities\n- Test system monitoring and alerting during failures\n- Windows/Linux compatibility for all resilience mechanisms\n\nThis E2E test validates comprehensive system resilience including:\n1. Service failure isolation and circuit breaker activation\n2. Cascading failure prevention and dependency management\n3. Load balancing and automatic failover mechanisms\n4. Data integrity preservation during partial system failures\n5. Resource exhaustion handling and graceful degradation\n6. Network partition tolerance and split-brain prevention\n7. Disaster recovery procedures and system restoration\n8. Monitoring and alerting system validation under stress\n\nMaximum 1100 lines, comprehensive resilience validation.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_cors_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_cors_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive CORS E2E Tests for Final Implementation Agent\nfrom shared.isolated_environment import get_env\nfrom shared.isolated_environment import IsolatedEnvironment\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure cross-origin communication works for frontend-backend integration\n3. Value Impact: Critical for web application functionality across all tiers\n4. Revenue Impact: Prevents customer access issues that could result in churn\n\nTest Coverage:\n- Development environment CORS (localhost origins)\n- Staging environment CORS (staging domains)\n- Production environment CORS (production domains)\n- WebSocket CORS validation\n- Error scenarios (blocked origins)\n- Multi-service CORS consistency\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_dev_launcher_startup_comprehensive.py",
      "relative_path": "tests/e2e/test_dev_launcher_startup_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_dev_mode_comprehensive_suite.py",
      "relative_path": "tests/e2e/test_dev_mode_comprehensive_suite.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_error_scenarios_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_error_scenarios_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Error Scenarios and Edge Cases E2E Tests\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure system resilience and graceful error handling\n3. Value Impact: Prevents customer frustration and maintains system reliability\n4. Revenue Impact: Reduces churn from system failures and improves user experience\n\nTest Coverage:\n- Network connectivity failures\n- Database connection errors\n- Service unavailability scenarios\n- Invalid input handling\n- Rate limiting behavior\n- Resource exhaustion scenarios\n- Authentication/authorization failures\n- Malformed request handling\n- Timeout scenarios\n- Recovery mechanisms\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_golden_path_real_agent_validation.py",
      "relative_path": "tests/e2e/test_golden_path_real_agent_validation.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Golden Path Real Agent Validation\n\nMISSION CRITICAL: This test validates that the golden path user flow ONLY uses real agents\nand NEVER creates fallback handlers that degrade business value.\n\nPURPOSE: Expose the \"dumb fallback handler\" anti-pattern by testing complete user flows\nand ensuring only authentic AI agent responses are delivered to users.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure golden path delivers only authentic AI agent value\n- Value Impact: Prevent degraded mock responses from reaching paying customers\n- Strategic Impact: Protect $500K+ ARR by ensuring real AI value delivery\n\nCRITICAL: This test must FAIL if any fallback handlers are used in the golden path.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_golden_path_system_auth_fix.py",
      "relative_path": "tests/e2e/test_golden_path_system_auth_fix.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path E2E Test Suite for System Authentication Fix\n\nCRITICAL: These E2E tests validate the complete golden path user flow \nworks properly after the system user authentication fix (GitHub Issue #115).\n\nPurpose: Ensure that authentication failures don't block business value delivery\nand that WebSocket agent events work with proper system user authentication.\n\nBusiness Value: All Customer Segments - Revenue Protection & User Experience\n- Restores complete golden path user flows that generate revenue\n- Enables WebSocket agent events that deliver AI value to users  \n- Ensures system appears functional and valuable to users\n- Validates business-critical chat functionality works end-to-end\n\nIMPORTANT: These tests follow CLAUDE.md requirements:\n- Use real services and authentication flows (marked @pytest.mark.real_services)\n- No mocks in E2E testing - must use actual auth, WebSocket, database\n- Must show measurable execution time (not 0.00s) \n- Extend SSotBaseTestCase for SSOT compliance\n- Must include WebSocket agent events per CLAUDE.md Section 6\n\nExpected Results:\nBEFORE FIX: Tests WILL FAIL due to system user authentication blocking flows\nAFTER FIX: Tests MUST PASS with complete golden path working end-to-end\n",
      "test_methods": [
        "test_authentication_configuration_health"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_golden_path_websocket_chat.py",
      "relative_path": "tests/e2e/test_golden_path_websocket_chat.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path WebSocket Chat Tests - CRITICAL Business Value Validation\n\nBusiness Value Justification:\n- Segment: Free, Early, Mid, Enterprise - Core Chat Functionality\n- Business Goal: Validate complete Golden Path user flow works end-to-end\n- Value Impact: Ensures $120K+ MRR chat-based AI interactions function properly\n- Revenue Impact: Prevents complete business value delivery failure\n\nCRITICAL TEST PURPOSE:\nThese tests validate the complete Golden Path user flow as defined in \nGOLDEN_PATH_USER_FLOW_COMPLETE.md - the core business value delivery mechanism.\n\nGolden Path Components Tested:\n1. User sends message \u2192 receives agent response (core chat functionality)\n2. Agent execution with WebSocket events (real-time progress)\n3. Tool execution WebSocket notifications (transparency) \n4. Complete chat session persistence (session management)\n5. WebSocket agent thinking events (user engagement)\n\nROOT CAUSE PREVENTION:\nThese tests would have caught the GCP Load Balancer authentication header \nstripping issue by validating end-to-end WebSocket-based chat functionality.\n\nCLAUDE.MD BUSINESS VALUE COMPLIANCE:\nSection 1.1 - \"Chat\" Business Value: Real Solutions, Helpful, Timely, Complete Business Value\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_message_flow_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_message_flow_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Message Flow E2E Tests - Real Services Implementation\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure message routing and processing works end-to-end\n3. Value Impact: Critical for user interactions and agent communication\n4. Revenue Impact: Core functionality that enables all platform value delivery\n\nCRITICAL: Uses REAL services only per Claude.md - no mocks allowed\n- Real WebSocket connections\n- Real LLM processing  \n- Real databases (PostgreSQL, Redis)\n- Real agent service integration\n\nTest Coverage:\n- Message routing through WebSocket\n- Request-response patterns with real agents\n- Message queuing and ordering\n- Error message propagation\n- Multi-user message isolation\n- Message persistence and recovery\n- Rate limiting on messages\n- Message authentication and authorization\n- Cross-service message routing\n- Message format validation\n- Critical WebSocket events: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_model_processing_comprehensive.py",
      "relative_path": "tests/e2e/test_model_processing_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_oauth_complete_staging_flow.py",
      "relative_path": "tests/e2e/test_oauth_complete_staging_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_page_refresh_comprehensive.py",
      "relative_path": "tests/e2e/test_page_refresh_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_staging_e2e_comprehensive.py",
      "relative_path": "tests/e2e/test_staging_e2e_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_startup_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_startup_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive Startup E2E Tests for Final Implementation Agent\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure system startup reliability and service initialization\n3. Value Impact: Critical for system availability and customer access\n4. Revenue Impact: Prevents downtime that could result in customer churn and revenue loss\n\nTest Coverage:\n- Service startup sequence validation\n- Database connectivity verification\n- Configuration loading validation\n- Health check endpoints\n- Service discovery and registration\n- Error handling during startup\n- Recovery from startup failures\n- Resource initialization\n- Dependency validation\n- Environment configuration\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_token_validation_comprehensive.py",
      "relative_path": "tests/e2e/test_token_validation_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_websocket_comprehensive.py",
      "relative_path": "tests/e2e/test_websocket_comprehensive.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_websocket_comprehensive_e2e.py",
      "relative_path": "tests/e2e/test_websocket_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive WebSocket E2E Test Suite for Netra Apex\n\nCRITICAL CONTEXT: WebSocket Communication Coverage\nComprehensive E2E tests for WebSocket workflows covering connection lifecycle,\nmessage routing, multi-user scenarios, and error handling.\n\nBusiness Value Justification (BVJ):\n1. Segment: All customer segments (Free, Early, Mid, Enterprise)\n2. Business Goal: Ensure real-time communication reliability\n3. Value Impact: Direct impact on user experience and agent responsiveness\n4. Revenue Impact: Critical for real-time AI optimization features\n\nModule Architecture Compliance: Under 300 lines, functions under 8 lines\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_websocket_graceful_degradation_golden_path.py",
      "relative_path": "tests/e2e/test_websocket_graceful_degradation_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Tests: WebSocket Graceful Degradation Golden Path\n\nBusiness Value Justification:\n- Segment: All Customer Segments\n- Business Goal: Revenue Protection & User Experience \n- Value Impact: Validates $500K+ ARR protection during service outages\n- Strategic Impact: Ensures Golden Path Critical Issue #2 resolution\n\nThis E2E test validates the complete graceful degradation flow:\n1. WebSocket connection with missing services\n2. Activation of graceful degradation instead of hard failure  \n3. User receives fallback responses maintaining engagement\n4. Service recovery detection and transition to full functionality\n5. Business continuity - users never experience complete service failure\n\n\ud83d\udea8 MISSION CRITICAL: These tests validate revenue protection mechanisms.\nIf these tests fail, the $500K+ ARR chat functionality is at risk during outages.\n\nGolden Path Flow Tested:\n```\nWebSocket Connection \u2192 Services Available? \n  \u2192 Supervisor Ready? \u2192 No \u2192 Wait 500ms x 3 \u2192 Still No \u2192 Create Fallback Handler \u2192 Limited Functionality\n  \u2192 Thread Service Ready? \u2192 No \u2192 Wait 500ms x 3 \u2192 Still No \u2192 Create Fallback Handler \u2192 Limited Functionality\n```\n",
      "test_methods": [
        "test_user_jwt"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/test_websocket_race_conditions_golden_path.py",
      "relative_path": "tests/e2e/test_websocket_race_conditions_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Race Conditions Golden Path E2E Tests - Phase 3 Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Validate complete user chat experience without race conditions\n- Value Impact: Ensures core chat value delivery is reliable, protecting $500K+ ARR\n- Strategic/Revenue Impact: Protects primary business value delivery mechanism\n\nCRITICAL E2E REQUIREMENTS (CLAUDE.md Compliance):\n\u2705 FEATURE FREEZE: Only validates existing features work correctly\n\u2705 NO MOCKS ALLOWED: Real Docker services, real WebSocket, real authentication\n\u2705 MANDATORY E2E AUTH: All tests use create_authenticated_user_context()\n\u2705 MISSION CRITICAL EVENTS: All 5 WebSocket events validated in every test\n\u2705 COMPLETE WORK: Full golden path user workflows with business value delivery\n\u2705 SYSTEM STABILITY: Proves no breaking changes introduced\n\nROOT CAUSE ADDRESSED:\n- WebSocket 1011 errors in Cloud Run staging environments\n- Race conditions in rapid WebSocket connection scenarios\n- Missing business-critical WebSocket events breaking user chat\n- Multi-user concurrent chat sessions with isolation failures\n\nFULL SYSTEM REQUIREMENTS (Real Everything):\n- Full Docker stack (Backend, Auth, PostgreSQL, Redis)\n- Real WebSocket connections with proper authentication\n- Real agent execution with complete tool dispatching\n- Real business value delivery validation under stress\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket/test_complete_agent_execution_with_events.py",
      "relative_path": "tests/e2e/websocket/test_complete_agent_execution_with_events.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E Test: Complete Agent Execution with WebSocket Events\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - WebSocket events are core to user experience\n- Business Goal: Ensure complete agent execution pipeline delivers all required WebSocket events\n- Value Impact: Users must receive complete real-time feedback during agent execution for business value\n- Strategic Impact: Core platform functionality that enables meaningful AI interactions\n\nThis E2E test validates:\n- Complete agent execution workflow with real authentication (JWT/OAuth)\n- All 5 critical WebSocket events are delivered in correct order\n- Real LLM integration with proper event emission\n- End-to-end user journey with actual business value delivery\n- Full stack integration including database persistence and audit trail\n\nCRITICAL: Uses REAL services, REAL authentication, NO mocking allowed\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket/test_complete_chat_business_value_flow.py",
      "relative_path": "tests/e2e/websocket/test_complete_chat_business_value_flow.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "E2E TEST: Complete Chat Business Value Flow - REAL SERVICES ONLY\n\nTHIS IS AN E2E TEST THAT VALIDATES THE COMPLETE BUSINESS VALUE CHAIN\n\nBusiness Value Justification:\n- Segment: Free, Early, Mid, Enterprise - ALL customer segments\n- Business Goal: Conversion & Retention - Complete chat experience drives upgrades\n- Value Impact: Validates end-to-end AI chat functionality that generates 90% of platform value\n- Strategic Impact: Protects the complete user journey from message to actionable AI insights\n\nThis test validates the COMPLETE business value chain:\n1. User sends message via WebSocket\n2. Agent execution starts with proper WebSocket events  \n3. All 5 critical WebSocket events delivered (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)\n4. User receives substantive AI response with actionable insights\n5. Business IP protection - no \"secrets\" exposed to user\n6. Complete readable response delivered to user\n\nPer CLAUDE.md: \"Chat is King - SUBSTANTIVE VALUE\" and \"WebSocket events enable substantive chat interactions\"\nPer CLAUDE.md: \"Real Solutions, Helpful, Timely, Complete Business Value, Data Driven, Business IP\"\nPer CLAUDE.md: \"MOCKS = Abomination\" - Only real services, real WebSocket, real agents, real LLM\n\nSUCCESS CRITERIA:\n- Complete user message \u2192 AI response flow works end-to-end\n- All WebSocket agent events delivered in proper sequence\n- AI response contains actionable business insights\n- Response time meets user experience requirements (< 30 seconds)\n- Multi-user isolation maintained during concurrent chats\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket/test_gcp_race_condition_comprehensive_e2e.py",
      "relative_path": "tests/e2e/websocket/test_gcp_race_condition_comprehensive_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E TESTS: GCP WebSocket Race Condition Comprehensive End-to-End Validation\n\nCRITICAL E2E SUITE: These tests validate the complete WebSocket race condition fix\nin a full system environment using real services and authentic authentication.\nThis is the ULTIMATE validation that the race condition fix works in production-like scenarios.\n\nTARGET VALIDATION:\n1. Real WebSocket connections with Redis race condition fix\n2. Authentic authentication flows with JWT/OAuth\n3. Full MESSAGE ROUTING functionality with timing measurements\n4. GCP staging environment simulation with real service timing\n5. WebSocket 1011 error elimination validation\n\nTEST MISSION:\n- Test actual WebSocket connections with real services\n- Validate MESSAGE ROUTING works with race condition fix\n- Test GCP staging environment simulation\n- Ensure NO 1011 WebSocket errors occur\n- Validate complete AI chat functionality pipeline\n\nBusiness Value:\n- Ultimate validation that WebSocket connections work reliably\n- Ensures core AI chat functionality is preserved\n- Validates architectural fix prevents production failures\n- Confirms MESSAGE ROUTING reliability\n\nCRITICAL E2E REQUIREMENTS:\n- MUST use real services (--real-services flag)\n- MUST use authentic authentication (no mocks)\n- MUST test actual WebSocket connections\n- MUST validate complete message routing pipeline\n\nSSOT COMPLIANCE: Uses test_framework/ssot/e2e_auth_helper.py for authentication\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket/test_websocket_race_conditions_golden_path.py",
      "relative_path": "tests/e2e/websocket/test_websocket_race_conditions_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWebSocket Race Conditions Golden Path E2E Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate complete user chat experience works without race conditions\n- Value Impact: Ensures core chat value delivery is reliable, protecting $500K+ ARR\n- Strategic/Revenue Impact: Protects primary business value delivery mechanism\n\nROOT CAUSE ADDRESSED:\n- Complete end-to-end validation of race condition fixes in production-like environment\n- WebSocket 1011 errors in Cloud Run environments causing user experience failures\n- Missing business-critical WebSocket events breaking user chat interactions  \n- Service dependency race conditions affecting system reliability\n\nCRITICAL E2E TESTING FOCUS:\n1. Complete golden path chat sessions without race conditions\n2. Multi-user concurrent chat sessions with proper isolation\n3. Real agent workflow timing and WebSocket event delivery\n4. Chat session recovery after timing issues\n5. Business value delivery validation under stress conditions\n\nFULL SYSTEM REQUIREMENTS (Real Everything):\n- Full Docker stack (Backend, Auth, PostgreSQL, Redis)\n- Real LLM integration for agent responses\n- Real WebSocket connections with authentication\n- Real agent execution with tool dispatching\n- Real business value delivery validation\n\nThis E2E test ensures the complete user chat experience works reliably\nin production-like conditions, validating that race condition fixes protect\nthe core business value delivery mechanism.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket_core/test_complete_websocket_agent_flow_e2e.py",
      "relative_path": "tests/e2e/websocket_core/test_complete_websocket_agent_flow_e2e.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nE2E tests for Complete WebSocket Agent Flow - Testing end-to-end AI agent interactions via WebSocket.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: End-to-end AI chat functionality validation\n- Value Impact: Ensures complete user journey from message to AI response works flawlessly\n- Strategic Impact: Core business value delivery - validates the entire AI chat pipeline\n\nThese E2E tests validate the complete user journey: authentication \u2192 WebSocket connection \n\u2192 agent request \u2192 real-time updates \u2192 AI response delivery with full business context.\n\nCRITICAL: All E2E tests MUST use authentication as per CLAUDE.md requirements.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/e2e/websocket_message_routing/test_websocket_message_to_agent_golden_path.py",
      "relative_path": "tests/e2e/websocket_message_routing/test_websocket_message_to_agent_golden_path.py",
      "category": "e2e",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nCRITICAL WebSocket Message to Agent Execution Golden Path E2E Test\n\nBusiness Value Justification (BVJ):\n- Segment: All customer tiers (Free, Early, Mid, Enterprise) - $500K+ ARR protection\n- Business Goal: Validate complete WebSocket message routing to agent execution flow\n- Value Impact: Ensures core business functionality - chat interactions that deliver AI value\n- Strategic Impact: Mission critical infrastructure for substantive chat experience\n\nCRITICAL: This test validates the complete golden path from user message to agent execution\nwith all 5 required WebSocket events. This represents 90% of our delivered business value.\n\nTest Scope:\n1. WebSocket connection with JWT authentication\n2. User message routing to AgentHandler \n3. Agent execution pipeline with sub-agents\n4. All 5 critical WebSocket events validation\n5. Complete flow from GOLDEN_PATH_USER_FLOW_COMPLETE.md\n\nExpected Result: This test SHOULD FAIL initially to prove current issues exist.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/five_whys/test_comprehensive_five_whys_coverage.py",
      "relative_path": "tests/five_whys/test_comprehensive_five_whys_coverage.py",
      "category": "unknown",
      "service": "global",
      "test_count": 6,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nFive Whys Comprehensive Coverage Test Suite - WHY #4 & WHY #5\n\nThis test suite provides comprehensive coverage for WHY #4 (Process Gaps) and\nWHY #5 (Root Cause) from the Five Whys analysis, ensuring complete validation\nof the Error Detective's fixes across all SupervisorAgent.create() usage patterns\nand future regression prevention.\n\nCRITICAL: Tests validate comprehensive coverage and regression prevention\nfor the WebSocket supervisor \"name\" parameter error across the entire codebase.\n\nWHY #4 - PROCESS GAP: Testing gaps missed SupervisorAgent.create() signature changes\n- Coverage for ALL SupervisorAgent.create() calls in the codebase\n- Validation of test patterns that catch signature changes\n- Process improvements that prevent testing gaps\n\nWHY #5 - ROOT CAUSE: Interface evolution without dependency management\n- Interface governance preventing future parameter naming inconsistencies\n- Automated validation of interface contracts\n- Regression prevention for interface evolution\n",
      "test_methods": [
        "test_why_4_all_supervisor_create_calls_coverage",
        "test_why_4_test_pattern_signature_change_detection",
        "test_why_4_process_improvement_validation_coverage",
        "test_why_5_interface_evolution_governance_standards",
        "test_why_5_regression_prevention_automation",
        "test_comprehensive_five_whys_validation_complete"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/five_whys/test_five_whys_websocket_supervisor_comprehensive.py",
      "relative_path": "tests/five_whys/test_five_whys_websocket_supervisor_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 11,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Five Whys WebSocket Supervisor Test Suite\n\nBusiness Value Justification:\n- Segment: Platform/Internal \n- Business Goal: Prevent systematic architecture failures and ensure complete interface governance\n- Value Impact: Validates that the root cause fix prevents WebSocket supervisor parameter mismatch failures\n- Strategic Impact: Ensures the underlying interface evolution governance prevents entire classes of failures\n\nThis test suite implements the FIVE WHYS methodology to validate fixes at each level\nof the WebSocket supervisor creation failure analysis. Each WHY level has dedicated\ntest classes that verify the specific fix implemented at that level.\n\nROOT CAUSE IDENTIFIED: Inadequate interface evolution governance causing parameter \nname mismatches between factory methods and constructors.\n\nTEST ARCHITECTURE:\n- WHY #1: Error handling improvements (symptom level)\n- WHY #2: Parameter standardization validation (immediate cause level)\n- WHY #3: Factory pattern consistency checking (system failure level)\n- WHY #4: Development process improvement validation (process gap level)\n- WHY #5: Interface evolution governance validation (root cause level)\n\nCRITICAL: All tests use REAL services, REAL authentication, and REAL WebSocket connections.\nNO MOCKS are allowed in this comprehensive validation suite.\n",
      "test_methods": [
        "test_factory_interface_contract_validation",
        "test_factory_parameter_mapping_consistency",
        "test_pre_commit_interface_validation_available",
        "test_interface_consistency_checking_tools",
        "test_change_impact_analysis_framework",
        "test_code_review_process_documentation",
        "test_interface_evolution_governance_framework",
        "test_interface_change_approval_process",
        "test_audit_trail_capabilities",
        "test_rollback_capabilities",
        "test_systematic_governance_prevention"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/five_whys/test_websocket_routing_validation_comprehensive.py",
      "relative_path": "tests/five_whys/test_websocket_routing_validation_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\n\ud83d\ude80 WEBSOCKET MESSAGE ROUTING VALIDATION SPECIALIST\n\nComplete WebSocket message routing validation after FIVE WHYS fixes implementation.\n\nBusiness Value Justification:\n- Segment: Platform/Internal (Core Infrastructure)\n- Business Goal: Ensure complete message routing success from WebSocket to agent execution\n- Value Impact: Validates that the root cause fix prevents WebSocket supervisor parameter mismatch failures\n- Strategic Impact: Enables the 90% of business value delivered through chat functionality\n\nThis test suite validates that WebSocket message routing works flawlessly end-to-end\nafter the FIVE WHYS analysis fixes have been implemented. Specifically validates:\n\n1. WebSocket Connection Establishment Success\n2. Supervisor Creation Success with Fixed Parameters  \n3. Complete Message Routing Chain: WebSocket \u2192 Handler \u2192 Supervisor \u2192 Agent\n4. Multi-User Isolation Maintenance\n5. Real-Time Agent Communication \n6. Original Error Scenario Resolution\n\nCRITICAL: All tests use REAL services, REAL authentication, and REAL WebSocket connections.\nNO MOCKS are allowed in this comprehensive validation suite.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/configuration/test_configuration_drift_monitoring_comprehensive.py",
      "relative_path": "tests/integration/configuration/test_configuration_drift_monitoring_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Configuration Drift Monitoring Test Suite - MISSION CRITICAL VALIDATION\n\nThis test suite validates the complete configuration drift monitoring system\nto ensure it prevents recurrence of the WebSocket authentication failures\nthat affected $120K+ MRR staging environment.\n\nTest Coverage:\n1. E2E OAuth simulation key consistency detection\n2. JWT secret alignment monitoring between services\n3. WebSocket authentication configuration coherence validation\n4. Real-time drift detection with business impact calculation\n5. Alert system integration with multiple channels\n6. Automated remediation trigger capabilities\n7. Executive escalation for high-impact incidents\n\nCRITICAL VALIDATION: These tests must pass to ensure the monitoring system\ncan detect and prevent the specific configuration drift patterns that caused\nthe original authentication cascade failures.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_agent_execution_pipeline_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_agent_execution_pipeline_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for Golden Path P0 Agent Execution Pipeline Flow\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Validate core AI-powered conversation delivery through agent orchestration\n- Value Impact: Ensures agent pipeline delivers substantive AI insights and recommendations\n- Strategic Impact: Core platform functionality that enables business value through AI optimization\n\nCRITICAL: These tests validate the complete business flow from user request to delivered value:\n1. User submits optimization request \u2192 Agent execution starts\n2. ExecutionEngineFactory creates isolated engine \u2192 User isolation guaranteed  \n3. SupervisorAgent orchestrates sub-agents \u2192 Pipeline coordination working\n4. Agents execute in correct order \u2192 Data \u2192 Optimization \u2192 Reporting\n5. WebSocket events stream progress \u2192 User sees AI working on their problem\n6. Final response delivered \u2192 User receives actionable business insights\n\nThis test suite validates the complete golden path that delivers our core business value.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_agent_pipeline_integration.py",
      "relative_path": "tests/integration/golden_path/test_agent_pipeline_integration.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Real Service Integration Test for Golden Path Agent Pipeline\n\nCRITICAL REAL SERVICE INTEGRATION: This validates the complete agent execution pipeline\nwith REAL WebSocket connections, REAL agent execution, REAL authentication flows.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure agent pipeline delivers accurate business insights to users\n- Value Impact: Broken pipeline = no cost optimization recommendations = revenue loss\n- Strategic Impact: Core AI value delivery system for $500K+ ARR platform\n\nREAL SERVICE INTEGRATION POINTS:\n1. Real authentication flows with JWT tokens\n2. Real WebSocket connections and event validation\n3. Real agent execution with actual LLM calls\n4. Real tool dispatcher and tool execution\n5. Real multi-user isolation and concurrent sessions\n6. Real error handling with actual failure scenarios\n7. Real Golden Path pipeline: Data \u2192 Optimization \u2192 Report\n\nCLAUDE.md COMPLIANCE: ZERO MOCKS - ALL REAL SERVICE INTEGRATION\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_data_persistence_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_data_persistence_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Comprehensive Data Persistence for Golden Path P0 Business Continuity\n\nCRITICAL INTEGRATION TEST: This validates the complete data persistence lifecycle\nacross PostgreSQL database and Redis cache for P0 golden path business continuity.\nTests real data flows, multi-user isolation, performance requirements, and\ncomplete data integrity validation.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure zero data loss and business continuity across all user interactions\n- Value Impact: Lost conversations = lost business insights = user churn = revenue loss\n- Strategic Impact: Foundation for $500K+ ARR platform trust and reliability\n\nCOMPREHENSIVE DATA PERSISTENCE FLOWS TESTED:\n1. Thread and conversation persistence across all session scenarios\n2. User message and agent response storage with complete retrieval integrity\n3. Agent execution result persistence with full auditability chain\n4. User session state persistence in Redis with failover validation\n5. Multi-user data isolation with complete boundary verification\n6. Database transaction integrity with rollback and recovery scenarios\n7. Redis cache invalidation and consistency with PostgreSQL synchronization\n8. Large conversation history storage with performance validation\n9. User preferences and profile data persistence across services\n10. Agent tool execution result caching with retrieval performance\n11. Cross-service data synchronization (auth \u2194 backend \u2194 cache)\n12. Database connection pooling with concurrent access validation\n13. Data backup scenarios and recovery validation\n14. Cache eviction and memory management validation\n15. Real-time data updates with notification propagation\n\nMUST use REAL PostgreSQL (port 5434) and REAL Redis (port 6381) - NO MOCKS per CLAUDE.md\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_database_persistence_integration.py",
      "relative_path": "tests/integration/golden_path/test_database_persistence_integration.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Database Persistence Integration for Golden Path\n\nCRITICAL INTEGRATION TEST: This validates database persistence across all Golden Path\nexit points with real PostgreSQL integration for data integrity and business continuity.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure conversation data and insights are never lost\n- Value Impact: Lost data = lost business insights and user frustration  \n- Strategic Impact: Data reliability foundation for $500K+ ARR platform trust\n\nINTEGRATION POINTS TESTED:\n1. Thread persistence across all exit points (normal, error, timeout, disconnect)\n2. Message history storage with user isolation\n3. Agent execution results storage and retrieval\n4. Database cleanup on user disconnection\n5. Multi-user data isolation validation\n6. Performance and timing requirements\n\nMUST use REAL PostgreSQL - NO MOCKS per CLAUDE.md standards\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_error_handling_edge_cases_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_error_handling_edge_cases_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Integration Tests for Golden Path P0 Error Handling and Edge Cases\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - System resilience affects all users\n- Business Goal: Ensure system resilience and graceful degradation under adverse conditions\n- Value Impact: Users continue receiving value even when infrastructure components fail\n- Strategic Impact: Production stability and customer trust through robust error handling\n\nCRITICAL: These tests validate golden path resilience - the system's ability to provide \nbusiness value even when individual components fail. This ensures customer satisfaction\nand business continuity under real-world production conditions.\n\nTests cover 15+ critical error scenarios:\n1. Service dependency failures (Redis down, PostgreSQL down, Auth service down)\n2. WebSocket connection failures and recovery patterns  \n3. Agent execution timeouts and cancellation scenarios\n4. Database connection pool exhaustion and recovery\n5. Redis cache eviction and fallback to database\n6. Large message payload handling and size limit enforcement\n7. Concurrent user limits and backpressure scenarios\n8. Network interruptions and reconnection handling\n9. Invalid user inputs and malicious payload detection\n10. Service startup sequence failures and degraded mode operation\n11. Memory pressure scenarios and resource cleanup\n12. Agent LLM API failures and fallback strategies\n13. Cross-service authentication failures and retry logic\n14. Data corruption detection and recovery\n15. System overload scenarios and circuit breaker activation\n\nEach test uses REAL service disruption (not mocks) to validate actual resilience.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_golden_path_complete_e2e_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_golden_path_complete_e2e_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGOLDEN PATH COMPLETE E2E COMPREHENSIVE TEST SUITE - CRITICAL P0 BUSINESS VALUE VALIDATION\n=========================================================================================\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Development Velocity  \n- Business Goal: Platform Reliability & Revenue Protection ($500K+ ARR)\n- Value Impact: Validates complete golden path user journey from authentication to business insights delivery\n- Strategic/Revenue Impact: Prevents critical failures affecting 90% of user-delivered value through chat functionality\n\nCOMPLETE GOLDEN PATH FLOW VALIDATION:\n1. User opens chat interface \u2192 Connection established\n2. JWT authentication \u2192 UserExecutionContext created  \n3. WebSocket ready \u2192 Welcome message sent\n4. User sends optimization request \u2192 Message routed to AgentHandler\n5. ExecutionEngineFactory creates isolated engine \u2192 SupervisorAgent orchestrates\n6. Agent Triage \u2192 Data Helper Agent \u2192 Optimization Agent \u2192 UVS/Reporting Agent\n7. All 5 WebSocket events sent \u2192 Tools executed \u2192 Results compiled\n8. Final response with business value \u2192 Conversation persisted to database\n9. User session maintained \u2192 Redis cache updated \u2192 Complete cleanup\n\nCRITICAL REQUIREMENTS:\n- All tests MUST use real services (PostgreSQL, Redis, WebSocket, Auth, Backend)\n- All tests MUST use SSOT authentication patterns from test_framework/ssot/e2e_auth_helper.py\n- All tests MUST validate complete end-to-end business value delivery\n- All tests MUST include proper Business Value Justification comments\n- All tests MUST validate the complete 5 mission-critical WebSocket events\n- All tests MUST test realistic enterprise scenarios with production-level data\n\nDEPLOYMENT BLOCKER: ANY FAILURE IN THIS SUITE BLOCKS PRODUCTION DEPLOYMENT\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_golden_path_suite_validation.py",
      "relative_path": "tests/integration/golden_path/test_golden_path_suite_validation.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nGolden Path Test Suite Validation and Execution Summary\n\nCRITICAL VALIDATION SUITE: This validates that the complete golden path test suite\nis properly implemented, follows SSOT patterns, and provides comprehensive coverage\nof all P0 business value scenarios.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Test infrastructure protects all revenue\n- Business Goal: Ensure test suite comprehensively protects business value and prevents regressions\n- Value Impact: Comprehensive testing = reliable service = customer retention = revenue protection\n- Strategic Impact: Test suite quality directly impacts $500K+ ARR protection and growth\n\nVALIDATION AREAS:\n1. Test suite completeness and coverage analysis\n2. SSOT pattern compliance validation\n3. Real services integration verification\n4. WebSocket event validation coverage\n5. Authentication flow testing coverage\n6. Platform compatibility testing coverage\n7. Regression detection capability validation\n8. Performance threshold compliance\n9. Business value delivery validation\n10. Test execution infrastructure validation\n\nThis suite serves as the final validation that our golden path tests protect business operations.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_redis_cache_integration.py",
      "relative_path": "tests/integration/golden_path/test_redis_cache_integration.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Redis Cache Integration for Golden Path\n\nCRITICAL INTEGRATION TEST: This validates Redis caching integration for session state,\nWebSocket connections, and agent results with proper performance and isolation.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure fast session management and result caching for user experience\n- Value Impact: Slow caching = poor user experience = reduced engagement\n- Strategic Impact: Performance foundation for scalable $500K+ ARR platform\n\nINTEGRATION POINTS TESTED:\n1. Session state caching and retrieval\n2. WebSocket connection state in Redis\n3. Agent results caching for performance\n4. Cache cleanup on session termination\n5. Multi-user cache isolation\n6. Performance requirements (< 100ms operations)\n\nMUST use REAL Redis - NO MOCKS per CLAUDE.md standards\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_regression_detection_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_regression_detection_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Regression Detection Tests for Golden Path P0 Business Continuity\n\nCRITICAL REGRESSION PREVENTION: This validates system stability and prevents\nregressions that could cause business disruption, revenue loss, or customer churn.\nFocuses on P0 golden path regression scenarios that have historically caused issues.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Prevent business-disrupting regressions and maintain service reliability\n- Value Impact: Regressions = service downtime = customer churn = direct revenue loss\n- Strategic Impact: Regression prevention essential for $500K+ ARR protection and growth\n\nCRITICAL REGRESSION SCENARIOS TO DETECT:\n1. Authentication flow regressions (login/logout/session management)\n2. Agent execution pipeline regressions (agent orchestration failures)\n3. WebSocket connection and event delivery regressions\n4. Database persistence and data integrity regressions  \n5. Performance degradation regressions (response time increases)\n6. Cross-service integration regressions (auth\u2194backend\u2194cache)\n7. Configuration and environment variable regressions\n8. API contract and interface regressions\n9. Error handling and recovery mechanism regressions\n10. Multi-user isolation and security boundary regressions\n\nThis suite acts as a comprehensive regression safety net with business impact analysis.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_user_authentication_flow_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_user_authentication_flow_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Comprehensive Golden Path P0 User Authentication Flow Integration\n\nCRITICAL INTEGRATION TEST SUITE: This validates the complete P0 user authentication\njourney with real services for the golden path user flow that delivers $500K+ ARR.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Secure, performant authentication foundation for AI chat platform\n- Value Impact: Authentication failures = 100% loss of chat functionality = $0 revenue\n- Strategic Impact: Security, user trust, and scalability foundation for business growth\n\nGOLDEN PATH P0 INTEGRATION POINTS TESTED:\n1. JWT token validation and user context creation with real auth service\n2. Session management and persistence across requests with Redis\n3. Multi-user isolation during authentication (prevents data leakage)\n4. OAuth flow completion and token refresh mechanisms\n5. Authentication error handling and recovery patterns\n6. Cross-service authentication propagation (auth service \u2192 backend)\n7. Session state synchronization between services\n8. Authentication middleware order validation\n9. User profile and preferences loading\n10. Authentication timeout and expiration handling\n\nBUSINESS CRITICAL: Must use REAL services - NO MOCKS per CLAUDE.md requirements.\nThis test suite ensures the authentication foundation can support enterprise customers.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_websocket_auth_integration.py",
      "relative_path": "tests/integration/golden_path/test_websocket_auth_integration.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Authentication Integration for Golden Path\n\nCRITICAL INTEGRATION TEST: This validates the complete WebSocket authentication flow\nwith real Auth service integration that enables secure Golden Path user connections.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Secure authentication foundation for $500K+ ARR chat platform\n- Value Impact: Authentication failures = complete loss of chat functionality\n- Strategic Impact: Security and user trust foundation for business growth\n\nINTEGRATION POINTS TESTED:\n1. JWT token validation with real Auth service\n2. WebSocket connection establishment with authentication headers\n3. User context creation and factory initialization  \n4. Authentication failure handling and error responses\n5. Multi-user authentication isolation\n\nMUST use REAL services - NO MOCKS in integration tests per CLAUDE.md\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_websocket_message_handling_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_websocket_message_handling_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Golden Path WebSocket Message Handling Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Ensure reliable real-time AI chat interactions\n- Value Impact: WebSocket events enable substantive AI value delivery to users\n- Strategic Impact: Core platform capability - $500K+ ARR dependency\n\nCRITICAL: This tests the WebSocket infrastructure that enables AI chat business value.\nWithout reliable WebSocket message handling, the platform cannot deliver:\n- Real-time agent reasoning visibility (agent_thinking events)\n- Tool execution transparency (tool_executing/tool_completed events) \n- Agent completion notifications (agent_completed events)\n- User engagement through live interaction feedback\n\nTEST AREAS COVERED (15 Critical Areas):\n1. WebSocket connection establishment and handshake validation\n2. Authentication handshake with JWT tokens over WebSocket\n3. Message routing and handler delegation (AgentHandler selection)\n4. Real-time event streaming and delivery validation\n5. Connection state management and heartbeat monitoring  \n6. Multi-user WebSocket isolation and concurrent connections\n7. Message queue processing and priority handling\n8. WebSocket error handling and reconnection logic\n9. Race condition handling during connection/message processing\n10. Critical WebSocket events for agent execution (all 5 events)\n11. Connection timeout and degradation scenarios\n12. WebSocket-to-database persistence integration\n13. Message size limits and payload validation\n14. Cross-service WebSocket context propagation\n15. WebSocket connection cleanup and resource management\n\nCRITICAL WEBSOCKET EVENTS (BUSINESS VALUE DELIVERY):\n- agent_started: User sees AI began work\n- agent_thinking: Real-time reasoning visibility\n- tool_executing: Tool usage transparency\n- tool_completed: Tool results delivery  \n- agent_completed: Final response ready\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/golden_path/test_windows_asyncio_compatibility_comprehensive.py",
      "relative_path": "tests/integration/golden_path/test_windows_asyncio_compatibility_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nWindows Asyncio Compatibility Tests for Golden Path P0 Business Continuity\n\nCRITICAL INTEGRATION TEST: This validates complete Windows platform compatibility\nfor asyncio operations, preventing the critical Windows asyncio failures that\nhave impacted business operations.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Windows users are 40% of enterprise market\n- Business Goal: Ensure platform-agnostic AI optimization service delivery\n- Value Impact: Windows asyncio failures = complete service unavailability = customer churn\n- Strategic Impact: Cross-platform reliability essential for $500K+ ARR protection\n\nWINDOWS ASYNCIO CRITICAL FAILURES TO PREVENT:\n1. ProactorEventLoop vs SelectorEventLoop compatibility issues\n2. Windows file handle leaks in asyncio operations\n3. Windows-specific SSL/TLS asyncio certificate validation\n4. Windows path handling in asyncio file operations\n5. Windows process spawning with asyncio subprocess \n6. Windows-specific timeout and signal handling\n7. Windows asyncio WebSocket connection management\n8. Windows threading + asyncio integration issues\n9. Windows asyncio database connection pooling\n10. Windows-specific memory management in long-running asyncio\n\nThis test suite runs on ALL platforms but includes Windows-specific validation\nand compatibility patterns to prevent Windows-specific business disruptions.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_agent_websocket_integration_comprehensive.py",
      "relative_path": "tests/integration/test_agent_websocket_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent-WebSocket Integration Comprehensive Suite\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Enable real-time agent communication for chat value delivery\n- Value Impact: Users see live agent progress, tool execution, and results\n- Strategic Impact: Core chat functionality that generates $500K+ ARR through substantive AI interactions\n\nCRITICAL REQUIREMENTS:\n1. Tests ALL 5 WebSocket events (agent_started, agent_thinking, tool_executing, tool_completed, agent_completed)  \n2. Uses REAL services (no mocks in integration tests per CLAUDE.md)\n3. Validates multi-user isolation with factory patterns\n4. Ensures WebSocket events enable substantive chat business value\n5. Tests agent context isolation during concurrent execution\n\nIMPORTANT: This test validates the core infrastructure that enables users to see\nreal-time AI problem-solving, which is the primary value proposition of the platform.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_api_auth_integration_comprehensive.py",
      "relative_path": "tests/integration/test_api_auth_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive API-Auth Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Secure user authentication and authorization for AI platform access\n- Value Impact: Users can safely access their data and features without security breaches\n- Strategic Impact: Platform security foundation for user trust, compliance, and multi-tenant isolation\n\nCRITICAL: This test validates REAL API authentication flows with REAL services.\nTests use real JWT tokens, OAuth providers, database connections, and WebSocket authentication.\nAll security boundaries, multi-user isolation, and attack vectors are validated.\n\nCompliance with CLAUDE.md and TEST_CREATION_GUIDE.md:\n- Uses REAL services ONLY via real_services_fixture (ZERO inappropriate mocks)\n- Validates authentication flows that deliver ACTUAL business value\n- Implements comprehensive error handling and prevents silent failures\n- Uses SSOT utilities from test_framework/ (single canonical auth helper)\n- Tests multi-user isolation using factory patterns for user context\n- Validates WebSocket authentication for chat functionality\n- Uses IsolatedEnvironment for configuration (NEVER os.environ)\n- Tests practical security scenarios that protect revenue and user trust\n- Validates cross-service authentication boundaries\n- Comprehensive attack vector testing (SQL injection, XSS, JWT tampering, etc.)\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_auth_login_l3_comprehensive.py",
      "relative_path": "tests/integration/test_auth_login_l3_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_authenticated_chat_workflow_comprehensive.py",
      "relative_path": "tests/integration/test_authenticated_chat_workflow_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nINTEGRATION TESTS: Authenticated Chat Workflow - Complete Business Value Delivery\n\nCRITICAL BUSINESS MISSION: These tests validate authenticated chat workflows that deliver \nSUBSTANTIVE VALUE through AI-powered problem solving. This is the core of our $500K+ ARR.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Validate complete authenticated user chat experience\n- Value Impact: Ensures users receive AI-powered insights through secure chat workflows\n- Strategic Impact: Protects core revenue stream through reliable chat authentication\n\nCRITICAL REQUIREMENTS per CLAUDE.md:\n1. MUST use REAL authentication (JWT/OAuth) - NO auth bypasses\n2. MUST test real chat components (message routing, agent execution, response delivery)\n3. MUST validate business value delivery (actual AI insights, not just message exchange)\n4. MUST follow SSOT patterns from test_framework/\n5. MUST be designed to fail hard on any authentication or workflow deviation\n\nTEST FOCUS: Integration tests use real chat components WITHOUT full Docker requirement.\nThese tests validate the authenticated chat workflow logic and component integration.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_authentication_security_integration_comprehensive.py",
      "relative_path": "tests/integration/test_authentication_security_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 14,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Authentication Security Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure authentication system security and reliability\n- Value Impact: Prevents data breaches, unauthorized access, and service disruptions\n- Strategic Impact: Core security foundation enabling multi-user platform operations\n\nThis test suite validates:\n1. JWT token lifecycle management and security\n2. Multi-user isolation and session management  \n3. Authentication middleware and request processing\n4. OAuth integration patterns and security\n5. User context creation and management\n6. Authentication performance and caching\n7. Security vulnerability prevention\n8. Role-based access control patterns\n9. Authentication audit logging\n10. Token refresh and rotation mechanisms\n11. Cross-service authentication communication\n12. User registration and profile management\n13. Authentication recovery flows\n14. Multi-factor authentication patterns\n15. WebSocket authentication integration\n\nCRITICAL REQUIREMENTS per CLAUDE.md:\n- Uses SSOT patterns from test_framework/ssot/base_test_case.py\n- Uses IsolatedEnvironment for ALL environment access (NO os.environ)\n- NO MOCKS except for external OAuth providers where absolutely necessary\n- Tests validate real authentication behavior without requiring full Docker services\n- All tests have Business Value Justification comments\n- Uses absolute imports only\n- Tests focus on multi-user security and isolation\n- Tests authenticate properly when testing WebSocket integration\n\nTest Categories:\n- JWT token security and validation\n- Session management and user isolation\n- Authentication middleware functionality\n- OAuth integration security\n- User context and permission management\n- Authentication performance optimization\n- Security vulnerability prevention\n- Cross-service authentication\n- Authentication audit and monitoring\n- Token lifecycle management\n- Authentication recovery mechanisms\n- Multi-factor authentication flows\n- WebSocket authentication patterns\n- Authentication caching strategies\n- User profile and registration security\n",
      "test_methods": [
        "test_jwt_token_creation_and_validation_security",
        "test_multi_user_session_isolation_security",
        "test_authentication_headers_and_middleware_processing",
        "test_oauth_integration_security_patterns",
        "test_user_context_creation_and_permission_management",
        "test_authentication_performance_and_caching",
        "test_security_vulnerability_prevention",
        "test_user_registration_and_profile_security",
        "test_authentication_audit_logging_and_monitoring",
        "test_token_refresh_and_rotation_security",
        "test_authentication_recovery_mechanisms",
        "test_multi_factor_authentication_patterns",
        "test_concurrent_authentication_performance",
        "test_authentication_error_scenarios"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_comprehensive_database_connectivity_validation.py",
      "relative_path": "tests/integration/test_comprehensive_database_connectivity_validation.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_configuration_management_integration_comprehensive.py",
      "relative_path": "tests/integration/test_configuration_management_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 16,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Configuration Management Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Development Velocity  \n- Business Goal: Prevent configuration-related outages and ensure reliable configuration management\n- Value Impact: Configuration errors cause 60% of production outages; these tests prevent $12K MRR loss\n- Strategic Impact: Core infrastructure reliability enables scalable multi-tenant platform\n\nCRITICAL: These tests validate the configuration architecture per CLAUDE.md requirements:\n- Configuration SSOT \u2260 Code SSOT: Environment-specific configs (TEST/DEV/STAGING/PROD) are NOT duplicates\n- NEVER delete config without dependency checking - Missing config causes cascade failures\n- Each environment needs INDEPENDENT config - Test/staging/prod MUST have separate configs\n- SILENT FAILURES = ABOMINATION - Hard failures better than wrong environment configs leaking\n- Config changes = CASCADE FAILURES - One missing env var can break entire flow\n\nTest Categories: 15+ comprehensive integration tests covering:\n1. Configuration loading from multiple sources (env, files, defaults)\n2. Environment-specific configuration validation (dev/staging/prod)\n3. Configuration merging and override precedence\n4. Configuration validation and error handling\n5. Dynamic configuration reload capabilities\n6. Configuration schema validation\n7. Secret management and secure config handling\n8. Configuration templating and substitution\n9. Cross-service configuration consistency\n10. Configuration versioning and rollback\n11. Configuration caching and performance\n12. Configuration drift detection\n13. Configuration inheritance patterns\n14. Runtime configuration updates\n15. Configuration dependency resolution\n\nREQUIREMENTS per CLAUDE.md:\n- Use IsolatedEnvironment for ALL environment access (NO os.environ)\n- Follow SSOT patterns from test_framework/ssot/base_test_case.py\n- NO MOCKS except for external file systems where absolutely necessary\n- Use proper pytest markers (@pytest.mark.integration)\n- Use absolute imports only\n- Tests must be realistic and test real configuration behavior\n",
      "test_methods": [
        "test_configuration_loading_from_multiple_sources",
        "test_environment_specific_configuration_validation",
        "test_configuration_merging_and_override_precedence",
        "test_configuration_validation_and_error_handling",
        "test_dynamic_configuration_reload_capabilities",
        "test_configuration_schema_validation",
        "test_secret_management_and_secure_config_handling",
        "test_configuration_templating_and_substitution",
        "test_cross_service_configuration_consistency",
        "test_configuration_caching_and_performance",
        "test_configuration_drift_detection",
        "test_configuration_inheritance_patterns",
        "test_runtime_configuration_updates",
        "test_configuration_dependency_resolution",
        "test_configuration_performance_under_load",
        "test_configuration_memory_usage_and_cleanup"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_core_api_l3_comprehensive.py",
      "relative_path": "tests/integration/test_core_api_l3_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 16,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nL3 Integration Tests for Core API - Comprehensive Coverage\nTests core API endpoints, request/response handling, and business logic\n",
      "test_methods": [
        "test_health_check_endpoint",
        "test_api_versioning",
        "test_request_validation",
        "test_pagination_support",
        "test_sorting_and_filtering",
        "test_file_upload_endpoint",
        "test_file_download_endpoint",
        "test_search_functionality",
        "test_autocomplete_endpoint",
        "test_api_rate_limiting",
        "test_content_negotiation",
        "test_cors_headers",
        "test_request_id_tracking",
        "test_api_metrics_endpoint",
        "test_conditional_requests",
        "test_api_documentation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_cors_comprehensive.py",
      "relative_path": "tests/integration/test_cors_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 32,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": [
        "test_app",
        "test_client",
        "test_endpoint",
        "test_get_cors_origins_development",
        "test_get_cors_origins_staging",
        "test_get_cors_origins_production",
        "test_get_cors_origins_custom_env_var",
        "test_cors_config_structure",
        "test_is_origin_allowed_development",
        "test_websocket_cors_origins",
        "test_cors_health_info",
        "test_validate_cors_config",
        "test_preflight_valid_origins",
        "test_preflight_invalid_origins",
        "test_preflight_all_methods",
        "test_preflight_all_endpoints",
        "test_actual_request_cors_headers",
        "test_actual_request_with_credentials",
        "test_actual_request_no_origin_header",
        "test_cors_headers_on_404",
        "test_cors_headers_on_405",
        "test_cors_headers_on_500",
        "test_cors_with_trailing_slash",
        "test_ipv6_localhost_origin",
        "test_vary_origin_header_present",
        "test_max_age_header_present",
        "test_development_allows_any_localhost_port",
        "test_staging_allows_staging_domains",
        "test_production_rejects_localhost",
        "test_security_headers_present",
        "test_many_concurrent_cors_requests",
        "test_cors_with_large_headers"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_cross_service_api_comprehensive.py",
      "relative_path": "tests/integration/test_cross_service_api_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 14,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Cross-Service API Communication Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Reliability & Multi-Service Integration\n- Business Goal: Ensure reliable cross-service communication for production stability\n- Value Impact: Validates API contracts, service discovery, and inter-service authentication\n- Strategic Impact: Prevents service integration failures that could lead to system outages\n\nThis test suite validates the critical integration layer that enables multiple services\nto work together as a cohesive platform. It focuses on real HTTP requests, service\nauthentication, API contract validation, and cross-service data consistency.\n\nCRITICAL: These tests use REAL HTTP requests between services - no mocks allowed\nper CLAUDE.md requirements for integration testing.\n",
      "test_methods": [
        "test_service_health_endpoints_availability",
        "test_service_to_service_authentication_headers",
        "test_service_to_service_authentication_rejection",
        "test_api_contract_validation_auth_endpoints",
        "test_api_contract_validation_malformed_requests",
        "test_cross_service_data_consistency_user_validation",
        "test_service_discovery_endpoint_contracts",
        "test_api_timeout_and_connection_handling",
        "test_error_response_format_consistency",
        "test_concurrent_api_requests_handling",
        "test_service_api_versioning_headers",
        "test_request_correlation_and_tracing_headers",
        "test_circuit_breaker_and_resilience_patterns",
        "test_api_schema_validation_and_content_types"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_database_persistence_l3_comprehensive.py",
      "relative_path": "tests/integration/test_database_persistence_l3_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nL3 Integration Tests for Database and Persistence - Comprehensive Coverage\nTests database operations, transactions, caching, and data integrity\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_database_service_integration_comprehensive.py",
      "relative_path": "tests/integration/test_database_service_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Database-Service Integration - Comprehensive\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable data persistence and retrieval for user conversations and system state\n- Value Impact: Users' conversations, agent executions, and session data are safely stored and accessible across sessions\n- Strategic Impact: Core data reliability foundation for platform trust, user retention, and multi-user isolation\n\nCRITICAL ARCHITECTURE REQUIREMENTS:\n- Tests REAL PostgreSQL and Redis services (no mocks)\n- Validates multi-user data isolation patterns\n- Ensures transaction integrity and concurrent access safety\n- Tests user context factory patterns for session isolation\n- Validates business-critical thread, message, and agent execution persistence\n\nThis test validates the core database infrastructure that enables:\n1. User conversation continuity across sessions\n2. Agent execution state management\n3. Multi-user data isolation (10+ concurrent users)\n4. Session state persistence via Redis\n5. Transactional integrity during concurrent operations\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_environment_isolation_integration_comprehensive.py",
      "relative_path": "tests/integration/test_environment_isolation_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 24,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Environment Integration Tests for Netra Platform\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise, Platform/Internal)\n- Business Goal: Ensure reliable, isolated environment management across all services\n- Value Impact: Environment isolation prevents configuration leaks, enables concurrent user support,\n  and ensures stable multi-environment deployments critical for enterprise contracts\n- Strategic Impact: Core platform stability - Configuration errors cause 60% of production outages.\n  These tests prevent $12K MRR loss from environment-related incidents.\n\nThis comprehensive test suite validates the IsolatedEnvironment system and environment-specific\nbehavior across the platform without requiring Docker services. Tests focus on:\n\n1. IsolatedEnvironment functionality and isolation\n2. Environment variable inheritance and override behavior  \n3. Multi-environment configuration management (test/dev/staging/prod)\n4. Environment-specific service configuration\n5. Environment variable validation and type conversion\n6. Environment state cleanup and restoration\n7. Environment variable namespacing and collision prevention\n8. Dynamic environment switching during runtime\n9. Environment security and access control\n10. Environment variable templating and substitution\n11. Environment backup and restore functionality\n12. Environment-specific feature flags\n13. Environment health validation\n14. Cross-environment data synchronization\n15. Environment monitoring and logging\n\nCRITICAL REQUIREMENTS per CLAUDE.md:\n- All environment access MUST go through IsolatedEnvironment\n- NEVER use os.environ directly in tests\n- Environment isolation is CRITICAL for multi-user system\n- Test the environment system itself, not just use it\n- NO MOCKS except for external systems where absolutely necessary\n- Use SSOT patterns from test_framework/ssot/base_test_case.py\n",
      "test_methods": [
        "test_isolated_environment_singleton_behavior",
        "test_isolation_mode_basic_functionality",
        "test_environment_variable_source_tracking",
        "test_environment_variable_protection",
        "test_environment_variable_sanitization",
        "test_environment_variable_precedence",
        "test_env_file_loading_behavior",
        "test_environment_change_callbacks",
        "test_environment_detection_logic",
        "test_test_context_detection",
        "test_test_environment_defaults",
        "test_basic_validation_functionality",
        "test_staging_database_credential_validation",
        "test_environment_backup_and_restore",
        "test_environment_reset_functionality",
        "test_environment_cache_management",
        "test_variable_prefix_filtering",
        "test_variable_collision_detection",
        "test_sensitive_value_masking",
        "test_subprocess_environment_security",
        "test_environment_debug_information",
        "test_environment_consistency_checks",
        "test_change_tracking_and_audit_trail",
        "test_changes_since_initialization"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_error_handling_l3_comprehensive.py",
      "relative_path": "tests/integration/test_error_handling_l3_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_jwt_secret_consistency_comprehensive.py",
      "relative_path": "tests/integration/test_jwt_secret_consistency_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 7,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive JWT Secret Consistency Tests\n\nThis test suite validates that all services use consistent JWT secrets,\npreventing the WebSocket 403 authentication failures that occur when\nservices have divergent JWT secret resolution.\n\nBusiness Value:\n- Prevents $50K MRR loss from JWT authentication failures\n- Ensures consistent authentication across all user touchpoints\n- Validates unified JWT secret manager implementation\n- Tests cross-service JWT token validation flows\n\nCRITICAL: These tests must pass in all environments to ensure\nthat chat functionality works end-to-end without authentication issues.\n",
      "test_methods": [
        "test_unified_jwt_secret_manager_validation",
        "test_test_framework_uses_unified_secret",
        "test_jwt_token_creation_consistency",
        "test_e2e_auth_helper_staging_compatibility",
        "test_jwt_secret_environment_resolution",
        "test_auth_service_jwt_handler_integration",
        "test_jwt_token_types_consistency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_message_router_legacy_mapping_complete.py",
      "relative_path": "tests/integration/test_message_router_legacy_mapping_complete.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nIntegration Tests: MessageRouter Legacy Message Type Mapping\n\nBusiness Value Justification:\n- Segment: Platform/Internal\n- Business Goal: System Integration & Chat Reliability\n- Value Impact: Ensure complete message routing works end-to-end with real services\n- Strategic Impact: Validates that message type mapping works across service boundaries\n\nThis integration test suite validates MessageRouter with real services and\ncomprehensive message type scenarios, focusing on the 'chat_message' mapping gap\nand its impact on the complete chat workflow.\n\nCRITICAL: These tests validate that 'chat_message' integration works properly \nacross the complete message handling pipeline after the LEGACY_MESSAGE_TYPE_MAP fix.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_multi_service_communication_comprehensive.py",
      "relative_path": "tests/integration/test_multi_service_communication_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Multi-Service Communication Integration\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure reliable end-to-end service communication for seamless user experience\n- Value Impact: Users experience seamless workflows across all platform features without service boundary issues\n- Strategic Impact: Platform reliability foundation for user trust, scalability, and operational excellence\n\nThis comprehensive test suite validates the complete microservice architecture communication patterns:\n1. User Registration \u2192 Login \u2192 Agent Execution \u2192 Data Storage workflow\n2. Cross-service data flow and user context propagation \n3. Service mesh HTTP/WebSocket communication patterns\n4. Error propagation and recovery scenarios\n5. Load balancing and service discovery validation\n6. Distributed transactions and coordination\n\nCRITICAL: Uses REAL services only (no mocks in integration tests per CLAUDE.md)\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_startup_integration_comprehensive.py",
      "relative_path": "tests/integration/test_startup_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 14,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": [
        "test_complete_startup_sequence",
        "test_database_connection_pool_initialization",
        "test_redis_connection_initialization",
        "test_websocket_integration_during_startup",
        "test_agent_registry_initialization",
        "test_health_endpoints_after_startup",
        "test_database_unavailable_startup_failure",
        "test_redis_unavailable_startup_failure",
        "test_partial_initialization_rollback",
        "test_backend_auth_service_coordination",
        "test_service_discovery_integration",
        "test_graceful_degradation_optional_services",
        "test_startup_completes_within_timeout",
        "test_parallel_initialization_performance"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_startup_sequence_integration_comprehensive.py",
      "relative_path": "tests/integration/test_startup_sequence_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 16,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Startup Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (All user segments depend on reliable startup)\n- Business Goal: Ensure zero-downtime service initialization and system stability\n- Value Impact: Prevents service outages, reduces time-to-recovery, enables reliable deployments\n- Strategic Impact: Foundational for all business operations - startup failures = complete revenue loss\n\nThese tests validate startup sequences, initialization order, and system readiness WITHOUT\nrequiring Docker services to be running. They focus on testing startup behavior, configuration\nloading, dependency resolution, and error handling patterns.\n\nCRITICAL: These tests use SSOT patterns from test_framework/ssot/base_test_case.py\nand IsolatedEnvironment for all environment access (NO os.environ).\n",
      "test_methods": [
        "test_startup_environment_validation_sequence",
        "test_startup_service_dependency_resolution",
        "test_startup_configuration_loading_performance",
        "test_startup_health_check_initialization",
        "test_startup_invalid_environment_handling",
        "test_startup_dependency_failure_handling",
        "test_startup_configuration_validation_errors",
        "test_startup_timing_benchmarks",
        "test_startup_memory_usage_patterns",
        "test_startup_concurrent_initialization_safety",
        "test_startup_readiness_probe_behavior",
        "test_startup_graceful_degradation_patterns",
        "test_startup_health_endpoint_status_reporting",
        "test_startup_environment_specific_configuration",
        "test_startup_configuration_override_patterns",
        "test_startup_configuration_validation_rules"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_system_core_integration_comprehensive.py",
      "relative_path": "tests/integration/test_system_core_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive System Integration Tests for Netra Platform\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: System Stability, Development Velocity, Risk Reduction\n- Value Impact: Validates system-level integration without external dependencies\n- Strategic Impact: Enables confident deployment by testing real system behavior\n\nThis test suite creates 15-20 integration tests that fill the gap between unit and e2e tests.\nFocus areas:\n1. Service initialization and dependency injection\n2. Configuration loading and validation  \n3. Database schema validation (without DB connection)\n4. Inter-service communication patterns\n5. Error handling and recovery mechanisms\n6. Resource management and cleanup\n7. System health checks and monitoring\n8. Component lifecycle management\n9. Message routing and dispatching\n10. System state consistency\n\nCRITICAL: These tests use REAL system components but avoid external infrastructure.\nThey test actual business logic paths that deliver value to users.\n\nPer CLAUDE.md requirements:\n- Uses SSOT patterns from test_framework/ssot/base_test_case.py\n- Uses IsolatedEnvironment for ALL environment access (NO os.environ)\n- NO mocks except for external APIs where absolutely necessary\n- Business Value Justification (BVJ) for each test\n- Absolute imports only\n- Realistic tests that validate real system behavior\n",
      "test_methods": [
        "test_cleanup"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_websocket_auth_handshake_complete_flow.py",
      "relative_path": "tests/integration/test_websocket_auth_handshake_complete_flow.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/test_websocket_messaging_integration_comprehensive.py",
      "relative_path": "tests/integration/test_websocket_messaging_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Integration Tests for Netra Platform\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure WebSocket messaging delivers reliable AI chat value\n- Value Impact: WebSocket events enable real-time chat interactions and agent execution visibility\n- Strategic Impact: Core platform communication infrastructure for revenue delivery\n\nCRITICAL: WebSocket events are MISSION CRITICAL for chat value delivery per CLAUDE.md\nAll 5 agent events MUST be sent: agent_started, agent_thinking, tool_executing, tool_completed, agent_completed\n\nThese integration tests validate WebSocket behavior without requiring Docker services.\nThey test real WebSocket connections, authentication, message handling, and agent integration patterns.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/integration/websocket/test_websocket_auth_integration_comprehensive.py",
      "relative_path": "tests/integration/websocket/test_websocket_auth_integration_comprehensive.py",
      "category": "integration",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive WebSocket Authentication Integration Tests\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) - Multi-user platform security\n- Business Goal: Ensure secure, authenticated WebSocket connections for AI chat\n- Value Impact: Validates authentication flows prevent unauthorized access to sensitive AI conversations\n- Strategic Impact: Critical for enterprise adoption - demonstrates enterprise-grade security\n\nMISSION: Create 20+ high-quality integration tests for WebSocket authentication flows that fill \nthe gap between unit and e2e tests, focusing on JWT validation, token lifecycle, session management,\nand multi-user authentication isolation.\n\nThese integration tests validate WebSocket authentication flows without requiring Docker services\nto be running, using real authentication components but mocked transport layers.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/golden_path/test_websocket_events_never_fail.py",
      "relative_path": "tests/mission_critical/golden_path/test_websocket_events_never_fail.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: WebSocket Events Never Fail Test for Golden Path\n\n\ud83d\udea8 MISSION CRITICAL TEST \ud83d\udea8\nThis test MUST NEVER FAIL - it validates the core revenue-generating WebSocket events\nthat enable the $500K+ ARR chat experience. Failure blocks deployment.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure WebSocket events that deliver business value NEVER fail\n- Value Impact: Missing events = broken chat = complete revenue loss\n- Strategic Impact: Core platform reliability that enables all business operations\n\nZERO TOLERANCE FAILURE CONDITIONS:\n- Missing any of the 5 critical WebSocket events = HARD FAIL\n- Events delivered in wrong order = HARD FAIL  \n- Event delivery timeout = HARD FAIL\n- Any silent failures = HARD FAIL\n\nThis test represents the absolute minimum functionality required for business continuity.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_agent_death_fix_complete.py",
      "relative_path": "tests/mission_critical/test_agent_death_fix_complete.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_agent_handler_fix_comprehensive.py",
      "relative_path": "tests/mission_critical/test_agent_handler_fix_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_agent_type_safety_comprehensive.py",
      "relative_path": "tests/mission_critical/test_agent_type_safety_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_baseagent_edge_cases_comprehensive.py",
      "relative_path": "tests/mission_critical/test_baseagent_edge_cases_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_circuit_breaker_comprehensive.py",
      "relative_path": "tests/mission_critical/test_circuit_breaker_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_complete_request_isolation.py",
      "relative_path": "tests/mission_critical/test_complete_request_isolation.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_comprehensive_compliance_validation.py",
      "relative_path": "tests/mission_critical/test_comprehensive_compliance_validation.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_comprehensive_websocket_validation.py",
      "relative_path": "tests/mission_critical/test_comprehensive_websocket_validation.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_infrastructure_fixes_comprehensive.py",
      "relative_path": "tests/mission_critical/test_infrastructure_fixes_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_mcp_connection_resilience_comprehensive.py",
      "relative_path": "tests/mission_critical/test_mcp_connection_resilience_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Comprehensive MCP Connection Manager Resilience Tests\n\nTests the fixed MCP Connection Manager to ensure:\n1. No permanent failure states - all connections can recover\n2. Exponential backoff resets on successful reconnection\n3. Failed connections are replaced, not removed\n4. Background recovery tasks work properly\n5. Circuit breaker integration functions correctly\n6. Health monitoring triggers recovery as needed\n\nThis test suite validates the critical fixes for:\n- Permanent FAILED states\n- Exponential backoff growing without reset\n- Failed connections being removed without replacement\n- No automatic recovery mechanism\n\nCRITICAL BUSINESS VALUE:\n- Prevents MCP server connection cascade failures\n- Ensures external tool integrations remain operational\n- Validates resilience patterns used throughout the system\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_memory_leak_prevention_comprehensive.py",
      "relative_path": "tests/mission_critical/test_memory_leak_prevention_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_retry_reliability_comprehensive.py",
      "relative_path": "tests/mission_critical/test_retry_reliability_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Retry Logic Reliability and Stress Tests\n\nBusiness Value: Prevents $75K+ ARR loss from transient failures and retry storms\nCritical Requirements:\n- Retry logic must handle transient failures gracefully without creating retry storms\n- Exponential backoff must prevent system overload \n- Retry exhaustion must fail gracefully with proper fallbacks\n- Memory usage must remain stable during extended retry scenarios\n\nThis suite tests the most challenging retry scenarios that could cause:\n- Retry storms that overwhelm services\n- Memory leaks from retry state accumulation  \n- Incorrect exponential backoff leading to DOS\n- Missing fallbacks causing user-visible failures\n\nANY FAILURE HERE BLOCKS PRODUCTION DEPLOYMENT.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_security_boundaries_comprehensive.py",
      "relative_path": "tests/mission_critical/test_security_boundaries_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": true,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_supervisor_golden_compliance_comprehensive.py",
      "relative_path": "tests/mission_critical/test_supervisor_golden_compliance_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_comprehensive_fixed.py",
      "relative_path": "tests/mission_critical/test_websocket_comprehensive_fixed.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_comprehensive_validation.py",
      "relative_path": "tests/mission_critical/test_websocket_comprehensive_validation.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_comprehensive_validation_working.py",
      "relative_path": "tests/mission_critical/test_websocket_comprehensive_validation_working.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: Comprehensive WebSocket Validation Test Suite\n\nThis is the most rigorous test suite for WebSocket notifications in the Netra system.\nIt validates ALL critical WebSocket events are sent during agent execution under\nevery conceivable scenario, including error conditions, concurrent execution,\nand high load scenarios.\n\nBusiness Value: $500K+ ARR - Core chat functionality depends on these events\nCRITICAL: These events enable substantive chat interactions - they serve the business goal\n\nRequired WebSocket Events (MANDATORY):\n1. agent_started - User must see agent began processing \n2. agent_thinking - Real-time reasoning visibility\n3. tool_executing - Tool usage transparency  \n4. tool_completed - Tool results display\n5. agent_completed - User must know when response is ready\n\nANY FAILURE HERE BLOCKS DEPLOYMENT.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_connectionhandler_golden_path.py",
      "relative_path": "tests/mission_critical/test_websocket_connectionhandler_golden_path.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL: WebSocket ConnectionHandler Golden Path Test Suite.\n\nThis test suite validates the complete authenticated chat flow that is currently\nbroken due to ConnectionHandler issues identified in the Five WHYs analysis.\n\nCRITICAL: This is the golden path that customers use - if this breaks, the entire\nproduct value proposition fails for authenticated users.\n\nBusiness Value:\n- Validates end-to-end authenticated chat experience works\n- Catches golden path failures before they reach customers\n- Ensures WebSocket events are properly sent during agent execution  \n- Validates proper authentication integration with WebSocket connections\n- Prevents customer-facing failures in the core product flow\n\nTest Strategy:\n- Use REAL authentication via e2e_auth_helper.py (MANDATORY)\n- Test complete flow: auth \u2192 connect \u2192 send message \u2192 receive response\n- Validate all WebSocket events are sent during agent processing\n- Use real services (no mocks) to catch integration issues\n- Test with the actual problematic user ID from production logs\n\nExpected Test Behavior:\n- CURRENT STATE: Tests FAIL due to ConnectionHandler silent failures\n- AFTER FIX: Tests PASS with complete golden path working end-to-end\n\nULTRA CRITICAL: These tests MUST use authentication - no exceptions.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_event_reliability_comprehensive.py",
      "relative_path": "tests/mission_critical/test_websocket_event_reliability_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_websocket_event_validation_comprehensive.py",
      "relative_path": "tests/mission_critical/test_websocket_event_validation_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nMISSION CRITICAL TEST SUITE: Comprehensive WebSocket Event Validation\n=====================================================================\n\nBusiness Value: $500K+ ARR - CRITICAL validation of WebSocket events that deliver AI value\n\nCOMPREHENSIVE COVERAGE:\n- Event Sequence Validation (5 critical events in correct order)\n- Content Quality Validation (meaningful business value content)\n- Timing Performance Validation (user engagement preservation)  \n- Business Value Validation (conversion and revenue protection)\n- Real WebSocket connections with authentication\n- Multi-user isolation and security validation\n- Performance under concurrent load\n- Business value failure detection\n\nCRITICAL REQUIREMENTS FROM CLAUDE.MD:\n- ALL e2e tests MUST use authentication (JWT/OAuth) except tests directly validating auth\n- WebSocket events enable substantive chat interactions - they serve business goal\n- Tests must FAIL HARD when business value is compromised\n- Real WebSocket connections and services (no mocks)\n- Tests with 0-second execution = automatic hard failure\n\nTHE 5 CRITICAL WEBSOCKET EVENTS FOR BUSINESS VALUE:\n1. agent_started - User must see agent began processing their problem\n2. agent_thinking - Real-time reasoning visibility (shows AI is working on valuable solutions)\n3. tool_executing - Tool usage transparency (demonstrates problem-solving approach)  \n4. tool_completed - Tool results display (delivers actionable insights)\n5. agent_completed - User must know when valuable response is ready\n\nANY FAILURE HERE INDICATES WEBSOCKET EVENTS DO NOT DELIVER BUSINESS VALUE.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/mission_critical/test_zero_mock_responses_comprehensive.py",
      "relative_path": "tests/mission_critical/test_zero_mock_responses_comprehensive.py",
      "category": "mission_critical",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Mission Critical Test Suite: Zero Mock Responses Comprehensive Validation\n\nBusiness Value: Protects $4.1M immediate ARR by proving no mock responses reach users.\n\nThis test suite provides definitive proof that the three identified mock response\npatterns have been eliminated and no new mock responses can reach users.\n",
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/monitoring/test_isolation_monitoring_comprehensive.py",
      "relative_path": "tests/monitoring/test_isolation_monitoring_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/phase2_migration/test_phase2_agents_comprehensive.py",
      "relative_path": "tests/phase2_migration/test_phase2_agents_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 0,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": null,
      "test_methods": []
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/refactoring/test_ssot_complete.py",
      "relative_path": "tests/refactoring/test_ssot_complete.py",
      "category": "unknown",
      "service": "global",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": false,
      "bvj_present": false,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive SSOT Refactoring Validation Test Suite\n=====================================================\nCRITICAL: This test suite validates that ALL SSOT refactoring is complete and correct.\nMust pass 100% before considering refactoring done.\n",
      "test_methods": [
        "test_factory_consolidation_complete",
        "test_agent_consolidation_complete",
        "test_tool_execution_consolidation_complete",
        "test_infrastructure_consolidation_complete",
        "test_no_regressions",
        "test_all_legacy_files_removed",
        "test_no_legacy_imports",
        "test_mission_critical_websocket_events",
        "test_performance_maintained",
        "test_500_plus_tests_passing"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/thread_id_consistency/test_thread_id_consistency_comprehensive.py",
      "relative_path": "tests/thread_id_consistency/test_thread_id_consistency_comprehensive.py",
      "category": "unknown",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nThread ID Consistency Comprehensive Tests - REPRODUCTION OF WEBSOCKET RESOURCE LEAK BUG\n\nBusiness Value Justification (BVJ):\n- Segment: ALL (Free \u2192 Enterprise) - System stability affects all users  \n- Business Goal: Reproduce and validate thread_ID consistency issues causing WebSocket resource leaks\n- Value Impact: Identifies the root cause of 20 manager limit failures preventing user sessions\n- Strategic Impact: Critical for preventing system crashes and ensuring multi-user stability\n\nCRITICAL PURPOSE: These tests reproduce the thread_ID consistency issue identified in the\nWebSocket resource leak analysis where isolation keys mismatch prevents cleanup from finding\nthe correct managers, leading to resource accumulation and hitting the 20 manager limit.\n\nBUG REPRODUCTION STRATEGY:\n1. **ThreadIDConsistencyTracker** - Monitor thread_ID values throughout WebSocket lifecycle\n2. **Failing Tests** - Create tests that expose thread_ID mismatches during WebSocket operations\n3. **Resource Leak Validation** - Show how thread_ID inconsistency prevents cleanup\n4. **Real Components** - Use actual WebSocket components with authentication per project requirements\n\nEXPECTED BEHAVIOR:\n- Tests should FAIL when thread_ID mismatches occur (reproducing the bug)\n- Tests should PASS when thread_ID consistency is maintained throughout lifecycle\n- Comprehensive logging shows exact points where thread_ID values diverge\n\nCOMPLIANCE WITH CLAUDE.md:\n- Uses REAL WebSocket components (no mocking per project requirements)\n- Includes E2E authentication for all integration/e2e tests\n- Inherits from SSotAsyncTestCase for consistent test foundation\n- Uses shared.isolated_environment for environment configuration\n- Follows project testing patterns and error handling requirements\n\nTarget Bug Scenarios:\n1. UserExecutionContext thread_ID changes between creation and WebSocket manager usage\n2. WebSocket manager isolation key uses different thread_ID than cleanup lookup\n3. Concurrent operations creating thread_ID contamination between users\n4. ID generation inconsistencies between UnifiedIdGenerator and UnifiedIDManager\n",
      "test_methods": [
        "test_thread_id_consistency_test_suite_coverage"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/golden_path/test_agent_execution_order_validator.py",
      "relative_path": "tests/unit/golden_path/test_agent_execution_order_validator.py",
      "category": "unit",
      "service": "global",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Agent Execution Order Validation Logic for Golden Path\n\nCRITICAL UNIT TEST: This validates the Data \u2192 Optimization \u2192 Report agent execution \norder that is fundamental to delivering business value in the Golden Path.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure proper agent execution sequence for accurate insights  \n- Value Impact: Wrong order = incorrect cost optimization recommendations\n- Strategic Impact: Core business logic for $500K+ ARR delivery\n\nGOLDEN PATH REQUIREMENT: Agent Execution Pipeline Order\nData Agent (collect metrics) \u2192 Optimization Agent (analyze) \u2192 Report Agent (deliver)\nThis test validates the ordering logic without actual agent execution.\n",
      "test_methods": [
        "test_correct_agent_execution_order_validation",
        "test_incorrect_agent_execution_order_detection",
        "test_missing_required_agents_detection",
        "test_extra_agents_handling",
        "test_agent_dependency_checking",
        "test_corrected_order_generation",
        "test_next_executable_agents_calculation",
        "test_execution_context_tracking",
        "test_actual_execution_order_validation",
        "test_concurrent_agent_dependency_resolution"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/golden_path/test_persistence_exit_point_logic.py",
      "relative_path": "tests/unit/golden_path/test_persistence_exit_point_logic.py",
      "category": "unit",
      "service": "global",
      "test_count": 10,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest Persistence Exit Point Logic for Golden Path\n\nCRITICAL UNIT TEST: This validates the persistence strategy selection and cleanup \nlogic for different Golden Path termination scenarios.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Ensure data integrity and proper cleanup across all exit scenarios\n- Value Impact: Lost conversation data = lost business insights and user frustration\n- Strategic Impact: Data reliability foundation for $500K+ ARR platform\n\nGOLDEN PATH EXIT POINTS:\n1. Normal Completion - Full data persistence with success metrics\n2. User Disconnect - State preservation for reconnection  \n3. Error Termination - Error context preservation for debugging\n4. Timeout - Partial result preservation \n5. Service Shutdown - Graceful state saving\n",
      "test_methods": [
        "test_normal_completion_persistence_strategy",
        "test_user_disconnect_persistence_strategy",
        "test_error_termination_persistence_strategy",
        "test_timeout_exit_persistence_strategy",
        "test_service_shutdown_persistence_strategy",
        "test_cleanup_requirements_validation",
        "test_recovery_info_generation",
        "test_persistence_operations_categorization",
        "test_timeout_threshold_configuration",
        "test_all_exit_point_types_covered"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/golden_path/test_shared_business_logic.py",
      "relative_path": "tests/unit/golden_path/test_shared_business_logic.py",
      "category": "unit",
      "service": "global",
      "test_count": 11,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nShared Golden Path Unit Tests: Cross-Service Business Logic\n\nTests shared business logic components that support the golden path\nacross all services, including type safety, ID generation, and\nshared utilities without external dependencies.\n\nBusiness Value:\n- Validates shared business logic consistency across services\n- Tests type safety and ID generation for business operations\n- Verifies shared utilities support business requirements\n- Tests cross-service integration patterns and contracts\n",
      "test_methods": [
        "test_strongly_typed_user_id_business_safety",
        "test_execution_context_business_isolation",
        "test_id_generation_business_consistency",
        "test_websocket_id_generation_business_communication",
        "test_environment_isolation_business_security",
        "test_environment_variable_business_validation",
        "test_global_environment_business_consistency",
        "test_service_communication_business_patterns",
        "test_error_propagation_business_continuity",
        "test_data_consistency_business_requirements",
        "test_business_validation_cross_service_consistency"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/golden_path/test_websocket_event_validator.py",
      "relative_path": "tests/unit/golden_path/test_websocket_event_validator.py",
      "category": "unit",
      "service": "global",
      "test_count": 9,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Event Validation Logic for Golden Path\n\nCRITICAL UNIT TEST: This validates the 5 mission-critical WebSocket events that\nenable the $500K+ ARR chat experience and business value delivery.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Ensure critical WebSocket events are delivered for user experience\n- Value Impact: Missing events = broken chat experience = revenue loss\n- Strategic Impact: Core platform reliability for user engagement and conversion\n\nGOLDEN PATH CRITICAL ISSUE #4: Missing WebSocket Events\nThis test validates the event validation logic for:\n1. agent_started - User sees AI began work\n2. agent_thinking - Real-time reasoning updates\n3. tool_executing - Tool usage transparency  \n4. tool_completed - Tool results display\n5. agent_completed - Final results ready\n",
      "test_methods": [
        "test_complete_golden_path_event_sequence_validation",
        "test_missing_critical_events_detection",
        "test_event_order_violation_detection",
        "test_event_content_validation",
        "test_event_quality_scoring",
        "test_multi_agent_event_sequence_validation",
        "test_get_missing_events_for_completion",
        "test_event_serialization_and_deserialization",
        "test_timestamp_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/golden_path/test_websocket_handshake_timing.py",
      "relative_path": "tests/unit/golden_path/test_websocket_handshake_timing.py",
      "category": "unit",
      "service": "global",
      "test_count": 1,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": true,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nTest WebSocket Handshake Timing Logic for Golden Path\n\nCRITICAL UNIT TEST: This validates the race condition prevention algorithms\nthat are essential for reliable WebSocket connections in Cloud Run environments.\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)  \n- Business Goal: Ensure reliable WebSocket connections (foundation for $500K+ ARR)\n- Value Impact: Prevents connection failures that break chat experience\n- Strategic Impact: Core platform stability for user engagement\n\nGOLDEN PATH CRITICAL ISSUE #1: Race Conditions in WebSocket Handshake\nThis test validates the progressive delay and handshake validation logic\nwithout network dependencies.\n",
      "test_methods": [
        "test_optimal_delay_calculation_algorithm"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/test_deploy_to_gcp_comprehensive.py",
      "relative_path": "tests/unit/test_deploy_to_gcp_comprehensive.py",
      "category": "unit",
      "service": "global",
      "test_count": 40,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Test Suite for scripts/deploy_to_gcp.py\n\nThis test suite provides comprehensive coverage of the GCP deployment script's\nbusiness logic, configuration management, and error detection capabilities.\n\nCRITICAL MISSION: Test deployment infrastructure without actually deploying\n- Tests configuration validation and creation\n- Tests Docker build command generation\n- Tests GCP service configuration building\n- Tests environment variable processing\n- Tests secret management logic\n- Tests error detection and validation\n\nARCHITECTURE COMPLIANCE:\n- \u2705 ZERO MOCKS - Uses real implementations and dependency injection only\n- \u2705 NO try/except blocks - Tests fail hard as required by CLAUDE.md\n- \u2705 Real SSOT imports and integrations\n- \u2705 Real object creation and validation testing\n- \u2705 Windows-compatible path handling\n- \u2705 Tests real business logic and configuration validation\n- \u2705 All mock violations removed (lines 304, 321, 338, 340 fixed)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Prevent deployment failures and outages\n- Value Impact: Catch configuration errors before production\n- Strategic Impact: Ensures reliable deployment infrastructure\n",
      "test_methods": [
        "test_service_config_creation_backend",
        "test_service_config_creation_auth",
        "test_service_config_creation_frontend",
        "test_service_config_defaults",
        "test_gcp_deployer_initialization_staging",
        "test_gcp_deployer_initialization_production",
        "test_gcp_deployer_alpine_vs_standard_configuration",
        "test_container_runtime_detection_logic",
        "test_frontend_environment_variables_validation_success",
        "test_frontend_environment_variables_validation_failure",
        "test_deployment_configuration_environment_requirements",
        "test_deployment_configuration_missing_environment_variables",
        "test_local_development_url_detection",
        "test_build_image_local_command_generation_backend",
        "test_build_image_cloud_configuration_generation",
        "test_dockerfile_creation_logic_backend",
        "test_dockerfile_creation_logic_frontend",
        "test_deploy_service_command_generation_backend",
        "test_deploy_service_environment_variables_processing",
        "test_frontend_critical_environment_variables_processing",
        "test_vpc_connector_and_cloud_sql_configuration",
        "test_secrets_config_integration",
        "test_critical_environment_variables_from_gsm_mapping",
        "test_oauth_configuration_mapping",
        "test_redis_configuration_mapping",
        "test_gcloud_validation_logic",
        "test_service_url_validation_logic",
        "test_health_check_endpoint_logic",
        "test_traffic_routing_logic",
        "test_deployment_phases_logic",
        "test_service_deployment_order",
        "test_rollback_planning_logic",
        "test_error_recovery_strategy",
        "test_windows_path_handling",
        "test_windows_command_execution_setup",
        "test_windows_encoding_setup",
        "test_cost_optimization_configuration",
        "test_deployment_reliability_features",
        "test_multi_environment_support",
        "test_security_configuration_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/test_unified_test_runner_comprehensive.py",
      "relative_path": "tests/unit/test_unified_test_runner_comprehensive.py",
      "category": "unit",
      "service": "global",
      "test_count": 68,
      "has_auth_requirement": true,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "\nComprehensive Unit Tests for UnifiedTestRunner\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal - System Stability & Development Velocity\n- Business Goal: Ensure critical test infrastructure reliability\n- Value Impact: Validates the test orchestration system that ensures product quality\n- Strategic Impact: Core platform reliability - without this, deployment quality suffers\n\nThis module provides COMPLETE unit test coverage for the unified test runner,\nwhich is the #1 priority SSOT class (3,258 lines) that orchestrates ALL platform testing.\n\nCRITICAL: This tests the infrastructure that validates our entire product suite.\nThe unified test runner is mission-critical for:\n- Multi-layer test orchestration (fast_feedback, core_integration, service_integration, e2e_background)\n- Docker service management and Alpine container optimization\n- Cross-platform compatibility (Windows encoding fixes)\n- Progress tracking and real-time reporting\n- Background E2E test coordination\n- Error recovery and cleanup mechanisms\n\nREQUIREMENTS per CLAUDE.md:\n- ABSOLUTELY NO MOCKS - Use real implementations, dependency injection\n- FAIL HARD - Tests must raise errors, never use try/except blocks\n- 100% SSOT Compliance - Follow test_framework/ssot/ patterns\n- Windows Compatible - Handle Windows paths and encoding\n- Complete Coverage - Cover ALL major methods and code paths\n",
      "test_methods": [
        "test_comprehensive_unit_test_suite_completion",
        "test_init_creates_proper_directory_structure",
        "test_detect_python_command_finds_valid_python3",
        "test_test_configs_have_proper_structure",
        "test_category_system_initialization",
        "test_docker_manager_initialization_with_centralized_support",
        "test_test_execution_tracker_initialization",
        "test_max_collection_size_configuration",
        "test_determine_categories_to_run_with_single_category",
        "test_determine_categories_to_run_with_multiple_categories",
        "test_get_categories_for_service_backend",
        "test_get_categories_for_service_auth",
        "test_get_categories_for_service_frontend",
        "test_get_services_for_category_unit",
        "test_get_services_for_category_e2e",
        "test_handle_resume_functionality",
        "test_docker_required_for_tests_e2e_category",
        "test_check_port_conflicts_detection",
        "test_initialize_docker_environment_handling",
        "test_cleanup_docker_environment_handling",
        "test_cleanup_test_environment_comprehensive",
        "test_initialize_components_progress_tracker",
        "test_initialize_components_test_splitter",
        "test_initialize_components_fail_fast_strategy",
        "test_extract_test_counts_from_result",
        "test_validate_e2e_test_timing_zero_duration",
        "test_validate_e2e_test_timing_valid_duration",
        "test_validate_e2e_test_timing_non_e2e_category",
        "test_record_test_results_functionality",
        "test_build_pytest_command_basic",
        "test_build_pytest_command_with_coverage",
        "test_build_pytest_command_with_real_services",
        "test_build_pytest_command_with_parallel_execution",
        "test_build_pytest_command_with_specific_test_file",
        "test_build_frontend_command_basic",
        "test_build_frontend_command_with_coverage",
        "test_configure_environment_test_mode",
        "test_configure_environment_staging_mode",
        "test_set_test_environment_functionality",
        "test_load_test_environment_secrets",
        "test_configure_staging_e2e_auth",
        "test_can_run_cypress_tests_availability",
        "test_get_cypress_runner_initialization",
        "test_run_cypress_tests_handling",
        "test_check_service_availability_handling",
        "test_quick_service_check_functionality",
        "test_determine_subcategory_classification",
        "test_safe_print_unicode_handling",
        "test_generate_report_functionality",
        "test_windows_encoding_setup_handling",
        "test_cross_platform_python_detection",
        "test_path_handling_cross_platform",
        "test_run_method_cleanup_on_exception",
        "test_initialization_error_handling",
        "test_docker_cleanup_error_recovery",
        "test_category_config_loader_integration",
        "test_progress_tracker_integration",
        "test_test_execution_tracker_integration",
        "test_isolated_environment_integration",
        "test_docker_port_discovery_integration",
        "test_initialization_performance",
        "test_category_determination_performance",
        "test_execution_plan_creation_performance",
        "test_command_building_performance",
        "test_uses_isolated_environment_exclusively",
        "test_follows_ssot_import_patterns",
        "test_proper_error_handling_no_silent_failures",
        "test_comprehensive_coverage_validation"
      ]
    },
    {
      "file_path": "/Users/anthony/Documents/GitHub/netra-apex/tests/unit/test_user_session_manager_comprehensive.py",
      "relative_path": "tests/unit/test_user_session_manager_comprehensive.py",
      "category": "unit",
      "service": "global",
      "test_count": 7,
      "has_auth_requirement": false,
      "has_real_services": false,
      "has_websocket_events": false,
      "has_business_value": true,
      "bvj_present": true,
      "imports_valid": true,
      "syntax_valid": true,
      "error_messages": [],
      "docstring": "Comprehensive tests for UserSessionManager SSOT implementation.\n\nThis test suite validates the complete UserSessionManager functionality including:\n- Session creation and reuse for conversation continuity\n- Multi-user isolation\n- Thread management and WebSocket integration  \n- Session cleanup and memory management\n- Metrics collection and monitoring\n- Error handling and recovery\n\nBusiness Value Justification (BVJ):\n- Segment: All (Tests critical chat continuity functionality)\n- Business Goal: Ensure reliable multi-turn AI conversations\n- Value Impact: Validates 90% of platform value delivery mechanism\n- Strategic Impact: Prevents memory leaks and session management failures\n",
      "test_methods": [
        "test_user_data",
        "test_get_session_manager_singleton",
        "test_user_session_creation",
        "test_user_session_activity_update",
        "test_user_session_to_dict",
        "test_session_metrics_creation",
        "test_session_metrics_to_dict"
      ]
    }
  ],
  "generated_at": "2025-09-09T13:13:36.904571"
}