# Podman Compose Configuration - Optimized for Testing
# Compatible with podman-compose and provides rootless container support
#
# Key Differences from Docker Compose:
# - Optimized for rootless operation (better security)
# - Pod-based networking for service grouping
# - No swarm mode deploy options
# - Simplified resource limits
#
# Usage:
# - podman-compose up                   # Start development environment
# - podman-compose --profile test up    # Start test environment
# - podman-compose down                 # Stop all services
# - podman-compose down -v              # Stop and remove volumes

version: '3.8'

services:
  # ============================================
  # DEVELOPMENT ENVIRONMENT
  # ============================================

  # Dev PostgreSQL Database
  dev-postgres:
    image: docker.io/postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--data-checksums --auth-host=md5"
    ports:
      - "${DEV_POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro,Z
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - netra_network
    restart: unless-stopped
    # Podman-specific: simplified resource limits
    mem_limit: 512m
    cpus: 0.25

  # Dev Redis Cache
  dev-redis:
    image: docker.io/redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 200mb --maxmemory-policy allkeys-lru
    ports:
      - "${DEV_REDIS_PORT:-6380}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 256m
    cpus: 0.1

  # Dev ClickHouse Analytics
  dev-clickhouse:
    image: docker.io/clickhouse/clickhouse-server:23.8
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_HTTP_PORT: 8123
    ports:
      - "${DEV_CLICKHOUSE_HTTP_PORT:-8124}:8123"
      - "${DEV_CLICKHOUSE_TCP_PORT:-9001}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 1g
    cpus: 0.2

  # Dev Auth Service
  dev-auth:
    image: localhost/netra-dev-auth:latest
    build:
      context: .
      dockerfile: ./docker/auth.Dockerfile
      args:
        BUILD_ENV: development
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      
      # Database
      POSTGRES_HOST: dev-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      
      # Redis
      REDIS_HOST: dev-redis
      REDIS_PORT: 6379
      
      # Server Config
      PORT: 8081
      HOST: 0.0.0.0
      
      # Auth Config
      SERVICE_ID: auth-service
      SERVICE_SECRET: ${SERVICE_SECRET:-test-secret-for-local-development-only-32chars}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key-must-be-at-least-32-characters}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Google OAuth Configuration
      GOOGLE_OAUTH_CLIENT_ID_DEVELOPMENT: ${GOOGLE_OAUTH_CLIENT_ID_DEVELOPMENT}
      GOOGLE_OAUTH_CLIENT_SECRET_DEVELOPMENT: ${GOOGLE_OAUTH_CLIENT_SECRET_DEVELOPMENT}
      GOOGLE_OAUTH_CLIENT_ID_STAGING: ${GOOGLE_OAUTH_CLIENT_ID_STAGING}
      GOOGLE_OAUTH_CLIENT_SECRET_STAGING: ${GOOGLE_OAUTH_CLIENT_SECRET_STAGING}
      
      # E2E Test Configuration
      E2E_OAUTH_SIMULATION_KEY: ${E2E_OAUTH_SIMULATION_KEY}
    ports:
      - "${DEV_AUTH_PORT:-8081}:8081"
    volumes:
      - auth_data:/app/data
    depends_on:
      - dev-postgres
      - dev-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 1g
    cpus: 0.25

  # Dev Backend Service
  dev-backend:
    image: localhost/netra-dev-backend:latest
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      args:
        BUILD_ENV: development
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
      
      # Database
      POSTGRES_HOST: dev-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      
      # Redis
      REDIS_HOST: dev-redis
      REDIS_PORT: 6379
      
      # ClickHouse
      CLICKHOUSE_HOST: dev-clickhouse
      CLICKHOUSE_PORT: 9000
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      
      # Auth Service
      AUTH_SERVICE_URL: http://dev-auth:8081
      
      # Server Config
      PORT: 8000
      HOST: 0.0.0.0
      
      # Secrets
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key-must-be-at-least-32-characters}
      SERVICE_SECRET: ${SERVICE_SECRET:-dev-service-secret-for-cross-service-auth}
      FERNET_KEY: ${FERNET_KEY:-iZAG-Kz661gRuJXEGzxgghUFnFRamgDrjDXZE6HdJkw=}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-for-development}
      
      # AI/LLM Configuration
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # Memory Monitoring Configuration
      ENABLE_MEMORY_MONITORING: "true"
      MEMORY_CHECK_INTERVAL: "30"
      MEMORY_WARNING_THRESHOLD: "80"
      MEMORY_CRITICAL_THRESHOLD: "90"
      MEMORY_CLEANUP_ENABLED: "true"
      MEMORY_PROFILING_ENABLED: ${MEMORY_PROFILING_ENABLED:-false}
    ports:
      - "${DEV_BACKEND_PORT:-8000}:8000"
    volumes:
      - backend_data:/app/data
    depends_on:
      - dev-postgres
      - dev-redis
      - dev-auth
      - dev-clickhouse
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 2g
    cpus: 0.4

  # Dev Frontend Service
  dev-frontend:
    image: localhost/netra-dev-frontend:latest
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
      args:
        BUILD_ENV: development
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL:-http://localhost:8081}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        NEXT_PUBLIC_ENVIRONMENT: development
    environment:
      NODE_ENV: development
      PORT: 3000
    ports:
      - "${DEV_FRONTEND_PORT:-3000}:3000"
    depends_on:
      - dev-backend
      - dev-auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 1g
    cpus: 0.3

  # ============================================
  # TEST ENVIRONMENT
  # ============================================

  # Test PostgreSQL Database
  test-postgres:
    image: docker.io/postgres:15-alpine
    profiles: ["test"]
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: netra_test
    ports:
      - "${TEST_POSTGRES_PORT:-5434}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.2

  # Test Redis Cache
  test-redis:
    image: docker.io/redis:7-alpine
    profiles: ["test"]
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    ports:
      - "${TEST_REDIS_PORT:-6381}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 64m
    cpus: 0.1

  # Test ClickHouse Analytics
  test-clickhouse:
    image: docker.io/clickhouse/clickhouse-server:23.8
    profiles: ["test"]
    environment:
      CLICKHOUSE_DB: netra_test_analytics
      CLICKHOUSE_USER: test
      CLICKHOUSE_PASSWORD: test
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_HTTP_PORT: 8123
    ports:
      - "${TEST_CLICKHOUSE_HTTP_PORT:-8125}:8123"
      - "${TEST_CLICKHOUSE_TCP_PORT:-9002}:9000"
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra_network
    restart: unless-stopped
    mem_limit: 512m
    cpus: 0.2

# ============================================
# VOLUMES
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  backend_data:
    driver: local
  auth_data:
    driver: local

# ============================================
# NETWORKS
# ============================================
networks:
  netra_network:
    driver: bridge
    
# ============================================
# PODMAN-SPECIFIC NOTES:
# ============================================
# 1. Images use full registry paths (docker.io/)
# 2. SELinux labels (:Z) added for volume mounts on Linux
# 3. Simplified resource limits (mem_limit, cpus)
# 4. No swarm mode deploy configuration
# 5. Rootless operation supported by default
# ============================================