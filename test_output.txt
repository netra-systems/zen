
> netra-frontend-apex-v1@0.1.0 test
> node run-test.js --config jest.config.unified.cjs

Running Jest with args: --config jest.config.unified.cjs
Environment: TEST_SUITE=all
(node:18868) [DEP0190] DeprecationWarning: Passing args to a child process with shell option true can lead to security vulnerabilities, as the arguments are not escaped, only concatenated.
(Use `node --trace-deprecation ...` to show where the warning was created)
FAIL __tests__/debug-thread-switching.test.tsx
  ‚óè Console

    console.log
      === BEFORE EACH ===

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:115:13)

    console.log
      Mock store state: {
        activeThreadId: null,
        messages: [],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        }
      }

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:116:13)

    console.log
      Mock store functions: [
        'activeThreadId',        'messages',
        'isThreadLoading',       'threadLoading',
        'threadLoadingState',    'isProcessing',
        'initialized',           'isConnected',
        'connectionError',       'setActiveThread',
        'setThreadLoading',      'startThreadLoading',
        'completeThreadLoading', 'clearMessages',
        'loadMessages',          'handleWebSocketEvent',
        'resetStore',            'setProcessing',
        'setConnectionStatus'
      ]

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:117:13)

    console.log
      === STARTING DEBUG TEST ===

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:121:13)

    console.log
      Mock threadLoadingService.loadThread set up

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:135:13)

    console.log
      Hook rendered, initial state: {
        isLoading: false,
        loadingThreadId: null,
        error: null,
        lastLoadedThreadId: null,
        operationId: null,
        retryCount: 0,
        currentOperationId: null
      }

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:139:13)

    console.log
      About to call switchToThread...

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:144:13)

    console.log
      üîé Calling result.current.switchToThread...

      at __tests__/debug-thread-switching.test.tsx:150:17

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      üîß ThreadOperationManager.startOperation MOCK EXECUTING: { type: 'switch', threadId: 'thread-1' }

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:71:15)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation thread-1 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Executor threw error: ReferenceError: Cannot access 'useUnifiedChatStore' before initialization
          at useUnifiedChatStore (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2589:38)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\debug-thread-switching.test.tsx:76:24)
          at Object.switchToThread (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2501:26)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\debug-thread-switching.test.tsx:151:24

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:80:17)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      üîé switchToThread returned: false

      at __tests__/debug-thread-switching.test.tsx:152:17

    console.log
      Hook setState for thread-1 (seq 1): prev.lastLoadedThreadId=null, new=thread-1

      at log (jest.setup.js:2573:27)

    console.log
      switchToThread completed, result: false

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:159:13)

    console.log
      switchToThread error: undefined

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:160:13)

    console.log
      Hook state after switch: {
        isLoading: false,
        loadingThreadId: null,
        error: {
          message: "Cannot access 'useUnifiedChatStore' before initialization",
          threadId: 'thread-1'
        },
        lastLoadedThreadId: 'thread-1',
        operationId: null,
        retryCount: 1,
        currentOperationId: null
      }

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:161:13)

    console.log
      Store state after switch: {
        activeThreadId: null,
        messages: [
          {
            id: 'msg-1',
            content: 'Test message',
            role: 'user',
            timestamp: 1640995200000
          }
        ],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        wsEvents: [ { type: 'thread_loading', threadId: 'thread-1' } ]
      }

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:162:13)

    console.log
      ThreadOperationManager mock calls: [
        [
          'switch',
          'thread-1',
          [AsyncFunction (anonymous)],
          { timeoutMs: 5000, retryAttempts: 2, force: undefined }
        ]
      ]

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:163:13)

    console.log
      Loading service mock calls: [ [ 'thread-1' ] ]

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:164:13)

  ‚óè Debug Thread Switching ‚Ä∫ should debug store and hook interaction

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-1"
    Received: null

    [0m [90m 174 |[39m     [90m// Check if store state was updated[39m
     [90m 175 |[39m     [36mconst[39m storeState [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m
    [31m[1m>[22m[39m[90m 176 |[39m     expect(storeState[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m     |[39m                                       [31m[1m^[22m[39m
     [90m 177 |[39m     expect(storeState[33m.[39mmessages)[33m.[39mtoEqual(mockMessages)[33m;[39m
     [90m 178 |[39m     
     [90m 179 |[39m     [90m// Verify the service was called correctly[39m[0m

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:176:39)

FAIL __tests__/unit/useThreadSwitching.detailed-debug.test.tsx
  ‚óè Console

    console.log
      Initial hook state: {
        isLoading: false,
        loadingThreadId: null,
        error: null,
        lastLoadedThreadId: null,
        operationId: null,
        retryCount: 0,
        currentOperationId: null
      }

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:76:13)

    console.log
      Initial store state: {
        activeThreadId: null,
        messages: [],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        }
      }

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:77:13)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      executeWithRetry: calling function

      at __tests__/unit/useThreadSwitching.detailed-debug.test.tsx:70:15

    console.log
      executeWithRetry: got result: {
        success: true,
        threadId: 'thread-1',
        messages: [ { id: 'msg-1', content: 'Test message' } ]
      }

      at __tests__/unit/useThreadSwitching.detailed-debug.test.tsx:72:15

    console.log
      Operation thread-1 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-1 (seq 1): prev.lastLoadedThreadId=null, new=thread-1

      at log (jest.setup.js:2573:27)

    console.log
      Operation success: false

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:83:13)

    console.log
      Final hook state: {
        isLoading: false,
        loadingThreadId: null,
        error: {
          message: "Cannot access 'useUnifiedChatStore' before initialization",
          threadId: 'thread-1'
        },
        lastLoadedThreadId: 'thread-1',
        operationId: null,
        retryCount: 1,
        currentOperationId: null
      }

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:84:13)

    console.log
      Final store state: {
        activeThreadId: null,
        messages: [ { id: 'msg-1', content: 'Test message' } ],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        wsEvents: [ { type: 'thread_loading', threadId: 'thread-1' } ]
      }

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:85:13)

  ‚óè useThreadSwitching Detailed Debug ‚Ä∫ should synchronize hook state and store state

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 88 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m 89 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39misLoading)[33m.[39mtoBe([36mfalse[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 90 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m    |[39m                     [31m[1m^[22m[39m
     [90m 91 |[39m
     [90m 92 |[39m     [90m// Store state should also be updated[39m
     [90m 93 |[39m     [36mconst[39m storeState [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:90:21)

FAIL __tests__/bug_reproduction/thread_state_sync_bug.test.tsx
  ‚óè Console

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation thread-1 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-1 (seq 1): prev.lastLoadedThreadId=null, new=thread-1

      at log (jest.setup.js:2573:27)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 2

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Hook isLoading: true

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:153:13)

    console.log
      Store threadLoading: true

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:154:13)

    console.log
      Hook loadingThreadId: thread-1

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:155:13)

    console.log
      Store activeThreadId: thread-1

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:156:13)

    console.log
      Operation thread-1 (seq 2) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.error
      The current testing environment is not configured to support act(...)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at isConcurrentActEnvironment (node_modules/react-dom/cjs/react-dom-client.development.js:14318:17)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16020:7)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at setState (jest.setup.js:2572:17)
      at MockThreadOperationManagerImpl.startOperation (__mocks__/lib/thread-operation-manager.ts:99:22)
      at Object.switchToThread (jest.setup.js:2501:26)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.error
      The current testing environment is not configured to support act(...)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at isConcurrentActEnvironment (node_modules/react-dom/cjs/react-dom-client.development.js:14318:17)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16020:7)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at Object.setState [as switchToThread] (jest.setup.js:2655:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-1 (seq 2): prev.lastLoadedThreadId=thread-1, new=thread-1

      at log (jest.setup.js:2573:27)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 3

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      useThreadSwitching: switchToThread called with thread-2, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-2 assigned sequence 4

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      useThreadSwitching: switchToThread called with thread-3, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-3 assigned sequence 5

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-3) - activeThreadId now: thread-3, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation thread-3 (seq 5) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-3, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-3) - activeThreadId now: thread-3, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Operation thread-2 (seq 4) superseded by newer operation (seq 5), not updating state

      at log (jest.setup.js:2553:27)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-3 (seq 5): prev.lastLoadedThreadId=thread-1, new=thread-3

      at log (jest.setup.js:2573:27)

    console.log
      Operation for thread-1 was aborted, not updating state

      at log (jest.setup.js:2547:27)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      RAPID SWITCHING BUG:

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:220:13)

    console.log
      Hook lastLoadedThreadId: thread-3

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:221:13)

    console.log
      Store activeThreadId: null

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:222:13)

  ‚óè BUG REPRODUCTION: Thread State Synchronization ‚Ä∫ BUG: Hook state and store state get out of sync

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 109 |[39m
     [90m 110 |[39m     [90m// The operation should succeed from the hook's perspective[39m
    [31m[1m>[22m[39m[90m 111 |[39m     expect(switchResult)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 112 |[39m     
     [90m 113 |[39m     [90m// BUG REPRODUCTION: Hook state and store state are now inconsistent[39m
     [90m 114 |[39m     [36mconst[39m hookState [33m=[39m result[33m.[39mcurrent[33m.[39mstate[33m;[39m[0m

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:111:26)

  ‚óè BUG REPRODUCTION: Thread State Synchronization ‚Ä∫ BUG: Rapid thread switching causes state confusion

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-3"
    Received: null

    [0m [90m 224 |[39m     [90m// Should both be 'thread-3' but might be different due to race conditions[39m
     [90m 225 |[39m     expect(finalHookState[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 226 |[39m     expect(finalStoreState[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
     [90m     |[39m                                            [31m[1m^[22m[39m
     [90m 227 |[39m     expect(finalHookState[33m.[39mlastLoadedThreadId)[33m.[39mtoBe(finalStoreState[33m.[39mactiveThreadId)[33m;[39m
     [90m 228 |[39m   })[33m;[39m
     [90m 229 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:226:44)

FAIL __tests__/unit/useThreadSwitching.simple.test.tsx
  ‚óè Console

    console.log
      useThreadSwitching: switchToThread called with test-123, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation test-123 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(test-123) - activeThreadId now: test-123, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation test-123 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=test-123, current activeThreadId=test-123

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(test-123) - activeThreadId now: test-123, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for test-123 (seq 1): prev.lastLoadedThreadId=null, new=test-123

      at log (jest.setup.js:2573:27)

  ‚óè useThreadSwitching Hook - Simple ‚Ä∫ should call ThreadOperationManager when switching threads

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 114 |[39m     expect(executions[[35m0[39m][33m.[39mthreadId)[33m.[39mtoBe([32m'test-123'[39m)[33m;[39m
     [90m 115 |[39m     expect(threadLoadingService[33m.[39mloadThread)[33m.[39mtoHaveBeenCalledWith([32m'test-123'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 116 |[39m     expect(executions[[35m0[39m][33m.[39mresult[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                          [31m[1m^[22m[39m
     [90m 117 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 118 |[39m   })[33m;[39m
     [90m 119 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.simple.test.tsx:116:42)

FAIL __tests__/unit/useThreadSwitching.debug.test.tsx
  ‚óè Console

    console.log
      DEBUG: Starting thread switch

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:85:13)

    console.log
      useThreadSwitching: switchToThread called with test-123, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation test-123 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(test-123) - activeThreadId now: test-123, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      DEBUG: executeWithRetry called, about to call fn

      at __tests__/unit/useThreadSwitching.debug.test.tsx:75:15

    console.log
      DEBUG: fn returned: {
        success: true,
        threadId: 'test-123',
        messages: [ { id: 'msg-1', content: 'Test message' } ]
      }

      at __tests__/unit/useThreadSwitching.debug.test.tsx:77:15

    console.log
      Operation test-123 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=test-123, current activeThreadId=test-123

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(test-123) - activeThreadId now: test-123, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for test-123 (seq 1): prev.lastLoadedThreadId=null, new=test-123

      at log (jest.setup.js:2573:27)

    console.log
      DEBUG: Thread switch complete, success: false

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:91:13)

    console.log
      DEBUG: mockExecuteWithRetry called: 1 times

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:92:13)

    console.log
      DEBUG: mockLoadThread called: 1 times

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:93:13)

    console.log
      DEBUG: executeWithRetry args: [
        [Function (anonymous)],
        { maxAttempts: 3, baseDelayMs: 1000, signal: AbortSignal {} }
      ]

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:96:15)

  ‚óè useThreadSwitching Debug ‚Ä∫ should call the complete chain

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m  99 |[39m     expect(mockExecuteWithRetry)[33m.[39mtoHaveBeenCalled()[33m;[39m
     [90m 100 |[39m     expect(mockLoadThread)[33m.[39mtoHaveBeenCalledWith([32m'test-123'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 101 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                     [31m[1m^[22m[39m
     [90m 102 |[39m   })[33m;[39m
     [90m 103 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:101:21)

FAIL __tests__/integration/thread-switching-simple.test.tsx
  ‚óè Console

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 1

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation thread-1 (seq 1) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-1 (seq 1): prev.lastLoadedThreadId=null, new=thread-1

      at log (jest.setup.js:2573:27)

    console.log
      Switch result: false

      at Object.<anonymous> (__tests__/integration/thread-switching-simple.test.tsx:112:13)

    console.log
      Loading service mock calls: [ [ 'thread-1' ] ]

      at Object.<anonymous> (__tests__/integration/thread-switching-simple.test.tsx:113:13)

    console.log
      Store state: {
        activeThreadId: null,
        messages: [
          {
            id: 'msg-1',
            content: 'Test message',
            role: 'user',
            timestamp: 1640995200000
          }
        ],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        wsEvents: [ { type: 'thread_loading', threadId: 'thread-1' } ]
      }

      at Object.<anonymous> (__tests__/integration/thread-switching-simple.test.tsx:114:13)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 2

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 3

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      useThreadSwitching: switchToThread called with thread-2, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-2 assigned sequence 4

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      ThreadOperation: clearMessages option = undefined, store.clearMessages exists = true

      at log (jest.setup.js:2508:23)

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Operation thread-2 (seq 4) is valid, updating state

      at log (jest.setup.js:2559:25)

    console.error
      The current testing environment is not configured to support act(...)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at isConcurrentActEnvironment (node_modules/react-dom/cjs/react-dom-client.development.js:14318:17)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16020:7)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at setState (jest.setup.js:2572:17)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.error
      The current testing environment is not configured to support act(...)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at isConcurrentActEnvironment (node_modules/react-dom/cjs/react-dom-client.development.js:14318:17)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16020:7)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at Object.setState [as switchToThread] (jest.setup.js:2655:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Hook setState for thread-2 (seq 4): prev.lastLoadedThreadId=thread-1, new=thread-2

      at log (jest.setup.js:2573:27)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {"clearMessages":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Mock store: clearMessages() called

      at __mocks__/store/unified-chat.ts:68:13

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at __mocks__/store/unified-chat.ts:52:13

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at __mocks__/store/unified-chat.ts:57:13

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at __mocks__/store/unified-chat.ts:63:13

    console.log
      useThreadSwitching: Successfully switched to thread-1

      at Object.log [as switchToThread] (jest.setup.js:2759:21)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at __mocks__/store/unified-chat.ts:52:13

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at __mocks__/store/unified-chat.ts:57:13

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at __mocks__/store/unified-chat.ts:63:13

    console.log
      Direct approach: Calling updateUrl with thread-1

      at Object.log [as switchToThread] (jest.setup.js:2750:29)

    console.log
      useThreadSwitching: Successfully switched to thread-1

      at Object.log [as switchToThread] (jest.setup.js:2759:21)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Operation thread-1 assigned sequence 5

      at Object.log [as switchToThread] (jest.setup.js:2489:19)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      useThreadSwitching: switchToThread called with thread-1, options: {"force":true}

      at log (jest.setup.js:2465:15)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at __mocks__/store/unified-chat.ts:52:13

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at __mocks__/store/unified-chat.ts:57:13

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at __mocks__/store/unified-chat.ts:63:13

    console.log
      useThreadSwitching: Successfully switched to thread-1

      at log (jest.setup.js:2759:21)

  ‚óè Thread Switching Basic Tests ‚Ä∫ should switch to a thread successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 114 |[39m     console[33m.[39mlog([32m'Store state:'[39m[33m,[39m useUnifiedChatStore[33m.[39mgetState())[33m;[39m
     [90m 115 |[39m
    [31m[1m>[22m[39m[90m 116 |[39m     expect(switchResult)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 117 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39misLoading)[33m.[39mtoBe([36mfalse[39m)[33m;[39m
     [90m 118 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m 119 |[39m     [0m

      at Object.<anonymous> (__tests__/integration/thread-switching-simple.test.tsx:116:26)

  ‚óè Thread Switching Basic Tests ‚Ä∫ should prevent concurrent switches

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-2"
    Received: null

    Ignored nodes: comments, script, style
    [36m<html>[39m
      [36m<head />[39m
      [36m<body>[39m
        [36m<div />[39m
      [36m</body>[39m
    [36m</html>[39m

    [0m [90m 204 |[39m     [36mawait[39m waitFor(() [33m=>[39m {
     [90m 205 |[39m       expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-2'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 206 |[39m       expect(useUnifiedChatStore[33m.[39mgetState()[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-2'[39m)[33m;[39m
     [90m     |[39m                                                             [31m[1m^[22m[39m
     [90m 207 |[39m     })[33m;[39m
     [90m 208 |[39m   })[33m;[39m
     [90m 209 |[39m[0m

      at __tests__/integration/thread-switching-simple.test.tsx:206:61
      at runWithExpensiveErrorDiagnosticsDisabled (node_modules/@testing-library/dom/dist/config.js:47:12)
      at checkCallback (node_modules/@testing-library/dom/dist/wait-for.js:124:77)
      at checkRealTimersCallback (node_modules/@testing-library/dom/dist/wait-for.js:118:16)
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

PASS __tests__/regression/websocket-connection-stability.test.tsx
PASS __tests__/bugs/new-chat-navigation-simple.test.tsx
  ‚óè Console

    console.log
      useThreadSwitching: switchToThread called with test-thread-123, options: {"clearMessages":true,"updateUrl":true,"showLoadingIndicator":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to test-thread-123: TypeError: useUnifiedChatStore.getState is not a function
          at Object.getState [as switchToThread] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2694:117)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:111:40
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:110:14)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

    console.log
      Total router.replace calls: 0

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:124:13)

    console.log
      Router replace history: []

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:125:13)

    console.log
      useThreadSwitching: switchToThread called with rapid-thread-1, options: {"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to rapid-thread-1: TypeError: useUnifiedChatStore.getState is not a function
          at Object.getState [as switchToThread] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2694:117)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:147:51
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:145:14)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

    console.log
      useThreadSwitching: switchToThread called with rapid-thread-2, options: {"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to rapid-thread-2: TypeError: useUnifiedChatStore.getState is not a function
          at Object.getState [as switchToThread] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2694:117)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:148:51
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:145:14)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

    console.log
      useThreadSwitching: switchToThread called with rapid-thread-3, options: {"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to rapid-thread-3: TypeError: useUnifiedChatStore.getState is not a function
          at Object.getState [as switchToThread] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2694:117)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:149:51
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:145:14)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

    console.log
      Rapid switch router calls: 0

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:161:13)

    console.log
      Rapid switch history: []

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:162:13)

    console.log
      useThreadSwitching: switchToThread called with failing-thread, options: {"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to failing-thread: TypeError: useUnifiedChatStore.getState is not a function
          at Object.getState [as switchToThread] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\jest.setup.js:2694:117)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:187:55
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\bugs\new-chat-navigation-simple.test.tsx:186:14)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

    console.log
      Error scenario router calls: 0

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:198:13)

    console.log
      Error scenario history: []

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-simple.test.tsx:199:13)

PASS __tests__/regression/auth-flow-stability.test.tsx
PASS __tests__/integration/chat-sidebar-thread-switch.test.tsx
  ‚óè Console

    console.log
      üîß Mock switchToThread called with thread-2

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-2, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Got messages from loadThread: []

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-2, activeThreadId now: thread-2, messages: 0

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

    console.log
      üîß Mock switchToThread called with thread-2

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-2, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Got messages from loadThread: []

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-2, activeThreadId now: thread-2, messages: 0

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

    console.log
      üîß Mock switchToThread called with thread-2

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-2, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Mock switchToThread called with thread-3

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-3) - activeThreadId now: thread-3, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-3, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Got messages from loadThread: []

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-3

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-2, activeThreadId now: thread-2, messages: 0

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

    console.log
      üîß Got messages from loadThread: []

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-3, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-3) - activeThreadId now: thread-3, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-3, activeThreadId now: thread-3, messages: 0

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

    console.log
      üîß Mock switchToThread called with thread-2

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-2, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Got messages from loadThread: [
        {
          id: 'new-1',
          content: 'New message',
          role: 'user',
          timestamp: 1640995200000
        }
      ]

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-2, activeThreadId now: thread-2, messages: 1

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

    console.log
      üîß Mock switchToThread called with thread-2

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:129:15

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      üîß Set loading state for thread-2, threadLoading now: true

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:136:17

    console.log
      üîß Got messages from loadThread: []

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:145:17

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      üîß Completed loading for thread-2, activeThreadId now: thread-2, messages: 0

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:149:19

    console.log
      üîß Triggered immediate state update to ensure re-render

      at __tests__/integration/chat-sidebar-thread-switch.test.tsx:159:17

PASS __tests__/integration/new-chat-fix-verification.test.tsx
  ‚óè Console

    console.debug
      [2025-09-07T14:30:03.607Z] DEBUG: Thread state: idle -> creating { threadId: null, operationId: 'create_1640995200000_njesbabgc' }

      at FrontendLogger.log (lib/logger.ts:159:40)

    console.debug
      [2025-09-07T14:30:03.611Z] DEBUG: State transition: idle -> creating (START_CREATE) undefined

      at FrontendLogger.log (lib/logger.ts:159:40)

    console.warn
      [2025-09-07T14:30:03.914Z] WARN: No transition found for event START_SWITCH in state creating undefined

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at FrontendLogger.log (lib/logger.ts:165:39)
      at FrontendLogger.warn (lib/logger.ts:232:10)
      at ThreadStateMachine.transition (lib/thread-state-machine.ts:115:14)
      at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (components/chat/ChatSidebar.tsx:169:24)

    console.warn
      [2025-09-07T14:30:03.914Z] WARN: Thread transition blocked: START_SWITCH in state creating undefined

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at FrontendLogger.log (lib/logger.ts:165:39)
      at FrontendLogger.warn (lib/logger.ts:232:10)
      at Object.onTransitionBlocked (lib/thread-state-machine.ts:249:14)
      at ThreadStateMachine.transition (lib/thread-state-machine.ts:116:38)
      at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (components/chat/ChatSidebar.tsx:169:24)

    console.debug
      [2025-09-07T14:30:03.914Z] DEBUG: Thread state: creating -> idle { threadId: null, operationId: 'create_1640995200000_njesbabgc' }

      at FrontendLogger.log (lib/logger.ts:159:40)

    console.debug
      [2025-09-07T14:30:03.915Z] DEBUG: State transition: creating -> idle (COMPLETE_SUCCESS) undefined

      at FrontendLogger.log (lib/logger.ts:159:40)

    console.log
      ‚úÖ Fix verified: New chat uses switchToThread with updateUrl: true

      at Object.<anonymous> (__tests__/integration/new-chat-fix-verification.test.tsx:140:13)

PASS __tests__/bugs/new-chat-url-race-condition.test.tsx
  ‚óè Console

    console.log
      URL Update History: [
        { url: '/chat?thread=new-thread-456', timestamp: 1640995200000 },
        { url: '/chat?thread=new-thread-456', timestamp: 1640995200000 }
      ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:100:13)

    console.log
      Rapid click URL History: [
        { url: '/chat?thread=rapid-thread-1', timestamp: 1640995200000 },
        { url: '/chat?thread=rapid-thread-2', timestamp: 1640995200000 },
        { url: '/chat?thread=rapid-thread-1', timestamp: 1640995200000 },
        { url: '/chat?thread=rapid-thread-2', timestamp: 1640995200000 },
        { url: '/chat?thread=rapid-thread-3', timestamp: 1640995200000 },
        { url: '/chat?thread=rapid-thread-3', timestamp: 1640995200000 }
      ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:150:13)

    console.log
      Final URL test history: [
        { url: '/chat?thread=thread-final-2', timestamp: 1640995200000 },
        { url: '/chat?thread=thread-final-2', timestamp: 1640995200000 },
        { url: '/chat?thread=thread-final-1', timestamp: 1640995200000 },
        { url: '/chat?thread=thread-final-1', timestamp: 1640995200000 }
      ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:208:13)

    console.log
      Last URL update: { url: '/chat?thread=thread-final-1', timestamp: 1640995200000 }

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:224:13)

    console.log
      This demonstrates the race condition - final URL is unpredictable

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:225:13)

    console.log
      Operation interference log: [
        { id: 1, action: 'start', timestamp: 1640995200000 },
        { id: 2, action: 'start', timestamp: 1640995200000 },
        { id: 3, action: 'start', timestamp: 1640995200000 },
        { id: 1, action: 'complete', timestamp: 1640995200000 },
        { id: 2, action: 'complete', timestamp: 1640995200000 },
        { id: 3, action: 'complete', timestamp: 1640995200000 }
      ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:269:13)

    console.log
      Operations ran concurrently without protection

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:284:13)

    console.log
      Non-atomic URL history: [
        {
          operation: 'op1-store',
          url: '/chat?thread=atomic-test-thread',
          timestamp: 1640995200000
        },
        {
          operation: 'op2-store',
          url: '/chat?thread=atomic-test-thread',
          timestamp: 1640995200000
        },
        {
          operation: 'op1-manual',
          url: '/chat?thread=atomic-test-thread',
          timestamp: 1640995200000
        },
        {
          operation: 'op2-manual',
          url: '/chat?thread=atomic-test-thread',
          timestamp: 1640995200000
        }
      ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:332:13)

    console.log
      Operation sequence: [ 'op1-store', 'op2-store', 'op1-manual', 'op2-manual' ]

      at Object.<anonymous> (__tests__/bugs/new-chat-url-race-condition.test.tsx:339:13)

PASS __tests__/websocket-mock-validation.test.ts
  ‚óè Console

    console.warn
      Attempted to set real WebSocket in test environment - blocked

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at Window.warn (jest.setup.js:360:15)
      at Object.<anonymous> (__tests__/websocket-mock-validation.test.ts:225:23)

PASS __tests__/providers/WebSocketProvider.diagnostic.test.tsx
  ‚óè Console

    console.log
      
      === TEST SETUP ===

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:127:13)

    console.log
      TEST: Starting diagnostic test

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:135:13)

    console.log
      TEST: Rendering with initial auth state: { token: null, initialized: false, user: null }

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:144:13)

    console.log
      AUTH CONTEXT: { token: null, initialized: false, user: null }

      at children (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:118:17)

    console.log
      COMPONENT: WebSocket context state: { status: 'CLOSED', messageCount: 0 }

      at TestConsumer (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:100:11)

    console.log
      TEST: Waiting for initial render to settle...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:155:13)

    console.log
      TEST: Setting auth as initialized with no token

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:161:13)

    console.log
      AUTH CONTEXT: { token: null, initialized: true, user: null }

      at children (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:118:17)

    console.log
      COMPONENT: WebSocket context state: { status: 'CLOSED', messageCount: 0 }

      at TestConsumer (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:100:11)

    console.log
      TEST: Waiting for auth initialization to settle...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:179:13)

    console.log
      TEST: Adding token (simulating login)

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:185:13)

    console.log
      AUTH CONTEXT: {
        token: 'test_token_123',
        initialized: true,
        user: { id: 'user1', email: 'test@test.com' }
      }

      at children (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:118:17)

    console.log
      COMPONENT: WebSocket context state: { status: 'CLOSED', messageCount: 0 }

      at TestConsumer (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:100:11)

    console.log
      TEST: Waiting for token update to settle...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:203:13)

    console.log
      TEST: Final mock call counts:

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:208:13)

    console.log
      - mockConnect calls: 0

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:209:13)

    console.log
      - mockUpdateToken calls: 0

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:210:13)

    console.log
      - mockDisconnect calls: 0

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:211:13)

    console.log
      TEST: Mock connect calls: []

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.diagnostic.test.tsx:213:13)

PASS __tests__/bugs/new-chat-navigation-bug.test.tsx
  ‚óè Console

    console.error
      Failed to create new chat: Error: Failed to switch to new thread
          at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:189:45)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at MockThreadOperationManagerImpl.startOperation (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__mocks__\lib\thread-operation-manager.ts:99:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:143:20

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at components/chat/ChatSidebar.tsx:209:15

    console.log
      CreateThread mock calls: 1

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

    console.log
      SwitchToThread mock calls: 1

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

    console.log
      Store setActiveThread calls: 0

      at console.<anonymous> (node_modules/jest-mock/build/index.js:631:25)

    console.log
      Fix verified: switchToThread hook was called with URL update option

      at Object.<anonymous> (__tests__/bugs/new-chat-navigation-bug.test.tsx:323:13)

    console.error
      Failed to create new chat: Error: Failed to switch to new thread
          at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:189:45)
          at MockThreadOperationManagerImpl.startOperation (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__mocks__\lib\thread-operation-manager.ts:99:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:143:20

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call (jest.setup.js:3074:19)
      at components/chat/ChatSidebar.tsx:209:15

PASS __tests__/services/analyticsService.test.tsx
PASS __tests__/regression/analytics-events-not-function.test.tsx
PASS __tests__/startup/type-exports.test.tsx
  ‚óè Console

    console.log
      [2025-08-30T14:30:04.609Z] INFO: Environment detected from NEXT_PUBLIC_ENVIRONMENT: test

      at detectEnvironment (lib/unified-api-config.ts:67:13)

    console.log
      [2025-08-30T14:30:04.612Z] INFO: Unified API Configuration: {
        environment: 'test',
        urls: {
          api: 'http://localhost:8000',
          websocket: 'ws://localhost:8000',
          auth: 'http://localhost:8081',
          frontend: 'http://localhost:3000'
        },
        features: {
          useHttps: false,
          useWebSocketSecure: false,
          corsEnabled: false,
          dynamicDiscovery: false,
          enableV2AgentApi: true,
          v2MigrationMode: 'full'
        }
      }

      at getUnifiedApiConfig (lib/unified-api-config.ts:385:11)

    console.info
      [2025-09-07T14:30:04.614Z] INFO: Auth Service Client initialized for test { baseUrl: 'http://localhost:8081', environment: 'test' }

      at FrontendLogger.log (lib/logger.ts:162:39)

    console.info
      [2025-09-07T14:30:04.616Z] INFO: Auth Service Client initialized for test { baseUrl: 'http://localhost:8081', environment: 'test' }

      at FrontendLogger.log (lib/logger.ts:162:39)

    console.debug
      [2025-09-07T14:30:04.617Z] DEBUG: Fetching auth config from: http://localhost:8081/auth/config undefined

      at FrontendLogger.log (lib/logger.ts:159:40)

    console.warn
      [2025-09-07T14:30:04.617Z] WARN: Auth service unavailable, using offline configuration: {}

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at FrontendLogger.log (lib/logger.ts:165:39)
      at FrontendLogger.warn (lib/logger.ts:232:10)
      at AuthServiceClient.getAuthConfig (lib/auth-service-client.ts:153:14)
      at Object.<anonymous> (__tests__/startup/type-exports.test.tsx:238:7)

PASS __tests__/hooks/useLocalStorage.test.ts
  ‚óè Console

    console.error
      Error reading localStorage key "malformed-key": SyntaxError: Unexpected token 'i', "invalid-json{" is not valid JSON
          at JSON.parse (<anonymous>)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:39:26
          at mountStateImpl (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:6130:24)
          at mountState (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:6151:22)
          at Object.useState (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:22951:18)
          at Object.process.env.NODE_ENV.exports.useState (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:1222:34)
          at useLocalStorage (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:36:47)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:335:41
          at TestComponent (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\pure.js:331:27)
          at Object.react_stack_bottom_frame (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:23863:20)
          at renderWithHooks (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:5529:22)
          at updateFunctionComponent (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:8897:19)
          at beginWork (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:10522:18)
          at runWithFiberInDEV (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:1522:13)
          at performUnitOfWork (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:15140:22)
          at workLoopSync (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:14956:41)
          at renderRootSync (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:14936:11)
          at performWorkOnRoot (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:14419:13)
          at performWorkOnRootViaSchedulerTask (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react-dom\cjs\react-dom-client.development.js:16216:7)
          at flushActQueue (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:566:34)
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:860:10)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at renderRoot (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\pure.js:190:26)
          at render (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\pure.js:292:10)
          at renderHook (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\pure.js:340:7)
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:335:34)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at __tests__/hooks/useLocalStorage.test.ts:41:15
      at mountStateImpl (node_modules/react-dom/cjs/react-dom-client.development.js:6130:24)
      at mountState (node_modules/react-dom/cjs/react-dom-client.development.js:6151:22)
      at Object.useState (node_modules/react-dom/cjs/react-dom-client.development.js:22951:18)
      at Object.process.env.NODE_ENV.exports.useState (node_modules/react/cjs/react.development.js:1222:34)
      at useLocalStorage (__tests__/hooks/useLocalStorage.test.ts:36:47)
      at __tests__/hooks/useLocalStorage.test.ts:335:41
      at TestComponent (node_modules/@testing-library/react/dist/pure.js:331:27)
      at Object.react_stack_bottom_frame (node_modules/react-dom/cjs/react-dom-client.development.js:23863:20)
      at renderWithHooks (node_modules/react-dom/cjs/react-dom-client.development.js:5529:22)
      at updateFunctionComponent (node_modules/react-dom/cjs/react-dom-client.development.js:8897:19)
      at beginWork (node_modules/react-dom/cjs/react-dom-client.development.js:10522:18)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at performUnitOfWork (node_modules/react-dom/cjs/react-dom-client.development.js:15140:22)
      at workLoopSync (node_modules/react-dom/cjs/react-dom-client.development.js:14956:41)
      at renderRootSync (node_modules/react-dom/cjs/react-dom-client.development.js:14936:11)
      at performWorkOnRoot (node_modules/react-dom/cjs/react-dom-client.development.js:14419:13)
      at performWorkOnRootViaSchedulerTask (node_modules/react-dom/cjs/react-dom-client.development.js:16216:7)
      at flushActQueue (node_modules/react/cjs/react.development.js:566:34)
      at process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:860:10)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at renderRoot (node_modules/@testing-library/react/dist/pure.js:190:26)
      at render (node_modules/@testing-library/react/dist/pure.js:292:10)
      at renderHook (node_modules/@testing-library/react/dist/pure.js:340:7)
      at Object.<anonymous> (__tests__/hooks/useLocalStorage.test.ts:335:34)

    console.error
      Error setting localStorage key "quota-key": Error [QuotaExceededError]: QuotaExceededError
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:344:21)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-mock\build\index.js:305:39
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-mock\build\index.js:312:13)
          at Object.mockConstructor [as setItem] (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-mock\build\index.js:102:19)
          at Array.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:50:27)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:355:24
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:354:8)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at processTicksAndRejections (node:internal/process/task_queues:105:5)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at Array.<anonymous> (__tests__/hooks/useLocalStorage.test.ts:52:15)
      at __tests__/hooks/useLocalStorage.test.ts:355:24
      at node_modules/@testing-library/react/dist/act-compat.js:48:24
      at process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:790:22)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at Object.<anonymous> (__tests__/hooks/useLocalStorage.test.ts:354:8)

    console.error
      Error setting localStorage key "circular-key": TypeError: Converting circular structure to JSON
          --> starting at object with constructor 'Object'
          --- property 'self' closes the circle
          at JSON.stringify (<anonymous>)
          at Array.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:50:45)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:527:24
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:48:24
          at process.env.NODE_ENV.exports.act (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\react\cjs\react.development.js:790:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\@testing-library\react\dist\act-compat.js:47:25
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\hooks\useLocalStorage.test.ts:526:8)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at Array.<anonymous> (__tests__/hooks/useLocalStorage.test.ts:52:15)
      at __tests__/hooks/useLocalStorage.test.ts:527:24
      at node_modules/@testing-library/react/dist/act-compat.js:48:24
      at process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:790:22)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at Object.<anonymous> (__tests__/hooks/useLocalStorage.test.ts:526:8)

PASS __tests__/integration/new-chat-url-update.test.tsx
  ‚óè Console

    console.log
      useThreadSwitching: switchToThread called with new-thread-123, options: {"clearMessages":true,"showLoadingIndicator":false,"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      Direct approach: Calling updateUrl with new-thread-123

      at Object.log [as switchToThread] (jest.setup.js:2750:29)

    console.log
      useThreadSwitching: Successfully switched to new-thread-123

      at Object.log [as switchToThread] (jest.setup.js:2759:21)

    console.log
      useThreadSwitching: switchToThread called with new-thread-456, options: {"clearMessages":true,"updateUrl":false}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.warn
      Store activeThreadId not updated: expected new-thread-456, got new-thread-123

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at Object.warn [as switchToThread] (jest.setup.js:2736:23)
      at __tests__/integration/new-chat-url-update.test.tsx:152:7

    console.log
      useThreadSwitching: Successfully switched to new-thread-456

      at Object.log [as switchToThread] (jest.setup.js:2759:21)

    console.log
      useThreadSwitching: switchToThread called with new-thread-456, options: {"clearMessages":true,"updateUrl":true}

      at Object.log [as switchToThread] (jest.setup.js:2465:15)

    console.log
      useThreadSwitching: Exception during switch to new-thread-456: Error: Failed to create thread
          at Object.<anonymous> (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__tests__\integration\new-chat-url-update.test.tsx:165:19)
          at Promise.finally.completed (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1559:28)
          at new Promise (<anonymous>)
          at callAsyncCircusFn (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1499:10)
          at _callCircusTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1009:40)
          at _runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:949:3)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:839:13)
          at _runTestsForDescribeBlock (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:829:11)
          at run (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:757:3)
          at runAndTransformResultsToJestFormat (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\jestAdapterInit.js:1920:21)
          at jestAdapter (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-circus\build\runner.js:101:19)
          at runTestInternal (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:275:16)
          at runTest (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:343:7)
          at Object.worker (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\node_modules\jest-runner\build\testWorker.js:497:12)

      at Object.log [as switchToThread] (jest.setup.js:2791:17)

PASS __tests__/hooks/usePrevious.test.ts
PASS __tests__/integration/thread-switching-e2e.test.tsx
  ‚óè Console

    console.log
      useThreadLoader called with activeThreadId: thread-1 handleThreadClick: function

      at useThreadLoader (__tests__/integration/thread-switching-e2e.test.tsx:140:13)

    console.log
      ThreadList rendered with threads: 2 threads

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:81:13)

    console.log
      ThreadList onThreadClick: function

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:82:13)

    console.log
      Thread clicked: thread-2 onThreadClick: function

      at onClick (__tests__/integration/thread-switching-e2e.test.tsx:89:23)

    console.log
      mockSwitchToThread called with: thread-2

      at __tests__/integration/thread-switching-e2e.test.tsx:245:15

    console.log
      useThreadLoader called with activeThreadId: thread-1 handleThreadClick: function

      at useThreadLoader (__tests__/integration/thread-switching-e2e.test.tsx:140:13)

    console.log
      ThreadList rendered with threads: 2 threads

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:81:13)

    console.log
      ThreadList onThreadClick: function

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:82:13)

    console.log
      Thread clicked: thread-1 onThreadClick: function

      at onClick (__tests__/integration/thread-switching-e2e.test.tsx:89:23)

    console.log
      useThreadLoader called with activeThreadId: thread-1 handleThreadClick: function

      at useThreadLoader (__tests__/integration/thread-switching-e2e.test.tsx:140:13)

    console.log
      ThreadList rendered with threads: 2 threads

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:81:13)

    console.log
      ThreadList onThreadClick: function

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:82:13)

    console.log
      Thread clicked: thread-2 onThreadClick: function

      at onClick (__tests__/integration/thread-switching-e2e.test.tsx:89:23)

    console.warn
      Cannot switch threads while processing is in progress

    [0m [90m 3079 |[39m       [36mreturn[39m[33m;[39m
     [90m 3080 |[39m     }
    [31m[1m>[22m[39m[90m 3081 |[39m     originalWarn[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                  [31m[1m^[22m[39m
     [90m 3082 |[39m   }[33m;[39m
     [90m 3083 |[39m })[33m;[39m
     [90m 3084 |[39m[0m

      at console.call (jest.setup.js:3081:18)
      at components/chat/ChatSidebar.tsx:60:15
      at onClick (__tests__/integration/thread-switching-e2e.test.tsx:91:17)
      at executeDispatch (node_modules/react-dom/cjs/react-dom-client.development.js:16368:9)
      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)
      at processDispatchQueue (node_modules/react-dom/cjs/react-dom-client.development.js:16418:19)
      at node_modules/react-dom/cjs/react-dom-client.development.js:17016:9
      at batchedUpdates$1 (node_modules/react-dom/cjs/react-dom-client.development.js:3262:40)
      at dispatchEventForPluginEventSystem (node_modules/react-dom/cjs/react-dom-client.development.js:16572:7)
      at dispatchEvent (node_modules/react-dom/cjs/react-dom-client.development.js:20658:11)
      at dispatchDiscreteEvent (node_modules/react-dom/cjs/react-dom-client.development.js:20626:11)
      at HTMLDivElement.callTheUserObjectsOperation (node_modules/jsdom/lib/jsdom/living/generated/EventListener.js:26:30)
      at innerInvokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:350:25)
      at invokeEventListeners (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:286:3)
      at HTMLButtonElementImpl._dispatch (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:233:9)
      at HTMLButtonElementImpl.dispatchEvent (node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:104:17)
      at HTMLButtonElement.dispatchEvent (node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:241:34)
      at node_modules/@testing-library/dom/dist/events.js:19:20
      at node_modules/@testing-library/react/dist/pure.js:108:16
      at node_modules/@testing-library/react/dist/act-compat.js:48:24
      at process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:790:22)
      at node_modules/@testing-library/react/dist/act-compat.js:47:25
      at Object.eventWrapper (node_modules/@testing-library/react/dist/pure.js:107:28)
      at fireEvent (node_modules/@testing-library/dom/dist/events.js:12:35)
      at fireEvent.<computed> [as click] (node_modules/@testing-library/dom/dist/events.js:110:36)
      at fireEvent.<computed> [as click] (node_modules/@testing-library/react/dist/fire-event.js:15:52)
      at __tests__/integration/thread-switching-e2e.test.tsx:393:17
      at process.env.NODE_ENV.exports.act (node_modules/react/cjs/react.development.js:790:22)
      at Object.<anonymous> (__tests__/integration/thread-switching-e2e.test.tsx:392:14)

    console.log
      useThreadLoader called with activeThreadId: thread-1 handleThreadClick: function

      at useThreadLoader (__tests__/integration/thread-switching-e2e.test.tsx:140:13)

    console.log
      ThreadList rendered with threads: 2 threads

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:81:13)

    console.log
      ThreadList onThreadClick: function

      at ThreadList (__tests__/integration/thread-switching-e2e.test.tsx:82:13)

    console.log
      Thread clicked: thread-2 onThreadClick: function

      at onClick (__tests__/integration/thread-switching-e2e.test.tsx:89:23)

    console.log
      mockSwitchToThread called with: thread-2

      at __tests__/integration/thread-switching-e2e.test.tsx:245:15

    console.log
      mockSwitchToThread: Loading failed, not switching thread

      at __tests__/integration/thread-switching-e2e.test.tsx:273:17

    console.error
      Failed to switch thread: Error: Failed to switch to thread thread-2
          at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:103:43)
          at MockThreadOperationManagerImpl.startOperation (C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\__mocks__\lib\thread-operation-manager.ts:99:22)
          at C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\frontend\components\chat\ChatSidebar.tsx:71:20

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at components/chat/ChatSidebar.tsx:113:15

PASS __tests__/critical/app-startup.test.ts
PASS __tests__/debug-auth-test.test.tsx
  ‚óè Console

    console.log
      === localStorage debug ===

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:29:13)

    console.log
      Initial localStorage state:

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:30:13)

    console.log
      jwt_token: null

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:31:13)

    console.log
      token: null

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:32:13)

    console.log
      After localStorage.clear():

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:36:13)

    console.log
      jwt_token: null

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:37:13)

    console.log
      token: null

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:38:13)

    console.log
      Test: jwt_token after clear: null

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:61:13)

    console.log
      mockPush calls: []

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:84:13)

    console.log
      mockPush call count: 0

      at Object.<anonymous> (__tests__/debug-auth-test.test.tsx:85:13)

PASS __tests__/providers/WebSocketProvider.test.tsx
PASS __tests__/hooks/useDebounce.test.ts
PASS __tests__/initialization-transition-fix.test.tsx
FAIL __tests__/integration/thread-switching-diagnostic.test.tsx
  ‚óè Console

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: startThreadLoading(thread-3) - activeThreadId now: thread-3, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-3, current activeThreadId=thread-2

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-3) - activeThreadId now: thread-3, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-2, current activeThreadId=thread-3

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-2) - activeThreadId now: thread-2, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: startThreadLoading(thread-2) - activeThreadId now: thread-2, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.error
      The current testing environment is not configured to support act(...)

    [0m [90m 3072 |[39m       [36mreturn[39m[33m;[39m
     [90m 3073 |[39m     }
    [31m[1m>[22m[39m[90m 3074 |[39m     originalError[33m.[39mcall(console[33m,[39m [33m...[39margs)[33m;[39m
     [90m      |[39m                   [31m[1m^[22m[39m
     [90m 3075 |[39m   }[33m;[39m
     [90m 3076 |[39m   
     [90m 3077 |[39m   console[33m.[39mwarn [33m=[39m ([33m...[39margs) [33m=>[39m {[0m

      at console.call [as error] (jest.setup.js:3074:19)
      at isConcurrentActEnvironment (node_modules/react-dom/cjs/react-dom-client.development.js:14318:17)
      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16020:7)
      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)
      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)
      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)
      at atomicUpdate (hooks/useThreadSwitching.ts:429:7)
      at handleLoadingResult (hooks/useThreadSwitching.ts:450:5)
      at performThreadSwitchWithManager (hooks/useThreadSwitching.ts:248:21)
      at thread_operation_manager_1.ThreadOperationManager.startOperation.timeoutMs (hooks/useThreadSwitching.ts:127:18)
      at MockThreadOperationManagerImpl.startOperation (__mocks__/lib/thread-operation-manager.ts:99:22)
      at Object.switchToThread (hooks/useThreadSwitching.ts:123:22)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: setThreadLoading(false) - threadLoading: false

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:42:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Mock store: startThreadLoading(thread-1) - activeThreadId now: thread-1, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Mock store: clearMessages() called

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:68:13)

    console.log
      Mock store: completeThreadLoading called with threadId=thread-1, current activeThreadId=thread-1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(thread-1) - activeThreadId now: thread-1, messages: 0

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

  ‚óè Thread Switching Diagnostics ‚Ä∫ Race Condition Detection ‚Ä∫ should handle rapid consecutive thread switches without race conditions

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-3"
    Received: "thread-2"

    Ignored nodes: comments, script, style
    [36m<html>[39m
      [36m<head />[39m
      [36m<body>[39m
        [36m<div />[39m
      [36m</body>[39m
    [36m</html>[39m

    [0m [90m 137 |[39m         [36mconst[39m state [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m
     [90m 138 |[39m         [90m// Should end up on thread-3, not thread-1 (even though it has longer delay)[39m
    [31m[1m>[22m[39m[90m 139 |[39m         expect(state[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
     [90m     |[39m                                      [31m[1m^[22m[39m
     [90m 140 |[39m       }[33m,[39m { timeout[33m:[39m [35m3000[39m })[33m;[39m
     [90m 141 |[39m
     [90m 142 |[39m       [90m// Verify messages are present - due to race conditions and cancellation, [39m[0m

      at timeout (__tests__/integration/thread-switching-diagnostic.test.tsx:139:38)
      at runWithExpensiveErrorDiagnosticsDisabled (node_modules/@testing-library/dom/dist/config.js:47:12)
      at checkCallback (node_modules/@testing-library/dom/dist/wait-for.js:124:77)
      at checkRealTimersCallback (node_modules/@testing-library/dom/dist/wait-for.js:118:16)
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

  ‚óè Thread Switching Diagnostics ‚Ä∫ State Synchronization Issues ‚Ä∫ should handle loading state transitions correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 249 |[39m
     [90m 250 |[39m       [90m// Verify state transition sequence - at minimum we should have gotten true at some point[39m
    [31m[1m>[22m[39m[90m 251 |[39m       expect(loadingStates[33m.[39msome(state [33m=>[39m state [33m===[39m [36mtrue[39m))[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                                           [31m[1m^[22m[39m
     [90m 252 |[39m       expect(loadingStates[loadingStates[33m.[39mlength [33m-[39m [35m1[39m])[33m.[39mtoBe([36mfalse[39m)[33m;[39m [90m// Should end with false[39m
     [90m 253 |[39m       
     [90m 254 |[39m       unsubscribe()[33m;[39m[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:251:59)

  ‚óè Thread Switching Diagnostics ‚Ä∫ Memory Leaks and Cleanup ‚Ä∫ should cleanup resources on unmount

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

    [0m [90m 343 |[39m
     [90m 344 |[39m       [90m// The cleanup should be called eventually (may be immediate due to unmount)[39m
    [31m[1m>[22m[39m[90m 345 |[39m       expect(globalCleanupManager[33m.[39mcleanupThread)[33m.[39mtoHaveBeenCalled()[33m;[39m
     [90m     |[39m                                                  [31m[1m^[22m[39m
     [90m 346 |[39m     })[33m;[39m
     [90m 347 |[39m
     [90m 348 |[39m     it([32m'should not accumulate event listeners'[39m[33m,[39m [36masync[39m () [33m=>[39m {[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:345:50)

  ‚óè Thread Switching Diagnostics ‚Ä∫ WebSocket Integration Issues ‚Ä∫ should emit correct WebSocket events during thread switch

    expect(received).toContain(expected) // indexOf

    Expected value: "thread_loading"
    Received array: []

    [0m [90m 385 |[39m       [36mconst[39m calls [33m=[39m storeState[33m.[39mhandleWebSocketEvent[33m.[39mmock[33m.[39mcalls[33m;[39m
     [90m 386 |[39m       [36mconst[39m eventTypes [33m=[39m calls[33m.[39mmap(call [33m=>[39m call[[35m0[39m][33m?[39m[33m.[39mtype)[33m.[39mfilter([33mBoolean[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 387 |[39m       expect(eventTypes)[33m.[39mtoContain([32m'thread_loading'[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 388 |[39m       expect(eventTypes)[33m.[39mtoContain([32m'thread_loaded'[39m)[33m;[39m
     [90m 389 |[39m     })[33m;[39m
     [90m 390 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:387:26)

PASS __tests__/hooks/useToggle.test.ts
PASS __tests__/utils/data-transform.test.ts
PASS __tests__/layout/chat-single-scroll-layout.test.tsx
PASS __tests__/providers/WebSocketProvider.status-debug.test.tsx
  ‚óè Console

    console.log
      üöÄ Starting status trace test...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.status-debug.test.tsx:69:13)

    console.log
      üìä STATUS CHANGE: CLOSED

      at StatusTracker (__tests__/providers/WebSocketProvider.status-debug.test.tsx:41:11)

    console.log
      üìà Status history: [ 'CLOSED' ]

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.status-debug.test.tsx:88:13)

    console.log
      üîå onStatusChange set to: null

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.status-debug.test.tsx:89:13)

    console.log
      ‚ö° webSocketService.connect called: 0

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.status-debug.test.tsx:90:13)

    console.log
      üéØ Expected CLOSED, got: CLOSED

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.status-debug.test.tsx:93:13)

PASS __tests__/components/admin/ConfigurationBuilder.validation.test.ts
PASS __tests__/hooks/useCounter.test.ts
PASS __tests__/providers/WebSocketProvider.context-trace.test.tsx
  ‚óè Console

    console.log
      üöÄ Starting context trace test...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.context-trace.test.tsx:103:13)

    console.log
      üîç Render 1: useWebSocketContext returned: {
        status: 'CLOSED',
        messagesLength: 0,
        contextKeys: [
          'sendMessage',
          'addOptimisticMessage',
          'status',
          'messages',
          'sendOptimisticMessage',
          'reconciliationStats'
        ]
      }

      at __tests__/providers/WebSocketProvider.context-trace.test.tsx:46:15

    console.log
      ‚úÖ Context trace complete

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.context-trace.test.tsx:128:13)

PASS __tests__/services/api.test.ts
PASS __tests__/store/unified-chat.test.ts
PASS __tests__/utils/validation-utils.test.ts
PASS __tests__/store/actions.test.ts
PASS __tests__/providers/WebSocketProvider.focused.test.tsx
  ‚óè Console

    console.log
      === Starting status test ===

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.focused.test.tsx:94:13)

    console.log
      Initial status: CLOSED

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.focused.test.tsx:111:13)

PASS __tests__/components/Button.test.tsx
PASS __tests__/unit/store-selectors.test.tsx
  ‚óè Console

    console.log
      setActiveThread type: function

      at Object.<anonymous> (__tests__/unit/store-selectors.test.tsx:18:13)

    console.log
      completeThreadLoading type: function

      at Object.<anonymous> (__tests__/unit/store-selectors.test.tsx:19:13)

    console.log
      Mock store: completeThreadLoading called with threadId=test-thread-456, current activeThreadId=test-thread-123

      at __mocks__/store/unified-chat.ts:57:13

    console.log
      Mock store: completeThreadLoading(test-thread-456) - activeThreadId now: test-thread-456, messages: 1

      at __mocks__/store/unified-chat.ts:63:13

    console.log
      State after selector calls: {
        activeThreadId: 'test-thread-456',
        messages: [ { id: 'msg-1', content: 'Hello' } ],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        }
      }

      at Object.<anonymous> (__tests__/unit/store-selectors.test.tsx:35:13)

PASS __tests__/providers/WebSocketProvider.minimal.test.tsx
  ‚óè Console

    console.log
      üß™ Testing WebSocketStatus type behavior...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.minimal.test.tsx:44:13)

    console.log
      üéØ useState WebSocketStatus initialized to: CLOSED

      at MinimalStatusTest (__tests__/providers/WebSocketProvider.minimal.test.tsx:14:11)

    console.log
      üìä MinimalStatusTest result: CLOSED

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.minimal.test.tsx:49:13)

    console.log
      üîß Testing hardcoded union type behavior...

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.minimal.test.tsx:55:13)

    console.log
      üî• Hardcoded type useState initialized to: CLOSED

      at HardcodedStatusTest (__tests__/providers/WebSocketProvider.minimal.test.tsx:22:11)

    console.log
      üìà HardcodedStatusTest result: CLOSED

      at Object.<anonymous> (__tests__/providers/WebSocketProvider.minimal.test.tsx:60:13)

PASS __tests__/unit/store-actions.test.tsx
  ‚óè Console

    console.log
      Mock store: completeThreadLoading called with threadId=test-thread, current activeThreadId=null

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:57:13)

    console.log
      Mock store: completeThreadLoading(test-thread) - activeThreadId now: test-thread, messages: 1

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:63:13)

    console.log
      Updated state: {
        activeThreadId: 'test-thread',
        messages: [ { id: '1', content: 'Test message' } ],
        isThreadLoading: false,
        threadLoading: false,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        }
      }

      at Object.<anonymous> (__tests__/unit/store-actions.test.tsx:22:13)

    console.log
      Mock store: startThreadLoading(test-thread) - activeThreadId now: test-thread, threadLoading: true

      at Object.<anonymous> (__mocks__/store/unified-chat.ts:52:13)

    console.log
      Updated state after startThreadLoading: {
        activeThreadId: 'test-thread',
        messages: [],
        isThreadLoading: true,
        threadLoading: true,
        threadLoadingState: null,
        isProcessing: false,
        initialized: true,
        isConnected: false,
        connectionError: null,
        setActiveThread: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        startThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        completeThreadLoading: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        clearMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        loadMessages: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        handleWebSocketEvent: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        resetStore: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setProcessing: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        },
        setConnectionStatus: [Function: mockConstructor] {
          _isMockFunction: true,
          getMockImplementation: [Function (anonymous)],
          mock: [Getter/Setter],
          mockClear: [Function (anonymous)],
          mockReset: [Function (anonymous)],
          mockRestore: [Function (anonymous)],
          mockReturnValueOnce: [Function (anonymous)],
          mockResolvedValueOnce: [Function (anonymous)],
          mockRejectedValueOnce: [Function (anonymous)],
          mockReturnValue: [Function (anonymous)],
          mockResolvedValue: [Function (anonymous)],
          mockRejectedValue: [Function (anonymous)],
          mockImplementationOnce: [Function (anonymous)],
          withImplementation: [Function: bound withImplementation],
          mockImplementation: [Function (anonymous)],
          mockReturnThis: [Function (anonymous)],
          mockName: [Function (anonymous)],
          getMockName: [Function (anonymous)],
          Symbol(Symbol.dispose): [Function (anonymous)]
        }
      }

      at Object.<anonymous> (__tests__/unit/store-actions.test.tsx:38:13)

PASS __tests__/store/selectors.test.ts
PASS __tests__/integration/auth-flow.test.ts
PASS __tests__/utils/string-utils.test.ts
PASS __tests__/lib/utils.test.ts
PASS __tests__/utils/event-payload-mapper.test.ts
PASS __tests__/utils/date-utils.test.ts
PASS __tests__/store/appStore.test.ts
PASS __tests__/utils/helpers.test.ts
PASS __tests__/bugs/new-chat-race-condition-fixed.test.tsx
PASS __tests__/unit/thread-operation-manager.test.tsx

Summary of all failing tests
FAIL __tests__/debug-thread-switching.test.tsx
  ‚óè Debug Thread Switching ‚Ä∫ should debug store and hook interaction

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-1"
    Received: null

    [0m [90m 174 |[39m     [90m// Check if store state was updated[39m
     [90m 175 |[39m     [36mconst[39m storeState [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m
    [31m[1m>[22m[39m[90m 176 |[39m     expect(storeState[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m     |[39m                                       [31m[1m^[22m[39m
     [90m 177 |[39m     expect(storeState[33m.[39mmessages)[33m.[39mtoEqual(mockMessages)[33m;[39m
     [90m 178 |[39m     
     [90m 179 |[39m     [90m// Verify the service was called correctly[39m[0m

      at Object.<anonymous> (__tests__/debug-thread-switching.test.tsx:176:39)

FAIL __tests__/unit/useThreadSwitching.detailed-debug.test.tsx
  ‚óè useThreadSwitching Detailed Debug ‚Ä∫ should synchronize hook state and store state

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 88 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m 89 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39misLoading)[33m.[39mtoBe([36mfalse[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 90 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m    |[39m                     [31m[1m^[22m[39m
     [90m 91 |[39m
     [90m 92 |[39m     [90m// Store state should also be updated[39m
     [90m 93 |[39m     [36mconst[39m storeState [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.detailed-debug.test.tsx:90:21)

FAIL __tests__/bug_reproduction/thread_state_sync_bug.test.tsx
  ‚óè BUG REPRODUCTION: Thread State Synchronization ‚Ä∫ BUG: Hook state and store state get out of sync

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 109 |[39m
     [90m 110 |[39m     [90m// The operation should succeed from the hook's perspective[39m
    [31m[1m>[22m[39m[90m 111 |[39m     expect(switchResult)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 112 |[39m     
     [90m 113 |[39m     [90m// BUG REPRODUCTION: Hook state and store state are now inconsistent[39m
     [90m 114 |[39m     [36mconst[39m hookState [33m=[39m result[33m.[39mcurrent[33m.[39mstate[33m;[39m[0m

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:111:26)

  ‚óè BUG REPRODUCTION: Thread State Synchronization ‚Ä∫ BUG: Rapid thread switching causes state confusion

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-3"
    Received: null

    [0m [90m 224 |[39m     [90m// Should both be 'thread-3' but might be different due to race conditions[39m
     [90m 225 |[39m     expect(finalHookState[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 226 |[39m     expect(finalStoreState[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
     [90m     |[39m                                            [31m[1m^[22m[39m
     [90m 227 |[39m     expect(finalHookState[33m.[39mlastLoadedThreadId)[33m.[39mtoBe(finalStoreState[33m.[39mactiveThreadId)[33m;[39m
     [90m 228 |[39m   })[33m;[39m
     [90m 229 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/bug_reproduction/thread_state_sync_bug.test.tsx:226:44)

FAIL __tests__/unit/useThreadSwitching.simple.test.tsx
  ‚óè useThreadSwitching Hook - Simple ‚Ä∫ should call ThreadOperationManager when switching threads

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 114 |[39m     expect(executions[[35m0[39m][33m.[39mthreadId)[33m.[39mtoBe([32m'test-123'[39m)[33m;[39m
     [90m 115 |[39m     expect(threadLoadingService[33m.[39mloadThread)[33m.[39mtoHaveBeenCalledWith([32m'test-123'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 116 |[39m     expect(executions[[35m0[39m][33m.[39mresult[33m.[39msuccess)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                          [31m[1m^[22m[39m
     [90m 117 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m 118 |[39m   })[33m;[39m
     [90m 119 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.simple.test.tsx:116:42)

FAIL __tests__/unit/useThreadSwitching.debug.test.tsx
  ‚óè useThreadSwitching Debug ‚Ä∫ should call the complete chain

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m  99 |[39m     expect(mockExecuteWithRetry)[33m.[39mtoHaveBeenCalled()[33m;[39m
     [90m 100 |[39m     expect(mockLoadThread)[33m.[39mtoHaveBeenCalledWith([32m'test-123'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 101 |[39m     expect(success)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                     [31m[1m^[22m[39m
     [90m 102 |[39m   })[33m;[39m
     [90m 103 |[39m })[33m;[39m[0m

      at Object.<anonymous> (__tests__/unit/useThreadSwitching.debug.test.tsx:101:21)

FAIL __tests__/integration/thread-switching-simple.test.tsx
  ‚óè Thread Switching Basic Tests ‚Ä∫ should switch to a thread successfully

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 114 |[39m     console[33m.[39mlog([32m'Store state:'[39m[33m,[39m useUnifiedChatStore[33m.[39mgetState())[33m;[39m
     [90m 115 |[39m
    [31m[1m>[22m[39m[90m 116 |[39m     expect(switchResult)[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 117 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39misLoading)[33m.[39mtoBe([36mfalse[39m)[33m;[39m
     [90m 118 |[39m     expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-1'[39m)[33m;[39m
     [90m 119 |[39m     [0m

      at Object.<anonymous> (__tests__/integration/thread-switching-simple.test.tsx:116:26)

  ‚óè Thread Switching Basic Tests ‚Ä∫ should prevent concurrent switches

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-2"
    Received: null

    Ignored nodes: comments, script, style
    [36m<html>[39m
      [36m<head />[39m
      [36m<body>[39m
        [36m<div />[39m
      [36m</body>[39m
    [36m</html>[39m

    [0m [90m 204 |[39m     [36mawait[39m waitFor(() [33m=>[39m {
     [90m 205 |[39m       expect(result[33m.[39mcurrent[33m.[39mstate[33m.[39mlastLoadedThreadId)[33m.[39mtoBe([32m'thread-2'[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 206 |[39m       expect(useUnifiedChatStore[33m.[39mgetState()[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-2'[39m)[33m;[39m
     [90m     |[39m                                                             [31m[1m^[22m[39m
     [90m 207 |[39m     })[33m;[39m
     [90m 208 |[39m   })[33m;[39m
     [90m 209 |[39m[0m

      at __tests__/integration/thread-switching-simple.test.tsx:206:61
      at runWithExpensiveErrorDiagnosticsDisabled (node_modules/@testing-library/dom/dist/config.js:47:12)
      at checkCallback (node_modules/@testing-library/dom/dist/wait-for.js:124:77)
      at checkRealTimersCallback (node_modules/@testing-library/dom/dist/wait-for.js:118:16)
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

FAIL __tests__/integration/thread-switching-diagnostic.test.tsx
  ‚óè Thread Switching Diagnostics ‚Ä∫ Race Condition Detection ‚Ä∫ should handle rapid consecutive thread switches without race conditions

    expect(received).toBe(expected) // Object.is equality

    Expected: "thread-3"
    Received: "thread-2"

    Ignored nodes: comments, script, style
    [36m<html>[39m
      [36m<head />[39m
      [36m<body>[39m
        [36m<div />[39m
      [36m</body>[39m
    [36m</html>[39m

    [0m [90m 137 |[39m         [36mconst[39m state [33m=[39m useUnifiedChatStore[33m.[39mgetState()[33m;[39m
     [90m 138 |[39m         [90m// Should end up on thread-3, not thread-1 (even though it has longer delay)[39m
    [31m[1m>[22m[39m[90m 139 |[39m         expect(state[33m.[39mactiveThreadId)[33m.[39mtoBe([32m'thread-3'[39m)[33m;[39m
     [90m     |[39m                                      [31m[1m^[22m[39m
     [90m 140 |[39m       }[33m,[39m { timeout[33m:[39m [35m3000[39m })[33m;[39m
     [90m 141 |[39m
     [90m 142 |[39m       [90m// Verify messages are present - due to race conditions and cancellation, [39m[0m

      at timeout (__tests__/integration/thread-switching-diagnostic.test.tsx:139:38)
      at runWithExpensiveErrorDiagnosticsDisabled (node_modules/@testing-library/dom/dist/config.js:47:12)
      at checkCallback (node_modules/@testing-library/dom/dist/wait-for.js:124:77)
      at checkRealTimersCallback (node_modules/@testing-library/dom/dist/wait-for.js:118:16)
      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)

  ‚óè Thread Switching Diagnostics ‚Ä∫ State Synchronization Issues ‚Ä∫ should handle loading state transitions correctly

    expect(received).toBe(expected) // Object.is equality

    Expected: true
    Received: false

    [0m [90m 249 |[39m
     [90m 250 |[39m       [90m// Verify state transition sequence - at minimum we should have gotten true at some point[39m
    [31m[1m>[22m[39m[90m 251 |[39m       expect(loadingStates[33m.[39msome(state [33m=>[39m state [33m===[39m [36mtrue[39m))[33m.[39mtoBe([36mtrue[39m)[33m;[39m
     [90m     |[39m                                                           [31m[1m^[22m[39m
     [90m 252 |[39m       expect(loadingStates[loadingStates[33m.[39mlength [33m-[39m [35m1[39m])[33m.[39mtoBe([36mfalse[39m)[33m;[39m [90m// Should end with false[39m
     [90m 253 |[39m       
     [90m 254 |[39m       unsubscribe()[33m;[39m[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:251:59)

  ‚óè Thread Switching Diagnostics ‚Ä∫ Memory Leaks and Cleanup ‚Ä∫ should cleanup resources on unmount

    expect(jest.fn()).toHaveBeenCalled()

    Expected number of calls: >= 1
    Received number of calls:    0

    [0m [90m 343 |[39m
     [90m 344 |[39m       [90m// The cleanup should be called eventually (may be immediate due to unmount)[39m
    [31m[1m>[22m[39m[90m 345 |[39m       expect(globalCleanupManager[33m.[39mcleanupThread)[33m.[39mtoHaveBeenCalled()[33m;[39m
     [90m     |[39m                                                  [31m[1m^[22m[39m
     [90m 346 |[39m     })[33m;[39m
     [90m 347 |[39m
     [90m 348 |[39m     it([32m'should not accumulate event listeners'[39m[33m,[39m [36masync[39m () [33m=>[39m {[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:345:50)

  ‚óè Thread Switching Diagnostics ‚Ä∫ WebSocket Integration Issues ‚Ä∫ should emit correct WebSocket events during thread switch

    expect(received).toContain(expected) // indexOf

    Expected value: "thread_loading"
    Received array: []

    [0m [90m 385 |[39m       [36mconst[39m calls [33m=[39m storeState[33m.[39mhandleWebSocketEvent[33m.[39mmock[33m.[39mcalls[33m;[39m
     [90m 386 |[39m       [36mconst[39m eventTypes [33m=[39m calls[33m.[39mmap(call [33m=>[39m call[[35m0[39m][33m?[39m[33m.[39mtype)[33m.[39mfilter([33mBoolean[39m)[33m;[39m
    [31m[1m>[22m[39m[90m 387 |[39m       expect(eventTypes)[33m.[39mtoContain([32m'thread_loading'[39m)[33m;[39m
     [90m     |[39m                          [31m[1m^[22m[39m
     [90m 388 |[39m       expect(eventTypes)[33m.[39mtoContain([32m'thread_loaded'[39m)[33m;[39m
     [90m 389 |[39m     })[33m;[39m
     [90m 390 |[39m   })[33m;[39m[0m

      at Object.<anonymous> (__tests__/integration/thread-switching-diagnostic.test.tsx:387:26)


Test Suites: 7 failed, 47 passed, 54 total
Tests:       12 failed, 588 passed, 600 total
Snapshots:   0 total
Time:        6.249 s
Ran all test suites.
