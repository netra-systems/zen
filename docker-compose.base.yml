# Netra Docker Compose Base Configuration
# Consolidates shared configurations for development and test environments
# Following DOCKER_TEST_STABILITY_REMEDIATION_PLAN specifications
#
# This file defines reusable YAML anchors that can be referenced in:
# - docker-compose.yml (development environment)
# - docker-compose.test.yml (test environment)
#
# Usage:
# - Inherit from this file in environment-specific compose files
# - Use YAML anchors (&anchor_name) and references (*anchor_name)
# - Override specific values as needed per environment

version: '3.8'

# ============================================
# SHARED YAML ANCHORS FOR REUSE
# ============================================

# Default Health Check Configuration
# Standardized for all services to ensure consistent monitoring
# Following remediation plan specs: interval=10s, timeout=5s, retries=5, start_period=20s
x-default-healthcheck: &default-healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 20s

# Fast Health Check (for development environment with relaxed timing)
x-dev-healthcheck: &dev-healthcheck
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 40s

# Default Resource Limits
# Following remediation plan: 512M limit, 256M reservation, 0.25 CPU as defaults
# Prevents resource exhaustion and Docker daemon crashes
x-default-resources: &default-resources
  deploy:
    resources:
      limits:
        memory: 512M
        cpus: '0.25'
      reservations:
        memory: 256M

# High Memory Resources (for backend/frontend services)
x-high-memory-resources: &high-memory-resources
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.4'
      reservations:
        memory: 512M

# Low Memory Resources (for lightweight services like Redis)
x-low-memory-resources: &low-memory-resources
  deploy:
    resources:
      limits:
        memory: 256M
        cpus: '0.1'
      reservations:
        memory: 128M

# Test-specific Resource Limits (stricter for test environment stability)
x-test-resources: &test-resources
  deploy:
    resources:
      limits:
        memory: 512M
        cpus: '0.3'
      reservations:
        memory: 256M

# Default Restart Policy
# Development: unless-stopped (persistent across Docker daemon restarts)
x-dev-restart-policy: &dev-restart-policy
  restart: unless-stopped

# Test Restart Policy
# Test: no restart (prevents unwanted auto-restarts during testing)
x-test-restart-policy: &test-restart-policy
  restart: "no"

# Default Logging Configuration
# Prevents log files from consuming excessive disk space
# max-size: 10m keeps individual log files small
# max-file: 3 limits total files per container to 30MB max
x-default-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

# Test Logging Configuration (more restrictive for test environments)
x-test-logging: &test-logging
  logging:
    driver: json-file
    options:
      max-size: "5m"
      max-file: "2"

# ============================================
# DATABASE SERVICE CONFIGURATIONS
# ============================================

# PostgreSQL Base Configuration
# Common environment variables and settings for PostgreSQL instances
x-postgres-base: &postgres-base
  image: postgres:15-alpine
  environment: &postgres-env-base
    POSTGRES_INITDB_ARGS: "--data-checksums"
  networks:
    - default
  <<: *default-logging

# PostgreSQL Health Check
# Uses pg_isready with escaped variable for container shell evaluation
x-postgres-healthcheck: &postgres-healthcheck
  test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]

# Redis Base Configuration  
x-redis-base: &redis-base
  image: redis:7-alpine
  networks:
    - default
  <<: *default-logging

# Redis Health Check
x-redis-healthcheck: &redis-healthcheck
  test: ["CMD", "redis-cli", "ping"]

# ClickHouse Base Configuration
x-clickhouse-base: &clickhouse-base
  image: clickhouse/clickhouse-server:23.8
  environment: &clickhouse-env-base
    CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    CLICKHOUSE_HTTP_PORT: 8123
  networks:
    - default
  <<: *default-logging

# ClickHouse Health Check
x-clickhouse-healthcheck: &clickhouse-healthcheck
  test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]

# ============================================
# APPLICATION SERVICE CONFIGURATIONS
# ============================================

# Base Application Service Configuration
# Common settings for backend/auth/frontend services
x-app-service-base: &app-service-base
  networks:
    - default
  <<: *default-logging

# Backend Service Health Check
x-backend-healthcheck: &backend-healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]

# Auth Service Health Check  
x-auth-healthcheck: &auth-healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:8081/health"]

# Frontend Service Health Check
x-frontend-healthcheck: &frontend-healthcheck
  test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]

# ============================================
# ENVIRONMENT-SPECIFIC CONFIGURATIONS
# ============================================

# Development Environment Defaults
x-dev-defaults: &dev-defaults
  <<: *dev-restart-policy
  <<: *default-logging

# Test Environment Defaults  
x-test-defaults: &test-defaults
  <<: *test-restart-policy
  <<: *test-logging

# ============================================
# NETWORK CONFIGURATION
# ============================================

# Default Network Configuration
# Bridge driver with standard MTU for reliable container communication
x-default-network: &default-network
  default:
    driver: bridge

# Test Network Configuration (optimized for testing)
x-test-network: &test-network
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500

# ============================================
# VOLUME CONFIGURATIONS
# ============================================

# Persistent Volume Configuration (for development)
# Uses local driver with default settings for data persistence
x-persistent-volume: &persistent-volume
  driver: local

# Test Volume Configuration (ephemeral, optimized for testing)
x-test-volume: &test-volume
  driver: local

# ============================================
# COMPOSITE CONFIGURATIONS
# ============================================

# Complete PostgreSQL Development Configuration
x-postgres-dev-complete: &postgres-dev-complete
  <<: *postgres-base
  <<: *dev-defaults
  <<: *default-resources
  healthcheck:
    <<: *postgres-healthcheck
    <<: *dev-healthcheck

# Complete PostgreSQL Test Configuration
x-postgres-test-complete: &postgres-test-complete
  <<: *postgres-base
  <<: *test-defaults
  <<: *test-resources
  healthcheck:
    <<: *postgres-healthcheck
    <<: *default-healthcheck

# Complete Redis Development Configuration
x-redis-dev-complete: &redis-dev-complete
  <<: *redis-base
  <<: *dev-defaults
  <<: *low-memory-resources
  healthcheck:
    <<: *redis-healthcheck
    <<: *dev-healthcheck

# Complete Redis Test Configuration
x-redis-test-complete: &redis-test-complete
  <<: *redis-base
  <<: *test-defaults
  healthcheck:
    <<: *redis-healthcheck
    <<: *default-healthcheck
  deploy:
    resources:
      limits:
        memory: 64M
        cpus: '0.1'

# Complete ClickHouse Development Configuration
x-clickhouse-dev-complete: &clickhouse-dev-complete
  <<: *clickhouse-base
  <<: *dev-defaults
  healthcheck:
    <<: *clickhouse-healthcheck
    <<: *dev-healthcheck
  deploy:
    resources:
      limits:
        memory: 1G
        cpus: '0.2'
      reservations:
        memory: 512M

# Complete ClickHouse Test Configuration  
x-clickhouse-test-complete: &clickhouse-test-complete
  <<: *clickhouse-base
  <<: *test-defaults
  <<: *test-resources
  healthcheck:
    <<: *clickhouse-healthcheck
    <<: *default-healthcheck

# Complete Backend Service Development Configuration
x-backend-dev-complete: &backend-dev-complete
  <<: *app-service-base
  <<: *dev-defaults
  <<: *high-memory-resources
  healthcheck:
    <<: *backend-healthcheck
    <<: *dev-healthcheck

# Complete Backend Service Test Configuration
x-backend-test-complete: &backend-test-complete
  <<: *app-service-base
  <<: *test-defaults
  healthcheck:
    <<: *backend-healthcheck
    <<: *default-healthcheck
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: '0.4'
      reservations:
        memory: 1G

# Complete Auth Service Development Configuration
x-auth-dev-complete: &auth-dev-complete
  <<: *app-service-base
  <<: *dev-defaults
  <<: *high-memory-resources
  healthcheck:
    <<: *auth-healthcheck
    <<: *dev-healthcheck

# Complete Auth Service Test Configuration
x-auth-test-complete: &auth-test-complete
  <<: *app-service-base
  <<: *test-defaults
  <<: *high-memory-resources
  healthcheck:
    <<: *auth-healthcheck
    <<: *default-healthcheck

# Complete Frontend Service Development Configuration
x-frontend-dev-complete: &frontend-dev-complete
  <<: *app-service-base
  <<: *dev-defaults
  <<: *high-memory-resources
  healthcheck:
    <<: *frontend-healthcheck
    start_period: 60s  # Frontend needs longer startup time
    <<: *dev-healthcheck

# Complete Frontend Service Test Configuration
x-frontend-test-complete: &frontend-test-complete
  <<: *app-service-base
  <<: *test-defaults
  <<: *high-memory-resources
  healthcheck:
    <<: *frontend-healthcheck
    <<: *default-healthcheck

# ============================================
# USAGE EXAMPLES (COMMENTED OUT)
# ============================================

# Example of how to use these anchors in docker-compose.yml:
#
# services:
#   dev-postgres:
#     <<: *postgres-dev-complete
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER:-netra}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
#       POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
#     ports:
#       - "${DEV_POSTGRES_PORT:-5433}:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#
# Example of how to use these anchors in docker-compose.test.yml:
#
# services:
#   test-postgres:
#     <<: *postgres-test-complete
#     environment:
#       POSTGRES_USER: test_user
#       POSTGRES_PASSWORD: test_pass  
#       POSTGRES_DB: netra_test
#     ports:
#       - "${TEST_POSTGRES_PORT:-5434}:5432"
#     volumes:
#       - test_postgres_data:/var/lib/postgresql/data

# ============================================
# NOTES FOR MAINTAINERS
# ============================================

# 1. Resource Limits Rationale:
#    - Default 512M/256M prevents Docker daemon crashes from memory exhaustion
#    - Test environment uses stricter limits for stability during parallel runs
#    - Development environment allows higher limits for better performance
#
# 2. Health Check Timing:
#    - Test: Fast checks (10s) for quick feedback during testing
#    - Dev: Relaxed checks (30s) for stable development experience
#
# 3. Restart Policies:
#    - Dev: unless-stopped for persistent services across Docker restarts
#    - Test: no restart to prevent unwanted container resurrections during testing
#
# 4. Logging Configuration:
#    - Prevents disk space exhaustion from unbounded log growth
#    - Test environment uses smaller limits for cleaner test runs
#
# 5. Extension Guidelines:
#    - Add new service types as x-service-name-base anchors
#    - Always include both dev and test variants
#    - Follow the naming pattern: x-service-env-complete for full configurations
#    - Document resource requirements and health check specifics