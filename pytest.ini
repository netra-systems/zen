[pytest]
asyncio_mode = auto
addopts = --tb=short
log_cli = true
log_cli_level = WARNING
log_cli_format = %(message)s
markers =
    smoke: marks tests as smoke tests (quick validation tests)
    stress: marks tests as stress tests (high load/scale tests)
    slow: marks tests as slow tests (long-running tests)
    performance: marks tests as performance tests (performance benchmarks)
    real_llm: marks tests that require real LLM API calls (uses actual API keys)
    real_database: marks tests that require real database connections (PostgreSQL)
    real_redis: marks tests that require real Redis connection
    real_clickhouse: marks tests that require real ClickHouse connection
    real_services: marks tests that require any real external services
    real_data: marks tests that require real data generation and processing
    real_quality: marks tests that require real quality validation services
    mock_only: marks tests that use only mocks and no external dependencies
    unit: marks tests as unit tests (isolated component testing)
    integration: marks tests as integration tests (component interaction)
    e2e: marks tests as end-to-end tests (full system flow)

[coverage:run]
source = app

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__(self):
    def __str__(self):

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if __name__ == .__main__.:

    # Don't complain about abstract methods, they aren't run:
    @abstractmethod

ignore_errors = True
