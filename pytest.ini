[pytest]
# Pytest configuration for Netra Core - CRITICAL DOCKER OPTIMIZATION
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = -ra --strict-markers --strict-config --timeout=120 --tb=short --maxfail=10 --disable-warnings -s
minversion = 6.0
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function
markers =
    # Environment markers
    env: Environment-specific tests
    env_test: Tests for test environment compatibility
    test: Tests for test environment only
    dev: Tests for dev environment only  
    staging: Tests for staging environment only
    prod: Tests for production environment only
    
    # Test type markers
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    health: Health check tests
    environment: Environment-specific tests
    critical: Critical business functionality tests
    real: Real service integration tests
    
    # Service markers
    backend: Backend service tests
    auth: Auth service tests  
    frontend: Frontend tests
    
    # Feature markers
    agents: Agent-related tests
    agent_orchestration: Agent orchestration and workflow tests
    agent_state_management: Agent state management and lifecycle handling tests
    circuit_breaker: Circuit breaker pattern tests
    websocket: WebSocket tests
    real_websocket: Real WebSocket connection tests
    database: Database tests
    api: API tests
    chat: Chat interface and messaging tests
    configuration_critical: Critical configuration management tests
    migration: Migration and refactoring tests
    coordination: Service coordination tests
    service_coordination: Inter-service coordination tests
    ssot_validation: SSOT pattern validation tests
    ssot_migration: SSOT migration and consolidation validation tests
    
    # Performance markers
    slow: Slow running tests
    fast: Fast running tests
    fast_test: Quick tests for fast feedback
    timeout: Tests with explicit timeout requirements
    timeout_management: Timeout management and control flow tests
    load_test: Load testing and capacity validation tests
    high_load: High-load performance tests with 100+ concurrent users and resource-intensive operations
    stress: Stress tests with high resource usage
    sla: SLA compliance and validation tests
    rate_limiting: Rate limiting tests
    benchmark: Benchmark and performance measurement tests
    
    # Resource isolation markers
    resource_isolation: General resource isolation tests
    user_isolation: User isolation and multi-user context boundary tests
    concurrent_isolation: Concurrent execution isolation and thread safety tests
    cpu_isolation: CPU isolation tests
    memory_isolation: Memory isolation tests
    network_isolation: Network isolation tests
    file_system_isolation: File system isolation tests
    filesystem_isolation: File system isolation tests (alias)
    multi_tenant_isolation: Multi-tenant isolation tests
    supervisor_isolation: Supervisor process isolation tests
    
    # Service dependency markers
    requires_redis: Tests requiring Redis
    requires_postgres: Tests requiring PostgreSQL
    requires_database: Tests requiring database connections
    requires_docker: Tests requiring Docker services to be running
    no_docker: Tests that explicitly do not require Docker services
    requires_websocket: Tests requiring WebSocket connections
    requires_llm: Tests requiring LLM services
    requires_real_services: Tests requiring real running services
    real_llm: Tests using real LLM API calls
    real_services: Tests using real external services
    real_database: Tests requiring real database connections (enables ClickHouse)
    
    # Agent coordination markers
    sub_agent_coordination: Sub-agent coordination and management tests
    
    # Business logic markers
    billing: Billing-related tests
    auth_flow: Authentication flow tests
    e2e_auth_required: Tests requiring end-to-end authentication flows
    authenticated: Tests that require proper authentication context
    user_management: User management tests
    admin: Admin functionality tests
    oauth: OAuth flow tests
    first_time_user: First-time user experience tests
    
    # Infrastructure markers
    infrastructure: Infrastructure connectivity and configuration tests
    deployment: Deployment tests
    post_deployment: Post-deployment validation tests
    docker: Docker container and orchestration tests
    monitoring: Monitoring tests
    security: Security tests
    resilience: System resilience and recovery tests
    graceful_degradation: Graceful degradation and fallback tests
    retry: Retry mechanism and failure recovery tests  
    logging_metrics: Logging and metrics pipeline tests
    observability: Observability and monitoring tests
    error_handling: Error handling and edge case tests
    regression: Regression test validation
    
    # Skip markers
    skip_ci: Skip in CI environment
    skip_local: Skip in local environment
    manual: Manual tests only
    
    # Priority markers
    critical: Critical system tests
    critical_type_safety: Critical type safety validation tests
    mission_critical: Mission critical tests that CANNOT fail
    singleton_removal: Tests validating singleton pattern removal for concurrent user support
    smoke: Basic smoke tests
    startup: System startup tests
    recovery: Recovery tests
    error_recovery: Error recovery tests
    performance: Performance tests
    comprehensive: Comprehensive test coverage
    production: Production environment tests
    production_validation: Production environment configuration and system validation tests
    coverage_validation: Coverage validation tests
    
    # Additional E2E markers
    real_e2e: Real E2E tests using actual services
    real: Real implementation tests with actual services and network calls
    connectivity: Connectivity validation tests for staging environment
    skip_if_no_real_llm: Skip if real LLM is not available
    redis: Redis-specific tests
    soak: Long-running soak tests
    backup_recovery: Backup and recovery tests
    disaster_recovery: Disaster recovery tests
    session_management: Session management and user isolation tests
    mission_critical: Mission critical system functionality tests
    memory: Memory usage and optimization tests
    load_testing: Load testing and stress tests
    error_handling: Error handling and recovery tests
    interservice: Inter-service communication and integration tests
    api_contract: API contract validation tests
    config: Configuration and environment-related tests
    startup_services: System startup services phase validation tests
    medium: Medium complexity/duration tests
    
    # ID System markers - CRITICAL tests exposing ID system inconsistencies
    id_system: ID system tests (exposing uuid vs UnifiedIDManager problems)
    id_system_validation: ID validation inconsistency tests
    id_contamination: Cross-service ID contamination tests
    id_persistence: Database ID persistence mixed format tests
    multi_user: Multi-user ID isolation tests
    business_requirements: Business requirement compliance tests
    service_integration: Service integration boundary tests
    auth_required: Tests requiring real authentication flows
    
    # Additional Agent and Service markers
    agent: General agent-related tests
    agent_events: Agent event handling and notification tests  
    agent_integration: Agent integration with system components
    auth_service: Authentication service specific tests
    auth_validation: Authentication validation and security tests
    authentication: Authentication flow and mechanism tests
    authentication_compliance: CLAUDE.md authentication compliance validation tests
    websocket_authentication: WebSocket authentication enforcement and validation tests
    
    # API and Integration markers
    api_integration: API integration and contract tests
    database_integration: Database integration and connectivity tests
    websocket_integration: WebSocket integration and communication tests
    github_integration: GitHub API and integration tests
    external_api: External API integration tests
    
    # Performance and Load markers
    performance_load: Performance load testing and capacity validation
    broadcast_performance: Broadcasting and message distribution performance tests
    xslow: Extra slow tests requiring extended timeouts
    arm_slow: Slow tests on ARM architecture
    slow_pypy: Slow tests on PyPy interpreter
    slowtest: General slow running tests
    
    # Platform and Environment markers  
    fails_arm_wheels: Tests that fail on ARM wheel builds
    fail_slow: Tests that are expected to be slow or fail under load
    single_cpu: Tests requiring single CPU execution
    valgrind_error: Tests with known Valgrind errors
    skip_ubsan: Skip under undefined behavior sanitizer
    skip_xp_backends: Skip on Windows XP backends
    xfail_on_32bit: Expected failures on 32-bit systems
    xfail_xp_backends: Expected failures on XP backends
    
    # Business Logic and Metrics markers
    business_metrics: Business metrics collection and analysis tests
    business_value: Business value validation and measurement tests
    business_value_validation: Business value validation and compliance testing
    business_continuity: Business continuity and disaster recovery tests
    business_workflow: Business workflow and process validation tests
    enterprise: Enterprise feature and functionality tests
    compliance: Regulatory compliance and audit tests
    audit_logging: Audit logging and compliance tracking tests
    
    # Startup and Lifecycle markers
    startup_cache: Application startup caching tests
    startup_database: Database startup and initialization tests  
    startup_dependencies: Dependency initialization and startup tests
    startup_init: System initialization and bootstrap tests
    startup_validation: Startup process validation tests
    
    # WebSocket Extended markers
    websocket_events: WebSocket event handling and dispatch tests
    websocket_performance: WebSocket performance and throughput tests
    websocket_race_conditions: WebSocket concurrency and race condition tests
    race_conditions: marks tests for race condition reproduction and validation
    race_condition: marks individual test for race condition validation (singular form)
    websocket_reliability: WebSocket reliability and fault tolerance tests
    websocket_validation: WebSocket protocol and message validation tests
    websocket_regression: WebSocket regression reproduction tests
    cascade_failure_testing: Tests for cascade failure patterns and prevention
    thread_service_testing: Thread service coordination and management tests
    race_condition_testing: Race condition detection and reproduction tests
    
    # Service Connectivity markers
    service_connectivity: Service connectivity and availability validation tests
    auth_service_integration: Auth service integration and dependency tests
    infrastructure_dependencies: Infrastructure dependency validation tests
    websocket_service: WebSocket service specific functionality tests
    websocket_infrastructure: WebSocket infrastructure dependency tests
    websocket_auth: WebSocket authentication integration tests
    staging_environment: Staging environment specific validation tests
    websocket_staging: WebSocket staging environment tests
    
    # Interface and Architecture markers
    interface_violations: Interface violation detection tests
    regression_reproduction: Tests that reproduce specific regression issues
    business_critical: Tests critical to business value and revenue
    production_simulation: Production-level simulation tests
    
    # Session and State markers
    session: General session management tests
    session_persistence: Session persistence and storage tests
    session_security: Session security and isolation tests
    state_management: Application state management tests
    context_management: Context management lifecycle and state handling tests
    execution_context: Execution context and isolation tests
    context_management: Context management lifecycle and state handling tests
    timeout_management: Timeout management and control flow tests
    context_hierarchy: Context hierarchy and child context creation pattern tests
    
    # Threading and Concurrency markers
    parallel_threads: Multi-threaded parallel execution tests
    thread_unsafe: Tests that are not thread-safe
    multi_user_isolation: Multi-user execution isolation tests
    
    # Tool and Utility markers
    tool_notifications: Tool execution notification tests
    tool_execution_workflows: Tool execution workflow and optimization tests
    message_routing: Message routing and delivery tests
    middleware: Middleware component tests
    orchestration: System orchestration and coordination tests
    factory_patterns: Factory pattern implementation tests
    factory_coordination: Factory coordination and multi-service integration tests
    resource_management: Resource management and cleanup tests
    toolregistry: Tool registry functionality and lifecycle management tests
    
    # Development and Testing markers
    mock_only: Tests using only mocked dependencies
    no_mocks: Tests that explicitly avoid mocking
    claude_commands: Claude AI command processing tests
    github: GitHub integration functionality tests
    clipboard: Clipboard operations and management tests
    
    # Network and Communication markers
    network: Network communication and connectivity tests
    reconnection: Connection recovery and reconnection tests
    reliability: System reliability and fault tolerance tests
    heartbeat_monitoring: Heartbeat and health monitoring tests
    
    # Data and Storage markers
    db: General database functionality tests
    database_integrity: Database integrity and consistency tests
    real_clickhouse: Real ClickHouse database connection tests
    real_redis: Real Redis connection and operation tests
    serialization: Data serialization and deserialization tests
    
    # Validation and Import markers
    import_validation: Python import validation tests
    config_validation: Configuration validation and consistency tests
    pipeline_validation: Pipeline step validation and dependency checking tests
    
    # Load and Stress markers
    load: Load testing and capacity validation
    load_balancing: Load balancing and distribution tests
    
    # Token and Security markers
    token_refresh: Token refresh and rotation tests
    security_critical: Critical security validation tests
    requires_auth: Tests requiring authentication setup
    
    # Miscellaneous Functional markers
    isolation: General isolation testing
    iterations: Multi-iteration and loop testing
    models: Data model and schema tests
    configuration: System configuration tests
    configuration_audit: Configuration audit and validation tests
    configuration_drift: Configuration drift detection and compliance tests
    user_journey: End-to-end user journey tests
    reproduction: Bug reproduction and regression tests
    expected_failure: Tests that are expected to fail initially for bug reproduction
    duplicate_detection: Duplicate detection and prevention tests
    batch_processing: Batch processing and bulk operation tests
    metrics_tracking: Metrics collection and tracking tests
    lightweight_services: Lightweight service implementation tests
    golden_path: Golden path user flow and business value protection tests
    validation: Test suite validation and quality assurance tests
    priority_p0: Priority P0 critical business tests
    priority_p1: Priority P1 important business tests
    concurrent: Concurrent execution and load tests
    cross_platform: Cross-platform compatibility tests
    audit_trail: Audit trail and compliance tests
    error_scenarios: Error handling and edge case scenario tests
    no_skip: Tests that should never be skipped
    
    # Critical Failure Reproduction markers
    p1_critical_failure: P1 critical failure scenarios and protection tests  
    windows_deadlock: Windows asyncio deadlock and compatibility tests
    sessionmiddleware: SessionMiddleware configuration and failure tests
    windows_asyncio: Windows asyncio deadlock and compatibility tests
    
    # Experimental and Research markers
    l3: Level 3 testing or research functionality
    langsmith: LangSmith integration tests
    corpus_admin: Corpus administration functionality tests
    leaks_references: Memory leak and reference tracking tests
    deprecated: Tests for deprecated functionality that still needs to work
    environment_specific: Tests that are specific to certain environments (dev/staging/prod)
    
    # Cycle Testing markers (testing framework internal)
    cycle_31: Testing framework cycle 31
    cycle_32: Testing framework cycle 32  
    cycle_33: Testing framework cycle 33
    cycle_34: Testing framework cycle 34
    cycle_35: Testing framework cycle 35
    cycle_36: Testing framework cycle 36
    cycle_37: Testing framework cycle 37
    cycle_38: Testing framework cycle 38
    cycle_39: Testing framework cycle 39
    cycle_40: Testing framework cycle 40
    
    # Cloud and Platform markers
    gcp: Google Cloud Platform integration tests
    gcp_staging: GCP staging environment specific tests
    fallback_prevention: Tests preventing inappropriate fallback behaviors
    
    # Infrastructure Validation markers (NEW - Golden Path)
    demo_mode: Demo mode configuration and security validation tests
    websocket_errors: WebSocket error reproduction and validation tests
    websocket_1011: WebSocket 1011 internal error reproduction tests
    deployment_critical: Critical deployment configuration and validation tests
    agent_factory_testing: Agent factory pattern and SSOT validation tests
    
    # Agent Execution Order markers - MISSION CRITICAL
    agent_execution_order: mark test as validating agent execution order (revenue critical)
    data_before_optimization: mark test as enforcing data-before-optimization rule
    revenue_protection: mark test as protecting revenue-generating functionality
    edge_case: mark test as covering edge cases and failure scenarios
    expected_failure: mark test as expected to fail initially for bug reproduction
    
    # Issue tracking markers  
    issue_131: Infrastructure resource validation tests for Issue #131
    issue_135: Basic triage response validation tests for Issue #135
    issue_143: Infrastructure validation gaps preventing Golden Path verification for Issue #143
    issue_144: Golden path database validation tests for Issue #144
    infrastructure_validation: Infrastructure validation and configuration gap testing
    must_fail_initially: Tests designed to fail initially to reproduce bugs, expected failures for remediation
    reproduction_tests: Bug reproduction and validation tests that recreate specific failure scenarios
    golden_path_critical: Critical Golden Path end-to-end infrastructure validation tests
    
    # Agent-WebSocket Integration Testing markers
    agent_websocket_coordination: Agent-WebSocket coordination and bridge integration tests
    agent_execution_flows: Agent execution pipeline and orchestration flow tests
    websocket_event_handling: WebSocket event handling and delivery validation tests
    edge_cases_error_scenarios: Edge cases, error scenarios and system boundary condition tests
    
    # SSOT WebSocket Event Emitter Consolidation markers (Issue #200)
    expected_to_fail: Tests expected to fail initially to prove SSOT violations exist
    websocket_emitter_consolidation: WebSocket event emitter SSOT consolidation tests
    phase_1_preconditions: Phase 1 tests that prove SSOT violations exist (must fail)
    phase_1_pre_consolidation: Phase 1 tests that prove SSOT violations exist (must fail)
    phase_2_consolidation: Phase 2 tests validating SSOT consolidation (pass after fix)
    phase_3_verification: Phase 3 tests verifying complete SSOT compliance (pass after fix)
    phase_3_post_consolidation: Phase 3 tests verifying complete SSOT compliance (pass after fix)
    race_condition_elimination: Tests proving race conditions are eliminated after consolidation
    
    # Collection Error Fix markers (NEW - Import Validation Tests)
    collection_fix: Tests validating collection error fixes and missing modules
    syntax_validation: Tests validating Python syntax correctness
    class_validation: Tests validating class definitions and structure
    module_structure: Tests validating module organization and imports
    fixture_validation: Tests validating pytest fixture availability
    e2e_helpers: Tests validating E2E testing helper infrastructure
    factory_structure: Tests validating factory pattern structure
    threading: Threading and concurrent execution tests
    websocket_core: WebSocket core functionality tests
    pytest_fixtures: pytest fixture registration and availability tests
    import_dependencies: Import dependency validation tests
    auth_testing: Authentication testing infrastructure
    database_testing: Database testing infrastructure
    enterprise_sso: Enterprise SSO testing functionality
    token_management: Token lifecycle management tests
    websocket_integration: WebSocket integration functionality
    websocket_threading: WebSocket threading and isolation tests
    directory_structure: Directory structure validation tests
    implementation_status: Implementation completeness status tests
    syntax_comprehensive: Comprehensive syntax validation tests
    import_validation: Import validation tests
    comprehensive: Comprehensive batch validation tests
