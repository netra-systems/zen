# Alpine-based memory-optimized Docker Compose configuration
# Uses Alpine Linux base images for minimal memory footprint
# This file extends docker-compose.yml with alpine-based images

version: '3.8'

services:
  # Alpine-based PostgreSQL (50% smaller)
  postgres:
    image: postgres:15-alpine
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.2'
        reservations:
          memory: 512M
    environment:
      # Production-optimized PostgreSQL settings
      POSTGRES_SHARED_BUFFERS: 128MB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 256MB
      POSTGRES_MAX_CONNECTIONS: 50

  # Alpine-based Redis (80% smaller)
  redis:
    image: redis:7-alpine
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.1'
        reservations:
          memory: 256M
    command: >
      redis-server 
      --maxmemory 200mb 
      --maxmemory-policy allkeys-lru
      --save ""
      --appendonly no

  # Alpine-based ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.2'
        reservations:
          memory: 512M
    environment:
      CLICKHOUSE_MAX_MEMORY_USAGE: 400000000  # 400MB

  # Alpine-based Auth Service
  auth:
    build:
      context: .
      dockerfile: ./docker/auth.Dockerfile
      target: production  # Use production build stage
      args:
        BUILD_ENV: production
        BASE_IMAGE: python:3.11-alpine
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.25'
        reservations:
          memory: 512M
    environment:
      # Production optimizations
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
      LOG_LEVEL: WARNING

  # Alpine-based Backend Service  
  backend:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      target: production  # Use production build stage
      args:
        BUILD_ENV: production
        BASE_IMAGE: python:3.11-alpine
    deploy:
      resources:
        limits:
          memory: 2G  # Increased for better performance
          cpus: '0.4'
        reservations:
          memory: 1G
    environment:
      # Production optimizations
      PYTHONOPTIMIZE: 2
      PYTHONDONTWRITEBYTECODE: 1
      LOG_LEVEL: WARNING
      # Limit worker processes
      WEB_CONCURRENCY: 2
      WORKERS_PER_CORE: 1
      MAX_WORKERS: 2

  # Alpine-based Frontend Service
  frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
      target: production  # Use production build stage
      args:
        BUILD_ENV: production
        NODE_ENV: production
        BASE_IMAGE: node:18-alpine
    deploy:
      resources:
        limits:
          memory: 512M  # Increased for stability
          cpus: '0.3'
        reservations:
          memory: 256M
    environment:
      NODE_ENV: production
      # Limit Node.js memory
      NODE_OPTIONS: "--max-old-space-size=200"

# Test-specific services with minimal resources
  test-postgres:
    extends:
      service: postgres
    profiles: ["test"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.15'

  test-redis:
    extends:
      service: redis
    profiles: ["test"]
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.05'
    command: redis-server --maxmemory 200mb --maxmemory-policy allkeys-lru

  test-clickhouse:
    extends:
      service: clickhouse
    profiles: ["test"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.1'
    environment:
      CLICKHOUSE_MAX_MEMORY_USAGE: 400000000  # 400MB