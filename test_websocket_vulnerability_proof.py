#!/usr/bin/env python3
"""
Proof of Concept: WebSocket Bridge Singleton Vulnerability
This script demonstrates that the current implementation can leak events between users.
"""

import asyncio
import sys
import os
from shared.isolated_environment import IsolatedEnvironment
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_singleton_vulnerability():
    """Demonstrate that get_agent_websocket_bridge returns non-isolated instances."""
    
    print("=" * 60)
    print("WebSocket Bridge Singleton Vulnerability Test")
    print("=" * 60)
    
    # Import the deprecated function that's still used in production
    from netra_backend.app.services.agent_websocket_bridge import get_agent_websocket_bridge
    
    print("\n1. Testing deprecated get_agent_websocket_bridge()...")
    
    # Get two "singleton" instances
    bridge1 = await get_agent_websocket_bridge()
    bridge2 = await get_agent_websocket_bridge()
    
    # Check if they're actually different objects (they should be after the fix)
    if bridge1 is bridge2:
        print("[X] CRITICAL: Bridges are the SAME object (true singleton)")
        print(f"   Bridge 1 ID: {id(bridge1)}")
        print(f"   Bridge 2 ID: {id(bridge2)}")
    else:
        print("[OK] Bridges are different objects (not true singleton)")
        print(f"   Bridge 1 ID: {id(bridge1)}")
        print(f"   Bridge 2 ID: {id(bridge2)}")
    
    print("\n2. Testing direct instantiation...")
    
    from netra_backend.app.services.agent_websocket_bridge import AgentWebSocketBridge
    
    # Create two direct instances
    bridge3 = AgentWebSocketBridge()
    bridge4 = AgentWebSocketBridge()
    
    if bridge3 is bridge4:
        print("[X] CRITICAL: Direct instances are the SAME object")
        print(f"   Bridge 3 ID: {id(bridge3)}")
        print(f"   Bridge 4 ID: {id(bridge4)}")
    else:
        print("[OK] Direct instances are different objects")
        print(f"   Bridge 3 ID: {id(bridge3)}")
        print(f"   Bridge 4 ID: {id(bridge4)}")
    
    print("\n3. Testing factory pattern...")
    
    from netra_backend.app.services.agent_websocket_bridge import create_agent_websocket_bridge
    
    # Create two factory instances
    bridge5 = create_agent_websocket_bridge({"user_id": "user1"})
    bridge6 = create_agent_websocket_bridge({"user_id": "user2"})
    
    if bridge5 is bridge6:
        print("[X] CRITICAL: Factory instances are the SAME object")
        print(f"   Bridge 5 ID: {id(bridge5)}")
        print(f"   Bridge 6 ID: {id(bridge6)}")
    else:
        print("[OK] Factory instances are different objects")
        print(f"   Bridge 5 ID: {id(bridge5)}")
        print(f"   Bridge 6 ID: {id(bridge6)}")
    
    print("\n4. Testing shared state vulnerability...")
    
    # Test if instances share internal state
    test_value = "test_data_123"
    bridge1._test_attribute = test_value
    
    if hasattr(bridge2, '_test_attribute') and bridge2._test_attribute == test_value:
        print("[X] CATASTROPHIC: Instances share state! Data leakage confirmed!")
    else:
        print("[OK] Instances do not share state directly")
    
    print("\n5. Checking production usage patterns...")
    
    # Show which pattern is used in critical files
    critical_files = {
        "startup_module.py": "get_agent_websocket_bridge",  # DEPRECATED
        "factory_adapter.py": "get_agent_websocket_bridge",  # DEPRECATED
        "websocket_isolated.py": "create_user_emitter",  # GOOD
    }
    
    print("\nCritical file usage:")
    for file, pattern in critical_files.items():
        if pattern == "get_agent_websocket_bridge":
            print(f"   [X] {file}: Uses DEPRECATED singleton pattern")
        elif pattern == "create_user_emitter":
            print(f"   [OK] {file}: Uses SECURE user emitter pattern")
        else:
            print(f"   [!] {file}: Uses {pattern}")
    
    print("\n" + "=" * 60)
    print("VULNERABILITY ASSESSMENT:")
    print("=" * 60)
    
    # Check if the deprecated function still exists and is callable
    try:
        from netra_backend.app.services.agent_websocket_bridge import get_agent_websocket_bridge
        print("[X] CRITICAL: Deprecated get_agent_websocket_bridge() is STILL AVAILABLE")
        print("   This function is used in production code and creates security risks")
    except ImportError:
        print("[OK] GOOD: Deprecated function has been removed")
    
    print("\nRECOMMENDATION:")
    print("-" * 40)
    print("1. Remove ALL usage of get_agent_websocket_bridge()")
    print("2. Replace with create_agent_websocket_bridge(user_context)")
    print("3. Use create_user_emitter() for all event emission")
    print("4. Delete the deprecated function entirely")
    print("-" * 40)

if __name__ == "__main__":
    asyncio.run(test_singleton_vulnerability())