# Docker Compose for Unified Testing Environment
# Provides isolated test environment with all services running together
# Purpose: Enable REAL integration testing with actual service communication

services:
  # Test PostgreSQL Database - Main Backend Database
  test-postgres:
    image: postgres:15-alpine
    container_name: netra-test-postgres
    environment:
      POSTGRES_DB: netra_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_MULTIPLE_DATABASES: netra_test,netra_auth_test
    ports:
      - "5433:5432"  # Using 5433 to avoid conflicts with local dev
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./database_scripts/00-init-main.sql:/docker-entrypoint-initdb.d/00-init-main.sql:ro
      - ./database_scripts/01-init-extensions.sql:/docker-entrypoint-initdb.d/01-init-extensions.sql:ro
      - ./database_scripts/02-init-users-auth.sql:/docker-entrypoint-initdb.d/02-init-users-auth.sql:ro
      - ./database_scripts/03-init-agents.sql:/docker-entrypoint-initdb.d/03-init-agents.sql:ro
      - ./database_scripts/04-init-supply.sql:/docker-entrypoint-initdb.d/04-init-supply.sql:ro
      - ./database_scripts/05-init-content.sql:/docker-entrypoint-initdb.d/05-init-content.sql:ro
      - ./database_scripts/06-init-demo.sql:/docker-entrypoint-initdb.d/06-init-demo.sql:ro
      - ./database_scripts/07-init-indexes.sql:/docker-entrypoint-initdb.d/07-init-indexes.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d netra_test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - netra-test-network

  # Test ClickHouse Database - Analytics/Data Warehouse
  test-clickhouse:
    image: clickhouse/clickhouse-server:24.1-alpine
    container_name: netra-test-clickhouse
    environment:
      CLICKHOUSE_DB: netra_analytics_test
      CLICKHOUSE_USER: test_user
      CLICKHOUSE_PASSWORD: test_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8124:8123"  # HTTP interface
      - "9001:9000"  # Native interface
    volumes:
      - test_clickhouse_data:/var/lib/clickhouse
      - test_clickhouse_logs:/var/log/clickhouse-server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - netra-test-network

  # Test Redis - Caching and Session Storage
  test-redis:
    image: redis:7-alpine
    container_name: netra-test-redis
    command: redis-server --requirepass test_password
    environment:
      REDIS_PASSWORD: test_password
    ports:
      - "6380:6379"  # Using 6380 to avoid conflicts
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-test-network

  # Auth Service - Microservice for Authentication
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth
    container_name: netra-test-auth
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/netra_auth_test
      
      # Redis Configuration  
      REDIS_URL: redis://:test_password@test-redis:6379/0
      
      # Auth Service Configuration
      SECRET_KEY: test_auth_secret_key_unified_testing
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Service Configuration
      PORT: 8080
      ENVIRONMENT: test
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
      
      # OAuth Configuration (Test Values)
      GOOGLE_CLIENT_ID: test_google_client_id
      GOOGLE_CLIENT_SECRET: test_google_client_secret
      GOOGLE_REDIRECT_URI: http://localhost:8080/auth/google/callback
      
      # CORS Configuration
      FRONTEND_URL: http://frontend-service:3000
      BACKEND_URL: http://backend-service:8000
    ports:
      - "8001:8080"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./auth_service:/app/auth_service:ro
    networks:
      - netra-test-network

  # Backend Service - Main FastAPI Application
  backend-service:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: netra-test-backend
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/netra_test
      CLICKHOUSE_URL: http://test_user:test_password@test-clickhouse:8123/netra_analytics_test
      
      # Redis Configuration
      REDIS_URL: redis://:test_password@test-redis:6379/1
      
      # Auth Integration
      AUTH_SERVICE_URL: http://auth-service:8080
      JWT_SECRET_KEY: test_auth_secret_key_unified_testing
      JWT_ALGORITHM: HS256
      
      # Service Configuration
      PORT: 8000
      ENVIRONMENT: test
      LOG_LEVEL: INFO
      PYTHONUNBUFFERED: 1
      
      # Agent/LLM Configuration (Test Mode)
      OPENAI_API_KEY: test_openai_key_do_not_use_real_api
      ANTHROPIC_API_KEY: test_anthropic_key_do_not_use_real_api
      USE_MOCK_LLM: true
      
      # WebSocket Configuration
      WEBSOCKET_ENABLE: true
      WEBSOCKET_PING_INTERVAL: 30
      WEBSOCKET_PING_TIMEOUT: 10
      
      # CORS Configuration
      FRONTEND_URL: http://frontend-service:3000
      AUTH_SERVICE_URL_EXTERNAL: http://auth-service:8080
    ports:
      - "8000:8000"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-clickhouse:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./app:/app/app:ro
      - ./alembic:/app/alembic:ro
      - test_uploads:/app/uploads
    networks:
      - netra-test-network

  # Frontend Service - Next.js Application
  frontend-service:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # Test Environment Build Args
        NEXT_PUBLIC_API_URL: http://backend-service:8000
        NEXT_PUBLIC_WS_URL: ws://backend-service:8000
        NEXT_PUBLIC_AUTH_URL: http://auth-service:8080
        NEXT_PUBLIC_ENVIRONMENT: test
    container_name: netra-test-frontend
    environment:
      # Service Configuration
      PORT: 3000
      NODE_ENV: test
      
      # API Configuration (Container Network)
      NEXT_PUBLIC_API_URL: http://backend-service:8000
      NEXT_PUBLIC_WS_URL: ws://backend-service:8000
      NEXT_PUBLIC_AUTH_URL: http://auth-service:8080
      NEXT_PUBLIC_ENVIRONMENT: test
      
      # Feature Flags for Testing
      NEXT_PUBLIC_ENABLE_DEBUG: true
      NEXT_PUBLIC_ENABLE_MOCK_DATA: true
      NEXT_PUBLIC_DISABLE_ANALYTICS: true
    ports:
      - "3000:3000"
    depends_on:
      backend-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-test-network

  # Test Runner Service - Executes Unified Tests
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    container_name: netra-test-runner
    environment:
      # Service URLs (Container Network)
      AUTH_SERVICE_URL: http://auth-service:8080
      BACKEND_SERVICE_URL: http://backend-service:8000
      FRONTEND_SERVICE_URL: http://frontend-service:3000
      
      # Database Configuration
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/netra_test
      CLICKHOUSE_URL: http://test_user:test_password@test-clickhouse:8123/netra_analytics_test
      REDIS_URL: redis://:test_password@test-redis:6379/2
      
      # Test Configuration
      TEST_ENVIRONMENT: docker
      TEST_PARALLEL: true
      TEST_VERBOSE: true
      PYTEST_ARGS: --tb=short --no-header
      
      # Credentials for Test User Creation
      TEST_USER_EMAIL: test@netra.ai
      TEST_USER_PASSWORD: test_password_123
      TEST_ADMIN_EMAIL: admin@netra.ai
      TEST_ADMIN_PASSWORD: admin_password_123
    depends_on:
      frontend-service:
        condition: service_healthy
      backend-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    volumes:
      - .:/app:ro
      - test_results:/app/test_results
    working_dir: /app
    command: >
      sh -c "
        echo 'Waiting for all services to be ready...' &&
        sleep 30 &&
        echo 'Running unified system tests...' &&
        python test_runner.py --level unified --real-services --docker-network
      "
    networks:
      - netra-test-network

  # Database Migration Service - Ensures DB Schema is Up-to-Date
  migration-runner:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: netra-test-migrations
    environment:
      DATABASE_URL: postgresql://test_user:test_password@test-postgres:5432/netra_test
      PYTHONUNBUFFERED: 1
    depends_on:
      test-postgres:
        condition: service_healthy
    volumes:
      - ./alembic:/app/alembic:ro
      - ./app:/app/app:ro
    working_dir: /app
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Seeding test data...' &&
        python database_scripts/create_test_user.py
      "
    networks:
      - netra-test-network

# Named volumes for data persistence during test runs
volumes:
  test_postgres_data:
    driver: local
  test_clickhouse_data:
    driver: local
  test_clickhouse_logs:
    driver: local
  test_redis_data:
    driver: local
  test_uploads:
    driver: local
  test_results:
    driver: local

# Isolated network for test services
networks:
  netra-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16