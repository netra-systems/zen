"""
OAuth End-to-End Authentication Flow E2E Tests

Business Value Justification (BVJ):
- Segment: All (Free, Early, Mid, Enterprise)
- Business Goal: Ensure complete OAuth authentication works in staging/production
- Value Impact: Users can successfully authenticate and access platform features
- Strategic Impact: Core user acquisition and retention - without working auth, no revenue

CRITICAL: Tests complete OAuth authentication flow from start to finish in staging.
Tests real OAuth flow with WebSocket connections and agent execution.

Following CLAUDE.md requirements:
- E2E tests MUST use authentication (this tests the auth system itself)
- Uses real services (no mocks in E2E tests)
- Follows SSOT patterns from test_framework/ssot/
- Tests MUST fail hard - no try/except blocks masking errors
- Multi-user isolation using Factory patterns
"""
import pytest
import asyncio
import time
import uuid
import json
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional, List

# Absolute imports per CLAUDE.md
from test_framework.base_e2e_test import BaseE2ETest
from test_framework.real_services_test_fixtures import real_services_fixture
from test_framework.ssot.e2e_auth_helper import (
    E2EAuthHelper, E2EWebSocketAuthHelper, E2EAuthConfig,
    create_authenticated_user_context
)
from test_framework.websocket_helpers import WebSocketTestClient
from shared.isolated_environment import get_env
from shared.types.core_types import UserID, ThreadID, WebSocketID
from shared.id_generation.unified_id_generator import UnifiedIdGenerator


class TestOAuthEndToEndAuthenticationStaging(BaseE2ETest):
    """E2E tests for complete OAuth authentication flow in staging environment."""
    
    @pytest.fixture(autouse=True)
    def setup_staging_environment(self):
        """Setup staging environment for OAuth E2E tests."""
        self.env = get_env()
        self.env.enable_isolation()
        
        # Configure staging OAuth settings
        staging_oauth_key = self.env.get("E2E_OAUTH_SIMULATION_KEY")
        if not staging_oauth_key:
            pytest.skip("E2E_OAUTH_SIMULATION_KEY not configured for staging OAuth tests")
        
        self.env.set("ENVIRONMENT", "staging", "test_oauth_e2e")
        self.env.set("TEST_ENV", "staging", "test_oauth_e2e")
        
        # Create staging auth configuration
        self.staging_config = E2EAuthConfig.for_staging()
        self.auth_helper = E2EAuthHelper(config=self.staging_config, environment="staging")
        self.websocket_auth_helper = E2EWebSocketAuthHelper(config=self.staging_config, environment="staging")
        self.id_generator = UnifiedIdGenerator()
        
        yield
        
        # Cleanup
        self.env.disable_isolation()
    
    @pytest.mark.e2e
    @pytest.mark.staging
    @pytest.mark.asyncio
    async def test_oauth_complete_user_onboarding_flow_staging(self, real_services_fixture):
        """
        Test complete OAuth user onboarding flow from authentication to first agent interaction.
        
        CRITICAL: This tests the complete user journey that generates business value.
        """
        # Arrange: Create unique staging test user
        test_user_id = f"e2e-oauth-{int(time.time())}-{uuid.uuid4().hex[:6]}"
        test_email = f"e2e-oauth-{test_user_id}@staging.netrasystems.ai"
        
        print(f" TARGET:  Testing complete OAuth onboarding for user: {test_email}")
        print(f"[U+1F310] Staging environment: {self.staging_config.auth_service_url}")
        
        # Step 1: OAuth Authentication (simulated for staging)
        print("[U+1F4DD] Step 1: OAuth Authentication...")
        
        access_token = await self.auth_helper.get_staging_token_async(
            email=test_email,
            bypass_key=self.env.get("E2E_OAUTH_SIMULATION_KEY")
        )
        
        assert access_token is not None, "OAuth authentication must succeed and return access token"
        assert len(access_token.split('.')) == 3, "Access token must be valid JWT format"
        
        # Validate token with auth service
        token_valid = await self.auth_helper.validate_token(access_token)
        assert token_valid is True, "OAuth-generated token must validate successfully with auth service"
        
        print(f" PASS:  OAuth authentication successful, token length: {len(access_token)}")
        
        # Step 2: User Profile Creation/Retrieval
        print("[U+1F464] Step 2: User Profile Access...")
        
        import httpx
        async with httpx.AsyncClient(timeout=30.0) as client:
            profile_response = await client.get(
                f"{self.staging_config.backend_url}/api/user/profile",
                headers=self.auth_helper.get_auth_headers(access_token)
            )
            
            # Profile may not exist yet (404) or exist (200) - both are acceptable
            assert profile_response.status_code in [200, 404], (
                f"User profile endpoint must be accessible with OAuth token, "
                f"got {profile_response.status_code}: {profile_response.text}"
            )
            
            if profile_response.status_code == 200:
                profile_data = profile_response.json()
                print(f" PASS:  User profile exists: {profile_data.get('email', 'unknown')}")
            else:
                print("[U+2139][U+FE0F] User profile not yet created (404 is acceptable for new users)")
        
        # Step 3: WebSocket Authentication and Connection
        print("[U+1F50C] Step 3: WebSocket Authentication...")
        
        try:
            websocket = await self.websocket_auth_helper.connect_authenticated_websocket(timeout=20.0)
            print(" PASS:  WebSocket connection established with OAuth authentication")
            
            # Step 4: Send authenticated message to verify WebSocket works
            print("[U+1F4AC] Step 4: Authenticated WebSocket Message...")
            
            test_message = {
                "type": "ping",
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "user_id": test_user_id,
                "test_type": "oauth_e2e"
            }
            
            await websocket.send(json.dumps(test_message))
            
            # Wait for response (with timeout)
            try:
                response_raw = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                response = json.loads(response_raw)
                
                print(f" PASS:  WebSocket response received: {response.get('type', 'unknown')}")
                assert response is not None, "WebSocket must respond to authenticated message"
                
            except asyncio.TimeoutError:
                print(" WARNING: [U+FE0F] WebSocket response timeout (may be acceptable if server doesn't respond to ping)")
                # Not failing here as some WebSocket implementations don't respond to ping
            
            await websocket.close()
            
        except Exception as e:
            # If WebSocket fails, provide detailed debugging info
            print(f" FAIL:  WebSocket connection failed: {e}")
            print(f" SEARCH:  WebSocket URL: {self.staging_config.websocket_url}")
            print(f"[U+1F511] Auth token provided: {bool(access_token)}")
            print(f"[U+1F4CB] Headers sent: {list(self.auth_helper.get_websocket_headers(access_token).keys())}")
            
            # Re-raise to fail the test with full context
            raise AssertionError(f"WebSocket authentication failed for OAuth user: {e}")
        
        # Step 5: API Access with OAuth Token
        print("[U+1F527] Step 5: API Access Verification...")
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            # Test basic API endpoint access
            api_response = await client.get(
                f"{self.staging_config.backend_url}/api/health",
                headers=self.auth_helper.get_auth_headers(access_token)
            )
            
            assert api_response.status_code in [200, 404], (
                f"OAuth-authenticated API access must work, "
                f"got {api_response.status_code}: {api_response.text}"
            )
            
            print(f" PASS:  API access successful with OAuth token: {api_response.status_code}")
        
        print(f" CELEBRATION:  Complete OAuth onboarding flow successful for {test_email}")
    
    @pytest.mark.e2e
    @pytest.mark.staging
    @pytest.mark.asyncio
    async def test_oauth_multi_user_concurrent_authentication(self, real_services_fixture):
        """
        Test that multiple OAuth users can authenticate concurrently without interference.
        
        CRITICAL: Tests multi-user isolation that's essential for business scaling.
        """
        # Arrange: Create multiple OAuth test users
        num_users = 3
        user_contexts = []
        
        print(f"[U+1F465] Testing concurrent OAuth authentication for {num_users} users")
        
        for i in range(num_users):
            user_id = f"e2e-oauth-concurrent-{i}-{int(time.time())}-{uuid.uuid4().hex[:4]}"
            email = f"e2e-concurrent-{i}-{user_id}@staging.netrasystems.ai"
            
            user_contexts.append({
                "user_id": user_id,
                "email": email,
                "index": i
            })
        
        # Act: Authenticate all users concurrently
        async def authenticate_user(ctx):
            """Authenticate single user and return result."""
            try:
                auth_helper = E2EAuthHelper(config=self.staging_config, environment="staging")
                token = await auth_helper.get_staging_token_async(
                    email=ctx["email"],
                    bypass_key=self.env.get("E2E_OAUTH_SIMULATION_KEY")
                )
                
                # Validate token
                is_valid = await auth_helper.validate_token(token)
                
                return {
                    "user_id": ctx["user_id"],
                    "email": ctx["email"],
                    "index": ctx["index"],
                    "token": token,
                    "valid": is_valid,
                    "success": bool(token and is_valid),
                    "error": None
                }
                
            except Exception as e:
                return {
                    "user_id": ctx["user_id"],
                    "email": ctx["email"], 
                    "index": ctx["index"],
                    "token": None,
                    "valid": False,
                    "success": False,
                    "error": str(e)
                }
        
        # Execute concurrent authentication
        auth_tasks = [authenticate_user(ctx) for ctx in user_contexts]
        auth_results = await asyncio.gather(*auth_tasks, return_exceptions=True)
        
        # Assert: All concurrent authentications must succeed
        successful_auths = 0
        for result in auth_results:
            assert not isinstance(result, Exception), f"Concurrent auth must not raise exception: {result}"
            
            user_info = f"User {result['index']} ({result['email']})"
            
            if result["success"]:
                successful_auths += 1
                print(f" PASS:  {user_info}: Authentication successful")
                
                # Verify token isolation - each token must be unique and contain correct user data
                import jwt as jwt_lib
                decoded = jwt_lib.decode(result["token"], options={"verify_signature": False})
                assert decoded["sub"] == result["user_id"], f"{user_info}: Token must contain correct user_id"
                assert decoded["email"] == result["email"], f"{user_info}: Token must contain correct email"
                
            else:
                print(f" FAIL:  {user_info}: Authentication failed - {result.get('error', 'unknown error')}")
                
        # Require at least majority of authentications to succeed
        success_rate = successful_auths / len(user_contexts)
        assert success_rate >= 0.67, (  # Allow up to 1/3 failure for staging environment variability
            f"Concurrent OAuth authentication success rate too low: {success_rate:.1%} "
            f"({successful_auths}/{len(user_contexts)} succeeded)"
        )
        
        print(f" PASS:  Concurrent OAuth authentication successful: {success_rate:.1%} success rate")
        
        # Test concurrent WebSocket connections for successful authentications
        successful_users = [r for r in auth_results if r["success"]]
        if successful_users:
            print(f"[U+1F50C] Testing concurrent WebSocket connections for {len(successful_users)} users")
            
            async def test_websocket_connection(user_result):
                """Test WebSocket connection for single user."""
                try:
                    ws_helper = E2EWebSocketAuthHelper(config=self.staging_config, environment="staging")
                    ws_helper._cached_token = user_result["token"]
                    
                    websocket = await ws_helper.connect_authenticated_websocket(timeout=15.0)
                    
                    # Send test message
                    test_msg = {
                        "type": "test",
                        "user_id": user_result["user_id"],
                        "timestamp": datetime.now(timezone.utc).isoformat()
                    }
                    await websocket.send(json.dumps(test_msg))
                    await websocket.close()
                    
                    return {"user_id": user_result["user_id"], "websocket_success": True, "error": None}
                    
                except Exception as e:
                    return {"user_id": user_result["user_id"], "websocket_success": False, "error": str(e)}
            
            # Test concurrent WebSocket connections
            ws_tasks = [test_websocket_connection(user) for user in successful_users[:2]]  # Test first 2 to avoid overload
            ws_results = await asyncio.gather(*ws_tasks, return_exceptions=True)
            
            ws_successes = sum(1 for r in ws_results if not isinstance(r, Exception) and r.get("websocket_success", False))
            ws_success_rate = ws_successes / len(ws_tasks) if ws_tasks else 0
            
            print(f"[U+1F50C] WebSocket concurrent connections: {ws_success_rate:.1%} success rate ({ws_successes}/{len(ws_tasks)})")
            
            # WebSocket success rate requirement is lower due to staging environment limitations
            assert ws_success_rate >= 0.5, f"WebSocket concurrent connection success rate too low: {ws_success_rate:.1%}"
    
    @pytest.mark.e2e
    @pytest.mark.staging
    @pytest.mark.asyncio
    async def test_oauth_session_persistence_across_requests(self, real_services_fixture):
        """
        Test that OAuth sessions persist across multiple API requests and maintain user context.
        
        CRITICAL: Tests session persistence that enables continuous user experience.
        """
        # Arrange: Create OAuth authenticated user
        test_user_id = f"e2e-oauth-persistence-{int(time.time())}-{uuid.uuid4().hex[:6]}"
        test_email = f"e2e-persistence-{test_user_id}@staging.netrasystems.ai"
        
        print(f" CYCLE:  Testing OAuth session persistence for: {test_email}")
        
        # Step 1: Initial OAuth authentication
        access_token = await self.auth_helper.get_staging_token_async(
            email=test_email,
            bypass_key=self.env.get("E2E_OAUTH_SIMULATION_KEY")
        )
        
        assert access_token is not None, "Initial OAuth authentication must succeed"
        
        # Step 2: Make multiple API requests with same token
        api_endpoints = [
            "/api/health",
            "/api/user/profile", 
            "/api/health"  # Test again to verify persistence
        ]
        
        session_results = []
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            for i, endpoint in enumerate(api_endpoints):
                print(f"[U+1F4E1] Request {i+1}: {endpoint}")
                
                response = await client.get(
                    f"{self.staging_config.backend_url}{endpoint}",
                    headers=self.auth_helper.get_auth_headers(access_token)
                )
                
                result = {
                    "endpoint": endpoint,
                    "status_code": response.status_code,
                    "success": response.status_code in [200, 404],  # 404 acceptable for some endpoints
                    "response_time": getattr(response, 'elapsed', timedelta(seconds=0)).total_seconds()
                }
                
                session_results.append(result)
                
                # Verify each request succeeds with persistent session
                assert result["success"], (
                    f"API request {i+1} to {endpoint} must succeed with persistent OAuth session, "
                    f"got {response.status_code}: {response.text}"
                )
                
                print(f" PASS:  Request {i+1} successful: {response.status_code} ({result['response_time']:.2f}s)")
                
                # Brief delay between requests to test session persistence over time
                await asyncio.sleep(0.5)
        
        # Step 3: Test WebSocket session persistence
        print("[U+1F50C] Testing WebSocket session persistence...")
        
        try:
            # Connect WebSocket with same OAuth token
            websocket = await self.websocket_auth_helper.connect_authenticated_websocket(timeout=15.0)
            
            # Send multiple messages to test persistent connection
            for i in range(3):
                test_message = {
                    "type": "persistence_test",
                    "message_number": i + 1,
                    "user_id": test_user_id,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }
                
                await websocket.send(json.dumps(test_message))
                print(f"[U+1F4E4] Sent WebSocket message {i+1}")
                
                # Brief delay between messages
                await asyncio.sleep(0.5)
            
            await websocket.close()
            print(" PASS:  WebSocket session persistence verified")
            
        except Exception as e:
            print(f" WARNING: [U+FE0F] WebSocket persistence test failed (may be acceptable): {e}")
            # Don't fail the test here as WebSocket implementation may vary
        
        # Assert: All API requests succeeded with persistent session
        total_requests = len(session_results)
        successful_requests = sum(1 for r in session_results if r["success"])
        
        assert successful_requests == total_requests, (
            f"All API requests must succeed with persistent OAuth session: "
            f"{successful_requests}/{total_requests} succeeded"
        )
        
        avg_response_time = sum(r["response_time"] for r in session_results) / total_requests
        print(f" TARGET:  Session persistence verified: {successful_requests}/{total_requests} requests successful")
        print(f" LIGHTNING:  Average response time: {avg_response_time:.2f}s")
        
        # Verify session didn't degrade over time (response times should be consistent)
        first_response_time = session_results[0]["response_time"]
        last_response_time = session_results[-1]["response_time"]
        
        # Allow up to 50% increase in response time (network variability)
        time_degradation = (last_response_time - first_response_time) / max(first_response_time, 0.001)
        assert time_degradation <= 0.5, (
            f"Session performance must not degrade significantly over time: "
            f"{time_degradation:.1%} increase from {first_response_time:.2f}s to {last_response_time:.2f}s"
        )
        
        print(f" PASS:  OAuth session persistence test complete: Performance stable over time")
