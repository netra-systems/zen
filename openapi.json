{
  "openapi": "3.0.2",
  "info": {
    "title": "Netra API v2",
    "description": "This is the API for Netra, a platform for AI-powered workload optimization.",
    "version": "2.0.0"
  },
  "paths": {
    "/auth/token": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login For Access Token",
        "description": "Provides a JWT access token for a valid user.",
        "operationId": "login_for_access_token_auth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_auth_token_post",
                "properties": {
                  "username": {
                    "type": "string",
                    "example": "jdoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "secret"
                  }
                },
                "type": "object",
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/users": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Create User",
        "description": "Creates a new user in the database.",
        "operationId": "create_user_auth_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/auth/users/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Read Users Me",
        "description": "Returns the public information for the currently authenticated user.",
        "operationId": "read_users_me_auth_users_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublicWithPicture"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Update User Me",
        "description": "Updates the current user's information.",
        "operationId": "update_user_me_auth_users_me_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "auth"
        ],
        "summary": "Delete User Me",
        "description": "Deletes the current user's account.",
        "operationId": "delete_user_me_auth_users_me_delete",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/v3/supply/supply-catalog/": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Catalog",
        "description": "Retrieves a list of all models in the supply catalog.",
        "operationId": "read_supply_catalog_api_v3_supply_supply_catalog__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SupplyOption"
                  },
                  "type": "array",
                  "title": "Response Read Supply Catalog Api V3 Supply Supply Catalog  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "supply"
        ],
        "summary": "Create Supply Option",
        "description": "Creates a new supply option in the catalog.",
        "operationId": "create_supply_option_api_v3_supply_supply_catalog__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplyOptionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/supply/supply-catalog/{option_id}": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Option",
        "description": "Retrieves a single supply option by its ID.",
        "operationId": "read_supply_option_api_v3_supply_supply_catalog__option_id__get",
        "parameters": [
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Option Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/content": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Content Corpuses",
        "description": "Lists all available, successfully generated content corpuses.",
        "operationId": "list_content_corpuses_api_v3_generation_content_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Content Corpuses Api V3 Generation Content Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus",
        "description": "Starts a background job to generate a new content corpus.",
        "operationId": "create_content_corpus_api_v3_generation_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus Api V3 Generation Content Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/logs": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Log Sets",
        "description": "Lists all available, successfully generated synthetic log sets.",
        "operationId": "list_log_sets_api_v3_generation_logs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Log Sets Api V3 Generation Logs Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Logs",
        "description": "Starts a background job to generate a new set of synthetic logs.",
        "operationId": "create_synthetic_logs_api_v3_generation_logs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Logs Api V3 Generation Logs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/content_corpus": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus",
        "description": "Starts a background job to generate a new content corpus and store it in ClickHouse.",
        "operationId": "create_content_corpus_api_v3_generation_content_corpus_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCorpusGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus Api V3 Generation Content Corpus Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/ingest_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Ingest Data",
        "description": "Starts a background job to ingest data into ClickHouse.",
        "operationId": "ingest_data_api_v3_generation_ingest_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataIngestionParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Ingest Data Api V3 Generation Ingest Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/synthetic_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Data",
        "description": "Starts a background job to generate new synthetic data.",
        "operationId": "create_synthetic_data_api_v3_generation_synthetic_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyntheticDataGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Data Api V3 Generation Synthetic Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/jobs/{job_id}": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "Get Job Status",
        "description": "Retrieves the status of a generation job.",
        "operationId": "get_job_status_api_v3_generation_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v3/generation/clickhouse_tables": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Clickhouse Tables",
        "description": "Lists all tables in the ClickHouse database.",
        "operationId": "list_clickhouse_tables_api_v3_generation_clickhouse_tables_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Clickhouse Tables Api V3 Generation Clickhouse Tables Get"
                }
              }
            }
          }
        }
      }
    },
    "/login/google": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Login Via Google",
        "operationId": "login_via_google_login_google_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Auth Via Google",
        "operationId": "auth_via_google_auth_google_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/logout/google": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Logout Via Google",
        "operationId": "logout_via_google_logout_google_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v3/apex/chat/start_agent": {
      "post": {
        "tags": [
          "apex/chat"
        ],
        "summary": "Start Agent",
        "description": "Starts the Netra Optimizer Agent to analyze the user's request.\n\nArgs:\n    request (AnalysisRequest): The user's request to the agent.\n    db (AsyncSession, optional): The database session. Defaults to Depends(get_db_session).\n    llm_manager (LLMManager, optional): The LLM manager. Defaults to Depends(LLMManager).\n\nRaises:\n    HTTPException: If there is an error running the agent.\n\nReturns:\n    dict: The result of the agent's analysis.",
        "operationId": "start_agent_api_v3_apex_chat_start_agent_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_start_agent_api_v3_apex_chat_start_agent_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalysisRequest": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "query"
        ],
        "title": "AnalysisRequest"
      },
      "AppConfig": {
        "properties": {
          "app_env": {
            "type": "string",
            "title": "App Env",
            "default": "development"
          },
          "google_cloud": {
            "$ref": "#/components/schemas/GoogleCloudConfig",
            "default": {
              "project_id": "cryptic-net-466001-n0"
            }
          },
          "clickhouse_native": {
            "$ref": "#/components/schemas/ClickHouseNativeConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 9440,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https": {
            "$ref": "#/components/schemas/ClickHouseHTTPSConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 8443,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https_dev": {
            "$ref": "#/components/schemas/ClickHouseHTTPSDevConfig",
            "default": {
              "host": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud",
              "port": 8443,
              "user": "development_user",
              "password": "",
              "database": "development"
            }
          },
          "langfuse": {
            "$ref": "#/components/schemas/LangfuseConfig",
            "default": {
              "secret_key": "",
              "public_key": "",
              "host": "https://cloud.langfuse.com/"
            }
          },
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": "default_secret_key"
          },
          "algorithm": {
            "type": "string",
            "title": "Algorithm",
            "default": "HS256"
          },
          "access_token_expire_minutes": {
            "type": "integer",
            "title": "Access Token Expire Minutes",
            "default": 30
          },
          "fernet_key": {
            "type": "string",
            "title": "Fernet Key"
          },
          "jwt_secret_key": {
            "type": "string",
            "title": "Jwt Secret Key"
          },
          "api_base_url": {
            "type": "string",
            "title": "Api Base Url",
            "default": "http://localhost:8000"
          },
          "database_url": {
            "type": "string",
            "title": "Database Url"
          },
          "log_level": {
            "type": "string",
            "title": "Log Level",
            "default": "DEBUG"
          },
          "log_secrets": {
            "type": "boolean",
            "title": "Log Secrets",
            "default": false
          },
          "run_startup_simulation": {
            "type": "boolean",
            "title": "Run Startup Simulation",
            "default": false
          },
          "llm_configs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LLMConfig"
            },
            "type": "object",
            "title": "Llm Configs",
            "default": {
              "default": {
                "provider": "google",
                "model_name": "gemini-1.5-flash-latest",
                "generation_config": {}
              },
              "analysis": {
                "generation_config": {
                  "temperature": 0.5
                },
                "model_name": "gemini-1.5-flash-latest",
                "provider": "google"
              },
              "gpt-4": {
                "generation_config": {
                  "temperature": 0.8
                },
                "model_name": "gpt-4",
                "provider": "openai"
              }
            }
          }
        },
        "type": "object",
        "title": "AppConfig",
        "description": "Base configuration class."
      },
      "Body_login_for_access_token_auth_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "format": "password",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_auth_token_post"
      },
      "Body_start_agent_api_v3_apex_chat_start_agent_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/AnalysisRequest"
          },
          "settings": {
            "$ref": "#/components/schemas/AppConfig"
          }
        },
        "type": "object",
        "required": [
          "request",
          "settings"
        ],
        "title": "Body_start_agent_api_v3_apex_chat_start_agent_post"
      },
      "ClickHouseHTTPSConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSConfig"
      },
      "ClickHouseHTTPSDevConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "development_user"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "development"
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSDevConfig"
      },
      "ClickHouseNativeConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "xedvrr4c3r.us-central1.gcp.clickhouse.cloud"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 9440
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseNativeConfig"
      },
      "ContentCorpusGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          },
          "clickhouse_table": {
            "type": "string",
            "title": "Clickhouse Table",
            "description": "The name of the ClickHouse table to store the corpus in.",
            "default": "content_corpus"
          }
        },
        "type": "object",
        "title": "ContentCorpusGenParams"
      },
      "ContentGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "title": "ContentGenParams"
      },
      "DataIngestionParams": {
        "properties": {
          "data_path": {
            "type": "string",
            "title": "Data Path",
            "description": "The path to the data file to ingest."
          },
          "table_name": {
            "type": "string",
            "title": "Table Name",
            "description": "The name of the table to ingest the data into."
          }
        },
        "type": "object",
        "required": [
          "data_path",
          "table_name"
        ],
        "title": "DataIngestionParams"
      },
      "GoogleCloudConfig": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "default": "cryptic-net-466001-n0"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "title": "GoogleCloudConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LLMConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "The LLM provider (e.g., 'google', 'openai')."
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the model."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The API key for the LLM provider."
          },
          "generation_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Generation Config",
            "description": "A dictionary of generation parameters, e.g., temperature, max_tokens.",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "provider",
          "model_name"
        ],
        "title": "LLMConfig"
      },
      "LangfuseConfig": {
        "properties": {
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": ""
          },
          "public_key": {
            "type": "string",
            "title": "Public Key",
            "default": ""
          },
          "host": {
            "type": "string",
            "title": "Host",
            "default": "https://cloud.langfuse.com/"
          }
        },
        "type": "object",
        "title": "LangfuseConfig"
      },
      "LogGenParams": {
        "properties": {
          "corpus_id": {
            "type": "string",
            "title": "Corpus Id",
            "description": "The ID of the content corpus to use for generation."
          },
          "num_logs": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Logs",
            "description": "Number of log entries to generate.",
            "default": 1000
          },
          "max_cores": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "required": [
          "corpus_id"
        ],
        "title": "LogGenParams"
      },
      "SupplyOption": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "family": {
            "type": "string",
            "title": "Family"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The unique name/identifier for the model, e.g., 'gpt-4-turbo'"
          },
          "hosting_type": {
            "type": "string",
            "title": "Hosting Type",
            "default": "api_provider"
          },
          "cost_per_million_tokens_usd": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Cost Per Million Tokens Usd",
            "example": {
              "completion": 15.0,
              "prompt": 5.0
            }
          },
          "quality_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Quality Score",
            "description": "A normalized quality score between 0 and 1."
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "family",
          "name",
          "cost_per_million_tokens_usd",
          "quality_score",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "SupplyOption"
      },
      "SupplyOptionCreate": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "family": {
            "type": "string",
            "title": "Family"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The unique name/identifier for the model, e.g., 'gpt-4-turbo'"
          },
          "hosting_type": {
            "type": "string",
            "title": "Hosting Type",
            "default": "api_provider"
          },
          "cost_per_million_tokens_usd": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Cost Per Million Tokens Usd",
            "example": {
              "completion": 15.0,
              "prompt": 5.0
            }
          },
          "quality_score": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Quality Score",
            "description": "A normalized quality score between 0 and 1."
          }
        },
        "type": "object",
        "required": [
          "provider",
          "family",
          "name",
          "cost_per_million_tokens_usd",
          "quality_score"
        ],
        "title": "SupplyOptionCreate"
      },
      "SyntheticDataGenParams": {
        "properties": {
          "num_traces": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Traces",
            "description": "Number of traces to generate.",
            "default": 10000
          },
          "num_users": {
            "type": "integer",
            "maximum": 10000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Users",
            "description": "Number of unique users to simulate.",
            "default": 100
          },
          "error_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Error Rate",
            "description": "The fraction of traces that should be errors.",
            "default": 0.05
          },
          "event_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Event Types",
            "description": "A list of event types to simulate."
          },
          "source_table": {
            "type": "string",
            "title": "Source Table",
            "description": "The name of the source ClickHouse table for the content corpus.",
            "default": "content_corpus"
          },
          "destination_table": {
            "type": "string",
            "title": "Destination Table",
            "description": "The name of the destination ClickHouse table for the generated data.",
            "default": "synthetic_data"
          }
        },
        "type": "object",
        "title": "SyntheticDataGenParams"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type"
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "token_type"
        ],
        "title": "Token"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserPublic": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id",
          "created_at"
        ],
        "title": "UserPublic"
      },
      "UserPublicWithPicture": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id",
          "created_at"
        ],
        "title": "UserPublicWithPicture"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/auth/token"
          }
        }
      }
    }
  }
}
