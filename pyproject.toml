[tool.pytest.ini_options]
# Optimized pytest configuration for improved test collection
minversion = "6.0"
testpaths = [
    "tests",
    "netra_backend/tests",
    "auth_service/tests"
]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Performance optimizations for test collection
cache_dir = ".pytest_cache"
doctest_optionflags = "NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL"

# Parallel execution settings
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--timeout=120",
    "--tb=short",
    "--maxfail=10",
    "--import-mode=importlib",  # Faster import mode
    "--cache-clear",  # Clear cache if stale
    "-p no:randomly",  # Disable random test order for consistent collection
    "-s",  # Disable I/O capture - fixes Python 3.13.7 ValueError compatibility (Issue #561)
]

# Asyncio settings
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# File ignoring (using norecursedirs instead of collect_ignore)
norecursedirs = [
    "build",
    "dist", 
    "node_modules",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg-info"
]

# Test markers (comprehensive list)
markers = [
    # Environment markers
    "env: Environment-specific tests",
    "env_test: Environment-specific test compatibility validation",
    "test: Tests for test environment only",
    "dev: Tests for dev environment only",
    "staging: Tests for staging environment only",
    "prod: Tests for production environment only",
    
    # Test categories
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (component interaction)",
    "e2e: End-to-end tests (full workflow)",
    "smoke: Quick validation tests",
    "critical: Essential system tests",
    "mission_critical: Business-critical functionality tests",
    
    # Service markers
    "backend: Backend service tests",
    "auth: Auth service tests",
    "frontend: Frontend tests",
    "agents: Agent-related tests",
    
    # Resource markers
    "real_llm: Requires real LLM API",
    "real_database: Requires real database",
    "real_services: Requires external services",
    "requires_redis: Requires Redis",
    "requires_postgres: Requires PostgreSQL",
    
    # Performance markers
    "slow: Long-running tests (>5s)",
    "fast: Quick tests (<1s)",
    "performance: Performance benchmarks",
    "stress: High load tests",
    
    # Special markers
    "flaky: Tests that may fail intermittently",
    "skip_ci: Skip in CI environment",
    "manual: Manual tests only",
    "resilience: System resilience tests",
    "security: Security validation tests"
]

# Coverage settings
[tool.coverage.run]
source = [
    "netra_backend/app",
    "auth_service/auth_core",
    "test_framework"
]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/conftest.py",
    "*/test_*.py"
]
parallel = true
concurrency = ["thread", "multiprocessing"]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
    "if TYPE_CHECKING:",
    "class .*\\(Protocol\\):"
]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true

[tool.coverage.json]
output = "coverage.json"
show_contexts = true

# Black formatter settings
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | node_modules
  | __pycache__
)/
'''

# isort settings for import sorting
[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = true
force_single_line = false
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# mypy settings for type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

# Performance profiling
[tool.pytest.profiling]
enabled = false
sort = "cumulative"
strip_dirs = true

# Test execution optimization
[tool.pytest.execution]
# Use pytest-xdist for parallel execution
workers = "auto"  # Automatically determine optimal worker count
# Group tests by file for better resource utilization
dist_mode = "loadfile"
# Reuse database connections
reuse_db = true
# Cache expensive fixtures
fixture_cache = true