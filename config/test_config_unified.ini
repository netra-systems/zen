[pytest]
# Unified Test Configuration for Netra Platform
# This file consolidates all test configurations into a single source of truth

# ============================================================================
# TEST DISCOVERY
# ============================================================================
testpaths = app/tests frontend/__tests__
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
norecursedirs = .git .tox dist build *.egg node_modules .venv venv __pycache__

# ============================================================================
# TEST MARKERS (Categorization)
# ============================================================================
markers =
    # Test Levels
    smoke: Quick validation tests (< 30s total)
    unit: Unit tests for individual components
    integration: Integration tests for feature validation
    comprehensive: Full test coverage including edge cases
    critical: Essential path tests for core functionality
    
    # Component Categories
    backend: Backend Python tests
    frontend: Frontend TypeScript/React tests
    websocket: WebSocket communication tests
    database: Database operation tests
    api: API endpoint tests
    agent: Agent system tests
    llm: LLM integration tests
    mcp: MCP service tests
    real_llm: Tests that use real LLM APIs
    real_services: Tests that use real external services
    real_database: Tests that use real database connections
    real_redis: Tests that use real Redis connections
    
    # Special Categories
    slow: Tests that take > 5 seconds
    flaky: Tests with known intermittent failures
    requires_external: Tests requiring external services
    asyncio: Async tests
    e2e: End-to-end tests
    performance: Performance tests
    
    # Skip Conditions
    skip_ci: Skip in CI/CD pipeline
    skip_local: Skip in local development
    wip: Work in progress tests

# ============================================================================
# EXECUTION SETTINGS
# ============================================================================
# Async support
asyncio_mode = auto

# Parallel execution
addopts = 
    -ra
    --strict-markers
    --strict-config
    --showlocals
    --tb=short
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html
    --cov-report=xml
    --junitxml=test_reports/junit.xml
    --html=test_reports/report.html
    --self-contained-html
    --maxfail=10
    --disable-warnings
    -p no:warnings

# Default number of processes for parallel execution
# Set to "auto" for automatic detection based on CPU cores
# workers = auto (not supported in current pytest version)

# ============================================================================
# COVERAGE SETTINGS
# ============================================================================
[coverage:run]
source = app
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */migrations/*
    */alembic/*
    */venv/*
    */.venv/*
    */node_modules/*
    */dist/*
    */build/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
skip_empty = True
# Thresholds
fail_under = 0  # Set to desired minimum coverage (e.g., 80)

exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = test_reports/coverage_html

[coverage:xml]
output = test_reports/coverage.xml

# ============================================================================
# TIMEOUT SETTINGS
# ============================================================================
[tool:pytest]
timeout = 300  # Global timeout in seconds
timeout_method = thread
timeout_func_only = true

# ============================================================================
# LOGGING
# ============================================================================
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test_reports/test.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# ============================================================================
# FILTERING AND DESELECTION
# ============================================================================
# Patterns to ignore during collection
ignore = 
    frontend/node_modules
    frontend/dist
    frontend/build
    .git
    .tox
    __pycache__

# Default deselection (can be overridden with -m)
# deselect = test_slow.py::test_very_slow_operation

# ============================================================================
# PLUGINS
# ============================================================================
plugins = 
    pytest_asyncio
    pytest_cov
    pytest_timeout
    pytest_html
    pytest_mock
    pytest_xdist

# ============================================================================
# ENVIRONMENT VARIABLES FOR TESTS
# ============================================================================
# Note: pytest:env requires pytest-env plugin
# [pytest:env]
# TESTING = true
# DATABASE_URL = postgresql://test:test@localhost:5432/test_netra
# REDIS_URL = redis://localhost:6379/1
# CLICKHOUSE_URL = clickhouse://localhost:9000/test_default
# LOG_LEVEL = DEBUG
# DISABLE_EXTERNAL_SERVICES = true

# ============================================================================
# LEVEL-SPECIFIC CONFIGURATIONS
# ============================================================================
# Note: Custom section headers not supported in pytest.ini
# These configurations should be handled by the test runner script