[tool:pytest]
# SystemLifecycle SSOT Test Suite Configuration

# Test discovery patterns for SystemLifecycle tests
testpaths = 
    netra_backend/tests/unit/core/managers/test_system_lifecycle_comprehensive.py
    netra_backend/tests/integration/core/managers/test_system_lifecycle_integration.py
    tests/e2e/core/managers/test_system_lifecycle_gcp_staging.py

# Test markers for SystemLifecycle test categories
markers =
    unit_lifecycle: Unit tests for SystemLifecycle SSOT module
    integration_lifecycle: Integration tests with real services for SystemLifecycle
    e2e_lifecycle_gcp: E2E tests in GCP staging environment for SystemLifecycle
    performance_lifecycle: Performance validation tests for SystemLifecycle
    business_critical: Tests protecting business value and revenue
    high_difficulty: Complex tests requiring deep system knowledge
    zero_downtime: Tests validating zero-downtime deployment capabilities
    multi_user: Tests validating multi-user isolation and scalability
    real_services: Tests using real services (NO MOCKS)

# SystemLifecycle test execution configuration
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --junit-xml=systemlifecycle_test_results.xml
    --cov=netra_backend.app.core.managers.unified_lifecycle_manager
    --cov-report=html:systemlifecycle_coverage_html
    --cov-report=xml:systemlifecycle_coverage.xml
    --durations=10

# Environment configuration for SystemLifecycle tests
env =
    TESTING=true
    PYTEST_CURRENT_TEST=systemlifecycle
    SYSTEMLIFECYCLE_TEST_MODE=comprehensive
    HEALTH_CHECK_TIMEOUT=30
    STARTUP_TIMEOUT=60
    SHUTDOWN_TIMEOUT=30

# Test filtering for different scenarios
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    error::UserWarning

# Minimum test coverage requirements
[coverage:run]
source = netra_backend.app.core.managers.unified_lifecycle_manager
branch = true
omit = 
    */tests/*
    */test_*
    */__pycache__/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

# Test performance thresholds
[performance]
max_startup_time = 60.0
max_shutdown_time = 30.0
max_health_check_time = 5.0
max_memory_increase_mb = 100.0

# Business SLA thresholds
[business_sla]
max_deployment_window_minutes = 10.0
min_availability_percentage = 99.9
max_chat_interruption_seconds = 2.0
min_enterprise_isolation_success_rate = 100.0