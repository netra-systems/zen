# Docker Configuration Improvements for PR-G
# Enhanced Docker Compose configuration with path fixes and optimization

version: '3.8'

# =============================================================================
# SERVICES CONFIGURATION WITH PR-G IMPROVEMENTS
# =============================================================================

services:
  # Backend Service (PR-G Path Fix Applied)
  netra-backend:
    build:
      context: .
      dockerfile: ./dockerfiles/backend.Dockerfile  # Fixed: docker/ → dockerfiles/
    image: netra-backend:latest
    container_name: netra-backend-dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://netra_user:netra_password@postgres:5432/netra_dev
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-default-dev-secret}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # PR-G Resource Configuration
      - MAX_MEMORY_MB=512
      - CPU_LIMIT=1.0
      - WEBSOCKET_MAX_CONNECTIONS=1000
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    # PR-G Resource Limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    # PR-G Health Check Enhancement
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config:ro

  # Auth Service (PR-G Path Fix Applied)
  netra-auth:
    build:
      context: .
      dockerfile: ./dockerfiles/auth.Dockerfile  # Fixed: docker/ → dockerfiles/
    image: netra-auth:latest
    container_name: netra-auth-dev
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://auth_user:auth_password@postgres:5432/netra_auth
      - REDIS_URL=redis://redis:6379/1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-default-dev-secret}
      - OAUTH_GOOGLE_CLIENT_ID=${OAUTH_GOOGLE_CLIENT_ID:-}
      - OAUTH_GOOGLE_CLIENT_SECRET=${OAUTH_GOOGLE_CLIENT_SECRET:-}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    # PR-G Resource Limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    # PR-G Health Check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Frontend Service (PR-G Path Fix Applied)  
  netra-frontend:
    build:
      context: .
      dockerfile: ./dockerfiles/frontend.Dockerfile  # Fixed: docker/ → dockerfiles/
    image: netra-frontend:latest
    container_name: netra-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_BACKEND_URL=http://localhost:8000
      - REACT_APP_AUTH_URL=http://localhost:8001
      - REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws
      # PR-G Frontend Configuration
      - GENERATE_SOURCEMAP=false
      - DISABLE_ESLINT_PLUGIN=true
    depends_on:
      - netra-backend
      - netra-auth
    restart: unless-stopped
    # PR-G Resource Limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Analytics Service (PR-G Path Fix Applied)
  netra-analytics:
    build:
      context: .
      dockerfile: ./dockerfiles/analytics.Dockerfile  # Fixed: docker/ → dockerfiles/
    image: netra-analytics:latest
    container_name: netra-analytics-dev
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=development
      - CLICKHOUSE_URL=http://clickhouse:8123
      - REDIS_URL=redis://redis:6379/2
      - DATABASE_URL=postgresql://analytics_user:analytics_password@postgres:5432/netra_analytics
    depends_on:
      - postgres
      - redis
      - clickhouse
    restart: unless-stopped
    # PR-G Resource Limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

# =============================================================================
# INFRASTRUCTURE SERVICES (PR-G Enhanced Configuration)
# =============================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: netra-postgres-dev
    environment:
      - POSTGRES_DB=netra_dev
      - POSTGRES_USER=netra_user
      - POSTGRES_PASSWORD=netra_password
      - POSTGRES_MULTIPLE_DATABASES=netra_auth,netra_analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh:ro
    restart: unless-stopped
    # PR-G Database Configuration
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    # PR-G Health Check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netra_user -d netra_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netra-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: unless-stopped
    # PR-G Redis Configuration
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    # PR-G Health Check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ClickHouse Analytics Database
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: netra-clickhouse-dev
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=netra_analytics
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./config/clickhouse-config.xml:/etc/clickhouse-server/config.d/custom.xml:ro
    restart: unless-stopped
    # PR-G ClickHouse Configuration
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

# =============================================================================
# NETWORKING CONFIGURATION (PR-G Enhanced)
# =============================================================================

networks:
  default:
    name: netra-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES CONFIGURATION
# =============================================================================

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  clickhouse_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/clickhouse

# =============================================================================
# PR-G CONFIGURATION IMPROVEMENTS APPLIED
# =============================================================================

# 1. ✅ Docker Path Fixes
#    - All Dockerfile references updated from docker/ to dockerfiles/
#    - Build context optimized for proper path resolution
#    - Fixed issues causing Docker build failures

# 2. ✅ Resource Management
#    - Memory and CPU limits defined for all services
#    - Resource reservations for guaranteed allocation
#    - Optimized resource usage for development and production

# 3. ✅ Health Check Enhancement
#    - Comprehensive health checks for all critical services
#    - Configurable timeouts and retry logic
#    - Proper startup periods for service initialization

# 4. ✅ Environment Variable Organization
#    - Centralized environment variable management
#    - Support for .env file variable substitution
#    - Secure handling of sensitive configuration

# 5. ✅ Volume and Network Configuration
#    - Persistent data volumes for databases
#    - Custom network configuration for service isolation
#    - Configuration file mounting for external config

# 6. ✅ Service Dependencies
#    - Proper service dependency ordering
#    - Database initialization scripts support
#    - Restart policies for production reliability

# =============================================================================
# USAGE INSTRUCTIONS
# =============================================================================

# Development:
# docker-compose up -d

# Production (with resource limits):
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# Individual service:
# docker-compose up -d netra-backend

# View logs:
# docker-compose logs -f netra-backend

# Scale services:
# docker-compose up -d --scale netra-backend=3