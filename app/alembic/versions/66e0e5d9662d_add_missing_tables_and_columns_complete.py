"""add_missing_tables_and_columns_complete

Revision ID: 66e0e5d9662d
Revises: bb39e1c49e2d
Create Date: 2025-08-17 20:08:36.994517

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '66e0e5d9662d'
down_revision: Union[str, Sequence[str], None] = 'bb39e1c49e2d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('mcp_external_servers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('transport', sa.String(length=20), nullable=False),
    sa.Column('auth_type', sa.String(length=50), nullable=True),
    sa.Column('credentials', sa.JSON(), nullable=True),
    sa.Column('capabilities', sa.JSON(), nullable=True),
    sa.Column('metadata_', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('last_health_check', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('mcp_resource_access',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('server_name', sa.String(length=255), nullable=False),
    sa.Column('resource_uri', sa.Text(), nullable=False),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mcp_tool_executions',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('server_name', sa.String(length=255), nullable=False),
    sa.Column('tool_name', sa.String(length=255), nullable=False),
    sa.Column('arguments', sa.JSON(), nullable=False),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('agent_state_snapshots',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('run_id', sa.String(), nullable=False),
    sa.Column('thread_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('schema_version', sa.String(), nullable=False),
    sa.Column('checkpoint_type', sa.String(), nullable=False),
    sa.Column('state_data', sa.JSON(), nullable=False),
    sa.Column('serialization_format', sa.String(), nullable=False),
    sa.Column('compression_type', sa.String(), nullable=True),
    sa.Column('step_count', sa.Integer(), nullable=False),
    sa.Column('agent_phase', sa.String(), nullable=True),
    sa.Column('execution_context', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_recovery_point', sa.Boolean(), nullable=True),
    sa.Column('recovery_reason', sa.String(), nullable=True),
    sa.Column('parent_snapshot_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parent_snapshot_id'], ['agent_state_snapshots.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['userbase.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('run_id', 'checkpoint_type', 'created_at', name='uq_run_checkpoint_time')
    )
    op.create_index('idx_agent_state_expires', 'agent_state_snapshots', ['expires_at'], unique=False)
    op.create_index('idx_agent_state_recovery', 'agent_state_snapshots', ['is_recovery_point', 'created_at'], unique=False)
    op.create_index('idx_agent_state_run_created', 'agent_state_snapshots', ['run_id', 'created_at'], unique=False)
    op.create_index('idx_agent_state_thread_created', 'agent_state_snapshots', ['thread_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_agent_state_snapshots_created_at'), 'agent_state_snapshots', ['created_at'], unique=False)
    op.create_index(op.f('ix_agent_state_snapshots_expires_at'), 'agent_state_snapshots', ['expires_at'], unique=False)
    op.create_index(op.f('ix_agent_state_snapshots_run_id'), 'agent_state_snapshots', ['run_id'], unique=False)
    op.create_index(op.f('ix_agent_state_snapshots_thread_id'), 'agent_state_snapshots', ['thread_id'], unique=False)
    op.create_index(op.f('ix_agent_state_snapshots_user_id'), 'agent_state_snapshots', ['user_id'], unique=False)
    op.create_table('corpus_audit_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('corpus_id', sa.String(), nullable=True),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('resource_id', sa.String(), nullable=True),
    sa.Column('operation_duration_ms', sa.Float(), nullable=True),
    sa.Column('result_data', sa.JSON(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('request_id', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('performance_metrics', sa.JSON(), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('compliance_flags', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['userbase.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_corpus_audit_logs_action'), 'corpus_audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_corpus_id'), 'corpus_audit_logs', ['corpus_id'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_ip_address'), 'corpus_audit_logs', ['ip_address'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_request_id'), 'corpus_audit_logs', ['request_id'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_resource_id'), 'corpus_audit_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_resource_type'), 'corpus_audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_session_id'), 'corpus_audit_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_status'), 'corpus_audit_logs', ['status'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_timestamp'), 'corpus_audit_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_corpus_audit_logs_user_id'), 'corpus_audit_logs', ['user_id'], unique=False)
    op.create_table('agent_recovery_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('run_id', sa.String(), nullable=False),
    sa.Column('thread_id', sa.String(), nullable=False),
    sa.Column('recovery_type', sa.String(), nullable=False),
    sa.Column('source_snapshot_id', sa.String(), nullable=True),
    sa.Column('target_snapshot_id', sa.String(), nullable=True),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('trigger_event', sa.String(), nullable=False),
    sa.Column('auto_recovery', sa.Boolean(), nullable=True),
    sa.Column('recovery_status', sa.String(), nullable=False),
    sa.Column('recovered_data', sa.JSON(), nullable=True),
    sa.Column('lost_data', sa.JSON(), nullable=True),
    sa.Column('data_integrity_score', sa.Integer(), nullable=True),
    sa.Column('recovery_time_ms', sa.Integer(), nullable=True),
    sa.Column('data_size_kb', sa.Integer(), nullable=True),
    sa.Column('initiated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['source_snapshot_id'], ['agent_state_snapshots.id'], ),
    sa.ForeignKeyConstraint(['target_snapshot_id'], ['agent_state_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_recovery_auto', 'agent_recovery_logs', ['auto_recovery', 'initiated_at'], unique=False)
    op.create_index('idx_recovery_run_initiated', 'agent_recovery_logs', ['run_id', 'initiated_at'], unique=False)
    op.create_index('idx_recovery_status', 'agent_recovery_logs', ['recovery_status'], unique=False)
    op.create_index(op.f('ix_agent_recovery_logs_run_id'), 'agent_recovery_logs', ['run_id'], unique=False)
    op.create_index(op.f('ix_agent_recovery_logs_thread_id'), 'agent_recovery_logs', ['thread_id'], unique=False)
    op.create_table('agent_state_transactions',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('snapshot_id', sa.String(), nullable=False),
    sa.Column('run_id', sa.String(), nullable=False),
    sa.Column('operation_type', sa.String(), nullable=False),
    sa.Column('field_changes', sa.JSON(), nullable=True),
    sa.Column('previous_values', sa.JSON(), nullable=True),
    sa.Column('triggered_by', sa.String(), nullable=False),
    sa.Column('execution_phase', sa.String(), nullable=True),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('memory_usage_mb', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['snapshot_id'], ['agent_state_snapshots.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_state_tx_run_status', 'agent_state_transactions', ['run_id', 'status'], unique=False)
    op.create_index('idx_state_tx_started', 'agent_state_transactions', ['started_at'], unique=False)
    op.create_index(op.f('ix_agent_state_transactions_run_id'), 'agent_state_transactions', ['run_id'], unique=False)
    op.create_index(op.f('ix_agent_state_transactions_snapshot_id'), 'agent_state_transactions', ['snapshot_id'], unique=False)
    op.add_column('ai_supply_items', sa.Column('model_version', sa.String(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('pricing_input', sa.Numeric(precision=10, scale=4), nullable=True))
    op.add_column('ai_supply_items', sa.Column('pricing_output', sa.Numeric(precision=10, scale=4), nullable=True))
    op.add_column('ai_supply_items', sa.Column('pricing_currency', sa.String(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('context_window', sa.Integer(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('max_output_tokens', sa.Integer(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('capabilities', sa.JSON(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('availability_status', sa.String(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('api_endpoints', sa.JSON(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('performance_metrics', sa.JSON(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('last_updated', sa.DateTime(timezone=True), nullable=True))
    op.add_column('ai_supply_items', sa.Column('research_source', sa.String(), nullable=True))
    op.add_column('ai_supply_items', sa.Column('confidence_score', sa.Float(), nullable=True))
    op.alter_column('ai_supply_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_ai_supply_items_model_name'), 'ai_supply_items', ['model_name'], unique=False)
    op.create_index(op.f('ix_ai_supply_items_provider'), 'ai_supply_items', ['provider'], unique=False)
    op.drop_column('ai_supply_items', 'cost_per_token')
    op.drop_column('ai_supply_items', 'metadata_')
    op.drop_column('ai_supply_items', 'updated_at')
    op.drop_column('ai_supply_items', 'name')
    op.add_column('corpora', sa.Column('domain', sa.String(), nullable=True))
    op.add_column('corpora', sa.Column('metadata_', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('query', sa.Text(), nullable=False))
    op.add_column('research_sessions', sa.Column('session_id', sa.String(), nullable=True))
    op.add_column('research_sessions', sa.Column('research_plan', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('questions_answered', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('raw_results', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('processed_data', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('citations', sa.JSON(), nullable=True))
    op.add_column('research_sessions', sa.Column('initiated_by', sa.String(), nullable=True))
    op.add_column('research_sessions', sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('research_sessions', sa.Column('error_message', sa.Text(), nullable=True))
    op.alter_column('research_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('research_sessions', 'topic')
    op.drop_column('research_sessions', 'updated_at')
    op.drop_column('research_sessions', 'user_id')
    op.drop_column('research_sessions', 'findings')
    op.add_column('supply_update_logs', sa.Column('field_updated', sa.String(), nullable=False))
    op.add_column('supply_update_logs', sa.Column('research_session_id', sa.String(), nullable=True))
    op.add_column('supply_update_logs', sa.Column('update_reason', sa.String(), nullable=True))
    op.add_column('supply_update_logs', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('supply_update_logs', 'supply_item_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('supply_update_logs', 'updated_by',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_foreign_key(None, 'supply_update_logs', 'ai_supply_items', ['supply_item_id'], ['id'])
    op.create_foreign_key(None, 'supply_update_logs', 'research_sessions', ['research_session_id'], ['id'])
    op.drop_column('supply_update_logs', 'created_at')
    op.drop_column('supply_update_logs', 'update_type')
    op.add_column('tool_usage_logs', sa.Column('category', sa.String(), nullable=True))
    op.add_column('tool_usage_logs', sa.Column('execution_time_ms', sa.Integer(), nullable=True))
    op.add_column('tool_usage_logs', sa.Column('tokens_used', sa.Integer(), nullable=True))
    op.add_column('tool_usage_logs', sa.Column('cost_cents', sa.Integer(), nullable=True))
    op.add_column('tool_usage_logs', sa.Column('plan_tier', sa.String(), nullable=False))
    op.add_column('tool_usage_logs', sa.Column('permission_check_result', sa.JSON(), nullable=True))
    op.add_column('tool_usage_logs', sa.Column('arguments', sa.JSON(), nullable=True))
    op.alter_column('tool_usage_logs', 'user_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('tool_usage_logs', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('tool_usage_logs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_tool_usage_logs_category'), 'tool_usage_logs', ['category'], unique=False)
    op.create_index(op.f('ix_tool_usage_logs_created_at'), 'tool_usage_logs', ['created_at'], unique=False)
    op.create_index(op.f('ix_tool_usage_logs_status'), 'tool_usage_logs', ['status'], unique=False)
    op.create_index(op.f('ix_tool_usage_logs_tool_name'), 'tool_usage_logs', ['tool_name'], unique=False)
    op.create_foreign_key(None, 'tool_usage_logs', 'userbase', ['user_id'], ['id'])
    op.drop_column('tool_usage_logs', 'output_data')
    op.drop_column('tool_usage_logs', 'duration_ms')
    op.drop_column('tool_usage_logs', 'input_data')
    op.alter_column('userbase', 'plan_expires_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('userbase', 'plan_started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.drop_index(op.f('idx_userbase_created_at'), table_name='userbase')
    op.drop_index(op.f('idx_userbase_email'), table_name='userbase')
    op.drop_index(op.f('idx_userbase_plan_tier_is_active'), table_name='userbase')
    op.drop_index(op.f('idx_userbase_role_is_developer'), table_name='userbase')
    op.drop_index(op.f('ix_userbase_role'), table_name='userbase')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_userbase_role'), 'userbase', ['role'], unique=False)
    op.create_index(op.f('idx_userbase_role_is_developer'), 'userbase', ['role', 'is_developer'], unique=False)
    op.create_index(op.f('idx_userbase_plan_tier_is_active'), 'userbase', ['plan_tier', 'is_active'], unique=False)
    op.create_index(op.f('idx_userbase_email'), 'userbase', ['email'], unique=False)
    op.create_index(op.f('idx_userbase_created_at'), 'userbase', ['created_at'], unique=False)
    op.alter_column('userbase', 'plan_started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('userbase', 'plan_expires_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.add_column('tool_usage_logs', sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('tool_usage_logs', sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('tool_usage_logs', sa.Column('output_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'tool_usage_logs', type_='foreignkey')
    op.drop_index(op.f('ix_tool_usage_logs_tool_name'), table_name='tool_usage_logs')
    op.drop_index(op.f('ix_tool_usage_logs_status'), table_name='tool_usage_logs')
    op.drop_index(op.f('ix_tool_usage_logs_created_at'), table_name='tool_usage_logs')
    op.drop_index(op.f('ix_tool_usage_logs_category'), table_name='tool_usage_logs')
    op.alter_column('tool_usage_logs', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('tool_usage_logs', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('tool_usage_logs', 'user_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('tool_usage_logs', 'arguments')
    op.drop_column('tool_usage_logs', 'permission_check_result')
    op.drop_column('tool_usage_logs', 'plan_tier')
    op.drop_column('tool_usage_logs', 'cost_cents')
    op.drop_column('tool_usage_logs', 'tokens_used')
    op.drop_column('tool_usage_logs', 'execution_time_ms')
    op.drop_column('tool_usage_logs', 'category')
    op.add_column('supply_update_logs', sa.Column('update_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('supply_update_logs', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'supply_update_logs', type_='foreignkey')
    op.drop_constraint(None, 'supply_update_logs', type_='foreignkey')
    op.alter_column('supply_update_logs', 'updated_by',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('supply_update_logs', 'supply_item_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('supply_update_logs', 'updated_at')
    op.drop_column('supply_update_logs', 'update_reason')
    op.drop_column('supply_update_logs', 'research_session_id')
    op.drop_column('supply_update_logs', 'field_updated')
    op.add_column('research_sessions', sa.Column('findings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('research_sessions', sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('research_sessions', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('research_sessions', sa.Column('topic', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.alter_column('research_sessions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('research_sessions', 'error_message')
    op.drop_column('research_sessions', 'completed_at')
    op.drop_column('research_sessions', 'initiated_by')
    op.drop_column('research_sessions', 'citations')
    op.drop_column('research_sessions', 'processed_data')
    op.drop_column('research_sessions', 'raw_results')
    op.drop_column('research_sessions', 'questions_answered')
    op.drop_column('research_sessions', 'research_plan')
    op.drop_column('research_sessions', 'session_id')
    op.drop_column('research_sessions', 'query')
    op.drop_column('corpora', 'metadata_')
    op.drop_column('corpora', 'domain')
    op.add_column('ai_supply_items', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('ai_supply_items', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('ai_supply_items', sa.Column('metadata_', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('ai_supply_items', sa.Column('cost_per_token', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_ai_supply_items_provider'), table_name='ai_supply_items')
    op.drop_index(op.f('ix_ai_supply_items_model_name'), table_name='ai_supply_items')
    op.alter_column('ai_supply_items', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_column('ai_supply_items', 'confidence_score')
    op.drop_column('ai_supply_items', 'research_source')
    op.drop_column('ai_supply_items', 'last_updated')
    op.drop_column('ai_supply_items', 'performance_metrics')
    op.drop_column('ai_supply_items', 'api_endpoints')
    op.drop_column('ai_supply_items', 'availability_status')
    op.drop_column('ai_supply_items', 'capabilities')
    op.drop_column('ai_supply_items', 'max_output_tokens')
    op.drop_column('ai_supply_items', 'context_window')
    op.drop_column('ai_supply_items', 'pricing_currency')
    op.drop_column('ai_supply_items', 'pricing_output')
    op.drop_column('ai_supply_items', 'pricing_input')
    op.drop_column('ai_supply_items', 'model_version')
    op.drop_index(op.f('ix_agent_state_transactions_snapshot_id'), table_name='agent_state_transactions')
    op.drop_index(op.f('ix_agent_state_transactions_run_id'), table_name='agent_state_transactions')
    op.drop_index('idx_state_tx_started', table_name='agent_state_transactions')
    op.drop_index('idx_state_tx_run_status', table_name='agent_state_transactions')
    op.drop_table('agent_state_transactions')
    op.drop_index(op.f('ix_agent_recovery_logs_thread_id'), table_name='agent_recovery_logs')
    op.drop_index(op.f('ix_agent_recovery_logs_run_id'), table_name='agent_recovery_logs')
    op.drop_index('idx_recovery_status', table_name='agent_recovery_logs')
    op.drop_index('idx_recovery_run_initiated', table_name='agent_recovery_logs')
    op.drop_index('idx_recovery_auto', table_name='agent_recovery_logs')
    op.drop_table('agent_recovery_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_user_id'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_timestamp'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_status'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_session_id'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_resource_type'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_resource_id'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_request_id'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_ip_address'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_corpus_id'), table_name='corpus_audit_logs')
    op.drop_index(op.f('ix_corpus_audit_logs_action'), table_name='corpus_audit_logs')
    op.drop_table('corpus_audit_logs')
    op.drop_index(op.f('ix_agent_state_snapshots_user_id'), table_name='agent_state_snapshots')
    op.drop_index(op.f('ix_agent_state_snapshots_thread_id'), table_name='agent_state_snapshots')
    op.drop_index(op.f('ix_agent_state_snapshots_run_id'), table_name='agent_state_snapshots')
    op.drop_index(op.f('ix_agent_state_snapshots_expires_at'), table_name='agent_state_snapshots')
    op.drop_index(op.f('ix_agent_state_snapshots_created_at'), table_name='agent_state_snapshots')
    op.drop_index('idx_agent_state_thread_created', table_name='agent_state_snapshots')
    op.drop_index('idx_agent_state_run_created', table_name='agent_state_snapshots')
    op.drop_index('idx_agent_state_recovery', table_name='agent_state_snapshots')
    op.drop_index('idx_agent_state_expires', table_name='agent_state_snapshots')
    op.drop_table('agent_state_snapshots')
    op.drop_table('mcp_tool_executions')
    op.drop_table('mcp_resource_access')
    op.drop_table('mcp_external_servers')
    # ### end Alembic commands ###
