name: Build and Publish Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.10)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write

jobs:
  build-and-publish:
    if: ${{ secrets.COMMUNITY_CREDENTIALS != '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine opentelemetry-sdk opentelemetry-exporter-gcp-trace google-cloud-trace

      - name: Clean distribution directory
        run: rm -rf dist

      - name: Update version in pyproject.toml (if manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          sed -i 's/^version = .*/version = "'"$VERSION"'"/' pyproject.toml
          echo "Updated version to $VERSION"

      - name: Embed release credentials
        env:
          COMMUNITY_CREDENTIALS: ${{ secrets.COMMUNITY_CREDENTIALS }}
        run: python scripts/embed_release_credentials.py

      - name: Build distribution
        run: python -m build

      - name: Verify embedded credentials in build
        run: |
          pip install dist/*.whl
          python -c "from zen.telemetry import telemetry_manager; print('Telemetry enabled:', telemetry_manager.is_enabled())"

      - name: Restore runtime credential loader
        if: always()
        run: git checkout -- zen/telemetry/embedded_credentials.py

      - name: Check distribution
        run: twine check dist/*

      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

      - name: Publish to TestPyPI (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "::notice::Manual release - skipping PyPI upload. Upload manually with: twine upload dist/*"
          echo "To publish to PyPI, create a git tag instead: git tag v${{ github.event.inputs.version }} && git push origin v${{ github.event.inputs.version }}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: netra-zen-dist-${{ github.ref_name }}
          path: dist/
          retention-days: 30

      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
