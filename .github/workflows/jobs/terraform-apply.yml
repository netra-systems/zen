name: Terraform Operations

on:
  workflow_call:
    inputs:
      action:
        description: 'Terraform action to perform (plan, apply, destroy)'
        required: true
        type: string
      workspace:
        description: 'Terraform workspace name'
        required: false
        type: string
        default: 'default'
      var_file:
        description: 'Path to terraform variables file'
        required: false
        type: string
        default: 'terraform.tfvars'
      skip_condition:
        description: 'Skip condition for conditional execution'
        required: false
        type: string
        default: 'false'
    outputs:
      infrastructure_outputs:
        description: 'Terraform outputs as JSON'
        value: ${{ jobs.terraform.outputs.infrastructure_outputs }}
      status:
        description: 'Job completion status'
        value: ${{ jobs.terraform.outputs.status }}

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform:
    runs-on: warp-custom-default
    if: ${{ inputs.skip_condition != 'true' }}
    outputs:
      infrastructure_outputs: ${{ steps.output.outputs.infrastructure_outputs }}
      status: ${{ steps.final.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Configure GCP credentials
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_STAGING_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Initialize Terraform
        id: init
        run: |
          terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
        working-directory: terraform-gcp

      - name: Select workspace
        id: workspace
        run: |
          terraform workspace select ${{ inputs.workspace }} || terraform workspace new ${{ inputs.workspace }}
        working-directory: terraform-gcp

      - name: Validate configuration
        id: validate
        run: terraform validate
        working-directory: terraform-gcp

      - name: Plan infrastructure
        id: plan
        if: ${{ inputs.action == 'plan' || inputs.action == 'apply' }}
        run: |
          terraform plan -var-file="${{ inputs.var_file }}" -out=tfplan
        working-directory: terraform-gcp

      - name: Apply infrastructure
        id: apply
        if: ${{ inputs.action == 'apply' }}
        run: |
          terraform apply -auto-approve tfplan
        working-directory: terraform-gcp

      - name: Destroy infrastructure
        id: destroy
        if: ${{ inputs.action == 'destroy' }}
        run: |
          terraform destroy -var-file="${{ inputs.var_file }}" -auto-approve
        working-directory: terraform-gcp

      - name: Extract outputs
        id: output
        if: ${{ inputs.action == 'apply' }}
        run: |
          outputs=$(terraform output -json)
          echo "infrastructure_outputs=$outputs" >> $GITHUB_OUTPUT
        working-directory: terraform-gcp

      - name: Handle errors
        if: failure()
        run: |
          echo "Terraform operation failed. Action: ${{ inputs.action }}"
          echo "Workspace: ${{ inputs.workspace }}"
          echo "Var file: ${{ inputs.var_file }}"
          exit 1

      - name: Final status
        id: final
        if: always()
        run: |
          echo "status=${{ job.status }}" >> $GITHUB_OUTPUT