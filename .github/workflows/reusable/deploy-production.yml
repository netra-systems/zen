name: Deploy to Production

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: string
        default: 'production'
      requires_approval:
        description: 'Whether deployment requires manual approval'
        required: false
        type: boolean
        default: true
      act_mode:
        description: 'Whether running in ACT mode'
        required: false
        type: string
        default: 'false'
      timeout_minutes:
        description: 'Deployment timeout in minutes'
        required: false
        type: number
        default: 60
    outputs:
      deployment_status:
        description: 'Overall deployment status'
        value: ${{ jobs.deploy-production.outputs.deployment_status }}
      deployment_url:
        description: 'Deployed application URL'
        value: ${{ jobs.deploy-production.outputs.deployment_url }}

permissions:
  contents: read
  deployments: write
  issues: write
  pull-requests: write

env:
  ACT: 'false'
  ENVIRONMENT: ${{ inputs.environment }}

jobs:
  deploy-production:
    runs-on: warp-custom-default
    timeout-minutes: ${{ inputs.timeout_minutes }}
    environment: 
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      deployment_status: ${{ steps.final-status.outputs.status }}
      deployment_url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: ACT Mode Detection
        id: act-detect
        run: |
          if [[ "${{ inputs.act_mode }}" == "true" ]]; then
            echo "🧪 Production deployment in ACT mode"
            echo "ACT_MODE=true" >> $GITHUB_ENV
          else
            echo "☁️ Production deployment in GitHub Actions"
            echo "ACT_MODE=false" >> $GITHUB_ENV
          fi
          
      - name: Validate Production Deployment
        run: |
          echo "🔒 Validating production deployment requirements..."
          
          # Check branch restriction
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "❌ Production deployments are only allowed from main branch"
            exit 1
          fi
          
          # ACT mode: skip actual validation
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "🧪 ACT: Skipping production validation checks"
            echo "✅ Production validation passed (mock)"
          else
            echo "✅ Production deployment validation passed"
          fi
          
      - name: Wait for Approval
        if: inputs.requires_approval && env.ACT_MODE != 'true'
        run: |
          echo "⏳ Waiting for manual approval for production deployment..."
          echo "This step would normally pause for manual approval"
          # In a real implementation, this would integrate with GitHub Environments
          # which handle approvals automatically
          
      - name: Mock Approval (ACT)
        if: inputs.requires_approval && env.ACT_MODE == 'true'
        run: |
          echo "🧪 ACT: Mock approval granted for production deployment"
          
      - name: Setup Google Cloud
        if: env.ACT_MODE != 'true'
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_PROD_SA_KEY }}
          project_id: ${{ secrets.GCP_PROD_PROJECT_ID }}
          
      - name: Mock GCP Setup (ACT)
        if: env.ACT_MODE == 'true'
        run: |
          echo "🧪 ACT: Mock GCP setup for production"
          echo "- Project: mock-prod-project"
          echo "- Service Account: mock-prod-sa"
          
      - name: Deploy to Production
        id: deploy
        run: |
          echo "🚀 Deploying to production environment..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "🧪 ACT: Mock production deployment"
            echo "- Environment: production (mock)"
            echo "- Version: v1.0.0-mock"
            echo "- Status: deployed"
            
            # Mock deployment outputs
            echo "url=https://app.netra-prod.com" >> $GITHUB_OUTPUT
            echo "version=v1.0.0-mock" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Simulate deployment time
            sleep 3
            echo "✅ Mock production deployment completed"
          else
            # Real production deployment
            echo "Starting production deployment..."
            
            # Build and deploy
            ./scripts/deploy-production.sh
            
            # Get deployment outputs
            DEPLOY_URL=$(terraform output -raw frontend_url)
            DEPLOY_VERSION=$(git describe --tags --always)
            
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "version=$DEPLOY_VERSION" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
            
            echo "✅ Production deployment completed"
            echo "🌐 URL: $DEPLOY_URL"
            echo "📦 Version: $DEPLOY_VERSION"
          fi
          
      - name: Health Check
        id: health-check
        run: |
          echo "🏥 Running production health checks..."
          
          DEPLOY_URL="${{ steps.deploy.outputs.url }}"
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "🧪 ACT: Mock health checks"
            echo "- API: healthy (mock)"
            echo "- Database: healthy (mock)"
            echo "- Cache: healthy (mock)"
            echo "✅ All health checks passed (mock)"
          else
            # Real health checks
            echo "Checking API health at $DEPLOY_URL/health"
            curl -f "$DEPLOY_URL/health" || exit 1
            
            echo "Checking database connectivity"
            python scripts/check_db_health.py --env production || exit 1
            
            echo "✅ All health checks passed"
          fi
          
      - name: Update Deployment Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = '${{ steps.deploy.outputs.url }}';
            const version = '${{ steps.deploy.outputs.version }}';
            const status = '${{ steps.deploy.outputs.status }}';
            const healthStatus = '${{ steps.health-check.outcome }}';
            
            const finalStatus = (status === 'success' && healthStatus === 'success') ? 'success' : 'failure';
            
            // Create deployment status
            try {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: context.payload.deployment?.id || 0,
                state: finalStatus,
                description: `Production deployment ${finalStatus} - ${version}`,
                environment_url: deployUrl,
                target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
              });
            } catch (error) {
              console.log('Note: Could not update deployment status (normal in ACT mode)');
            }
            
      - name: Notify Stakeholders
        if: always() && env.ACT_MODE != 'true'
        run: |
          STATUS="${{ steps.deploy.outputs.status }}"
          URL="${{ steps.deploy.outputs.url }}"
          VERSION="${{ steps.deploy.outputs.version }}"
          
          if [[ "$STATUS" == "success" ]]; then
            echo "📢 Sending success notification for production deployment"
            echo "✅ Production deployment successful"
            echo "🌐 URL: $URL"
            echo "📦 Version: $VERSION"
            # Here you would integrate with Slack, email, etc.
          else
            echo "📢 Sending failure notification for production deployment"
            echo "❌ Production deployment failed"
            # Here you would send alerts to on-call team
          fi
          
      - name: Mock Notifications (ACT)
        if: always() && env.ACT_MODE == 'true'
        run: |
          STATUS="${{ steps.deploy.outputs.status }}"
          echo "🧪 ACT: Mock stakeholder notifications"
          echo "- Status: $STATUS"
          echo "- Channels: Slack, Email, PagerDuty"
          echo "✅ Notifications sent (mock)"
          
      - name: Final Status
        id: final-status
        if: always()
        run: |
          DEPLOY_STATUS="${{ steps.deploy.outputs.status }}"
          HEALTH_STATUS="${{ steps.health-check.outcome }}"
          
          if [[ "$DEPLOY_STATUS" == "success" && "$HEALTH_STATUS" == "success" ]]; then
            FINAL_STATUS="success"
          else
            FINAL_STATUS="failure"
          fi
          
          echo "status=$FINAL_STATUS" >> $GITHUB_OUTPUT
          echo "Final production deployment status: $FINAL_STATUS"
          
      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "🧹 Cleaning up failed production deployment..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "🧪 ACT: Mock cleanup for failed deployment"
          else
            # Real cleanup logic
            echo "Rolling back production deployment..."
            ./scripts/rollback-production.sh || true
          fi
          
          echo "Cleanup completed"