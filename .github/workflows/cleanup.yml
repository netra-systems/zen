name: Resource Cleanup

on:
  workflow_call:
    inputs:
      cleanup_type:
        description: 'Type of cleanup: pr-closed, manual, scheduled'
        required: false
        type: string
        default: 'manual'
      pr_number:
        description: 'PR number for PR-specific cleanup'
        required: false
        type: string
      act_mode:
        description: 'Whether running in ACT mode'
        required: false
        type: string
        default: 'false'
      timeout_minutes:
        description: 'Cleanup timeout in minutes'
        required: false
        type: number
        default: 15
    outputs:
      cleanup_status:
        description: 'Overall cleanup status'
        value: ${{ jobs.cleanup.outputs.cleanup_status }}

permissions:
  contents: read
  deployments: write
  issues: write
  pull-requests: write

env:
  ACT: 'false'
  CLEANUP_TYPE: ${{ inputs.cleanup_type }}

jobs:
  cleanup:
    runs-on: warp-custom-default
    timeout-minutes: ${{ inputs.timeout_minutes }}
    outputs:
      cleanup_status: ${{ steps.final-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: ACT Mode Detection
        id: act-detect
        run: |
          if [[ "${{ inputs.act_mode }}" == "true" ]]; then
            echo "üß™ Cleanup in ACT mode"
            echo "ACT_MODE=true" >> $GITHUB_ENV
          else
            echo "‚òÅÔ∏è Cleanup in GitHub Actions"
            echo "ACT_MODE=false" >> $GITHUB_ENV
          fi
          
      - name: Determine Cleanup Scope
        id: scope
        run: |
          echo "üîç Determining cleanup scope for: ${{ inputs.cleanup_type }}"
          
          case "${{ inputs.cleanup_type }}" in
            "pr-closed")
              echo "scope=pr-specific" >> $GITHUB_OUTPUT
              echo "resources=staging-environment,terraform-state,docker-images" >> $GITHUB_OUTPUT
              echo "target=pr-${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
              ;;
            "scheduled")
              echo "scope=stale-resources" >> $GITHUB_OUTPUT
              echo "resources=old-staging-envs,unused-images,temp-files" >> $GITHUB_OUTPUT
              echo "target=all-stale" >> $GITHUB_OUTPUT
              ;;
            "manual")
              echo "scope=user-requested" >> $GITHUB_OUTPUT
              echo "resources=specified-resources" >> $GITHUB_OUTPUT
              echo "target=user-defined" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "scope=unknown" >> $GITHUB_OUTPUT
              echo "resources=none" >> $GITHUB_OUTPUT
              echo "target=none" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Setup Google Cloud
        if: env.ACT_MODE != 'true'
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_STAGING_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Mock GCP Setup (ACT)
        if: env.ACT_MODE == 'true'
        run: |
          echo "üß™ ACT: Mock GCP setup for cleanup"
          echo "- Project: mock-staging-project"
          echo "- Service Account: mock-staging-sa"
          
      - name: Cleanup Staging Environment
        if: contains(steps.scope.outputs.resources, 'staging-environment')
        run: |
          echo "üßπ Cleaning up staging environment..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock staging environment cleanup"
            echo "- Target: ${{ steps.scope.outputs.target }}"
            echo "- Resources: Cloud Run, Load Balancer, DNS"
            echo "‚úÖ Staging environment cleaned up (mock)"
          else
            # Real staging cleanup
            TARGET="${{ steps.scope.outputs.target }}"
            echo "Cleaning up staging environment for: $TARGET"
            
            # Terraform destroy for specific workspace
            cd terraform-gcp
            terraform workspace select "$TARGET" 2>/dev/null || echo "Workspace $TARGET not found"
            terraform destroy -auto-approve || echo "Destroy completed with warnings"
            
            echo "‚úÖ Staging environment cleanup completed"
          fi
          
      - name: Cleanup Docker Images
        if: contains(steps.scope.outputs.resources, 'docker-images')
        run: |
          echo "üê≥ Cleaning up Docker images..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock Docker image cleanup"
            echo "- Registry: gcr.io/mock-project"
            echo "- Target: ${{ steps.scope.outputs.target }}"
            echo "‚úÖ Docker images cleaned up (mock)"
          else
            # Real Docker cleanup
            TARGET="${{ steps.scope.outputs.target }}"
            echo "Cleaning up Docker images for: $TARGET"
            
            # Remove images from Google Container Registry
            gcloud container images list-tags gcr.io/${{ secrets.GCP_PROJECT_ID }}/netra-app \
              --filter="tags:$TARGET" --format="get(digest)" | \
              xargs -r gcloud container images delete --quiet || true
              
            echo "‚úÖ Docker image cleanup completed"
          fi
          
      - name: Cleanup Database Resources
        if: contains(steps.scope.outputs.resources, 'database')
        run: |
          echo "üóÑÔ∏è Cleaning up database resources..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock database cleanup"
            echo "- Target: ${{ steps.scope.outputs.target }}"
            echo "- Databases: PostgreSQL, ClickHouse"
            echo "‚úÖ Database resources cleaned up (mock)"
          else
            # Real database cleanup
            TARGET="${{ steps.scope.outputs.target }}"
            echo "Cleaning up database resources for: $TARGET"
            
            # Drop test databases
            python scripts/cleanup_test_databases.py --target "$TARGET" || true
            
            echo "‚úÖ Database cleanup completed"
          fi
          
      - name: Cleanup Temporary Files
        if: contains(steps.scope.outputs.resources, 'temp-files')
        run: |
          echo "üìÅ Cleaning up temporary files..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock temporary file cleanup"
            echo "- Target: ${{ steps.scope.outputs.target }}"
            echo "- Locations: /tmp, .cache, test-outputs"
            echo "‚úÖ Temporary files cleaned up (mock)"
          else
            # Real temp file cleanup
            echo "Cleaning up temporary files..."
            
            # Remove old test outputs
            find . -name "test-outputs-*" -type d -mtime +7 -exec rm -rf {} + || true
            
            # Remove old coverage files
            find . -name ".coverage.*" -mtime +7 -delete || true
            
            # Remove old log files
            find . -name "*.log" -mtime +7 -delete || true
            
            echo "‚úÖ Temporary file cleanup completed"
          fi
          
      - name: Cleanup Stale Resources
        if: inputs.cleanup_type == 'scheduled'
        run: |
          echo "üï∞Ô∏è Cleaning up stale resources..."
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock stale resource cleanup"
            echo "- Age threshold: 7 days"
            echo "- Resources: staging envs, test DBs, temp files"
            echo "‚úÖ Stale resources cleaned up (mock)"
          else
            # Real stale resource cleanup
            echo "Finding and cleaning stale resources..."
            
            # Find and destroy old staging environments
            python scripts/cleanup_stale_environments.py --days 7 || true
            
            # Clean up old test artifacts
            python scripts/cleanup_test_artifacts.py --days 3 || true
            
            echo "‚úÖ Stale resource cleanup completed"
          fi
          
      - name: Update PR Comment
        if: inputs.cleanup_type == 'pr-closed' && inputs.pr_number && env.ACT_MODE != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ inputs.pr_number }};
            const identifier = '<!-- netra-cleanup-status -->';
            
            const comment = `${identifier}
            ## üßπ Resource Cleanup Complete
            
            **PR:** #${prNumber}
            **Status:** ‚úÖ **COMPLETED**
            **Cleaned Resources:**
            - üèóÔ∏è Staging environment destroyed
            - üê≥ Docker images removed
            - üóÑÔ∏è Database resources cleaned
            - üìÅ Temporary files removed
            
            **Action:** Automatic cleanup triggered by PR closure
            **Timestamp:** ${new Date().toISOString()}
            `;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });
            
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes(identifier)
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
            
      - name: Mock PR Comment (ACT)
        if: inputs.cleanup_type == 'pr-closed' && inputs.pr_number && env.ACT_MODE == 'true'
        run: |
          echo "üß™ ACT: Mock PR comment update"
          echo "## üßπ Resource Cleanup Complete (Mock)"
          echo ""
          echo "**PR:** #${{ inputs.pr_number }}"
          echo "**Status:** ‚úÖ **COMPLETED**"
          echo "**Resources:** All cleaned up (mock)"
          echo "‚úÖ PR comment simulation completed"
          
      - name: Generate Cleanup Report
        id: report
        run: |
          echo "üìä Generating cleanup report..."
          
          SCOPE="${{ steps.scope.outputs.scope }}"
          RESOURCES="${{ steps.scope.outputs.resources }}"
          TARGET="${{ steps.scope.outputs.target }}"
          
          echo "=== Cleanup Report ===" > cleanup-report.txt
          echo "Type: ${{ inputs.cleanup_type }}" >> cleanup-report.txt
          echo "Scope: $SCOPE" >> cleanup-report.txt
          echo "Target: $TARGET" >> cleanup-report.txt
          echo "Resources: $RESOURCES" >> cleanup-report.txt
          echo "Status: completed" >> cleanup-report.txt
          echo "Timestamp: $(date -u)" >> cleanup-report.txt
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "Mode: ACT (mock)" >> cleanup-report.txt
          else
            echo "Mode: GitHub Actions (real)" >> cleanup-report.txt
          fi
          
          echo "Cleanup report generated"
          
      - name: Final Status
        id: final-status
        if: always()
        run: |
          # Check if any cleanup steps failed
          if [[ "${{ job.status }}" == "success" ]]; then
            FINAL_STATUS="success"
          else
            FINAL_STATUS="failure"
          fi
          
          echo "status=$FINAL_STATUS" >> $GITHUB_OUTPUT
          echo "Final cleanup status: $FINAL_STATUS"
          
      - name: Upload Cleanup Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-report-${{ inputs.cleanup_type }}-${{ github.run_id }}
          path: cleanup-report.txt
          retention-days: 30
          
      - name: Error Handling
        if: failure()
        run: |
          echo "‚ùå Cleanup failed - investigating..."
          
          # Log the failure
          echo "Cleanup failure details:" >> cleanup-failure.log
          echo "Type: ${{ inputs.cleanup_type }}" >> cleanup-failure.log
          echo "Target: ${{ steps.scope.outputs.target }}" >> cleanup-failure.log
          echo "Timestamp: $(date -u)" >> cleanup-failure.log
          
          if [[ "${{ env.ACT_MODE }}" == "true" ]]; then
            echo "üß™ ACT: Mock cleanup failure handling"
          else
            # Send alert for cleanup failures
            echo "üö® Cleanup failure - manual intervention may be required"
            # Here you would integrate with alerting systems
          fi