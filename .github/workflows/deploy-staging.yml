
# NOTE: This workflow has been identified for PR comment update
# To prevent comment spam, update PR comment sections to use:
# uses: ./.github/actions/pr-comment
# with:
#   comment-identifier: 'netra-deploy-staging'
#   comment-body: |
#     Your comment content here

name: Deploy to Staging

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: string
        default: 'staging'
      trigger_context:
        description: 'What triggered this deployment'
        required: false
        type: string
        default: 'manual'
      act_mode:
        description: 'Whether running in ACT mode'
        required: false
        type: string
        default: 'false'
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        type: boolean
        default: false
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/deploy-staging.yml'

env:
  GCP_PROJECT: netra-staging
  REGION: us-central1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  # Service names
  BACKEND_SERVICE: netra-backend
  AUTH_SERVICE: netra-auth
  FRONTEND_SERVICE: netra-frontend

permissions:
  contents: read
  deployments: write
  id-token: write  # For GCP authentication

concurrency:
  group: deploy-staging-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel deployments

jobs:
  # ==========================================
  # Pre-Deployment Checks
  # ==========================================
  
  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: warp-custom-default
    timeout-minutes: 15
    outputs:
      ready_to_deploy: ${{ steps.validation.outputs.ready }}
      mission_critical_passed: ${{ steps.mission-critical.outputs.passed }}
      
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      # Mission Critical Tests - MUST PASS
      - name: Run Mission Critical Tests
        id: mission-critical
        if: inputs.skip_tests != true
        run: |
          echo "🚨 Running mission critical WebSocket tests..."
          python tests/mission_critical/test_websocket_agent_events_suite.py
          
          if [ $? -eq 0 ]; then
            echo "✅ Mission critical tests passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Mission critical tests FAILED - deployment blocked"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      # Architecture Compliance Check
      - name: Check Architecture Compliance
        if: inputs.skip_tests != true
        run: |
          echo "🏗️ Checking architecture compliance..."
          python scripts/check_architecture_compliance.py
          
      # Configuration Validation
      - name: Validate Configurations
        run: |
          echo "🔧 Validating environment configurations..."
          python scripts/validate_configs.py --env staging
          
      # Database Migration Check
      - name: Check Pending Migrations
        run: |
          echo "🗄️ Checking for pending database migrations..."
          # Add migration check logic here
          
      - name: Deployment Validation Summary
        id: validation
        run: |
          echo "## Pre-Deployment Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Mission Critical Tests: ${{ steps.mission-critical.outputs.passed == 'true' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture Compliance: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration Valid: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Migrations Ready: ✅" >> $GITHUB_STEP_SUMMARY
          
          echo "ready=true" >> $GITHUB_OUTPUT

  # ==========================================
  # Build Phase
  # ==========================================
  
  build-backend:
    name: Build Backend Services
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.ready_to_deploy == 'true'
    runs-on: warp-custom-default
    timeout-minutes: 20
    outputs:
      backend_image: ${{ steps.build.outputs.image }}
      auth_image: ${{ steps.build-auth.outputs.image }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Configure Docker for GCR
        if: inputs.act_mode != 'true'
        run: |
          gcloud auth configure-docker gcr.io
          
      - name: Build Backend Image
        id: build
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}"
          
          docker build \
            --tag $IMAGE_TAG \
            --cache-from gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_SERVICE }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f Dockerfile.backend \
            .
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      - name: Build Auth Service Image
        id: build-auth
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.AUTH_SERVICE }}:${{ github.sha }}"
          
          docker build \
            --tag $IMAGE_TAG \
            --cache-from gcr.io/${{ env.GCP_PROJECT }}/${{ env.AUTH_SERVICE }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f auth_service/Dockerfile \
            ./auth_service
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-frontend:
    name: Build Frontend
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.ready_to_deploy == 'true'
    runs-on: warp-custom-default
    timeout-minutes: 20
    outputs:
      frontend_image: ${{ steps.build.outputs.image }}
      
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Build frontend
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: https://api-staging.netra.app
          NEXT_PUBLIC_WS_URL: wss://api-staging.netra.app
          NEXT_PUBLIC_ENV: staging
        run: |
          npm run build
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Build Frontend Image
        id: build
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}"
          
          docker build \
            --tag $IMAGE_TAG \
            --cache-from gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_SERVICE }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -f frontend/Dockerfile \
            ./frontend
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ==========================================
  # Database Migration
  # ==========================================
  
  migrate-database:
    name: Run Database Migrations
    needs: [build-backend, build-frontend]
    runs-on: warp-custom-default
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Get database credentials
        if: inputs.act_mode != 'true'
        run: |
          # Retrieve database connection details from Secret Manager
          export DB_HOST=$(gcloud secrets versions access latest --secret="staging-db-host")
          export DB_PASSWORD=$(gcloud secrets versions access latest --secret="staging-db-password")
          echo "::add-mask::$DB_PASSWORD"
          
      - name: Run migrations
        if: inputs.act_mode != 'true'
        run: |
          echo "Running database migrations..."
          # Add actual migration command here
          # Example: alembic upgrade head

  # ==========================================
  # Deploy Services
  # ==========================================
  
  deploy-backend:
    name: Deploy Backend Services
    needs: [build-backend, migrate-database]
    runs-on: warp-custom-default
    timeout-minutes: 15
    environment:
      name: staging
      url: https://api-staging.netra.app
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - uses: actions/setup-python@v5
        if: inputs.act_mode != 'true'
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Prepare Cloud SQL and secret mappings
        if: inputs.act_mode != 'true'
        run: |
          python - <<'PYCODE' >> "$GITHUB_ENV"
from deployment.secrets_config import SecretConfig
print(f"BACKEND_SECRETS={SecretConfig.generate_secrets_string('backend','staging')}")
print(f"AUTH_SECRETS={SecretConfig.generate_secrets_string('auth','staging')}")
PYCODE
          echo "CLOUD_SQL_INSTANCES=${{ env.GCP_PROJECT }}:us-central1:staging-shared-postgres,${{ env.GCP_PROJECT }}:us-central1:netra-postgres" >> "$GITHUB_ENV"

      - name: Deploy Backend to Cloud Run
        if: inputs.act_mode != 'true'
        run: |
          gcloud run deploy ${{ env.BACKEND_SERVICE }} \
            --image ${{ needs.build-backend.outputs.backend_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8000 \
            --cpu 2 \
            --memory 4Gi \
            --min-instances 1 \
            --max-instances 10 \
            --vpc-connector staging-connector \
            --vpc-egress all-traffic \
            --timeout 600 \
            --cpu-boost \
            --add-cloudsql-instances "${{ env.CLOUD_SQL_INSTANCES }}" \
            --set-env-vars="NETRA_ENV=staging" \
            --set-secrets "${{ env.BACKEND_SECRETS }}"

      - name: Deploy Auth Service to Cloud Run
        if: inputs.act_mode != 'true'
        run: |
          gcloud run deploy ${{ env.AUTH_SERVICE }} \
            --image ${{ needs.build-backend.outputs.auth_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8001 \
            --cpu 1 \
            --memory 2Gi \
            --min-instances 1 \
            --max-instances 5 \
            --vpc-connector staging-connector \
            --vpc-egress all-traffic \
            --timeout 600 \
            --cpu-boost \
            --add-cloudsql-instances "${{ env.CLOUD_SQL_INSTANCES }}" \
            --set-env-vars="NETRA_ENV=staging" \
            --set-secrets "${{ env.AUTH_SECRETS }}"
  deploy-frontend:
    name: Deploy Frontend
    needs: [build-frontend, deploy-backend]
    runs-on: warp-custom-default
    timeout-minutes: 15
    environment:
      name: staging
      url: https://staging.netra.app
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          
      - name: Deploy Frontend to Cloud Run
        if: inputs.act_mode != 'true'
        run: |
          gcloud run deploy ${{ env.FRONTEND_SERVICE }} \
            --image ${{ needs.build-frontend.outputs.frontend_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000 \
            --cpu 1 \
            --memory 2Gi \
            --min-instances 1 \
            --max-instances 10

  # ==========================================
  # Post-Deployment Validation
  # ==========================================
  
  validate-deployment:
    name: Validate Deployment
    needs: [deploy-backend, deploy-frontend]
    runs-on: warp-custom-default
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest
          
      - name: Health Check - Backend
        run: |
          echo "Checking backend health..."
          for i in {1..30}; do
            if curl -s https://api-staging.netra.app/health | grep -q "healthy"; then
              echo "✅ Backend is healthy"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 10
          done
          
      - name: Health Check - Frontend
        run: |
          echo "Checking frontend health..."
          for i in {1..30}; do
            if curl -s https://staging.netra.app | grep -q "<!DOCTYPE html>"; then
              echo "✅ Frontend is responding"
              break
            fi
            echo "Waiting for frontend... ($i/30)"
            sleep 10
          done
          
      - name: Run Smoke Tests
        run: |
          echo "Running post-deployment smoke tests..."
          python unified_test_runner.py --category smoke --env staging
          
      - name: Generate Deployment Report
        run: |
          echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Services" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: https://api-staging.netra.app ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Auth Service: https://auth-staging.netra.app ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: https://staging.netra.app ✅" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ inputs.trigger_context || 'push to main' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Notification
  # ==========================================
  
  notify:
    name: Send Deployment Notification
    needs: [validate-deployment]
    if: always()
    runs-on: warp-custom-default
    
    steps:
      - name: Deployment Status
        run: |
          if [[ "${{ needs.validate-deployment.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful!"
          else
            echo "❌ Staging deployment failed!"
          fi
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ needs.validate-deployment.result }}' === 'success';
            const emoji = success ? '🚀' : '❌';
            const status = success ? 'deployed successfully' : 'deployment failed';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} Staging ${status}!\n\nView at: https://staging.netra.app`
            });