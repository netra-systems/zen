
# NOTE: This workflow has been identified for PR comment update
# To prevent comment spam, update PR comment sections to use:
# uses: ./.github/actions/pr-comment
# with:
#   comment-identifier: 'netra-ci-failfast'
#   comment-body: |
#     Your comment content here

name: CI - Fail Fast

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      start_from:
        description: 'Start from specific phase'
        required: false
        type: choice
        options:
          - beginning
          - unit-tests
          - integration-tests
          - e2e-tests
        default: beginning

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  # Real services for testing per CLAUDE.md requirements
  TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/netra_test
  TEST_REDIS_URL: redis://localhost:6379/0
  NETRA_ENV: test
  CI: true

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

concurrency:
  group: ci-failfast-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================
  # SINGLE JOB: Sequential Test Execution
  # ==========================================
  
  sequential-tests:
    name: Sequential Test Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 45
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      # ==========================================
      # Setup Phase
      # ==========================================
      
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install Python dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r auth_service/requirements.txt
          pip install ruff black mypy safety bandit
          
      - name: Install Node dependencies
        working-directory: ./frontend
        run: |
          echo "📦 Installing Node dependencies..."
          npm ci
          
      - name: Verify service connectivity
        run: |
          echo "🔍 Verifying service connectivity..."
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready"
          
          # Note: redis-cli might not be available, so we'll skip direct check
          echo "✅ Redis assumed ready (service health check passed)"
          
      # ==========================================
      # PHASE 1: Mission Critical Tests (MUST PASS)
      # ==========================================
      
      - name: "🚨 PHASE 1: Mission Critical WebSocket Tests"
        id: mission-critical
        run: |
          echo "## 🚨 Phase 1: Mission Critical Tests" >> $GITHUB_STEP_SUMMARY
          echo "Testing WebSocket agent events (CANNOT regress)..." >> $GITHUB_STEP_SUMMARY
          
          python tests/mission_critical/test_websocket_agent_events_suite.py
          
          if [ $? -eq 0 ]; then
            echo "✅ Mission critical tests PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CRITICAL FAILURE: WebSocket tests failed!" >> $GITHUB_STEP_SUMMARY
            echo "::error::Mission critical WebSocket tests failed. This MUST be fixed immediately."
            exit 1
          fi
          
      # ==========================================
      # PHASE 2: Architecture & Code Quality
      # ==========================================
      
      - name: "🏗️ PHASE 2: Architecture Compliance"
        if: success() && (inputs.start_from == 'beginning' || inputs.start_from == '')
        run: |
          echo "## 🏗️ Phase 2: Architecture & Code Quality" >> $GITHUB_STEP_SUMMARY
          echo "Checking architecture compliance..." >> $GITHUB_STEP_SUMMARY
          
          python scripts/check_architecture_compliance.py
          if [ $? -ne 0 ]; then
            echo "❌ Architecture compliance check failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Architecture compliance PASSED" >> $GITHUB_STEP_SUMMARY
          
      - name: "📝 Code Quality - Python Linting"
        if: success()
        run: |
          echo "Checking Python code quality..." >> $GITHUB_STEP_SUMMARY
          
          ruff check .
          if [ $? -ne 0 ]; then
            echo "❌ Python linting failed (ruff)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          black --check .
          if [ $? -ne 0 ]; then
            echo "❌ Python formatting check failed (black)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Python linting PASSED" >> $GITHUB_STEP_SUMMARY
          
      - name: "🔍 Type Checking"
        if: success()
        continue-on-error: true  # Type checking is informational
        run: |
          echo "Running type checking..." >> $GITHUB_STEP_SUMMARY
          mypy netra_backend --ignore-missing-imports || echo "⚠️ Type checking has warnings" >> $GITHUB_STEP_SUMMARY
          
      - name: "📝 Code Quality - Frontend Linting"
        if: success()
        working-directory: ./frontend
        run: |
          echo "Checking Frontend code quality..." >> $GITHUB_STEP_SUMMARY
          
          npm run lint
          if [ $? -ne 0 ]; then
            echo "❌ Frontend linting failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          npm run typecheck
          if [ $? -ne 0 ]; then
            echo "❌ Frontend type checking failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Frontend linting PASSED" >> $GITHUB_STEP_SUMMARY
          
      # ==========================================
      # PHASE 3: Unit Tests
      # ==========================================
      
      - name: "🧪 PHASE 3: Backend Unit Tests"
        if: success() && (inputs.start_from == 'beginning' || inputs.start_from == 'unit-tests' || inputs.start_from == '')
        run: |
          echo "## 🧪 Phase 3: Unit Tests" >> $GITHUB_STEP_SUMMARY
          echo "Running backend unit tests..." >> $GITHUB_STEP_SUMMARY
          
          python unified_test_runner.py --category unit --service backend --fast-fail --no-coverage
          if [ $? -ne 0 ]; then
            echo "❌ Backend unit tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Backend unit tests PASSED" >> $GITHUB_STEP_SUMMARY
          
      - name: "🧪 Frontend Unit Tests"
        if: success()
        working-directory: ./frontend
        run: |
          echo "Running frontend unit tests..." >> $GITHUB_STEP_SUMMARY
          
          npm run test:unit -- --run
          if [ $? -ne 0 ]; then
            echo "❌ Frontend unit tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Frontend unit tests PASSED" >> $GITHUB_STEP_SUMMARY
          
      - name: "🧪 Auth Service Unit Tests"
        if: success()
        run: |
          echo "Running auth service tests..." >> $GITHUB_STEP_SUMMARY
          
          cd auth_service && python -m pytest tests/ -v --tb=short
          if [ $? -ne 0 ]; then
            echo "❌ Auth service tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Auth service tests PASSED" >> $GITHUB_STEP_SUMMARY
          
      # ==========================================
      # PHASE 4: Integration Tests
      # ==========================================
      
      - name: "🔗 PHASE 4: Database Migration Tests"
        if: success() && (inputs.start_from == 'beginning' || inputs.start_from == 'unit-tests' || inputs.start_from == 'integration-tests' || inputs.start_from == '')
        run: |
          echo "## 🔗 Phase 4: Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "Testing database migrations..." >> $GITHUB_STEP_SUMMARY
          
          python unified_test_runner.py --category database --real-services
          if [ $? -ne 0 ]; then
            echo "❌ Database migration tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Database migration tests PASSED" >> $GITHUB_STEP_SUMMARY
          
      - name: "🔗 Backend Integration Tests"
        if: success()
        run: |
          echo "Running backend integration tests..." >> $GITHUB_STEP_SUMMARY
          
          python unified_test_runner.py --category integration --service backend --real-services
          if [ $? -ne 0 ]; then
            echo "❌ Backend integration tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ Backend integration tests PASSED" >> $GITHUB_STEP_SUMMARY
          
      # ==========================================
      # PHASE 5: E2E Tests
      # ==========================================
      
      - name: "🌐 PHASE 5: Start Services for E2E"
        if: success() && (inputs.start_from == 'beginning' || inputs.start_from == 'unit-tests' || inputs.start_from == 'integration-tests' || inputs.start_from == 'e2e-tests' || inputs.start_from == '')
        run: |
          echo "## 🌐 Phase 5: End-to-End Tests" >> $GITHUB_STEP_SUMMARY
          echo "Starting backend and frontend services..." >> $GITHUB_STEP_SUMMARY
          
          # Start backend
          python -m uvicorn netra_backend.app.main:app --host 0.0.0.0 --port 8000 &
          BACKEND_PID=$!
          echo "Backend PID: $BACKEND_PID"
          
          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "✅ Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
          
          # Start frontend
          cd frontend && npm run dev &
          FRONTEND_PID=$!
          echo "Frontend PID: $FRONTEND_PID"
          cd ..
          
          # Wait for frontend to be ready
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "✅ Frontend is ready"
              break
            fi
            echo "Waiting for frontend... ($i/30)"
            sleep 2
          done
          
          # Save PIDs for cleanup
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          
      - name: "🌐 Run E2E Tests"
        if: success()
        run: |
          echo "Running E2E tests..." >> $GITHUB_STEP_SUMMARY
          
          python unified_test_runner.py --category e2e --real-services
          if [ $? -ne 0 ]; then
            echo "❌ E2E tests failed!" >> $GITHUB_STEP_SUMMARY
            # Kill services before exiting
            kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
            exit 1
          fi
          
          echo "✅ E2E tests PASSED" >> $GITHUB_STEP_SUMMARY
          
          # Kill services
          kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
          
      # ==========================================
      # PHASE 6: Security Scan (Optional)
      # ==========================================
      
      - name: "🔒 PHASE 6: Security Scan"
        if: success()
        continue-on-error: true  # Security scan is informational
        run: |
          echo "## 🔒 Phase 6: Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "Running security checks..." >> $GITHUB_STEP_SUMMARY
          
          safety check || echo "⚠️ Some dependencies have known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          
          bandit -r netra_backend -f json -o security-report.json || echo "⚠️ Security scan found potential issues" >> $GITHUB_STEP_SUMMARY
          
      # ==========================================
      # Final Summary
      # ==========================================
      
      - name: "📊 Generate Final Report"
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Final Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ ALL TESTS PASSED!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All test phases completed successfully in sequential order:" >> $GITHUB_STEP_SUMMARY
            echo "1. ✅ Mission Critical Tests" >> $GITHUB_STEP_SUMMARY
            echo "2. ✅ Architecture & Code Quality" >> $GITHUB_STEP_SUMMARY
            echo "3. ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "4. ✅ Integration Tests" >> $GITHUB_STEP_SUMMARY
            echo "5. ✅ End-to-End Tests" >> $GITHUB_STEP_SUMMARY
            echo "6. ℹ️ Security Scan (informational)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ TESTS FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The test pipeline stopped at the first failure to provide rapid feedback." >> $GITHUB_STEP_SUMMARY
            echo "Please fix the failing tests before proceeding." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy:** Fail-fast sequential execution" >> $GITHUB_STEP_SUMMARY
          echo "**Total Duration:** ~${{ job.duration }} minutes" >> $GITHUB_STEP_SUMMARY
          
      - name: "💬 Comment on PR"
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const icon = success ? '✅' : '❌';
            const status = success ? 'All Tests Passed' : 'Tests Failed';
            
            const comment = `
            ## ${icon} CI Fail-Fast Pipeline - ${status}
            
            **Strategy:** Sequential execution with immediate failure propagation
            **Benefit:** Fastest feedback on first failure
            
            This pipeline runs tests in strict sequence:
            1. Mission Critical → 2. Code Quality → 3. Unit → 4. Integration → 5. E2E
            
            ${success ? 
              '✅ All phases completed successfully!' : 
              '❌ Pipeline stopped at first failure for rapid feedback.'}
            
            [View Full Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: "📦 Upload test artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-failfast
          path: |
            test-results/
            reports/
            security-report.json
          retention-days: 7