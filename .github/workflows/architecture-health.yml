name: Architecture Health Monitor
description: Monitor architecture compliance with ACT compatibility

# Disabled - only smoke tests and staging workflows are active
# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]
#   schedule:
#     # Run daily at 9 AM UTC
#     - cron: '0 9 * * *'
#   workflow_dispatch:
#     inputs:
#       fail_on_violations:
#         description: 'Fail workflow on violations'
#         required: false
#         default: 'false'
#         type: boolean
#       generate_reports:
#         description: 'Generate HTML and JSON reports'
#         required: false
#         default: 'true'
#         type: boolean
#       act_local_run:
#         description: 'Running with ACT (local testing)'
#         required: false
#         type: boolean
#         default: false

env:
  REPORTS_DIR: reports/architecture-health
  DASHBOARD_URL: https://netra-ai.github.io/architecture-health

jobs:
  architecture-health-scan:
    name: Architecture Health Scan
    runs-on: warp-custom-default
    permissions:
      contents: read
      issues: write
      pull-requests: write
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for trend analysis

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ast

    - name: Create reports directory
      run: |
        mkdir -p ${{ env.REPORTS_DIR }}
        mkdir -p artifacts

    - name: Run Architecture Health Scan
      id: health_scan
      run: |
        echo "üîç Running comprehensive architecture health scan..."
        
        # ACT Detection and Debug Output
        if [[ "${ACT:-false}" == "true" ]] || [[ "${{ github.event.inputs.act_local_run }}" == "true" ]]; then
          echo "üß™ ACT LOCAL RUN DETECTED - Using mock architecture scan"
          echo "Debug: ACT environment variables:"
          env | grep -E "^(ACT|GITHUB_|CI)" | sort || true
        fi
        
        # Determine if we should fail on violations
        FAIL_ON_VIOLATIONS="${{ inputs.fail_on_violations }}"
        if [ "$FAIL_ON_VIOLATIONS" = "true" ]; then
          FAIL_FLAG="--fail-on-violations"
        else
          FAIL_FLAG=""
        fi
        
        if [[ "${ACT:-false}" == "true" ]] || [[ "${{ github.event.inputs.act_local_run }}" == "true" ]]; then
          # Create mock health report for ACT
          echo "üß™ ACT LOCAL RUN - Generating mock architecture health data"
          
          cat > "${{ env.REPORTS_DIR }}/health-report.json" << 'EOF'
        {
          "timestamp": "2024-01-15T12:00:00Z",
          "metrics": {
            "compliance_scores": {
              "overall_compliance": 85.5,
              "file_size_compliance": 90.0,
              "function_complexity_compliance": 82.0,
              "type_safety_compliance": 88.0
            },
            "violation_counts": {
              "total_violations": 15,
              "file_size_violations": 3,
              "function_complexity_violations": 8,
              "duplicate_types": 2,
              "test_stubs": 2
            }
          },
          "files_analyzed": 125,
          "act_mock": true
        }
        EOF
          
          cat > "${{ env.REPORTS_DIR }}/dashboard.html" << 'EOF'
        <!DOCTYPE html>
        <html><head><title>ACT Mock Architecture Health</title></head>
        <body>
          <h1>üß™ ACT Mock Architecture Health Dashboard</h1>
          <p>Overall Compliance: 85.5%</p>
          <p>Total Violations: 15</p>
          <p>This is a mock dashboard for ACT local testing.</p>
        </body></html>
        EOF
          
          echo "ACT Mock Architecture Health Scan Results" > scan-output.txt
          echo "=========================================" >> scan-output.txt
          echo "Overall Compliance: 85.5%" >> scan-output.txt
          echo "Total Violations: 15" >> scan-output.txt
          echo "Files Analyzed: 125" >> scan-output.txt
          echo "" >> scan-output.txt
          echo "Violation Breakdown:" >> scan-output.txt
          echo "- File Size Violations: 3" >> scan-output.txt
          echo "- Function Complexity: 8" >> scan-output.txt
          echo "- Duplicate Types: 2" >> scan-output.txt
          echo "- Test Stubs: 2" >> scan-output.txt
          
          COMPLIANCE_SCORE="85.5"
          TOTAL_VIOLATIONS="15"
        else
          # Run the real health scan
          python scripts/architecture_health.py \
            --path . \
            --output-html "${{ env.REPORTS_DIR }}/dashboard.html" \
            --output-json "${{ env.REPORTS_DIR }}/health-report.json" \
            $FAIL_FLAG | tee scan-output.txt
          
          # Extract key metrics for GitHub summary
          if [ -f "${{ env.REPORTS_DIR }}/health-report.json" ]; then
            COMPLIANCE_SCORE=$(python -c "import json; data=json.load(open('${{ env.REPORTS_DIR }}/health-report.json')); print(data['metrics']['compliance_scores']['overall_compliance'])")
            TOTAL_VIOLATIONS=$(python -c "import json; data=json.load(open('${{ env.REPORTS_DIR }}/health-report.json')); print(data['metrics']['violation_counts']['total_violations'])")
          else
            COMPLIANCE_SCORE="0"
            TOTAL_VIOLATIONS="999"
          fi
        fi
        
        echo "compliance_score=$COMPLIANCE_SCORE" >> $GITHUB_OUTPUT
        echo "total_violations=$TOTAL_VIOLATIONS" >> $GITHUB_OUTPUT
        
        # Set status based on compliance score (with ACT-safe bc alternative)
        if command -v bc >/dev/null 2>&1; then
          if (( $(echo "$COMPLIANCE_SCORE >= 90" | bc -l) )); then
            echo "status=excellent" >> $GITHUB_OUTPUT
            echo "status_emoji=üü¢" >> $GITHUB_OUTPUT
          elif (( $(echo "$COMPLIANCE_SCORE >= 70" | bc -l) )); then
            echo "status=good" >> $GITHUB_OUTPUT
            echo "status_emoji=üü°" >> $GITHUB_OUTPUT
          else
            echo "status=needs_improvement" >> $GITHUB_OUTPUT
            echo "status_emoji=üî¥" >> $GITHUB_OUTPUT
          fi
        else
          # Fallback for ACT environments without bc
          if (( $(echo "$COMPLIANCE_SCORE >= 90" | awk '{print ($1 >= 90)}') )); then
            echo "status=excellent" >> $GITHUB_OUTPUT
            echo "status_emoji=üü¢" >> $GITHUB_OUTPUT
          elif (( $(echo "$COMPLIANCE_SCORE >= 70" | awk '{print ($1 >= 70)}') )); then
            echo "status=good" >> $GITHUB_OUTPUT
            echo "status_emoji=üü°" >> $GITHUB_OUTPUT
          else
            echo "status=needs_improvement" >> $GITHUB_OUTPUT
            echo "status_emoji=üî¥" >> $GITHUB_OUTPUT
          fi
        fi
      continue-on-error: true

    - name: Generate Trend Analysis
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üìà Generating trend analysis..."
        
        # Create trend data directory if it doesn't exist
        mkdir -p .github/architecture-trends
        
        # Store current metrics with timestamp
        TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        if [ -f "${{ env.REPORTS_DIR }}/health-report.json" ]; then
          # Extract key metrics and store in trend file
          # Skip trend recording in ACT mode or if missing dependencies
          echo "Trend recording skipped - would extract metrics from health-report.json"
        fi

    - name: Upload Architecture Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: architecture-health-reports
        path: |
          ${{ env.REPORTS_DIR }}/
          scan-output.txt
        retention-days: 30

    - name: Comment on PR with Health Summary
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let compliance_score = '${{ steps.health_scan.outputs.compliance_score }}';
          let total_violations = '${{ steps.health_scan.outputs.total_violations }}';
          let status_emoji = '${{ steps.health_scan.outputs.status_emoji }}';
          
          // Read scan output for detailed summary
          let scanOutput = '';
          try {
            scanOutput = fs.readFileSync('scan-output.txt', 'utf8');
          } catch (e) {
            scanOutput = 'Scan output not available';
          }
          
          const dashboardUrl = `${{ env.DASHBOARD_URL }}/pr-${{ github.event.number }}/dashboard.html`;
          
          const comment = `## ${status_emoji} Architecture Health Report
          
          **Overall Compliance Score:** ${compliance_score}%
          **Total Violations:** ${total_violations}
          
          ### Summary
          This PR has been scanned for architecture compliance violations:
          
          ${status_emoji === 'üü¢' ? '‚úÖ **Excellent!** Your code meets all architecture standards.' : 
            status_emoji === 'üü°' ? '‚ö†Ô∏è **Good**, but some improvements needed.' : 
            '‚ùå **Needs attention** - significant violations found.'}
          
          ### Quick Actions
          - üìä [View Full Dashboard](${dashboardUrl})
          - üìÑ [Download JSON Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ### Key Metrics
          - File size compliance (‚â§300 lines)
          - Function complexity (‚â§8 lines) 
          - Type safety and duplicates
          - Test stub detection
          
          <details>
          <summary>üìã Detailed Scan Output</summary>
          
          \`\`\`
          ${scanOutput.substring(0, 4000)}${scanOutput.length > 4000 ? '\n... (truncated)' : ''}
          \`\`\`
          </details>
          
          ---
          ü§ñ *Generated by [Architecture Health Monitor](https://github.com/${{ github.repository }}/actions/workflows/architecture-health.yml)*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Create GitHub Issue for Critical Violations
      if: steps.health_scan.outputs.status == 'needs_improvement' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          const compliance_score = '${{ steps.health_scan.outputs.compliance_score }}';
          const total_violations = '${{ steps.health_scan.outputs.total_violations }}';
          
          const issueTitle = `üö® Architecture Health Alert: ${total_violations} violations found (${compliance_score}% compliance)`;
          
          const issueBody = `## üö® Architecture Health Alert
          
          **Critical violations detected in main branch!**
          
          - **Compliance Score:** ${compliance_score}%
          - **Total Violations:** ${total_violations}
          - **Commit:** ${{ github.sha }}
          - **Workflow Run:** ${{ github.run_id }}
          
          ### Immediate Actions Required
          
          1. **Review Dashboard:** [Architecture Health Dashboard](${{ env.DASHBOARD_URL }}/dashboard.html)
          2. **Address Critical Issues:** Focus on file size and function complexity violations
          3. **Update Documentation:** Ensure CLAUDE.md architecture rules are followed
          
          ### Next Steps
          
          - [ ] Split oversized files (>300 lines) into focused modules
          - [ ] Refactor complex functions (>8 lines) into smaller units  
          - [ ] Remove test stubs from production code
          - [ ] Consolidate duplicate type definitions
          - [ ] Add missing type annotations
          
          ### Resources
          
          - [CLAUDE.md Architecture Rules](./CLAUDE.md)
          - [Alignment Action Plan](./ALIGNMENT_ACTION_PLAN.md)
          - [Root Cause Analysis](./ROOT_CAUSE_ANALYSIS.md)
          
          **Priority:** High
          **Target:** Achieve >90% compliance within 2 sprints
          
          ---
          ü§ñ *Auto-generated by Architecture Health Monitor*
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['architecture-health', 'critical']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Architecture Health Alert')
          );
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `## üìä Updated Health Report\n\n${issueBody}`
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['architecture-health', 'critical', 'technical-debt']
            });
          }

    - name: Setup Pages for Dashboard
      if: github.ref == 'refs/heads/main' && inputs.generate_reports != 'false' && !env.ACT
      uses: actions/configure-pages@v4

    - name: Upload Dashboard to Pages
      if: github.ref == 'refs/heads/main' && inputs.generate_reports != 'false' && !env.ACT
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ env.REPORTS_DIR }}

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && inputs.generate_reports != 'false' && !env.ACT
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: ACT Local Dashboard Info
      if: env.ACT == 'true' || github.event.inputs.act_local_run == 'true'
      run: |
        echo "üß™ ACT LOCAL RUN - Dashboard deployment skipped"
        echo "üìÑ Mock dashboard created at: ${{ env.REPORTS_DIR }}/dashboard.html"
        echo "üìä Mock health report at: ${{ env.REPORTS_DIR }}/health-report.json"
        echo "üìã View scan output in: scan-output.txt"
        
        if [ -f "${{ env.REPORTS_DIR }}/dashboard.html" ]; then
          echo "‚úÖ Mock dashboard file exists"
        else
          echo "‚ùå Mock dashboard file missing"
        fi

    - name: Update Job Summary
      if: always()
      run: |
        echo "## üèóÔ∏è Architecture Health Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Overall Compliance | ${{ steps.health_scan.outputs.compliance_score }}% ${{ steps.health_scan.outputs.status_emoji }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Total Violations | ${{ steps.health_scan.outputs.total_violations }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ${{ steps.health_scan.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dashboard | [View Dashboard](${{ env.DASHBOARD_URL }}/dashboard.html) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.health_scan.outputs.status }}" = "needs_improvement" ]; then
          echo "### ‚ö†Ô∏è Action Required" >> $GITHUB_STEP_SUMMARY
          echo "Architecture violations detected. Please review the dashboard and address critical issues." >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.health_scan.outputs.status }}" = "good" ]; then
          echo "### ‚úÖ Good Progress" >> $GITHUB_STEP_SUMMARY
          echo "Architecture health is good but can be improved further." >> $GITHUB_STEP_SUMMARY
        else
          echo "### üéâ Excellent!" >> $GITHUB_STEP_SUMMARY
          echo "All architecture standards are being met. Keep up the great work!" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify Team on Slack
      if: (failure() || steps.health_scan.outputs.status == 'needs_improvement') && !env.ACT
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ steps.health_scan.outputs.status_emoji }} Architecture Health Alert"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}"
                  },
                  {
                    "type": "mrkdwn", 
                    "text": "*Branch:* ${{ github.ref_name }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Compliance Score:* ${{ steps.health_scan.outputs.compliance_score }}%"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Violations:* ${{ steps.health_scan.outputs.total_violations }}"
                  }
                ]
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Dashboard"
                    },
                    "url": "${{ env.DASHBOARD_URL }}/dashboard.html"
                  },
                  {
                    "type": "button", 
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: ACT Local Notification Log
      if: (failure() || steps.health_scan.outputs.status == 'needs_improvement') && env.ACT == 'true'
      run: |
        echo "üß™ ACT LOCAL RUN - Slack notification skipped"
        echo "Would send Slack alert for status: ${{ steps.health_scan.outputs.status }}"
        
        # Create local notification log for ACT testing
        cat > act_slack_notification.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "alert_type": "architecture_health",
          "status": "${{ steps.health_scan.outputs.status }}",
          "compliance_score": "${{ steps.health_scan.outputs.compliance_score }}",
          "total_violations": "${{ steps.health_scan.outputs.total_violations }}",
          "repository": "${{ github.repository }}",
          "branch": "${{ github.ref_name }}",
          "slack_configured": $([ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ] && echo "true" || echo "false"),
          "act_mock": true
        }
        EOF
        echo "üìù Created local notification log: act_slack_notification.json"

  benchmark-performance:
    name: Benchmark Scan Performance
    runs-on: warp-custom-default
    needs: architecture-health-scan
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Benchmark Architecture Health Scan
      run: |
        echo "‚è±Ô∏è Benchmarking architecture health scan performance..."
        
        if [[ "${ACT:-false}" == "true" ]] || [[ "${{ github.event.inputs.act_local_run }}" == "true" ]]; then
          echo "üß™ ACT LOCAL RUN - Using mock benchmark results"
          
          echo "Mock Benchmark Results:" | tee -a $GITHUB_STEP_SUMMARY
          echo "Run 1: 12.5 seconds" | tee -a $GITHUB_STEP_SUMMARY
          echo "Run 2: 11.8 seconds" | tee -a $GITHUB_STEP_SUMMARY
          echo "Run 3: 12.2 seconds" | tee -a $GITHUB_STEP_SUMMARY
          echo "Average: 12.2 seconds" | tee -a $GITHUB_STEP_SUMMARY
          
          # Performance recommendations
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "Mock benchmark completed - 3 runs average: 12.2s" >> $GITHUB_STEP_SUMMARY
          echo "Target: <30 seconds for full scan ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "Status: Mock results show good performance" >> $GITHUB_STEP_SUMMARY
        else
          # Run multiple iterations to get average performance
          for i in {1..3}; do
            echo "Run $i:"
            time python scripts/architecture_health.py --cli-only --path .
          done
          
          # Performance recommendations
          echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "Benchmark completed - 3 runs average" >> $GITHUB_STEP_SUMMARY
          echo "Target: <30 seconds for full scan" >> $GITHUB_STEP_SUMMARY
        fi