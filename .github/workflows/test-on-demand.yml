name: On-Demand Testing

# Disabled - only smoke tests and staging workflows are active
# on:
#   issue_comment:
#     types: [created]
#   workflow_dispatch:
#     inputs:
#       test_level:
#         description: 'Test level to run'
#         required: true
#         type: choice
#         options:
#           - smoke
#           - unit
#           - integration
#           - comprehensive
#           - critical
#           - performance
#           - security
#         default: integration
#       target_branch:
#         description: 'Branch to test'
#         required: false
#         default: ''

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write

jobs:
  parse-command:
    name: Parse Test Command
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@test')) ||
      github.event_name == 'workflow_dispatch'
    runs-on: warp-custom-default
    outputs:
      should_run: ${{ steps.parse.outputs.should_run }}
      test_level: ${{ steps.parse.outputs.test_level }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      branch: ${{ steps.parse.outputs.branch }}
      
    steps:
      - name: Check Permissions
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permissions } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });
            
            if (!['admin', 'write'].includes(permissions.permission)) {
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '-1'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `@${context.actor} You need write permissions to trigger tests.`
              });
              
              core.setFailed('Insufficient permissions');
            }
            
            // Add thumbs up to acknowledge
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });
            
      - name: Parse Comment Command
        if: github.event_name == 'issue_comment'
        id: parse-comment
        run: |
          COMMENT="${{ github.event.comment.body }}"
          
          # Extract test level
          if [[ "$COMMENT" =~ @test[[:space:]]+([a-z]+) ]]; then
            TEST_LEVEL="${BASH_REMATCH[1]}"
          else
            TEST_LEVEL="integration"  # Default
          fi
          
          # Validate test level
          if [[ "$TEST_LEVEL" =~ ^(smoke|unit|integration|comprehensive|critical|performance|security)$ ]]; then
            echo "test_level=$TEST_LEVEL" >> $GITHUB_OUTPUT
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Parse Manual Dispatch
        if: github.event_name == 'workflow_dispatch'
        id: parse-dispatch
        run: |
          echo "test_level=${{ inputs.test_level }}" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "branch=${{ inputs.target_branch || github.ref }}" >> $GITHUB_OUTPUT
          
      - name: Get PR Branch
        if: github.event_name == 'issue_comment' && steps.parse-comment.outputs.should_run == 'true'
        id: get-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            
            core.setOutput('branch', pr.head.ref);
            
      - name: Consolidate Outputs
        id: parse
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "should_run=${{ steps.parse-comment.outputs.should_run }}" >> $GITHUB_OUTPUT
            echo "test_level=${{ steps.parse-comment.outputs.test_level }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ steps.parse-comment.outputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "branch=${{ steps.get-pr.outputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "should_run=${{ steps.parse-dispatch.outputs.should_run }}" >> $GITHUB_OUTPUT
            echo "test_level=${{ steps.parse-dispatch.outputs.test_level }}" >> $GITHUB_OUTPUT
            echo "branch=${{ steps.parse-dispatch.outputs.branch }}" >> $GITHUB_OUTPUT
          fi
          
  notify-start:
    name: Notify Test Start
    needs: parse-command
    if: needs.parse-command.outputs.should_run == 'true'
    runs-on: warp-custom-default
    
    steps:
      - name: Comment PR
        if: needs.parse-command.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr_number }},
              body: `## üöÄ Running ${{ needs.parse-command.outputs.test_level }} tests
              
              **Triggered by:** @${{ github.actor }}
              **Branch:** \`${{ needs.parse-command.outputs.branch }}\`
              **Started:** ${new Date().toISOString()}
              
              View progress: [Run #${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });
            
  run-tests:
    name: Run ${{ needs.parse-command.outputs.test_level }} Tests
    needs: [parse-command, notify-start]
    runs-on: ${{ matrix.runner }}
    timeout-minutes: ${{ matrix.timeout }}
    
    strategy:
      matrix:
        include:
          - test_level: smoke
            runner: warp-custom-default
            timeout: 5
          - test_level: unit
            runner: warp-custom-default
            timeout: 10
          - test_level: integration
            runner: warp-custom-default
            timeout: 15
          - test_level: comprehensive
            runner: warp-custom-default
            timeout: 30
          - test_level: critical
            runner: warp-custom-default
            timeout: 10
          - test_level: performance
            runner: warp-custom-default
            timeout: 45
          - test_level: security
            runner: warp-custom-default
            timeout: 20
            
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.parse-command.outputs.branch }}
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Tests
        id: test
        run: |
          # Special handling for performance and security tests
          if [[ "${{ needs.parse-command.outputs.test_level }}" == "performance" ]]; then
            python scripts/ci/run_performance_tests.py \
              --output performance-results.json
          elif [[ "${{ needs.parse-command.outputs.test_level }}" == "security" ]]; then
            python scripts/ci/run_security_tests.py \
              --output security-results.json
          else
            python test_runner.py \
              --level ${{ needs.parse-command.outputs.test_level }} \
              --json-output test-results.json \
              --html-output test-report.html
          fi
        continue-on-error: true
        
      - name: Generate Report
        if: always()
        run: |
          if [[ "${{ needs.parse-command.outputs.test_level }}" == "performance" ]]; then
            python scripts/ci/generate_performance_report.py \
              --input performance-results.json \
              --output report.md
          elif [[ "${{ needs.parse-command.outputs.test_level }}" == "security" ]]; then
            python scripts/ci/generate_security_report.py \
              --input security-results.json \
              --output report.md
          else
            python scripts/ci/generate_report.py \
              --input test-results.json \
              --format markdown \
              --output report.md
          fi
          
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.parse-command.outputs.test_level }}-${{ github.run_id }}
          path: |
            test-results.json
            performance-results.json
            security-results.json
            test-report.html
            report.md
          retention-days: 30
          
      - name: Comment Results
        if: always() && needs.parse-command.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('report.md', 'utf8');
            
            const emoji = '${{ steps.test.outcome }}' === 'success' ? '‚úÖ' : '‚ùå';
            const status = '${{ steps.test.outcome }}' === 'success' ? 'PASSED' : 'FAILED';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.parse-command.outputs.pr_number }},
              body: `## ${emoji} ${{ needs.parse-command.outputs.test_level }} Tests ${status}
              
              ${report}
              
              <details>
              <summary>Test Configuration</summary>
              
              - **Level:** ${{ needs.parse-command.outputs.test_level }}
              - **Runner:** ${{ matrix.runner }}
              - **Duration:** ${new Date() - new Date('${{ needs.notify-start.outputs.start_time }}')}ms
              - **Triggered by:** @${{ github.actor }}
              
              </details>
              
              <sub>Run ID: ${{ github.run_id }} | [View Full Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>`
            });
            
      - name: Set Commit Status
        if: always() && needs.parse-command.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ needs.parse-command.outputs.pr_number }}
            });
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.data.head.sha,
              state: '${{ steps.test.outcome }}' === 'success' ? 'success' : 'failure',
              context: `continuous-integration/netra/${{ needs.parse-command.outputs.test_level }}`,
              description: `${{ needs.parse-command.outputs.test_level }} tests ${{ steps.test.outcome }}`,
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });