name: Pre-Deployment Checks

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
        default: staging
  workflow_call:
    inputs:
      target_environment:
        description: 'Target deployment environment'
        required: true
        type: string
    outputs:
      ready_for_deployment:
        description: 'Whether system is ready for deployment'
        value: ${{ jobs.deployment-gate.outputs.ready }}

permissions:
  contents: read
  statuses: write
  checks: write

jobs:
  # MISSION CRITICAL: WebSocket Agent Events
  mission-critical:
    name: Mission Critical WebSocket Tests
    uses: ./.github/workflows/mission-critical-tests.yml
    
  # Architecture Compliance
  architecture-check:
    name: Architecture Compliance
    runs-on: warp-custom-default
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run architecture compliance check
        run: python scripts/check_architecture_compliance.py
        
  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: warp-custom-default
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run integration tests
        run: python unified_test_runner.py --category integration --no-coverage --fast-fail
        
  # Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: warp-custom-default
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
  # Deployment Gate - All checks must pass
  deployment-gate:
    name: Deployment Readiness Gate
    needs: [mission-critical, architecture-check, integration-tests, security-scan]
    runs-on: warp-custom-default
    if: always()
    outputs:
      ready: ${{ steps.gate.outputs.ready }}
    steps:
      - name: Check deployment readiness
        id: gate
        run: |
          echo "Checking deployment readiness..."
          echo "================================"
          
          # Check if all required jobs passed
          MISSION_CRITICAL="${{ needs.mission-critical.result }}"
          ARCHITECTURE="${{ needs.architecture-check.result }}"
          INTEGRATION="${{ needs.integration-tests.result }}"
          SECURITY="${{ needs.security-scan.result }}"
          
          echo "Mission Critical Tests: $MISSION_CRITICAL"
          echo "Architecture Compliance: $ARCHITECTURE"
          echo "Integration Tests: $INTEGRATION"
          echo "Security Scan: $SECURITY"
          
          if [[ "$MISSION_CRITICAL" == "success" ]] && \
             [[ "$ARCHITECTURE" == "success" ]] && \
             [[ "$INTEGRATION" == "success" ]] && \
             [[ "$SECURITY" == "success" ]]; then
            echo "✅ All pre-deployment checks passed!"
            echo "ready=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "❌ Pre-deployment checks failed!"
            echo "🚨 DEPLOYMENT BLOCKED"
            
            if [[ "$MISSION_CRITICAL" != "success" ]]; then
              echo "  - CRITICAL: WebSocket agent events not working!"
              echo "    Basic chat functionality will be BROKEN in production!"
            fi
            
            if [[ "$ARCHITECTURE" != "success" ]]; then
              echo "  - Architecture compliance check failed"
            fi
            
            if [[ "$INTEGRATION" != "success" ]]; then
              echo "  - Integration tests failed"
            fi
            
            if [[ "$SECURITY" != "success" ]]; then
              echo "  - Security vulnerabilities detected"
            fi
            
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Create deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const ready = '${{ steps.gate.outputs.ready }}' === 'true';
            const environment = '${{ inputs.target_environment }}';
            
            const state = ready ? 'success' : 'failure';
            const description = ready 
              ? `Ready for ${environment} deployment` 
              : `Deployment to ${environment} BLOCKED - checks failed`;
              
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: state,
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: description,
              context: `Deployment Gate / ${environment}`
            });