name: 🔍 Test Stub Detection

# ACT Compatibility: This workflow is designed to work with both GitHub Actions and ACT (act)
# Use: act --secret-file .secrets --env-file .env.act push

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**/*.py'
      - 'frontend/**/*.ts'
      - 'frontend/**/*.tsx'
      - 'frontend/**/*.js'
      - 'frontend/**/*.jsx'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**/*.py'
      - 'frontend/**/*.ts'
      - 'frontend/**/*.tsx'
      - 'frontend/**/*.js'
      - 'frontend/**/*.jsx'
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no code changes'
        required: false
        default: 'false'

env:
  # ACT compatibility: detect ACT environment
  ACT: 'false'  # Will be overridden by ACT when running locally

jobs:
  detect-test-stubs:
    name: 🔍 Detect Test Stubs in Production Code
    runs-on: warp-custom-default  # ACT will override this to ubuntu-latest when running locally
    timeout-minutes: 10
    
    permissions:
      contents: read
      pull-requests: write  # For PR comments
      checks: write         # For check annotations
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Only need current commit for stub detection
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: ${{ env.ACT && '' || 'pip' }}  # ACT compatibility: disable pip cache for ACT
      
      - name: 📦 Install minimal dependencies
        run: |
          python -m pip install --upgrade pip
          # Only install what's needed for stub detection
          pip install pytest  # For any test framework imports
      
      - name: 🔍 Run test stub detection
        id: stub_check
        run: |
          echo "::group::Test Stub Detection"
          python scripts/ci/check_test_stubs.py --github-actions
          echo "::endgroup::"
        continue-on-error: true
      
      - name: 📊 Generate detailed report on failure
        if: failure() && steps.stub_check.outcome == 'failure'
        run: |
          echo "::group::Detailed Test Stub Report"
          python scripts/remove_test_stubs.py --scan --report --format text
          echo "::endgroup::"
      
      - name: 📝 Save report artifact
        if: failure() && steps.stub_check.outcome == 'failure'
        run: |
          mkdir -p reports
          python scripts/remove_test_stubs.py --scan --report --format json --output reports/test_stubs_report.json
      
      - name: 📤 Upload test stub report
        if: ${{ !env.ACT && failure() && steps.stub_check.outcome == 'failure' }}  # ACT compatibility: skip artifact upload for ACT
        uses: actions/upload-artifact@v4
        with:
          name: test-stub-report
          path: reports/test_stubs_report.json
          retention-days: 30
      
      - name: Store stub report locally (ACT)
        if: ${{ env.ACT && failure() && steps.stub_check.outcome == 'failure' }}
        run: |
          # ACT compatibility: store report locally
          mkdir -p act-results
          cp -f reports/test_stubs_report.json act-results/ 2>/dev/null || true
          echo "Test stub report stored locally: act-results/test_stubs_report.json"
      
      - name: 💬 Comment on PR with stub violations
        if: |
          !env.ACT &&
          failure() && 
          steps.stub_check.outcome == 'failure' && 
          github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Check if report file exists
            if (!fs.existsSync('reports/test_stubs_report.json')) {
              console.log('No report file found');
              return;
            }
            
            const report = JSON.parse(fs.readFileSync('reports/test_stubs_report.json', 'utf8'));
            
            if (report.total_violations === 0) {
              return;
            }
            
            const severityEmoji = {
              'HIGH': '🚨',
              'MEDIUM': '⚠️',
              'LOW': '💡'
            };
            
            let comment = `## 🔍 Test Stub Detection Report\n\n`;
            comment += `❌ **Found ${report.total_violations} test stubs in production code**\n\n`;
            
            comment += `### Summary\n`;
            for (const [severity, count] of Object.entries(report.severity_breakdown)) {
              comment += `${severityEmoji[severity] || '📋'} **${severity}**: ${count} violations\n`;
            }
            
            comment += `\n### Files Affected: ${report.files_affected}\n\n`;
            
            comment += `### Top Violations\n`;
            const topViolations = report.violations.slice(0, 10);
            for (const violation of topViolations) {
              const fileName = violation.file_path.split('/').pop();
              comment += `- **${fileName}:${violation.line_number}** - ${violation.description}\n`;
            }
            
            if (report.violations.length > 10) {
              comment += `\n... and ${report.violations.length - 10} more violations\n`;
            }
            
            comment += `\n### 🔧 How to Fix\n`;
            comment += `1. Review [SPEC/no_test_stubs.xml](./SPEC/no_test_stubs.xml) for guidelines\n`;
            comment += `2. Replace test stubs with real implementations\n`;
            comment += `3. Move test helpers to \`app/tests/\` directory\n`;
            comment += `4. Run \`python scripts/remove_test_stubs.py --scan\` locally to check\n\n`;
            
            comment += `📊 [Download detailed report](${context.payload.pull_request.html_url}/checks) from the Actions tab.\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: ❌ Fail build if stubs found
        if: failure() && steps.stub_check.outcome == 'failure'
        run: |
          echo "::error::Test stubs found in production code. See SPEC/no_test_stubs.xml for guidelines."
          echo "::error::Run 'python scripts/remove_test_stubs.py --scan' locally to identify issues."
          exit 1
      
      - name: Local stub detection summary (ACT)
        if: ${{ env.ACT && always() }}
        run: |
          # ACT compatibility: show local summary
          echo "=== Test Stub Detection Results Summary (ACT) ==="
          echo "Status: ${{ steps.stub_check.outcome }}"
          echo "Environment: ACT (Local)"
          if [ -f "reports/test_stubs_report.json" ]; then
            echo "--- Stub Report Available ---"
            echo "Report stored locally: act-results/test_stubs_report.json"
          else
            echo "No test stub violations found"
          fi
          echo "============================================"
      
      - name: ✅ Success notification
        if: success()
        run: |
          echo "::notice::✅ No test stubs found in production code - build can proceed"

  # Separate job for monitoring stub trends
  stub-metrics:
    name: 📈 Track Stub Metrics
    runs-on: warp-custom-default  # ACT will override this to ubuntu-latest when running locally
    if: ${{ !env.ACT && github.event_name == 'push' && github.ref == 'refs/heads/main' }}  # ACT compatibility: skip for ACT
    needs: detect-test-stubs
    continue-on-error: true  # Don't fail build for metrics
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: ${{ env.ACT && '' || 'pip' }}  # ACT compatibility: disable pip cache for ACT
      
      - name: 📊 Generate metrics
        run: |
          mkdir -p reports
          python scripts/remove_test_stubs.py --scan --report --format json --output reports/stub_metrics.json
          
          # Extract key metrics for monitoring
          echo "## Test Stub Metrics" >> $GITHUB_STEP_SUMMARY
          python -c "
          import json
          with open('reports/stub_metrics.json') as f:
              data = json.load(f)
          print(f'- Total violations: {data[\"total_violations\"]}')
          print(f'- Files affected: {data[\"files_affected\"]}')
          for severity, count in data['severity_breakdown'].items():
              print(f'- {severity}: {count}')
          " >> $GITHUB_STEP_SUMMARY