name: CI - Max Parallel

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop, staging]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip specific test types (comma-separated)'
        required: false
        type: string
        default: ''

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  # Real services for testing per CLAUDE.md requirements
  TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/netra_test
  TEST_REDIS_URL: redis://localhost:6379/0
  NETRA_ENV: test
  CI: true

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

concurrency:
  group: ci-max-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # ==========================================
  # PARALLEL EXECUTION - ALL AT ONCE
  # ==========================================

  # Mission Critical WebSocket Tests
  mission-critical-websocket:
    name: Mission Critical - WebSocket Events
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run mission critical tests
        run: |
          python tests/mission_critical/test_websocket_agent_events_suite.py
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mission-critical-results
          path: test-results/mission-critical/

  # Backend Unit Tests
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run backend unit tests
        run: |
          python unified_test_runner.py --category unit --service backend --fast-fail --no-coverage
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-unit-results
          path: test-results/backend-unit/

  # Backend Integration Tests
  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run backend integration tests
        run: |
          python unified_test_runner.py --category integration --service backend --real-services
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-integration-results
          path: test-results/backend-integration/

  # Frontend Unit Tests
  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Run frontend unit tests
        working-directory: ./frontend
        run: npm run test:unit
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-results
          path: frontend/coverage/

  # Frontend Component Tests
  frontend-component-tests:
    name: Frontend Component Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Run component tests
        working-directory: ./frontend
        run: npm run test:components
      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-component-results
          path: frontend/test-results/

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Start backend services
        run: |
          python -m uvicorn netra_backend.app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5
      - name: Start frontend dev server
        working-directory: ./frontend
        run: |
          npm run dev &
          sleep 5
      - name: Run E2E tests
        run: |
          python unified_test_runner.py --category e2e --real-services
      - name: Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results
          path: test-results/e2e/

  # Architecture Compliance
  architecture-compliance:
    name: Architecture Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check architecture compliance
        run: |
          python scripts/check_architecture_compliance.py
      - name: Check import rules
        run: |
          python scripts/check_imports.py
      - name: Upload compliance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: reports/compliance/

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy
      - name: Install Node dependencies
        working-directory: ./frontend
        run: npm ci
      - name: Python linting
        run: |
          ruff check .
          black --check .
      - name: Python type checking
        run: |
          mypy netra_backend --ignore-missing-imports
      - name: Frontend linting
        working-directory: ./frontend
        run: |
          npm run lint
          npm run typecheck

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      - name: Run safety check
        run: safety check
      - name: Run bandit security scan
        run: bandit -r netra_backend -f json -o security-report.json
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.json

  # Database Migration Tests
  database-migration-tests:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test migrations
        run: |
          python unified_test_runner.py --category database --real-services

  # Auth Service Tests
  auth-service-tests:
    name: Auth Service Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: netra_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r auth_service/requirements.txt
      - name: Run auth service tests
        run: |
          cd auth_service && python -m pytest tests/ -v

  # ==========================================
  # AGGREGATION - Collect all results
  # ==========================================
  
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [
      mission-critical-websocket,
      backend-unit-tests,
      backend-integration-tests,
      frontend-unit-tests,
      frontend-component-tests,
      e2e-tests,
      architecture-compliance,
      code-quality,
      security-scan,
      database-migration-tests,
      auth-service-tests
    ]
    if: always()
    steps:
      - name: Check all job results
        run: |
          echo "## CI Max Parallel - Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Mission Critical WebSocket | ${{ needs.mission-critical-websocket.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Unit | ${{ needs.backend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Integration | ${{ needs.backend-integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Unit | ${{ needs.frontend-unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Components | ${{ needs.frontend-component-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Architecture Compliance | ${{ needs.architecture-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Database Migrations | ${{ needs.database-migration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Auth Service | ${{ needs.auth-service-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Fail if any critical job failed
          if [[ "${{ needs.mission-critical-websocket.result }}" == "failure" ]]; then
            echo "❌ Mission Critical tests failed!"
            exit 1
          fi
          
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results/
          
      - name: Generate combined report
        run: |
          echo "Generating combined test report..."
          # Add report generation logic here
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `
            ## 🚀 CI Max Parallel - All Tests Complete
            
            **Execution Mode:** Maximum Parallelization
            **Total Time:** ~${Math.max(...Object.values(context.payload.workflow_run.jobs).map(j => j.completed_at - j.started_at))} seconds
            
            ### Results Summary
            - ✅ Mission Critical: ${{ needs.mission-critical-websocket.result }}
            - 📦 Backend Tests: Unit(${{ needs.backend-unit-tests.result }}), Integration(${{ needs.backend-integration-tests.result }})
            - 🎨 Frontend Tests: Unit(${{ needs.frontend-unit-tests.result }}), Components(${{ needs.frontend-component-tests.result }})
            - 🔗 E2E Tests: ${{ needs.e2e-tests.result }}
            - 🏗️ Architecture: ${{ needs.architecture-compliance.result }}
            - 📊 Code Quality: ${{ needs.code-quality.result }}
            - 🔒 Security: ${{ needs.security-scan.result }}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });