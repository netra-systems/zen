name: Deploy Environment
description: Deploy staging environment with infrastructure and applications
# ACT Compatibility: This workflow supports local testing with ACT
# - GKE operations are mocked when ACT=true
# - Health checks use local endpoints in ACT mode
# - All cloud deployments have local alternatives
# - Smoke tests run against mock services

on:
  workflow_call:
    inputs:
      environment_name:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      branch_name:
        required: false
        type: string
      commit_sha:
        required: false
        type: string
    outputs:
      backend_url:
        description: 'Backend service URL'
        value: ${{ jobs.infrastructure.outputs.backend_url }}
      frontend_url:
        description: 'Frontend service URL'
        value: ${{ jobs.infrastructure.outputs.frontend_url }}
      deployment_status:
        description: 'Overall deployment status'
        value: ${{ jobs.verify.outputs.status }}

jobs:
  infrastructure:
    name: Deploy Infrastructure
    uses: ./.github/workflows/staging-workflows/terraform.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      pr_number: ${{ inputs.pr_number }}
      action: apply
    secrets: inherit
  
  build-backend:
    name: Build Backend
    needs: infrastructure
    uses: ./.github/workflows/staging-workflows/build-backend.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      commit_sha: ${{ inputs.commit_sha || github.event.pull_request.head.sha || github.sha }}
      registry_url: gcr.io
    secrets: inherit
  
  build-frontend:
    name: Build Frontend
    needs: infrastructure
    uses: ./.github/workflows/staging-workflows/build-frontend.yml
    with:
      environment_name: ${{ inputs.environment_name }}
      commit_sha: ${{ inputs.commit_sha || github.event.pull_request.head.sha || github.sha }}
      registry_url: gcr.io
      backend_url: ${{ needs.infrastructure.outputs.backend_url }}
    secrets: inherit
  
  deploy-backend:
    name: Deploy Backend to GKE
    needs: [infrastructure, build-backend]
    runs-on: ${{ env.ACT && 'ubuntu-latest' || 'warp-custom-default' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure GCP credentials
        if: env.ACT != 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_STAGING_SA_KEY }}
      
      - name: Mock GCP credentials for ACT
        if: env.ACT == 'true'
        run: |
          echo "ACT detected - mocking GCP credentials for backend deployment"
          mkdir -p ~/.local/bin
          cat > ~/.local/bin/gcloud << 'EOF'
          #!/bin/bash
          echo "[MOCK] gcloud $*"
          case "$*" in
            *"container clusters get-credentials"*)
              echo "Mock GKE credentials configured"
              ;;
            *)
              echo "Mock GCP response for: $*"
              ;;
          esac
          EOF
          chmod +x ~/.local/bin/gcloud
          cat > ~/.local/bin/kubectl << 'EOF'
          #!/bin/bash
          echo "[MOCK] kubectl $*"
          case "$*" in
            *"set image"*)
              echo "Mock image deployment: $*"
              ;;
            *"rollout status"*)
              echo "Mock rollout successful"
              ;;
            *)
              echo "Mock kubectl response for: $*"
              ;;
          esac
          EOF
          chmod +x ~/.local/bin/kubectl
          echo "~/.local/bin" >> $GITHUB_PATH
      
      - name: Get GKE credentials
        if: env.ACT != 'true'
        run: |
          gcloud container clusters get-credentials \
            ${{ needs.infrastructure.outputs.cluster_name }} \
            --region ${{ env.GCP_REGION || 'us-central1' }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Mock GKE credentials for ACT
        if: env.ACT == 'true'
        run: |
          echo "ACT detected - mocking GKE credentials for backend"
          echo "Mock cluster: ${{ needs.infrastructure.outputs.cluster_name }}"
      
      - name: Deploy backend to Kubernetes
        run: |
          if [ "$ACT" = "true" ]; then
            echo "ACT detected - mocking backend Kubernetes deployment"
            echo "Mock kubectl set image: backend=${{ needs.build-backend.outputs.image_url }}"
            echo "Mock rollout status: backend-deployment successful"
          else
            kubectl set image deployment/backend-deployment \
              backend=${{ needs.build-backend.outputs.image_url }} \
              --namespace=${{ inputs.environment_name }}
            
            kubectl rollout status deployment/backend-deployment \
              --namespace=${{ inputs.environment_name }} \
              --timeout=10m
          fi
  
  deploy-frontend:
    name: Deploy Frontend to GKE
    needs: [infrastructure, build-frontend]
    runs-on: ${{ env.ACT && 'ubuntu-latest' || 'warp-custom-default' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure GCP credentials
        if: env.ACT != 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_STAGING_SA_KEY }}
      
      - name: Mock GCP credentials for ACT
        if: env.ACT == 'true'
        run: |
          echo "ACT detected - mocking GCP credentials for frontend deployment"
          mkdir -p ~/.local/bin
          cat > ~/.local/bin/gcloud << 'EOF'
          #!/bin/bash
          echo "[MOCK] gcloud $*"
          case "$*" in
            *"container clusters get-credentials"*)
              echo "Mock GKE credentials configured"
              ;;
            *)
              echo "Mock GCP response for: $*"
              ;;
          esac
          EOF
          chmod +x ~/.local/bin/gcloud
          cat > ~/.local/bin/kubectl << 'EOF'
          #!/bin/bash
          echo "[MOCK] kubectl $*"
          case "$*" in
            *"set image"*)
              echo "Mock image deployment: $*"
              ;;
            *"rollout status"*)
              echo "Mock rollout successful"
              ;;
            *)
              echo "Mock kubectl response for: $*"
              ;;
          esac
          EOF
          chmod +x ~/.local/bin/kubectl
          echo "~/.local/bin" >> $GITHUB_PATH
      
      - name: Get GKE credentials
        if: env.ACT != 'true'
        run: |
          gcloud container clusters get-credentials \
            ${{ needs.infrastructure.outputs.cluster_name }} \
            --region ${{ env.GCP_REGION || 'us-central1' }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Mock GKE credentials for ACT
        if: env.ACT == 'true'
        run: |
          echo "ACT detected - mocking GKE credentials for frontend"
          echo "Mock cluster: ${{ needs.infrastructure.outputs.cluster_name }}"
      
      - name: Deploy frontend to Kubernetes
        run: |
          if [ "$ACT" = "true" ]; then
            echo "ACT detected - mocking frontend Kubernetes deployment"
            echo "Mock kubectl set image: frontend=${{ needs.build-frontend.outputs.image_url }}"
            echo "Mock rollout status: frontend-deployment successful"
          else
            kubectl set image deployment/frontend-deployment \
              frontend=${{ needs.build-frontend.outputs.image_url }} \
              --namespace=${{ inputs.environment_name }}
            
            kubectl rollout status deployment/frontend-deployment \
              --namespace=${{ inputs.environment_name }} \
              --timeout=10m
          fi
  
  smoke-test:
    name: Run Smoke Tests
    needs: [deploy-backend, deploy-frontend, infrastructure]
    runs-on: ${{ env.ACT && 'ubuntu-latest' || 'warp-custom-default' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
      
      - name: Test backend health
        run: |
          if [ "$ACT" = "true" ]; then
            echo "ACT detected - mocking backend health check"
            echo "Mock backend health: OK"
          else
            curl -f ${{ needs.infrastructure.outputs.backend_url }}/health || exit 1
          fi
      
      - name: Test frontend availability
        run: |
          if [ "$ACT" = "true" ]; then
            echo "ACT detected - mocking frontend availability check"
            echo "Mock frontend availability: OK"
          else
            curl -f ${{ needs.infrastructure.outputs.frontend_url }} || exit 1
          fi
      
      - name: Run API smoke tests
        run: |
          # Add more comprehensive smoke tests here
          echo "Running API smoke tests..."
  
  verify:
    name: Verify Deployment
    needs: [infrastructure, smoke-test]
    runs-on: ${{ env.ACT && 'ubuntu-latest' || 'warp-custom-default' }}
    outputs:
      status: ${{ steps.verify.outputs.status }}
    steps:
      - name: Verify deployment status
        id: verify
        run: |
          if [[ "${{ needs.smoke-test.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Deployment verified successfully"
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "‚ùå Deployment verification failed"
          fi
  
  comment:
    name: Post Deployment Comment
    needs: [infrastructure, smoke-test, verify]
    if: success()
    runs-on: ${{ env.ACT && 'ubuntu-latest' || 'warp-custom-default' }}
    steps:
      - name: Post deployment comment
        if: env.ACT != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üöÄ Staging Environment Deployed
            
            **Frontend:** ${{ needs.infrastructure.outputs.frontend_url }}
            **Backend:** ${{ needs.infrastructure.outputs.backend_url }}
            
            Environment: \`${{ inputs.environment_name }}\`
            
            ### Deployment Status
            ‚úÖ Infrastructure deployed
            ‚úÖ Applications built and deployed
            ‚úÖ Smoke tests passed
            
            ### Next Steps:
            - Test your changes in the staging environment
            - Monitor logs and metrics
            - Run integration tests if needed
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.pr_number }},
              body: comment
            });
      
      - name: Mock deployment comment for ACT
        if: env.ACT == 'true'
        run: |
          echo "ACT detected - mocking deployment comment"
          echo "Would post comment to PR #${{ inputs.pr_number }}:"
          echo "Frontend: ${{ needs.infrastructure.outputs.frontend_url || 'http://localhost:3000' }}"
          echo "Backend: ${{ needs.infrastructure.outputs.backend_url || 'http://localhost:8000' }}"