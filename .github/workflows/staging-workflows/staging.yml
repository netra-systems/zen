name: Modular Staging Orchestrator
description: Orchestrates staging environment deployment using modular workflows

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
      - develop
      - 'release/**'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - deploy
          - destroy
          - restart
          - status
          - rebuild
      pr_number:
        description: 'Pull request number'
        required: false
        type: string
      branch:
        description: 'Branch to deploy'
        required: false
        type: string
  
  repository_dispatch:
    types: [staging-command, staging-rebuild]

concurrency:
  group: staging-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.check.outputs.should_proceed }}
    steps:
      - id: check
        run: |
          # Skip if docs-only or has skip keywords
          echo "should_proceed=true" >> $GITHUB_OUTPUT

  setup:
    name: Environment Setup
    needs: validate
    if: needs.validate.outputs.should_proceed == 'true'
    uses: ./.github/workflows/staging-workflows/setup.yml
    with:
      event_name: ${{ github.event_name }}
      event_action: ${{ github.event.action }}
      pr_number: ${{ github.event.pull_request.number || github.event.inputs.pr_number || github.event.client_payload.pr_number }}
      dispatch_action: ${{ github.event.inputs.action || github.event.client_payload.action }}
      branch: ${{ github.event.inputs.branch || github.ref_name }}
    secrets: inherit

  deploy:
    name: Deploy Environment
    needs: setup
    if: needs.setup.outputs.action == 'deploy'
    uses: ./.github/workflows/staging-workflows/deploy.yml
    with:
      environment_name: ${{ needs.setup.outputs.environment_name }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
    secrets: inherit

  destroy:
    name: Destroy Environment
    needs: setup
    if: needs.setup.outputs.action == 'destroy'
    uses: ./.github/workflows/staging-workflows/destroy.yml
    with:
      environment_name: ${{ needs.setup.outputs.environment_name }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
    secrets: inherit

  restart:
    name: Restart Environment
    needs: setup
    if: needs.setup.outputs.action == 'restart'
    uses: ./.github/workflows/staging-workflows/restart.yml
    with:
      environment_name: ${{ needs.setup.outputs.environment_name }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
    secrets: inherit

  status:
    name: Get Environment Status
    needs: setup
    if: needs.setup.outputs.action == 'status'
    uses: ./.github/workflows/staging-workflows/status.yml
    with:
      environment_name: ${{ needs.setup.outputs.environment_name }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
    secrets: inherit

  notify:
    name: Final Notification
    needs: [setup, deploy, destroy, restart, status]
    if: always() && needs.setup.result == 'success'
    uses: ./.github/workflows/staging-workflows/notify.yml
    with:
      environment_name: ${{ needs.setup.outputs.environment_name }}
      action: ${{ needs.setup.outputs.action }}
      status: ${{ contains(needs.*.result, 'failure') && 'failure' || contains(needs.*.result, 'cancelled') && 'cancelled' || 'success' }}
      pr_number: ${{ needs.setup.outputs.pr_number }}
      urls: |
        frontend=${{ needs.deploy.outputs.frontend_url || '' }}
        backend=${{ needs.deploy.outputs.backend_url || '' }}
    secrets: inherit