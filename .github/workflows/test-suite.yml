name: Test Suite
description: Comprehensive test execution workflow

on:
  pull_request:
    paths:
      - '**.py'
      - '**.ts'
      - '**.tsx'
      - 'requirements.txt'
      - 'package.json'
  
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        type: choice
        default: 'smoke'
        options:
          - smoke
          - unit
          - integration
          - comprehensive
          - comprehensive-backend
          - comprehensive-frontend
          - comprehensive-core
          - comprehensive-agents
          - comprehensive-websocket
          - comprehensive-database
          - comprehensive-api
          - critical
      triggered_by:
        description: 'Who triggered the tests'
        required: false
        default: 'manual'
  
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  TEST_TIMEOUT: 3600

jobs:
  determine-tests:
    name: Determine Test Strategy
    runs-on: self-hosted
    outputs:
      test_level: ${{ steps.strategy.outputs.level }}
      affected_services: ${{ steps.strategy.outputs.services }}
      skip_tests: ${{ steps.strategy.outputs.skip }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze changes
        id: changes
        run: |
          # Get changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1...HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Determine affected areas
          BACKEND_CHANGED=false
          FRONTEND_CHANGED=false
          INFRA_CHANGED=false
          
          while IFS= read -r file; do
            if [[ "$file" == app/* ]] || [[ "$file" == *.py ]]; then
              BACKEND_CHANGED=true
            elif [[ "$file" == frontend/* ]] || [[ "$file" == *.tsx ]] || [[ "$file" == *.ts ]]; then
              FRONTEND_CHANGED=true
            elif [[ "$file" == terraform/* ]] || [[ "$file" == .github/* ]]; then
              INFRA_CHANGED=true
            fi
          done <<< "$CHANGED_FILES"
          
          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "infra_changed=$INFRA_CHANGED" >> $GITHUB_OUTPUT
      
      - name: Determine test strategy
        id: strategy
        run: |
          # Default test level
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            LEVEL="${{ github.event.inputs.test_level }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            LEVEL="comprehensive"
          else
            # For PRs, determine based on changes
            if [[ "${{ steps.changes.outputs.infra_changed }}" == "true" ]]; then
              LEVEL="comprehensive"
            elif [[ "${{ steps.changes.outputs.backend_changed }}" == "true" ]] && [[ "${{ steps.changes.outputs.frontend_changed }}" == "true" ]]; then
              LEVEL="integration"
            else
              LEVEL="unit"
            fi
          fi
          
          # Build service list
          SERVICES=""
          if [[ "${{ steps.changes.outputs.backend_changed }}" == "true" ]]; then
            SERVICES="backend,$SERVICES"
          fi
          if [[ "${{ steps.changes.outputs.frontend_changed }}" == "true" ]]; then
            SERVICES="frontend,$SERVICES"
          fi
          
          # Check for skip conditions
          SKIP=false
          if [[ "${{ contains(github.event.head_commit.message, '[skip tests]') }}" == "true" ]]; then
            SKIP=true
          fi
          
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "services=${SERVICES%,}" >> $GITHUB_OUTPUT
          echo "skip=$SKIP" >> $GITHUB_OUTPUT

  backend-tests:
    name: Backend Tests
    needs: determine-tests
    if: needs.determine-tests.outputs.skip != 'true' && contains(needs.determine-tests.outputs.affected_services, 'backend')
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run tests
        id: test
        run: |
          TEST_LEVEL="${{ needs.determine-tests.outputs.test_level }}"
          
          # Run test suite with appropriate level
          python test_runner.py --level "$TEST_LEVEL" \
            --json-output test-results.json \
            --html-output test-report.html
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            test-results.json
            test-report.html
            htmlcov/
      
      # Lark notification removed - moved to work_in_progress

  frontend-tests:
    name: Frontend Tests
    needs: determine-tests
    if: needs.determine-tests.outputs.skip != 'true' && contains(needs.determine-tests.outputs.affected_services, 'frontend')
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run tests
        working-directory: ./frontend
        run: |
          TEST_LEVEL="${{ needs.determine-tests.outputs.test_level }}"
          
          case "$TEST_LEVEL" in
            smoke)
              npm run test:smoke
              ;;
            unit)
              npm run test:unit
              ;;
            integration)
              npm run test:integration
              ;;
            comprehensive|critical)
              npm run test:all
              ;;
          esac
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  test-summary:
    name: Test Summary
    needs: [determine-tests, backend-tests, frontend-tests]
    if: always() && needs.determine-tests.outputs.skip != 'true'
    runs-on: self-hosted
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate summary
        id: summary
        run: |
          SUMMARY="## Test Results Summary\n\n"
          SUMMARY+="**Test Level:** ${{ needs.determine-tests.outputs.test_level }}\n"
          SUMMARY+="**Triggered By:** ${{ github.event.inputs.triggered_by || github.actor }}\n\n"
          
          # Check backend results
          if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
            SUMMARY+="✅ Backend Tests: Passed\n"
          elif [[ "${{ needs.backend-tests.result }}" == "failure" ]]; then
            SUMMARY+="❌ Backend Tests: Failed\n"
          else
            SUMMARY+="⏭️ Backend Tests: Skipped\n"
          fi
          
          # Check frontend results
          if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
            SUMMARY+="✅ Frontend Tests: Passed\n"
          elif [[ "${{ needs.frontend-tests.result }}" == "failure" ]]; then
            SUMMARY+="❌ Frontend Tests: Failed\n"
          else
            SUMMARY+="⏭️ Frontend Tests: Skipped\n"
          fi
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.summary.outputs.summary }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
      
      # Lark summary removed - moved to work_in_progress