name: Staging Environment Cleanup

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform dry run only'
        required: false
        type: boolean
        default: false
      max_age_days:
        description: 'Maximum age in days'
        required: false
        type: string
        default: '7'

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1

jobs:
  cleanup-staging:
    name: Clean Up Stale Staging Environments
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install requests faker
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_STAGING_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Run cleanup script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python scripts/cleanup_staging_environments.py \
            --project-id "${{ env.GCP_PROJECT_ID }}" \
            --region "${{ env.GCP_REGION }}" \
            --max-age-days "${{ github.event.inputs.max_age_days || '7' }}" \
            --inactive-hours 24 \
            --max-cost-per-pr 50 \
            --output cleanup_report.json \
            ${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}
      
      # UPDATED FOR V4: Use actions/upload-artifact@v4 with unique naming
      - name: Upload cleanup report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cleanup-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: cleanup_report.json
          retention-days: 30
          compression-level: 6  # Optimize for JSON files
          # New v4 feature: Artifacts are immediately available after upload
      
      - name: Parse cleanup results
        id: results
        if: always()
        run: |
          if [ -f cleanup_report.json ]; then
            ENVS_CHECKED=$(jq -r '.environments_checked' cleanup_report.json)
            ENVS_CLEANED=$(jq -r '.environments_cleaned' cleanup_report.json)
            ERRORS=$(jq -r '.errors | length' cleanup_report.json)
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            echo "environments_checked=$ENVS_CHECKED" >> $GITHUB_OUTPUT
            echo "environments_cleaned=$ENVS_CLEANED" >> $GITHUB_OUTPUT
            echo "error_count=$ERRORS" >> $GITHUB_OUTPUT
            echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
            
            # Generate summary for GitHub Actions
            echo "## üßπ Staging Cleanup Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Run Time:** $TIMESTAMP" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìä Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Environments Checked:** $ENVS_CHECKED" >> $GITHUB_STEP_SUMMARY
            echo "- **Environments Cleaned:** $ENVS_CLEANED" >> $GITHUB_STEP_SUMMARY
            echo "- **Errors:** $ERRORS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ERRORS" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ‚ö†Ô∏è Errors:" >> $GITHUB_STEP_SUMMARY
              jq -r '.errors[]' cleanup_report.json | head -5 | while read error; do
                echo "- $error" >> $GITHUB_STEP_SUMMARY
              done
            fi
            
            # Add cleaned environments details
            if [ "$ENVS_CLEANED" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### üóëÔ∏è Cleaned Environments:" >> $GITHUB_STEP_SUMMARY
              jq -r '.cleaned_environments[]' cleanup_report.json 2>/dev/null | head -10 | while read env; do
                echo "- $env" >> $GITHUB_STEP_SUMMARY
              done
            fi
          fi
      
      - name: Send Slack notification
        if: always() && vars.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
        run: |
          ENVS_CHECKED="${{ steps.results.outputs.environments_checked || '0' }}"
          ENVS_CLEANED="${{ steps.results.outputs.environments_cleaned || '0' }}"
          ERRORS="${{ steps.results.outputs.error_count || '0' }}"
          TIMESTAMP="${{ steps.results.outputs.timestamp }}"
          
          if [ "$ERRORS" -gt 0 ]; then
            COLOR="warning"
            STATUS="completed with errors"
            EMOJI="‚ö†Ô∏è"
          else
            COLOR="good"
            STATUS="completed successfully"
            EMOJI="‚úÖ"
          fi
          
          curl -X POST $SLACK_WEBHOOK_URL \
            -H 'Content-Type: application/json' \
            -d '{
              "attachments": [{
                "color": "'$COLOR'",
                "title": "'$EMOJI' Staging Environment Cleanup",
                "text": "Cleanup '$STATUS' at '$TIMESTAMP'",
                "fields": [
                  {"title": "Environments Checked", "value": "'$ENVS_CHECKED'", "short": true},
                  {"title": "Environments Cleaned", "value": "'$ENVS_CLEANED'", "short": true},
                  {"title": "Errors", "value": "'$ERRORS'", "short": true},
                  {"title": "Run", "value": "<'$GITHUB_SERVER_URL'/'$GITHUB_REPOSITORY'/actions/runs/'$GITHUB_RUN_ID'|View Details>", "short": true}
                ]
              }]
            }'

  monitor-costs:
    name: Monitor Staging Costs
    runs-on: ubuntu-latest
    needs: cleanup-staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_STAGING_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Get current month costs
        id: costs
        run: |
          # Get current month's staging costs
          CURRENT_MONTH=$(date +%Y-%m)
          CURRENT_DAY=$(date +%d)
          
          # Query billing data (simplified - would need actual billing export setup)
          echo "Querying staging environment costs for $CURRENT_MONTH..."
          
          # This is a placeholder - actual implementation would query BigQuery billing export
          # In production, you would use:
          # bq query --use_legacy_sql=false --format=json \
          #   "SELECT SUM(cost) as total_cost FROM billing_export.cloud_costs 
          #    WHERE DATE(usage_start_time) >= DATE('$CURRENT_MONTH-01')
          #    AND labels.key = 'environment' AND labels.value LIKE 'staging-pr-%'"
          
          TOTAL_COST="125.50"  # Placeholder value
          DAILY_AVG=$(echo "scale=2; $TOTAL_COST / $CURRENT_DAY" | bc)
          PROJECTED_MONTHLY=$(echo "scale=2; $DAILY_AVG * 30" | bc)
          
          echo "total_cost=$TOTAL_COST" >> $GITHUB_OUTPUT
          echo "daily_average=$DAILY_AVG" >> $GITHUB_OUTPUT
          echo "projected_monthly=$PROJECTED_MONTHLY" >> $GITHUB_OUTPUT
          
          # Save cost report to file
          cat > cost_report.json <<EOF
          {
            "month": "$CURRENT_MONTH",
            "total_cost": $TOTAL_COST,
            "daily_average": $DAILY_AVG,
            "projected_monthly": $PROJECTED_MONTHLY,
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          }
          EOF
          
          # Add to summary
          echo "## üí∞ Staging Environment Costs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Current Month ($CURRENT_MONTH)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total to Date:** \$$TOTAL_COST" >> $GITHUB_STEP_SUMMARY
          echo "- **Daily Average:** \$$DAILY_AVG" >> $GITHUB_STEP_SUMMARY
          echo "- **Projected Monthly:** \$$PROJECTED_MONTHLY" >> $GITHUB_STEP_SUMMARY
      
      # UPDATED FOR V4: Upload cost report with unique naming
      - name: Upload cost report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cost-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: cost_report.json
          retention-days: 90  # Keep cost reports longer
          compression-level: 6
      
      - name: Check cost alerts
        if: steps.costs.outputs.total_cost != ''
        run: |
          TOTAL_COST="${{ steps.costs.outputs.total_cost }}"
          PROJECTED="${{ steps.costs.outputs.projected_monthly }}"
          MONTHLY_BUDGET=500
          
          # Check if we're over budget
          if (( $(echo "$TOTAL_COST > $MONTHLY_BUDGET" | bc -l) )); then
            echo "## ‚õî CRITICAL: Over Budget!" >> $GITHUB_STEP_SUMMARY
            echo "Monthly staging costs (\$$TOTAL_COST) exceed budget (\$$MONTHLY_BUDGET)" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif (( $(echo "$PROJECTED > $MONTHLY_BUDGET" | bc -l) )); then
            echo "## ‚ö†Ô∏è WARNING: Projected to Exceed Budget" >> $GITHUB_STEP_SUMMARY
            echo "Projected monthly costs (\$$PROJECTED) will exceed budget (\$$MONTHLY_BUDGET)" >> $GITHUB_STEP_SUMMARY
          elif (( $(echo "$TOTAL_COST > $MONTHLY_BUDGET * 0.8" | bc -l) )); then
            echo "## ‚ö†Ô∏è ALERT: Approaching Budget Limit" >> $GITHUB_STEP_SUMMARY
            echo "Monthly staging costs (\$$TOTAL_COST) at 80% of budget (\$$MONTHLY_BUDGET)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ Costs Within Budget" >> $GITHUB_STEP_SUMMARY
            echo "Current costs (\$$TOTAL_COST) are within budget (\$$MONTHLY_BUDGET)" >> $GITHUB_STEP_SUMMARY
          fi

  # NEW JOB FOR V4: Analyze historical cleanup patterns
  analyze-cleanup-history:
    name: Analyze Cleanup History
    runs-on: ubuntu-latest
    needs: cleanup-staging
    if: github.event.schedule == '0 2 * * 0'  # Run weekly on Sundays
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # NEW V4 FEATURE: Download artifacts from multiple previous runs
      - name: Download historical cleanup reports
        uses: actions/download-artifact@v4
        with:
          pattern: cleanup-report-*
          path: ./historical-reports
          merge-multiple: true  # V4 feature: merge artifacts into single directory
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Analyze trends
        run: |
          echo "## üìà Weekly Cleanup Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count total reports
          REPORT_COUNT=$(find ./historical-reports -name "*.json" 2>/dev/null | wc -l || echo "0")
          echo "- **Reports Analyzed:** $REPORT_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ "$REPORT_COUNT" -gt 0 ]; then
            # Calculate averages (simplified)
            TOTAL_CLEANED=0
            for report in ./historical-reports/*.json; do
              if [ -f "$report" ]; then
                CLEANED=$(jq -r '.environments_cleaned // 0' "$report")
                TOTAL_CLEANED=$((TOTAL_CLEANED + CLEANED))
              fi
            done
            
            AVG_CLEANED=$((TOTAL_CLEANED / REPORT_COUNT))
            echo "- **Average Environments Cleaned per Run:** $AVG_CLEANED" >> $GITHUB_STEP_SUMMARY
          fi
      
      # UPDATED FOR V4: Upload analysis with unique naming
      - name: Upload analysis report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: weekly-analysis-${{ github.run_id }}
          path: ${{ github.workspace }}/historical-reports
          retention-days: 90
          compression-level: 9  # Maximum compression for archived reports
          if-no-files-found: ignore  # V4 feature: control behavior when no files found

  # NEW JOB FOR V4: Emergency cleanup with artifact tracking
  emergency-cleanup:
    name: Emergency Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.max_age_days == '0'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create emergency cleanup marker
        run: |
          cat > emergency_cleanup.json <<EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")",
            "triggered_by": "${{ github.actor }}",
            "reason": "Emergency cleanup requested - all staging environments"
          }
          EOF
      
      # UPDATED FOR V4: Emergency cleanup artifact with metadata
      - name: Upload emergency cleanup marker
        uses: actions/upload-artifact@v4
        with:
          name: emergency-cleanup-${{ github.run_id }}
          path: emergency_cleanup.json
          retention-days: 180  # Keep emergency cleanup records longer
          compression-level: 0  # No compression for quick access