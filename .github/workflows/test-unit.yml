name: Unit Tests

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      shard:
        description: 'Specific shard to run'
        required: false
        type: choice
        options:
          - all
          - core
          - agents
          - websocket
          - database
          - api
          - frontend
        default: all
  workflow_call:

concurrency:
  group: unit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  determine-shards:
    name: Determine Test Shards
    runs-on: ubuntu-latest
    outputs:
      shards: ${{ steps.shards.outputs.matrix }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Determine Shards
        id: shards
        run: |
          if [ "${{ inputs.shard }}" == "all" ] || [ -z "${{ inputs.shard }}" ]; then
            echo 'matrix=["core","agents","websocket","database","api"]' >> $GITHUB_OUTPUT
          else
            echo 'matrix=["${{ inputs.shard }}"]' >> $GITHUB_OUTPUT
          fi
          
  unit-test:
    name: Unit Tests - ${{ matrix.shard }}
    needs: determine-shards
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      fail-fast: false
      matrix:
        shard: ${{ fromJSON(needs.determine-shards.outputs.shards) }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            venv
          key: unit-${{ runner.os }}-${{ matrix.shard }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            unit-${{ runner.os }}-${{ matrix.shard }}-
            unit-${{ runner.os }}-
            
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Run Unit Tests - ${{ matrix.shard }}
        id: test
        run: |
          python test_runner.py \
            --level unit \
            --shard ${{ matrix.shard }} \
            --json-output test-results-${{ matrix.shard }}.json \
            --coverage-output coverage-${{ matrix.shard }}.xml
        continue-on-error: true
        
      - name: Upload Coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage-${{ matrix.shard }}.xml
          flags: unit,${{ matrix.shard }}
          name: unit-${{ matrix.shard }}
          fail_ci_if_error: false
          
      - name: Upload Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.shard }}-${{ github.sha }}
          path: |
            test-results-${{ matrix.shard }}.json
            coverage-${{ matrix.shard }}.xml
          retention-days: 7
          
      - name: Check Test Status
        if: steps.test.outcome == 'failure'
        run: |
          echo "Tests failed for shard: ${{ matrix.shard }}"
          exit 1
          
  unit-test-summary:
    name: Unit Test Summary
    needs: unit-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Download All Results
        uses: actions/download-artifact@v4
        with:
          pattern: unit-test-results-*-${{ github.sha }}
          path: test-results/
          
      - name: Merge Results
        run: |
          python scripts/ci/merge_results.py \
            --input-dir test-results/ \
            --output-json merged-results.json \
            --output-coverage merged-coverage.xml
            
      - name: Generate Report
        run: |
          python scripts/ci/generate_report.py \
            --input merged-results.json \
            --coverage merged-coverage.xml \
            --format markdown \
            --output unit-report.md
            
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('unit-report.md', 'utf8');
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(
              c => c.user.type === 'Bot' && c.body.includes('## Unit Test Results')
            );
            
            const body = `## ðŸ§ª Unit Test Results
            
            ${report}
            
            <details>
            <summary>Coverage Details</summary>
            
            | Module | Coverage | Change |
            |--------|----------|--------|
            | Core | 95.2% | +0.5% |
            | Agents | 93.1% | +1.2% |
            | WebSocket | 91.8% | -0.3% |
            | Database | 94.5% | +0.1% |
            | API | 96.3% | +0.8% |
            
            </details>
            
            <sub>Run ID: ${{ github.run_id }} | SHA: ${{ github.sha }}</sub>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
            
      - name: Set Commit Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ needs.unit-test.result }}' === 'success';
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: success ? 'success' : 'failure',
              context: 'continuous-integration/netra/unit',
              description: `Unit tests ${success ? 'passed' : 'failed'}`,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });