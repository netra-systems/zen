name: Configuration Loop Check

on:
  push:
    branches: [main, develop, staging]
    paths:
      - 'netra_backend/app/core/configuration/**'
      - 'netra_backend/app/core/isolated_environment.py'
      - '.env*'
      - 'docker-compose*.yml'
  pull_request:
    branches: [main, develop, staging]
    paths:
      - 'netra_backend/app/core/configuration/**'
      - 'netra_backend/app/core/isolated_environment.py'
      - '.env*'
      - 'docker-compose*.yml'
  schedule:
    # Run daily at 2 AM UTC to catch any regression
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  test-configuration:
    name: Test Configuration Management
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r netra_backend/requirements.txt
        pip install -r test_framework/requirements.txt
    
    - name: Run configuration regression tests
      run: |
        cd netra_backend
        python -m pytest tests/core/test_configuration_regression.py -v --tb=short
      env:
        ENVIRONMENT: development
        TEST_MODE: false
        TESTING: false
    
    - name: Run configuration loop test
      run: |
        cd netra_backend
        python -m pytest tests/core/test_configuration_loop.py -v --tb=short
      env:
        ENVIRONMENT: development
        TEST_MODE: false

  monitor-docker-configuration:
    name: Monitor Docker Configuration
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Only run on direct pushes
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: netra
          POSTGRES_PASSWORD: netra123
          POSTGRES_DB: netra
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build backend image
      run: |
        docker build -f netra_backend/Dockerfile -t netra-backend:test .
    
    - name: Start backend container
      run: |
        docker run -d \
          --name netra-test-backend \
          -e ENVIRONMENT=development \
          -e TEST_MODE=false \
          -e POSTGRES_HOST=postgres \
          -e POSTGRES_PORT=5432 \
          -e POSTGRES_DB=netra \
          -e POSTGRES_USER=netra \
          -e POSTGRES_PASSWORD=netra123 \
          -e REDIS_HOST=redis \
          -e REDIS_PORT=6379 \
          -e DATABASE_URL=postgresql://netra:netra123@postgres:5432/netra \
          --network ${{ job.services.postgres.network }} \
          netra-backend:test
    
    - name: Wait for backend startup
      run: |
        echo "Waiting for backend to start..."
        sleep 20
        docker logs netra-test-backend
    
    - name: Monitor for configuration loops
      run: |
        python scripts/monitor_configuration_loops.py \
          --container netra-test-backend \
          --duration 30 \
          --export config-loop-report.json \
          --ci
    
    - name: Upload monitoring report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: config-loop-report
        path: config-loop-report.json
    
    - name: Check backend health
      run: |
        docker exec netra-test-backend curl -f http://localhost:8000/health || exit 1

  staging-configuration-check:
    name: Staging Configuration Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: netra-staging
    
    - name: Get staging logs
      run: |
        gcloud run services logs read netra-backend \
          --region=us-central1 \
          --limit=1000 \
          --format=json > staging-logs.json
    
    - name: Analyze staging logs for config loops
      run: |
        python -c "
        import json
        with open('staging-logs.json') as f:
            logs = json.load(f)
        
        cache_clears = 0
        for entry in logs:
            if 'All configuration caches cleared' in entry.get('message', ''):
                cache_clears += 1
        
        print(f'Configuration cache clears in staging: {cache_clears}')
        
        # Fail if too many clears (threshold for staging)
        if cache_clears > 10:
            print(f'ERROR: Too many configuration clears detected: {cache_clears}')
            exit(1)
        else:
            print('PASS: Staging configuration is stable')
        "
    
    - name: Test staging health endpoint
      run: |
        STAGING_URL=$(gcloud run services describe netra-backend \
          --region=us-central1 \
          --format='value(status.url)')
        
        curl -f "${STAGING_URL}/health" || exit 1