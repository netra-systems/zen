name: Deploy Auth Service

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'auth_service/**'
      - 'Dockerfile.auth'
      - '.github/workflows/deploy-auth-service.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  SERVICE_NAME: netra-auth-service

jobs:
  build-and-deploy:
    runs-on: warp-custom-default
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Setup GCP authentication
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build \
            -f Dockerfile.auth \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:${{ github.sha }} \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:latest \
            -t gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:${{ steps.env.outputs.environment }} \
            .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:${{ github.sha }}
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:latest
          docker push gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:${{ steps.env.outputs.environment }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ env.GCP_PROJECT_ID }}/auth-service:${{ github.sha }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }} \
            --allow-unauthenticated \
            --port 8080 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 1 \
            --max-instances 10 \
            --set-env-vars "ENVIRONMENT=${{ steps.env.outputs.environment }}" \
            --set-env-vars "SERVICE_NAME=auth-service" \
            --set-env-vars "LOG_LEVEL=INFO" \
            --set-secrets "JWT_SECRET=jwt-secret:latest" \
            --set-secrets "DATABASE_URL=auth-database-url:latest" \
            --set-secrets "REDIS_URL=redis-url:latest" \
            --set-env-vars "CORS_ORIGINS=${{ steps.env.outputs.environment == 'production' && 'https://netrasystems.ai,https://app.netrasystems.ai,https://auth.netrasystems.ai' || 'https://app.staging.netrasystems.ai,https://auth.staging.netrasystems.ai,https://api.staging.netrasystems.ai,https://backend.staging.netrasystems.ai,http://localhost:3000,http://localhost:8000,http://localhost:8080' }}"

      - name: Get service URL
        id: service_url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform managed \
            --region ${{ env.GCP_REGION }} \
            --project ${{ env.GCP_PROJECT_ID }} \
            --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          sleep 10
          curl -f "${{ steps.service_url.outputs.url }}/health" || exit 1

      - name: Update frontend environment
        if: success()
        run: |
          echo "Auth service deployed to: ${{ steps.service_url.outputs.url }}"
          echo "Update NEXT_PUBLIC_AUTH_SERVICE_URL in frontend deployment to: ${{ steps.service_url.outputs.url }}"