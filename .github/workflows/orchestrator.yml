name: Workflow Orchestrator
description: Master orchestrator for hierarchical test execution and workflow management

# Disabled - only smoke tests and staging workflows are active
# on:
#   pull_request:
#     types: [opened, synchronize, reopened, ready_for_review]
#   push:
#     branches: [main, master, develop]
#   workflow_dispatch:
#     inputs:
#       test_level:
#         description: 'Highest test level to run'
#         required: false
#         type: choice
#         options:
#           - smoke
#           - unit
#           - integration
#           - comprehensive
#         default: integration
#       skip_hierarchy:
#         description: 'Skip hierarchical execution'
#         required: false
#         type: boolean
#         default: false
#       force_all:
#         description: 'Force all tests regardless of changes'
#         required: false
#         type: boolean
#         default: false

env:
  CONFIG_FILE: .github/workflow-config.yml
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

permissions:
  contents: read
  pull-requests: write
  issues: write
  statuses: write
  checks: write

jobs:
  # ==========================================
  # PHASE 1: Configuration and Analysis
  # ==========================================
  
  load-config:
    name: Load Workflow Configuration
    runs-on: warp-custom-default
    outputs:
      config: ${{ steps.load.outputs.config }}
      hierarchical_enabled: ${{ steps.load.outputs.hierarchical_enabled }}
      test_levels: ${{ steps.load.outputs.test_levels }}
      should_run: ${{ steps.check.outputs.should_run }}
      runner_type: ${{ steps.load.outputs.runner_type }}
      smoke_timeout: ${{ steps.load.outputs.smoke_timeout }}
      unit_timeout: ${{ steps.load.outputs.unit_timeout }}
      integration_timeout: ${{ steps.load.outputs.integration_timeout }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/workflow-config.yml
            .github/workflows
            
      - name: Install yq for YAML parsing
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq
            
      - name: Load configuration
        id: load
        run: |
          if [ -f "${{ env.CONFIG_FILE }}" ]; then
            echo "::notice::Loading configuration from ${{ env.CONFIG_FILE }}"
            
            # Parse configuration
            CONFIG=$(cat ${{ env.CONFIG_FILE }})
            echo "config<<EOF" >> $GITHUB_OUTPUT
            echo "$CONFIG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Extract runner type
            RUNNER=$(yq '.global.runners.custom // "warp-custom-default"' ${{ env.CONFIG_FILE }})
            echo "runner_type=$RUNNER" >> $GITHUB_OUTPUT
            
            # Extract timeout settings
            SMOKE_TIMEOUT=$(yq '.timeouts.smoke // 5' ${{ env.CONFIG_FILE }})
            UNIT_TIMEOUT=$(yq '.timeouts.unit // 10' ${{ env.CONFIG_FILE }})
            INTEGRATION_TIMEOUT=$(yq '.timeouts.integration // 20' ${{ env.CONFIG_FILE }})
            
            echo "smoke_timeout=$SMOKE_TIMEOUT" >> $GITHUB_OUTPUT
            echo "unit_timeout=$UNIT_TIMEOUT" >> $GITHUB_OUTPUT
            echo "integration_timeout=$INTEGRATION_TIMEOUT" >> $GITHUB_OUTPUT
            
            # Extract test levels from test shards
            echo "hierarchical_enabled=true" >> $GITHUB_OUTPUT
            echo 'test_levels=["smoke","unit","integration","comprehensive"]' >> $GITHUB_OUTPUT
            
            echo "::notice::Configuration loaded successfully"
          else
            echo "::warning::Config file not found at ${{ env.CONFIG_FILE }}, using defaults"
            
            # Use defaults if config missing
            echo "runner_type=warp-custom-default" >> $GITHUB_OUTPUT
            echo "smoke_timeout=5" >> $GITHUB_OUTPUT
            echo "unit_timeout=10" >> $GITHUB_OUTPUT
            echo "integration_timeout=20" >> $GITHUB_OUTPUT
            echo "hierarchical_enabled=true" >> $GITHUB_OUTPUT
            echo 'test_levels=["smoke","unit","integration","comprehensive"]' >> $GITHUB_OUTPUT
          fi
          
      - name: Check if should run
        id: check
        run: |
          SHOULD_RUN=true
          
          # Check skip conditions
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"[ci skip]"* ]]; then
            SHOULD_RUN=false
            echo "::notice::Skipping due to commit message"
          fi
          
          # Check if only docs changed
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED_FILES=$(gh pr diff ${{ github.event.pull_request.number }} --name-only)
            if echo "$CHANGED_FILES" | grep -v '\.md$' | grep -v '\.txt$' | grep -v '^docs/' > /dev/null; then
              echo "::notice::Non-documentation files changed, running tests"
            else
              SHOULD_RUN=false
              echo "::notice::Only documentation changed, skipping tests"
            fi
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
          
  # ==========================================
  # PHASE 2: Change Analysis
  # ==========================================
  
  analyze-changes:
    name: Analyze Code Changes
    needs: load-config
    if: needs.load-config.outputs.should_run == 'true'
    runs-on: warp-custom-default
    outputs:
      affected_areas: ${{ steps.analyze.outputs.areas }}
      suggested_level: ${{ steps.analyze.outputs.level }}
      estimated_duration: ${{ steps.analyze.outputs.duration }}
      risk_score: ${{ steps.analyze.outputs.risk }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze changes
        id: analyze
        run: |
          # Initialize variables
          BACKEND_CHANGED=false
          FRONTEND_CHANGED=false
          INFRA_CHANGED=false
          WORKFLOW_CHANGED=false
          CRITICAL_CHANGED=false
          
          # Get changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="HEAD~1"
            HEAD_SHA="HEAD"
          fi
          
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          
          # Analyze file types
          while IFS= read -r file; do
            case "$file" in
              app/*.py|*.py)
                BACKEND_CHANGED=true
                ;;
              frontend/*|*.tsx|*.ts|*.jsx|*.js)
                FRONTEND_CHANGED=true
                ;;
              terraform/*|.github/workflows/*|Dockerfile*)
                INFRA_CHANGED=true
                ;;
              .github/workflows/*.yml)
                WORKFLOW_CHANGED=true
                ;;
              app/main.py|app/core/*|app/db/*)
                CRITICAL_CHANGED=true
                ;;
            esac
          done <<< "$CHANGED_FILES"
          
          # Build affected areas JSON
          AREAS='{"backend":'$BACKEND_CHANGED',"frontend":'$FRONTEND_CHANGED
          AREAS+=',"infrastructure":'$INFRA_CHANGED',"workflows":'$WORKFLOW_CHANGED
          AREAS+=',"critical":'$CRITICAL_CHANGED'}'
          echo "areas=$AREAS" >> $GITHUB_OUTPUT
          
          # Determine suggested test level
          if [[ "$CRITICAL_CHANGED" == "true" ]] || [[ "$INFRA_CHANGED" == "true" ]]; then
            LEVEL="comprehensive"
            DURATION=45
            RISK=9
          elif [[ "$BACKEND_CHANGED" == "true" ]] && [[ "$FRONTEND_CHANGED" == "true" ]]; then
            LEVEL="integration"
            DURATION=20
            RISK=7
          elif [[ "$BACKEND_CHANGED" == "true" ]] || [[ "$FRONTEND_CHANGED" == "true" ]]; then
            LEVEL="unit"
            DURATION=10
            RISK=5
          else
            LEVEL="smoke"
            DURATION=5
            RISK=3
          fi
          
          # Override with manual input if provided
          if [[ -n "${{ github.event.inputs.test_level }}" ]]; then
            LEVEL="${{ github.event.inputs.test_level }}"
          fi
          
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "risk=$RISK" >> $GITHUB_OUTPUT
          
          # Generate summary
          echo "## 📊 Change Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files Changed:** $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "**Risk Score:** $RISK/10" >> $GITHUB_STEP_SUMMARY
          echo "**Suggested Test Level:** $LEVEL" >> $GITHUB_STEP_SUMMARY
          echo "**Estimated Duration:** ${DURATION} minutes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Affected Areas" >> $GITHUB_STEP_SUMMARY
          [[ "$BACKEND_CHANGED" == "true" ]] && echo "- ✅ Backend" >> $GITHUB_STEP_SUMMARY
          [[ "$FRONTEND_CHANGED" == "true" ]] && echo "- ✅ Frontend" >> $GITHUB_STEP_SUMMARY
          [[ "$INFRA_CHANGED" == "true" ]] && echo "- ✅ Infrastructure" >> $GITHUB_STEP_SUMMARY
          [[ "$WORKFLOW_CHANGED" == "true" ]] && echo "- ✅ Workflows" >> $GITHUB_STEP_SUMMARY
          [[ "$CRITICAL_CHANGED" == "true" ]] && echo "- ⚠️ Critical Systems" >> $GITHUB_STEP_SUMMARY
          
  # ==========================================
  # PHASE 3: Hierarchical Test Execution
  # ==========================================
  
  run-smoke-tests:
    name: 🚬 Smoke Tests
    needs: [load-config, analyze-changes]
    if: |
      needs.load-config.outputs.should_run == 'true' &&
      (needs.analyze-changes.outputs.suggested_level == 'smoke' ||
       needs.analyze-changes.outputs.suggested_level == 'unit' ||
       needs.analyze-changes.outputs.suggested_level == 'integration' ||
       needs.analyze-changes.outputs.suggested_level == 'comprehensive')
    uses: ./.github/workflows/test-smoke.yml
    with:
      caller: orchestrator
    secrets: inherit
    
  run-unit-tests:
    name: 🧪 Unit Tests
    needs: [load-config, analyze-changes, run-smoke-tests]
    if: |
      needs.run-smoke-tests.result == 'success' &&
      (needs.analyze-changes.outputs.suggested_level == 'unit' ||
       needs.analyze-changes.outputs.suggested_level == 'integration' ||
       needs.analyze-changes.outputs.suggested_level == 'comprehensive')
    uses: ./.github/workflows/test-unit.yml
    with:
      shard: all
    secrets: inherit
    
  run-integration-tests:
    name: 🔄 Integration Tests
    needs: [load-config, analyze-changes, run-unit-tests]
    if: |
      needs.run-unit-tests.result == 'success' &&
      (needs.analyze-changes.outputs.suggested_level == 'integration' ||
       needs.analyze-changes.outputs.suggested_level == 'comprehensive')
    strategy:
      matrix:
        component: [backend, frontend, api]
    runs-on: warp-custom-default
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run integration tests for ${{ matrix.component }}
        run: |
          echo "Running integration tests for ${{ matrix.component }}"
          # Integration test implementation here
          
  run-comprehensive-tests:
    name: 📦 Comprehensive Tests
    needs: [load-config, analyze-changes, run-integration-tests]
    if: |
      needs.run-integration-tests.result == 'success' &&
      needs.analyze-changes.outputs.suggested_level == 'comprehensive'
    uses: ./.github/workflows/test-comprehensive.yml
    with:
      test_scope: full
      parallel_execution: true
      real_llm: false
    secrets: inherit
    
  # ==========================================
  # PHASE 4: Failure Handling
  # ==========================================
  
  handle-failures:
    name: Handle Test Failures
    needs: [run-smoke-tests, run-unit-tests, run-integration-tests, run-comprehensive-tests]
    if: always() && contains(needs.*.result, 'failure')
    runs-on: warp-custom-default
    
    steps:
      - name: Analyze failure pattern
        id: analyze
        run: |
          # Determine failure point
          if [[ "${{ needs.run-smoke-tests.result }}" == "failure" ]]; then
            FAILED_AT="smoke"
            SEVERITY="critical"
          elif [[ "${{ needs.run-unit-tests.result }}" == "failure" ]]; then
            FAILED_AT="unit"
            SEVERITY="high"
          elif [[ "${{ needs.run-integration-tests.result }}" == "failure" ]]; then
            FAILED_AT="integration"
            SEVERITY="medium"
          else
            FAILED_AT="comprehensive"
            SEVERITY="low"
          fi
          
          echo "failed_at=$FAILED_AT" >> $GITHUB_OUTPUT
          echo "severity=$SEVERITY" >> $GITHUB_OUTPUT
          
      - name: Trigger AI auto-fix
        if: vars.WORKFLOWS_AI_AUTOFIX_ENABLED == 'true'
        uses: ./.github/workflows/ai-autofix.yml
        with:
          test_run_id: ${{ github.run_id }}
          max_attempts: 2
          
      - name: Create failure report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const failed_at = '${{ steps.analyze.outputs.failed_at }}';
            const severity = '${{ steps.analyze.outputs.severity }}';
            
            const comment = `## ❌ Test Execution Failed
            
            **Failed at:** ${failed_at} tests
            **Severity:** ${severity}
            **Run:** [#${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Next Steps
            - Review the failure logs
            - AI auto-fix has been triggered (if enabled)
            - Re-run tests with \`@test ${failed_at}\` comment
            
            ### Failure Impact
            ${severity === 'critical' ? '🔴 **Critical**: Basic functionality broken' :
              severity === 'high' ? '🟠 **High**: Core features affected' :
              severity === 'medium' ? '🟡 **Medium**: Integration issues detected' :
              '🟢 **Low**: Edge cases or performance issues'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
  # ==========================================
  # PHASE 5: Reporting and Metrics
  # ==========================================
  
  generate-report:
    name: Generate Test Report
    needs: [analyze-changes, run-smoke-tests, run-unit-tests, run-integration-tests, run-comprehensive-tests]
    if: always()
    runs-on: warp-custom-default
    
    steps:
      - name: Collect metrics
        id: metrics
        run: |
          # Calculate success rate
          TOTAL_JOBS=4
          SUCCESS_COUNT=0
          
          [[ "${{ needs.run-smoke-tests.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.run-unit-tests.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.run-integration-tests.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.run-comprehensive-tests.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_JOBS))
          
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "total_duration=$((SECONDS / 60))" >> $GITHUB_OUTPUT
          
      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const success_rate = ${{ steps.metrics.outputs.success_rate }};
            const duration = ${{ steps.metrics.outputs.total_duration }};
            
            const status = success_rate === 100 ? 'success' : 
                          success_rate >= 75 ? 'pending' : 'failure';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              context: 'Workflow Orchestrator',
              description: `Tests ${success_rate}% passed in ${duration}m`,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });
            
      - name: Generate summary
        run: |
          echo "## 🎯 Orchestrator Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Success Rate:** ${{ steps.metrics.outputs.success_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "**Total Duration:** ${{ steps.metrics.outputs.total_duration }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "**Test Level:** ${{ needs.analyze-changes.outputs.suggested_level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Risk Score:** ${{ needs.analyze-changes.outputs.risk_score }}/10" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Level | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke | ${{ needs.run-smoke-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit | ${{ needs.run-unit-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.run-integration-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Comprehensive | ${{ needs.run-comprehensive-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY