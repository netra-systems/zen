name: Deploy to Production

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        type: string
        default: 'production'
      requires_approval:
        description: 'Require manual approval'
        required: false
        type: boolean
        default: true
      act_mode:
        description: 'Whether running in ACT mode'
        required: false
        type: string
        default: 'false'
  workflow_dispatch:
    inputs:
      confirm_production:
        description: 'Type "DEPLOY TO PRODUCTION" to confirm'
        required: true
        type: string
      skip_staging_check:
        description: 'Skip staging validation (NOT RECOMMENDED)'
        required: false
        type: boolean
        default: false

env:
  GCP_PROJECT: netra-production
  REGION: us-central1
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  # Service names
  BACKEND_SERVICE: netra-backend
  AUTH_SERVICE: netra-auth
  FRONTEND_SERVICE: netra-frontend

permissions:
  contents: read
  deployments: write
  id-token: write  # For GCP authentication

concurrency:
  group: deploy-production
  cancel-in-progress: false  # Never cancel production deployments

jobs:
  # ==========================================
  # Validation & Approval
  # ==========================================
  
  validate-request:
    name: Validate Production Deployment
    runs-on: warp-custom-default
    timeout-minutes: 5
    outputs:
      approved: ${{ steps.validate.outputs.approved }}
      
    steps:
      - name: Check deployment confirmation
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ "${{ inputs.confirm_production }}" != "DEPLOY TO PRODUCTION" ]]; then
            echo "‚ùå Production deployment not confirmed properly"
            echo "You must type 'DEPLOY TO PRODUCTION' to confirm"
            exit 1
          fi
          echo "‚úÖ Production deployment confirmed"
          
      - name: Check branch
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "‚ùå Production deployments are only allowed from main branch"
            echo "Current branch: ${{ github.ref }}"
            exit 1
          fi
          echo "‚úÖ Deploying from main branch"
          
      - name: Validation complete
        id: validate
        run: |
          echo "approved=true" >> $GITHUB_OUTPUT

  # ==========================================
  # Staging Verification
  # ==========================================
  
  verify-staging:
    name: Verify Staging Deployment
    needs: validate-request
    if: |
      needs.validate-request.outputs.approved == 'true' &&
      inputs.skip_staging_check != true
    runs-on: warp-custom-default
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest
          
      - name: Check staging health
        run: |
          echo "üîç Verifying staging environment..."
          
          # Check backend
          if ! curl -s https://api-staging.netra.app/health | grep -q "healthy"; then
            echo "‚ùå Staging backend is not healthy"
            exit 1
          fi
          echo "‚úÖ Staging backend is healthy"
          
          # Check frontend
          if ! curl -s https://staging.netra.app | grep -q "<!DOCTYPE html>"; then
            echo "‚ùå Staging frontend is not responding"
            exit 1
          fi
          echo "‚úÖ Staging frontend is responding"
          
      - name: Run staging smoke tests
        run: |
          echo "üß™ Running smoke tests against staging..."
          python unified_test_runner.py --category smoke --env staging
          
      - name: Check staging metrics
        run: |
          echo "üìä Checking staging metrics..."
          # Add metric checks here (error rates, latency, etc.)

  # ==========================================
  # Pre-Deployment Tests
  # ==========================================
  
  pre-deployment-tests:
    name: Pre-Deployment Tests
    needs: [validate-request, verify-staging]
    runs-on: warp-custom-default
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      # Run comprehensive tests
      - name: Run Mission Critical Tests
        run: |
          echo "üö® Running mission critical tests..."
          python tests/mission_critical/test_websocket_agent_events_suite.py
          
      - name: Run Integration Tests
        run: |
          echo "üîó Running integration tests..."
          python unified_test_runner.py --category integration --real-services
          
      - name: Run E2E Tests
        run: |
          echo "üåê Running E2E tests..."
          python unified_test_runner.py --category e2e --real-services
          
      - name: Security Audit
        run: |
          echo "üîí Running security audit..."
          pip install safety bandit
          safety check
          bandit -r netra_backend -ll

  # ==========================================
  # Manual Approval Gate
  # ==========================================
  
  approval:
    name: Manual Approval Required
    needs: pre-deployment-tests
    runs-on: warp-custom-default
    environment:
      name: production-approval
    steps:
      - name: Request approval
        run: |
          echo "## üö® Production Deployment Approval Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All pre-deployment checks have passed." >> $GITHUB_STEP_SUMMARY
          echo "Manual approval is required to proceed with production deployment." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checklist:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Staging deployment verified" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All tests passing" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Security audit clean" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Rollback plan ready" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Team notified" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Build Production Images
  # ==========================================
  
  build-production:
    name: Build Production Images
    needs: approval
    runs-on: warp-custom-default
    timeout-minutes: 30
    outputs:
      backend_image: ${{ steps.build-backend.outputs.image }}
      auth_image: ${{ steps.build-auth.outputs.image }}
      frontend_image: ${{ steps.build-frontend.outputs.image }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.PROD_WIF_PROVIDER }}
          service_account: ${{ secrets.PROD_WIF_SERVICE_ACCOUNT }}
          
      - name: Configure Docker for GCR
        if: inputs.act_mode != 'true'
        run: |
          gcloud auth configure-docker gcr.io
          
      # Build Backend
      - name: Build Backend Image
        id: build-backend
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_SERVICE }}:${{ github.sha }}"
          LATEST_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_SERVICE }}:latest"
          
          docker build \
            --tag $IMAGE_TAG \
            --tag $LATEST_TAG \
            --build-arg BUILD_ENV=production \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -f Dockerfile.backend \
            .
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
            docker push $LATEST_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      # Build Auth Service
      - name: Build Auth Service Image
        id: build-auth
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.AUTH_SERVICE }}:${{ github.sha }}"
          LATEST_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.AUTH_SERVICE }}:latest"
          
          docker build \
            --tag $IMAGE_TAG \
            --tag $LATEST_TAG \
            --build-arg BUILD_ENV=production \
            --build-arg COMMIT_SHA=${{ github.sha }} \
            -f auth_service/Dockerfile \
            ./auth_service
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
            docker push $LATEST_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Build Frontend Application
        working-directory: ./frontend
        env:
          NEXT_PUBLIC_API_URL: https://api.netra.app
          NEXT_PUBLIC_WS_URL: wss://api.netra.app
          NEXT_PUBLIC_ENV: production
        run: |
          npm ci
          npm run build
          
      - name: Build Frontend Image
        id: build-frontend
        run: |
          IMAGE_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_SERVICE }}:${{ github.sha }}"
          LATEST_TAG="gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_SERVICE }}:latest"
          
          docker build \
            --tag $IMAGE_TAG \
            --tag $LATEST_TAG \
            --build-arg BUILD_ENV=production \
            -f frontend/Dockerfile \
            ./frontend
            
          if [[ "${{ inputs.act_mode }}" != "true" ]]; then
            docker push $IMAGE_TAG
            docker push $LATEST_TAG
          fi
          
          echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ==========================================
  # Database Backup & Migration
  # ==========================================
  
  database-operations:
    name: Database Backup & Migration
    needs: build-production
    runs-on: warp-custom-default
    timeout-minutes: 20
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.PROD_WIF_PROVIDER }}
          service_account: ${{ secrets.PROD_WIF_SERVICE_ACCOUNT }}
          
      - name: Backup production database
        if: inputs.act_mode != 'true'
        run: |
          echo "üì¶ Creating database backup..."
          BACKUP_NAME="prod-backup-$(date +%Y%m%d-%H%M%S)"
          
          gcloud sql backups create \
            --instance=netra-production-db \
            --description="Pre-deployment backup for ${{ github.sha }}"
            
          echo "‚úÖ Backup created: $BACKUP_NAME"
          echo "BACKUP_NAME=$BACKUP_NAME" >> $GITHUB_ENV
          
      - name: Run database migrations
        if: inputs.act_mode != 'true'
        run: |
          echo "üóÑÔ∏è Running database migrations..."
          # Add actual migration commands here

  # ==========================================
  # Blue-Green Deployment
  # ==========================================
  
  deploy-blue-green:
    name: Blue-Green Deployment
    needs: database-operations
    runs-on: warp-custom-default
    timeout-minutes: 30
    environment:
      name: production
      url: https://netra.app
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to GCP
        if: inputs.act_mode != 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.PROD_WIF_PROVIDER }}
          service_account: ${{ secrets.PROD_WIF_SERVICE_ACCOUNT }}
          
      # Deploy to Blue environment first
      - name: Deploy Backend to Blue
        if: inputs.act_mode != 'true'
        run: |
          echo "üîµ Deploying backend to blue environment..."
          
          gcloud run deploy ${{ env.BACKEND_SERVICE }}-blue \
            --image ${{ needs.build-production.outputs.backend_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --no-traffic \
            --port 8000 \
            --cpu 4 \
            --memory 8Gi \
            --min-instances 2 \
            --max-instances 100 \
            --set-env-vars="NETRA_ENV=production" \
            --set-secrets="DATABASE_URL=prod-database-url:latest" \
            --set-secrets="REDIS_URL=prod-redis-url:latest" \
            --set-secrets="JWT_SECRET=prod-jwt-secret:latest"
            
      - name: Deploy Auth Service to Blue
        if: inputs.act_mode != 'true'
        run: |
          echo "üîµ Deploying auth service to blue environment..."
          
          gcloud run deploy ${{ env.AUTH_SERVICE }}-blue \
            --image ${{ needs.build-production.outputs.auth_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --no-traffic \
            --port 8001 \
            --cpu 2 \
            --memory 4Gi \
            --min-instances 2 \
            --max-instances 50 \
            --set-env-vars="NETRA_ENV=production" \
            --set-secrets="DATABASE_URL=prod-database-url:latest" \
            --set-secrets="JWT_SECRET=prod-jwt-secret:latest"
            
      - name: Deploy Frontend to Blue
        if: inputs.act_mode != 'true'
        run: |
          echo "üîµ Deploying frontend to blue environment..."
          
          gcloud run deploy ${{ env.FRONTEND_SERVICE }}-blue \
            --image ${{ needs.build-production.outputs.frontend_image }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --no-traffic \
            --port 3000 \
            --cpu 2 \
            --memory 4Gi \
            --min-instances 2 \
            --max-instances 100
            
      # Test Blue environment
      - name: Test Blue Environment
        if: inputs.act_mode != 'true'
        run: |
          echo "üß™ Testing blue environment..."
          
          # Get Blue URLs
          BACKEND_BLUE_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }}-blue --region ${{ env.REGION }} --format 'value(status.url)')
          
          # Run smoke tests against blue
          curl -f $BACKEND_BLUE_URL/health || exit 1
          
          echo "‚úÖ Blue environment tests passed"
          
      # Gradual traffic shift
      - name: Shift Traffic to Blue (10%)
        if: inputs.act_mode != 'true'
        run: |
          echo "üîÑ Shifting 10% traffic to blue..."
          
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --to-revisions ${{ env.BACKEND_SERVICE }}-blue=10
            
          echo "‚è∞ Monitoring for 5 minutes..."
          sleep 300
          
      - name: Shift Traffic to Blue (50%)
        if: inputs.act_mode != 'true'
        run: |
          echo "üîÑ Shifting 50% traffic to blue..."
          
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --to-revisions ${{ env.BACKEND_SERVICE }}-blue=50
            
          echo "‚è∞ Monitoring for 5 minutes..."
          sleep 300
          
      - name: Complete Traffic Shift (100%)
        if: inputs.act_mode != 'true'
        run: |
          echo "üîÑ Shifting 100% traffic to blue..."
          
          gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --to-revisions ${{ env.BACKEND_SERVICE }}-blue=100
            
          gcloud run services update-traffic ${{ env.AUTH_SERVICE }} \
            --region ${{ env.REGION }} \
            --to-revisions ${{ env.AUTH_SERVICE }}-blue=100
            
          gcloud run services update-traffic ${{ env.FRONTEND_SERVICE }} \
            --region ${{ env.REGION }} \
            --to-revisions ${{ env.FRONTEND_SERVICE }}-blue=100
            
          echo "‚úÖ Traffic fully shifted to new version"

  # ==========================================
  # Post-Deployment Validation
  # ==========================================
  
  validate-production:
    name: Validate Production Deployment
    needs: deploy-blue-green
    runs-on: warp-custom-default
    timeout-minutes: 15
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pytest
          
      - name: Production Health Checks
        run: |
          echo "üè• Running production health checks..."
          
          # Backend health
          curl -f https://api.netra.app/health || exit 1
          echo "‚úÖ Backend healthy"
          
          # Frontend health
          curl -f https://netra.app || exit 1
          echo "‚úÖ Frontend healthy"
          
      - name: Run Production Smoke Tests
        run: |
          echo "üß™ Running production smoke tests..."
          python unified_test_runner.py --category smoke --env production
          
      - name: Monitor Error Rates
        run: |
          echo "üìä Monitoring error rates..."
          # Add monitoring checks here
          
      - name: Create Deployment Tag
        if: inputs.act_mode != 'true'
        run: |
          git tag -a "prod-${{ github.sha }}" -m "Production deployment ${{ github.sha }}"
          git push origin "prod-${{ github.sha }}"

  # ==========================================
  # Rollback Preparation
  # ==========================================
  
  prepare-rollback:
    name: Prepare Rollback Plan
    needs: validate-production
    runs-on: warp-custom-default
    
    steps:
      - name: Document Rollback Plan
        run: |
          echo "## üîÑ Rollback Plan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Rollback Commands:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Instant traffic rollback" >> $GITHUB_STEP_SUMMARY
          echo "gcloud run services update-traffic ${{ env.BACKEND_SERVICE }} --to-revisions PREVIOUS=100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Database rollback" >> $GITHUB_STEP_SUMMARY
          echo "gcloud sql backups restore ${{ env.BACKUP_NAME }} --instance=netra-production-db" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
      - name: Final Summary
        run: |
          echo "## ‚úÖ Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://netra.app" >> $GITHUB_STEP_SUMMARY
          echo "- **API:** https://api.netra.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor application metrics for 24 hours" >> $GITHUB_STEP_SUMMARY
          echo "2. Check error rates and latency" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify all critical user flows" >> $GITHUB_STEP_SUMMARY
          echo "4. Keep rollback plan ready" >> $GITHUB_STEP_SUMMARY