{
  "timestamp": "20250822_202948",
  "level": "integration",
  "environment": "local",
  "services": {
    "backend": {
      "success": false,
      "duration": 5.149635076522827,
      "output": "============================= test session starts =============================\nplatform win32 -- Python 3.12.4, pytest-8.4.1, pluggy-1.6.0\nrootdir: C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\netra_backend\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, Faker-37.5.3, langsmith-0.4.15, asyncio-1.1.0, cov-6.2.1, mock-3.14.1, xdist-3.8.0, html-4.1.1, json-report-1.5.0, metadata-3.1.1, timeout-2.4.0, typeguard-4.4.4\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=session, asyncio_default_test_loop_scope=function\ncollected 0 items / 1 error\n\n=================================== ERRORS ====================================\n_______ ERROR collecting tests/agents/test_agent_e2e_critical_collab.py _______\nImportError while importing test module 'C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\netra_backend\\tests\\agents\\test_agent_e2e_critical_collab.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\nC:\\Users\\antho\\miniconda3\\Lib\\importlib\\__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\ntests\\agents\\test_agent_e2e_critical_collab.py:19: in <module>\n    from netra_backend.tests.agents.test_agent_e2e_critical_setup import AgentE2ETestBase\ntests\\agents\\test_agent_e2e_critical_setup.py:34: in <module>\n    from netra_backend.app.services.agent_service import AgentService\napp\\services\\agent_service.py:9: in <module>\n    from netra_backend.app.services.agent_service_compat import (\napp\\services\\agent_service_compat.py:12: in <module>\n    from netra_backend.app.services.agent_service_factory import get_agent_service\napp\\services\\agent_service_factory.py:12: in <module>\n    from netra_backend.app.services.agent_service_core import AgentService\napp\\services\\agent_service_core.py:18: in <module>\n    from netra_backend.app.services.message_handlers import MessageHandlerService\napp\\services\\message_handlers.py:24: in <module>\n    from netra_backend.app.services.message_handler_base import MessageHandlerBase\napp\\services\\message_handler_base.py:10: in <module>\n    from netra_backend.app.services.websocket.ws_manager import manager\napp\\services\\websocket\\ws_manager.py:45: in __getattr__\n    mgr, _, _, _ = _lazy_import()\n                   ^^^^^^^^^^^^^^\napp\\services\\websocket\\ws_manager.py:29: in _lazy_import\n    from netra_backend.app.ws_manager import WebSocketManager as _WSM\napp\\ws_manager.py:24: in <module>\n    from netra_backend.app.websocket.unified import (\napp\\websocket\\unified\\__init__.py:13: in <module>\n    from netra_backend.app.websocket.unified.manager import UnifiedWebSocketManager, get_unified_manager\napp\\websocket\\unified\\manager.py:38: in <module>\n    from netra_backend.app.websocket.unified.circuit_breaker import CircuitBreaker\napp\\websocket\\unified\\circuit_breaker.py:11: in <module>\n    from netra_backend.app.services.circuit_breaker import (\nE   ImportError: cannot import name 'CircuitBreaker' from 'netra_backend.app.services.circuit_breaker' (C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\netra_backend\\app\\services\\circuit_breaker\\__init__.py)\n============================== warnings summary ===============================\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198\n  C:\\Users\\antho\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198: UserWarning: Field name \"schema\" in \"DataSample\" shadows an attribute in parent \"BaseModel\"\n    warnings.warn(\n\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198\n  C:\\Users\\antho\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198: UserWarning: Field name \"schema\" in \"DataCatalog\" shadows an attribute in parent \"BaseModel\"\n    warnings.warn(\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nERROR tests/agents/test_agent_e2e_critical_collab.py\n!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!\n======================== 2 warnings, 1 error in 1.40s =========================\n",
      "errors": ""
    },
    "auth": {
      "success": false,
      "duration": 3.8151369094848633,
      "output": "============================= test session starts =============================\nplatform win32 -- Python 3.12.4, pytest-8.4.1, pluggy-1.6.0\nrootdir: C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, Faker-37.5.3, langsmith-0.4.15, asyncio-1.1.0, cov-6.2.1, mock-3.14.1, xdist-3.8.0, html-4.1.1, json-report-1.5.0, metadata-3.1.1, timeout-2.4.0, typeguard-4.4.4\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollected 193 items\n\n============================== warnings summary ===============================\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198\n  C:\\Users\\antho\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198: UserWarning: Field name \"schema\" in \"DataSample\" shadows an attribute in parent \"BaseModel\"\n    warnings.warn(\n\n..\\..\\..\\..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198\n  C:\\Users\\antho\\AppData\\Roaming\\Python\\Python312\\site-packages\\pydantic\\_internal\\_fields.py:198: UserWarning: Field name \"schema\" in \"DataCatalog\" shadows an attribute in parent \"BaseModel\"\n    warnings.warn(\n\ntests\\integration\\test_oauth_comprehensive_failures.py:1245\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\integration\\test_oauth_comprehensive_failures.py:1245: PytestUnknownMarkWarning: Unknown pytest.mark.staging - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.staging\n\ntests\\integration\\test_oauth_comprehensive_failures.py:1288\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\integration\\test_oauth_comprehensive_failures.py:1288: PytestUnknownMarkWarning: Unknown pytest.mark.staging - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.staging\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n============================= 4 warnings in 1.49s =============================\n",
      "errors": "ERROR: Wrong expression passed to '-k': *websocket*: at column 1: unexpected character \"*\"\n\n"
    },
    "frontend": {
      "success": false,
      "duration": 5.962728023529053,
      "output": "  console.warn\n    [2025-08-23T03:29:42.641Z] WARN: Received 401, attempting [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at AuthInterceptor.warn [as authenticatedFetch] (lib/auth-interceptor.ts:186:16)\n      at performFetch (services/apiClientWrapper.ts:145:24)\n      at ApiClientWrapper.retryRequest (services/apiClientWrapper.ts:83:16)\n      at ApiClientWrapper.request (services/apiClientWrapper.ts:188:16)\n\n  console.info\n    [2025-08-23T03:29:42.708Z] INFO: [REDACTED] successfully undefined\n\n      at FrontendLogger.info [as log] (lib/logger.ts:142:19)\n\n  console.info\n    [2025-08-23T03:29:42.712Z] INFO: Retrying request with refreshed token undefined\n\n      at FrontendLogger.info [as log] (lib/logger.ts:142:19)\n\n  console.log\n    Auth config from context: {\n      development_mode: true,\n      google_client_id: 'mock-google-client-id',\n      endpoints: {\n        login: 'http://localhost:8081/auth/login',\n        logout: 'http://localhost:8081/auth/logout',\n        callback: 'http://localhost:8081/auth/callback',\n        token: 'http://localhost:8081/auth/token',\n        user: 'http://localhost:8081/auth/me',\n        dev_login: 'http://localhost:8081/auth/dev/login'\n      },\n      authorized_javascript_origins: [ 'http://localhost:3000' ],\n      authorized_redirect_uris: [ 'http://localhost:3000/auth/callback' ]\n    }\n\n      at Object.log (__tests__/auth/context.auth-operations.test.tsx:118:13)\n\n  console.log\n    Login function type: function\n\n      at Object.log (__tests__/auth/context.auth-operations.test.tsx:119:13)\n\n  console.log\n    Calling login, authConfig at call time: {\n      development_mode: true,\n      google_client_id: 'mock-google-client-id',\n      endpoints: {\n        login: 'http://localhost:8081/auth/login',\n        logout: 'http://localhost:8081/auth/logout',\n        callback: 'http://localhost:8081/auth/callback',\n        token: 'http://localhost:8081/auth/token',\n        user: 'http://localhost:8081/auth/me',\n        dev_login: 'http://localhost:8081/auth/dev/login'\n      },\n      authorized_javascript_origins: [ 'http://localhost:3000' ],\n      authorized_redirect_uris: [ 'http://localhost:3000/auth/callback' ]\n    }\n\n      at log (__tests__/auth/context.auth-operations.test.tsx:108:15)\n\n  console.debug\n    [2025-08-23T03:29:42.821Z] DEBUG: Automated cleanup started undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.log\n    \ud83d\udce6 ChatSidebarHooks module mock created\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:43:11)\n\n  console.log\n    \ud83d\udd27 Configuring authentication mocks with: { isAuthenticated: true, userTier: 'Early' }\n\n      at ChatSidebarTestSetup.log [as beforeEach] (__tests__/components/ChatSidebar/setup.tsx:300:13)\n\n  console.log\n    \ud83d\udd27 configureAuthState called with overrides: { isAuthenticated: true, userTier: 'Early' }\n\n      at ChatSidebarTestSetup.log [as configureAuthState] (__tests__/components/ChatSidebar/setup.tsx:476:13)\n\n  console.log\n    \ud83c\udfaf Final authStateConfig: {\n      isAuthenticated: true,\n      isLoading: false,\n      user: { id: 'test-user-1', email: 'test@example.com', role: 'user' },\n      userTier: 'Early',\n      error: null,\n      refreshAuth: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      logout: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      clearError: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      hasPermission: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isAdminOrHigher: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isDeveloperOrHigher: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at ChatSidebarTestSetup.log [as configureAuthState] (__tests__/components/ChatSidebar/setup.tsx:477:13)\n\n  console.debug\n    [2025-08-23T03:29:42.885Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.log\n    \ud83d\udd27 configureChatSidebarHooks called with: {\n      threadsProvided: true,\n      threadsCount: 3,\n      threadIds: [ 'thread-1', 'thread-2', 'thread-3' ]\n    }\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:378:13)\n\n  console.log\n    \ud83c\udfaf Mock configurations: {\n      threadLoaderConfig: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      },\n      threadFilteringConfig: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:416:13)\n\n  console.log\n    \ud83c\udfaf Applied mock configurations using mockImplementation with debugging\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:453:13)\n\n  console.debug\n    [2025-08-23T03:29:42.911Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.debug\n    [2025-08-23T03:29:42.915Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useChatSidebarState (CONFIGURED) {\n      searchQuery: '',\n      setSearchQuery: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isCreatingThread: false,\n      setIsCreatingThread: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      showAllThreads: false,\n      setShowAllThreads: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      filterType: 'all',\n      setFilterType: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      currentPage: 1,\n      setCurrentPage: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:424:15)\n\n  console.warn\n    [2025-08-23T03:29:42.916Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.warn\n    [2025-08-23T03:29:42.923Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.debug\n    [2025-08-23T03:29:42.931Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.debug\n    [2025-08-23T03:29:42.933Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.warn\n    [2025-08-23T03:29:42.934Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.warn\n    [2025-08-23T03:29:42.937Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.debug\n    [2025-08-23T03:29:42.946Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.debug\n    [2025-08-23T03:29:42.948Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.warn\n    [2025-08-23T03:29:42.949Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.warn\n    [2025-08-23T03:29:42.951Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.debug\n    [2025-08-23T03:29:42.956Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.debug\n    [2025-08-23T03:29:42.958Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.warn\n    [2025-08-23T03:29:42.958Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.warn\n    [2025-08-23T03:29:42.961Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.debug\n    [2025-08-23T03:29:42.966Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.debug\n    [2025-08-23T03:29:42.969Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.warn\n    [2025-08-23T03:29:42.969Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.warn\n    [2025-08-23T03:29:42.971Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketProvider inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at WebSocketService.setStatus [as onStatusChange] (providers/WebSocketProvider.tsx:76:5)\n      at Object.ws.onerror (services/webSocketService.ts:791:28)\n      at Object.onerror (__tests__/integration/critical/websocket-auth-headers.test.tsx:317:23)\n\n  console.error\n    [2025-08-23T03:29:42.977Z] ERROR: WebSocket connection error [WebSocketProvider] (connection_error) {\n      component: 'WebSocketProvider',\n      action: 'connection_error',\n      metadata: {\n        error: 'Authentication error',\n        type: 'auth',\n        recoverable: false,\n        code: 1006\n      }\n    }\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at FrontendLogger.error [as log] (lib/logger.ts:148:19)\n      at FrontendLogger.log [as error] (lib/logger.ts:215:10)\n      at Object.error [as onError] (providers/WebSocketProvider.tsx:131:22)\n      at Object.ws.onerror (services/webSocketService.ts:796:24)\n      at Object.onerror (__tests__/integration/critical/websocket-auth-headers.test.tsx:317:23)\n\n  console.warn\n    [2025-08-23T03:29:42.981Z] WARN: WebSocket authentication error undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at Object.warn [as onError] (providers/WebSocketProvider.tsx:153:26)\n      at Object.ws.onerror (services/webSocketService.ts:796:24)\n      at Object.onerror (__tests__/integration/critical/websocket-auth-headers.test.tsx:317:23)\n\n  console.error\n    An update to WebSocketProvider inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at WebSocketService.setStatus [as onStatusChange] (providers/WebSocketProvider.tsx:76:5)\n      at Object.ws.onclose (services/webSocketService.ts:744:28)\n      at Object.onclose (__tests__/integration/critical/websocket-auth-headers.test.tsx:320:23)\n\n  console.error\n    [2025-08-23T03:29:42.987Z] ERROR: WebSocket authentication failed [WebSocketService] (auth_rejection) {\n      component: 'WebSocketService',\n      action: 'auth_rejection',\n      metadata: {\n        code: 1008,\n        reason: 'Authentication required: Use Authorization header'\n      }\n    }\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at FrontendLogger.error [as log] (lib/logger.ts:148:19)\n      at FrontendLogger.log [as error] (lib/logger.ts:215:10)\n      at Object.error [as onclose] (services/webSocketService.ts:749:18)\n      at Object.onclose (__tests__/integration/critical/websocket-auth-headers.test.tsx:320:23)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    [2025-08-23T03:29:42.990Z] ERROR: WebSocket authentication failed [WebSocketService] (auth_error) {\n      component: 'WebSocketService',\n      action: 'auth_error',\n      metadata: {\n        error: 'Authentication required: Use Authorization header',\n        code: 1008\n      }\n    }\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at FrontendLogger.error [as log] (lib/logger.ts:148:19)\n      at FrontendLogger.log [as error] (lib/logger.ts:215:10)\n      at WebSocketService.error [as handleAuthError] (services/webSocketService.ts:1223:12)\n      at Object.handleAuthError [as onclose] (services/webSocketService.ts:768:18)\n      at Object.onclose (__tests__/integration/critical/websocket-auth-headers.test.tsx:320:23)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    [2025-08-23T03:29:42.992Z] ERROR: WebSocket connection error [WebSocketProvider] (connection_error) {\n      component: 'WebSocketProvider',\n      action: 'connection_error',\n      metadata: {\n        error: 'Security violation: Use proper authentication headers',\n        type: 'auth',\n        recoverable: false,\n        code: 1008\n      }\n    }\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at FrontendLogger.error [as log] (lib/logger.ts:148:19)\n      at FrontendLogger.log [as error] (lib/logger.ts:215:10)\n      at Object.error [as onError] (providers/WebSocketProvider.tsx:131:22)\n      at WebSocketService.handleAuthError (services/webSocketService.ts:1239:25)\n      at Object.handleAuthError [as onclose] (services/webSocketService.ts:768:18)\n      at Object.onclose (__tests__/integration/critical/websocket-auth-headers.test.tsx:320:23)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    [2025-08-23T03:29:42.994Z] ERROR: WebSocket security violation - using deprecated authentication method undefined\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at FrontendLogger.error [as log] (lib/logger.ts:148:19)\n      at FrontendLogger.log [as error] (lib/logger.ts:215:10)\n      at Object.error [as onError] (providers/WebSocketProvider.tsx:146:28)\n      at WebSocketService.handleAuthError (services/webSocketService.ts:1239:25)\n      at Object.handleAuthError [as onclose] (services/webSocketService.ts:768:18)\n      at Object.onclose (__tests__/integration/critical/websocket-auth-headers.test.tsx:320:23)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.debug\n    [2025-08-23T03:29:43.006Z] DEBUG: WebSocket connected, secure authentication completed undefined\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.warn\n    [2025-08-23T03:29:43.007Z] WARN: Invalid JWT [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as parseJWTToken] (services/webSocketService.ts:1008:16)\n      at WebSocketService.parseJWTToken [as setupTokenRefresh] (services/webSocketService.ts:1056:26)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:157:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.warn\n    [2025-08-23T03:29:43.009Z] WARN: Cannot setup [REDACTED] - invalid [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at WebSocketService.warn [as setupTokenRefresh] (services/webSocketService.ts:1058:14)\n      at Object.setupTokenRefresh [as onopen] (services/webSocketService.ts:691:14)\n      at onopen (__tests__/integration/critical/websocket-auth-headers.test.tsx:107:25)\n      at Timeout.task [as _onTimeout] (node_modules/jsdom/lib/jsdom/browser/Window.js:579:19)\n\n  console.debug\n    [2025-08-23T03:29:43.014Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.debug\n    [2025-08-23T03:29:43.020Z] DEBUG: Creating secure WebSocket with authentication and compression support {\n      url: 'ws://localhost:8000/ws',\n      protocols: [ 'jwt-auth', 'jwt.[token]' ],\n      tokenPrefix: 'test-jwt-t...',\n      encodedTokenLength: 24\n    }\n\n      at FrontendLogger.debug [as log] (lib/logger.ts:139:19)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:157:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:157:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadLoader (CONFIGURED) {\n      args: [ false, 'all', 'thread-1', [AsyncFunction (anonymous)] ],\n      returning: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:429:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadFiltering (CONFIGURED) {\n      threadsType: 'object',\n      isArray: true,\n      threadsLength: 3,\n      returning: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:434:15)\n\n  console.log\n    \ud83e\uddea TestChatSidebar rendering with threads: {\n      threadsLength: 3,\n      paginatedThreadsLength: 3,\n      isLoadingThreads: false,\n      loadError: null\n    }\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:791:11)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-1, activeThreadId: thread-1, isActive: true\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-2, activeThreadId: thread-1, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-3, activeThreadId: thread-1, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at checkAuthAndConnect (__tests__/integration/login-websocket-setup.test.tsx:137:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:155:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:157:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:157:7)\n      at handleLogin (__tests__/integration/login-websocket-setup.test.tsx:167:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setAuthState (__tests__/integration/login-websocket-setup.test.tsx:166:9)\n\n  console.error\n    An update to WebSocketSetupTestComponent inside a test was not wrapped in act(...).\n    \n    When testing, code that causes React state updates should be wrapped into act(...):\n    \n    act(() => {\n      /* fire events that update state */\n    });\n    /* assert on the output */\n    \n    This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act\n\n    \u001b[0m \u001b[90m 207 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 208 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 209 |\u001b[39m     originalError\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 210 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 211 |\u001b[39m   \n     \u001b[90m 212 |\u001b[39m   console\u001b[33m.\u001b[39mwarn \u001b[33m=\u001b[39m (\u001b[33m...\u001b[39margs) \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at console.call [as error] (jest.setup.js:209:19)\n      at node_modules/react-dom/cjs/react-dom-client.development.js:16023:19\n      at runWithFiberInDEV (node_modules/react-dom/cjs/react-dom-client.development.js:1522:13)\n      at warnIfUpdatesNotWrappedWithActDEV (node_modules/react-dom/cjs/react-dom-client.development.js:16022:9)\n      at scheduleUpdateOnFiber (node_modules/react-dom/cjs/react-dom-client.development.js:14396:11)\n      at dispatchSetStateInternal (node_modules/react-dom/cjs/react-dom-client.development.js:6969:13)\n      at dispatchSetState (node_modules/react-dom/cjs/react-dom-client.development.js:6927:7)\n      at setConnectionState (__tests__/integration/login-websocket-setup.test.tsx:147:7)\n      at initiateWebSocketConnection (__tests__/integration/login-websocket-setup.test.tsx:167:15)\n\n  console.log\n    \ud83c\udfaf TestChatSidebar handleThreadClick called with: thread-2\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:728:13)\n\n  console.log\n    \ud83c\udfaf setActiveThread called with: thread-2\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:140:13)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useChatSidebarState (CONFIGURED) {\n      searchQuery: '',\n      setSearchQuery: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isCreatingThread: false,\n      setIsCreatingThread: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      showAllThreads: false,\n      setShowAllThreads: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      filterType: 'all',\n      setFilterType: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      currentPage: 1,\n      setCurrentPage: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:424:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadLoader (CONFIGURED) {\n      args: [ false, 'all', 'thread-2', [AsyncFunction (anonymous)] ],\n      returning: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:429:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadFiltering (CONFIGURED) {\n      threadsType: 'object',\n      isArray: true,\n      threadsLength: 3,\n      returning: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:434:15)\n\n  console.log\n    \ud83e\uddea TestChatSidebar rendering with threads: {\n      threadsLength: 3,\n      paginatedThreadsLength: 3,\n      isLoadingThreads: false,\n      loadError: null\n    }\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:791:11)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-1, activeThreadId: thread-2, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-2, activeThreadId: thread-2, isActive: true\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-3, activeThreadId: thread-2, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83d\udd27 Configuring authentication mocks with: { isAuthenticated: true, userTier: 'Early' }\n\n      at ChatSidebarTestSetup.log [as beforeEach] (__tests__/components/ChatSidebar/setup.tsx:300:13)\n\n  console.log\n    \ud83d\udd27 configureAuthState called with overrides: { isAuthenticated: true, userTier: 'Early' }\n\n      at ChatSidebarTestSetup.log [as configureAuthState] (__tests__/components/ChatSidebar/setup.tsx:476:13)\n\n  console.log\n    \ud83c\udfaf Final authStateConfig: {\n      isAuthenticated: true,\n      isLoading: false,\n      user: { id: 'test-user-1', email: 'test@example.com', role: 'user' },\n      userTier: 'Early',\n      error: null,\n      refreshAuth: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      logout: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      clearError: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      hasPermission: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isAdminOrHigher: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isDeveloperOrHigher: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at ChatSidebarTestSetup.log [as configureAuthState] (__tests__/components/ChatSidebar/setup.tsx:477:13)\n\n  console.log\n    \ud83d\udd27 configureChatSidebarHooks called with: {\n      threadsProvided: true,\n      threadsCount: 3,\n      threadIds: [ 'thread-1', 'thread-2', 'thread-3' ]\n    }\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:378:13)\n\n  console.log\n    \ud83c\udfaf Mock configurations: {\n      threadLoaderConfig: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      },\n      threadFilteringConfig: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:416:13)\n\n  console.log\n    \ud83c\udfaf Applied mock configurations using mockImplementation with debugging\n\n      at ChatSidebarTestSetup.log [as configureChatSidebarHooks] (__tests__/components/ChatSidebar/setup.tsx:453:13)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useChatSidebarState (CONFIGURED) {\n      searchQuery: '',\n      setSearchQuery: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isCreatingThread: false,\n      setIsCreatingThread: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      showAllThreads: false,\n      setShowAllThreads: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      filterType: 'all',\n      setFilterType: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      currentPage: 1,\n      setCurrentPage: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:424:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadLoader (CONFIGURED) {\n      args: [ false, 'all', 'thread-2', [AsyncFunction (anonymous)] ],\n      returning: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:429:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadFiltering (CONFIGURED) {\n      threadsType: 'object',\n      isArray: true,\n      threadsLength: 3,\n      returning: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:434:15)\n\n  console.log\n    \ud83e\uddea TestChatSidebar rendering with threads: {\n      threadsLength: 3,\n      paginatedThreadsLength: 3,\n      isLoadingThreads: false,\n      loadError: null\n    }\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:791:11)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-1, activeThreadId: thread-2, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-2, activeThreadId: thread-2, isActive: true\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-3, activeThreadId: thread-2, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf TestChatSidebar handleThreadClick called with: thread-1\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:728:13)\n\n  console.log\n    \ud83c\udfaf setActiveThread called with: thread-1\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:140:13)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useChatSidebarState (CONFIGURED) {\n      searchQuery: '',\n      setSearchQuery: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      isCreatingThread: false,\n      setIsCreatingThread: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      showAllThreads: false,\n      setShowAllThreads: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      filterType: 'all',\n      setFilterType: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      },\n      currentPage: 1,\n      setCurrentPage: [Function: mockConstructor] {\n        _isMockFunction: true,\n        getMockImplementation: [Function (anonymous)],\n        mock: [Getter/Setter],\n        mockClear: [Function (anonymous)],\n        mockReset: [Function (anonymous)],\n        mockRestore: [Function (anonymous)],\n        mockReturnValueOnce: [Function (anonymous)],\n        mockResolvedValueOnce: [Function (anonymous)],\n        mockRejectedValueOnce: [Function (anonymous)],\n        mockReturnValue: [Function (anonymous)],\n        mockResolvedValue: [Function (anonymous)],\n        mockRejectedValue: [Function (anonymous)],\n        mockImplementationOnce: [Function (anonymous)],\n        withImplementation: [Function: bound withImplementation],\n        mockImplementation: [Function (anonymous)],\n        mockReturnThis: [Function (anonymous)],\n        mockName: [Function (anonymous)],\n        getMockName: [Function (anonymous)],\n        Symbol(Symbol.dispose): [Function (anonymous)]\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:424:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadLoader (CONFIGURED) {\n      args: [ false, 'all', 'thread-1', [AsyncFunction (anonymous)] ],\n      returning: {\n        threads: [ [Object], [Object], [Object] ],\n        isLoadingThreads: false,\n        loadError: null,\n        loadThreads: [Function: mockConstructor] {\n          _isMockFunction: true,\n          getMockImplementation: [Function (anonymous)],\n          mock: [Getter/Setter],\n          mockClear: [Function (anonymous)],\n          mockReset: [Function (anonymous)],\n          mockRestore: [Function (anonymous)],\n          mockReturnValueOnce: [Function (anonymous)],\n          mockResolvedValueOnce: [Function (anonymous)],\n          mockRejectedValueOnce: [Function (anonymous)],\n          mockReturnValue: [Function (anonymous)],\n          mockResolvedValue: [Function (anonymous)],\n          mockRejectedValue: [Function (anonymous)],\n          mockImplementationOnce: [Function (anonymous)],\n          withImplementation: [Function: bound withImplementation],\n          mockImplementation: [Function (anonymous)],\n          mockReturnThis: [Function (anonymous)],\n          mockName: [Function (anonymous)],\n          getMockName: [Function (anonymous)],\n          Symbol(Symbol.dispose): [Function (anonymous)]\n        }\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:429:15)\n\n  console.log\n    \ud83d\udd25 HOOK CALLED: useThreadFiltering (CONFIGURED) {\n      threadsType: 'object',\n      isArray: true,\n      threadsLength: 3,\n      returning: {\n        sortedThreads: [ [Object], [Object], [Object] ],\n        paginatedThreads: [ [Object], [Object], [Object] ],\n        totalPages: 1\n      }\n    }\n\n      at Object.log (__tests__/components/ChatSidebar/setup.tsx:434:15)\n\n  console.log\n    \ud83e\uddea TestChatSidebar rendering with threads: {\n      threadsLength: 3,\n      paginatedThreadsLength: 3,\n      isLoadingThreads: false,\n      loadError: null\n    }\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:791:11)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-1, activeThreadId: thread-1, isActive: true\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-2, activeThreadId: thread-1, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.log\n    \ud83c\udfaf Rendering thread thread-3, activeThreadId: thread-1, isActive: false\n\n      at log (__tests__/components/ChatSidebar/setup.tsx:649:23)\n          at Array.map (<anonymous>)\n\n  console.warn\n    [2025-08-23T03:29:43.719Z] WARN: Received 401, attempting [REDACTED] undefined\n\n    \u001b[0m \u001b[90m 217 |\u001b[39m       \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\n     \u001b[90m 218 |\u001b[39m     }\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 219 |\u001b[39m     originalWarn\u001b[33m.\u001b[39mcall(console\u001b[33m,\u001b[39m \u001b[33m...\u001b[39margs)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 220 |\u001b[39m   }\u001b[33m;\u001b[39m\n     \u001b[90m 221 |\u001b[39m })\u001b[33m;\u001b[39m\n     \u001b[90m 222 |\u001b[39m\u001b[0m\n\n      at console.call (jest.setup.js:219:18)\n      at FrontendLogger.warn [as log] (lib/logger.ts:145:19)\n      at FrontendLogger.log [as warn] (lib/logger.ts:211:10)\n      at AuthInterceptor.warn [as authenticatedFetch] (lib/auth-interceptor.ts:186:16)\n      at performFetch (services/apiClientWrapper.ts:145:24)\n      at ApiClientWrapper.retryRequest (services/apiClientWrapper.ts:83:16)\n      at ApiClientWrapper.request (services/apiClientWrapper.ts:188:16)\n      at Object.<anonymous> (__tests__/services/apiClient.test.ts:92:9)\n\n  console.info\n    [2025-08-23T03:29:43.722Z] INFO: [REDACTED] successfully undefined\n\n      at FrontendLogger.info [as log] (lib/logger.ts:142:19)\n\n  console.info\n    [2025-08-23T03:29:43.722Z] INFO: Retrying request with refreshed token undefined\n\n      at FrontendLogger.info [as log] (lib/logger.ts:142:19)\n\n  console.log\n    Calling login, authConfig at call time: {\n      development_mode: true,\n      google_client_id: 'mock-google-client-id',\n      endpoints: {\n        login: 'http://localhost:8081/auth/login',\n        logout: 'http://localhost:8081/auth/logout',\n        callback: 'http://localhost:8081/auth/callback',\n        token: 'http://localhost:8081/auth/token',\n        user: 'http://localhost:8081/auth/me',\n        dev_login: 'http://localhost:8081/auth/dev/login'\n      },\n      authorized_javascript_origins: [ 'http://localhost:3000' ],\n      authorized_redirect_uris: [ 'http://localhost:3000/auth/callback' ]\n    }\n\n      at log (__tests__/auth/context.auth-operations.test.tsx:108:15)\n\n",
      "errors": "PASS Integration Tests __tests__/integration/critical/websocket-auth-headers.test.tsx\n  WebSocket Authentication Headers (SECURITY VERIFICATION)\n    Subprotocol Authentication (SECURE METHOD)\n      \u221a should use Sec-WebSocket-Protocol with Bearer token for WebSocket connection (46 ms)\n      \u221a should NOT send JWT token via query parameters (security verified) (19 ms)\n    WebSocket Subprotocol Authentication (PRIMARY METHOD)\n      \u221a should use Sec-WebSocket-Protocol header for JWT authentication (15 ms)\n      \u221a should handle authentication protocol correctly (10 ms)\n    Secure Connection Endpoint\n      \u221a should connect to the secure WebSocket endpoint (10 ms)\n      \u221a should handle authentication errors from secure endpoint (48 ms)\n    Token Management Integration\n      \u221a should not expose token in connection URL (7 ms)\n      \u221a should properly handle token refresh scenarios (15 ms)\n\nFAIL Integration Tests __tests__/integration/store-persistence.test.tsx\n  Store Persistence Integration Tests\n    State Persistence Across Page Refreshes\n      \u221a persists authentication state across refreshes (62 ms)\n      \u221a persists chat messages across browser sessions (251 ms)\n      \u221a handles partial state restoration gracefully (186 ms)\n    Large State Persistence\n      \u00d7 handles large message history persistence efficiently (23 ms)\n      \u00d7 implements storage quota management (3 ms)\n    Cross-Tab State Synchronization\n      \u00d7 synchronizes state changes across browser tabs (30 ms)\n      \u00d7 prevents infinite sync loops between tabs (60 ms)\n    Migration and Versioning\n      \u00d7 handles legacy state format migration (2 ms)\n      \u221a maintains backwards compatibility with older versions (2 ms)\n    Error Recovery and Resilience\n      \u221a recovers from corrupted localStorage data (2 ms)\n      \u221a handles localStorage unavailability gracefully (56 ms)\n      \u221a implements automatic state cleanup for old data (2 ms)\n\n  \u25cf Store Persistence Integration Tests \u203a Large State Persistence \u203a handles large message history persistence efficiently\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n    \u001b[0m \u001b[90m 218 |\u001b[39m       \n     \u001b[90m 219 |\u001b[39m       \u001b[90m// Verify localStorage can handle large data\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 220 |\u001b[39m       expect(mockLocalStorage\u001b[33m.\u001b[39msetItem)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 221 |\u001b[39m       \n     \u001b[90m 222 |\u001b[39m       \u001b[90m// Check performance of persistence operation\u001b[39m\n     \u001b[90m 223 |\u001b[39m       \u001b[36mconst\u001b[39m startTime \u001b[33m=\u001b[39m performance\u001b[33m.\u001b[39mnow()\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalled (__tests__/integration/store-persistence.test.tsx:220:40)\n\n  \u25cf Store Persistence Integration Tests \u203a Large State Persistence \u203a implements storage quota management\n\n    expect(element).toHaveTextContent()\n\n    Expected element to have text content:\n      1\n    Received:\n      0\n\n    \u001b[0m \u001b[90m 245 |\u001b[39m       \n     \u001b[90m 246 |\u001b[39m       \u001b[90m// Verify graceful handling of quota issues\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 247 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'messages-count'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'1'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 248 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 250 |\u001b[39m\u001b[0m\n\n      at Object.toHaveTextContent (__tests__/integration/store-persistence.test.tsx:247:52)\n\n  \u25cf Store Persistence Integration Tests \u203a Cross-Tab State Synchronization \u203a synchronizes state changes across browser tabs\n\n    TypeError: Failed to construct 'StorageEvent': parameter 2 has member 'storageArea' that is not of type 'Storage'.\n\n    \u001b[0m \u001b[90m 260 |\u001b[39m       \n     \u001b[90m 261 |\u001b[39m       \u001b[90m// Simulate storage event from another tab\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 262 |\u001b[39m       \u001b[36mconst\u001b[39m storageEvent \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mStorageEvent\u001b[39m(\u001b[32m'storage'\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 263 |\u001b[39m         key\u001b[33m:\u001b[39m \u001b[32m'auth-store'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 264 |\u001b[39m         newValue\u001b[33m:\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify({\n     \u001b[90m 265 |\u001b[39m           state\u001b[33m:\u001b[39m {\u001b[0m\n\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/Storage.js:21:9)\n      at Object.exports._convertInherit (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:70:25)\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:97:11)\n      at new StorageEvent (node_modules/jsdom/lib/jsdom/living/generated/StorageEvent.js:112:35)\n      at Object.<anonymous> (__tests__/integration/store-persistence.test.tsx:262:28)\n\n  \u25cf Store Persistence Integration Tests \u203a Cross-Tab State Synchronization \u203a prevents infinite sync loops between tabs\n\n    TypeError: Failed to construct 'StorageEvent': parameter 2 has member 'storageArea' that is not of type 'Storage'.\n\n    \u001b[0m \u001b[90m 299 |\u001b[39m       \u001b[90m// Simulate multiple rapid storage events\u001b[39m\n     \u001b[90m 300 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mlet\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m \u001b[35m10\u001b[39m\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 301 |\u001b[39m         \u001b[36mconst\u001b[39m storageEvent \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mStorageEvent\u001b[39m(\u001b[32m'storage'\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m     |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 302 |\u001b[39m           key\u001b[33m:\u001b[39m \u001b[32m'auth-store'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 303 |\u001b[39m           newValue\u001b[33m:\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify({\n     \u001b[90m 304 |\u001b[39m             state\u001b[33m:\u001b[39m { user\u001b[33m:\u001b[39m { id\u001b[33m:\u001b[39m \u001b[32m`user-${i}`\u001b[39m }\u001b[33m,\u001b[39m token\u001b[33m:\u001b[39m \u001b[32m`token-${i}`\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\n\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/Storage.js:21:9)\n      at Object.exports._convertInherit (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:70:25)\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:97:11)\n      at new StorageEvent (node_modules/jsdom/lib/jsdom/living/generated/StorageEvent.js:112:35)\n      at Object.<anonymous> (__tests__/integration/store-persistence.test.tsx:301:30)\n\n  \u25cf Store Persistence Integration Tests \u203a Migration and Versioning \u203a handles legacy state format migration\n\n    expect(element).toHaveTextContent()\n\n    Expected element to have text content:\n      none\n    Received:\n      test-thread-123\n\n    \u001b[0m \u001b[90m 331 |\u001b[39m       \u001b[90m// Verify app handles legacy format gracefully\u001b[39m\n     \u001b[90m 332 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'messages-count'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'0'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 333 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'active-thread'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'none'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 334 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 335 |\u001b[39m\n     \u001b[90m 336 |\u001b[39m     it(\u001b[32m'maintains backwards compatibility with older versions'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toHaveTextContent (__tests__/integration/store-persistence.test.tsx:333:51)\n\nSummary of all failing tests\nFAIL __tests__/integration/store-persistence.test.tsx\n  \u25cf Store Persistence Integration Tests \u203a Large State Persistence \u203a handles large message history persistence efficiently\n\n    expect(jest.fn()).toHaveBeenCalled()\n\n    Expected number of calls: >= 1\n    Received number of calls:    0\n\n    \u001b[0m \u001b[90m 218 |\u001b[39m       \n     \u001b[90m 219 |\u001b[39m       \u001b[90m// Verify localStorage can handle large data\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 220 |\u001b[39m       expect(mockLocalStorage\u001b[33m.\u001b[39msetItem)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 221 |\u001b[39m       \n     \u001b[90m 222 |\u001b[39m       \u001b[90m// Check performance of persistence operation\u001b[39m\n     \u001b[90m 223 |\u001b[39m       \u001b[36mconst\u001b[39m startTime \u001b[33m=\u001b[39m performance\u001b[33m.\u001b[39mnow()\u001b[33m;\u001b[39m\u001b[0m\n\n      at Object.toHaveBeenCalled (__tests__/integration/store-persistence.test.tsx:220:40)\n\n  \u25cf Store Persistence Integration Tests \u203a Large State Persistence \u203a implements storage quota management\n\n    expect(element).toHaveTextContent()\n\n    Expected element to have text content:\n      1\n    Received:\n      0\n\n    \u001b[0m \u001b[90m 245 |\u001b[39m       \n     \u001b[90m 246 |\u001b[39m       \u001b[90m// Verify graceful handling of quota issues\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 247 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'messages-count'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'1'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 248 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 249 |\u001b[39m   })\u001b[33m;\u001b[39m\n     \u001b[90m 250 |\u001b[39m\u001b[0m\n\n      at Object.toHaveTextContent (__tests__/integration/store-persistence.test.tsx:247:52)\n\n  \u25cf Store Persistence Integration Tests \u203a Cross-Tab State Synchronization \u203a synchronizes state changes across browser tabs\n\n    TypeError: Failed to construct 'StorageEvent': parameter 2 has member 'storageArea' that is not of type 'Storage'.\n\n    \u001b[0m \u001b[90m 260 |\u001b[39m       \n     \u001b[90m 261 |\u001b[39m       \u001b[90m// Simulate storage event from another tab\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 262 |\u001b[39m       \u001b[36mconst\u001b[39m storageEvent \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mStorageEvent\u001b[39m(\u001b[32m'storage'\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 263 |\u001b[39m         key\u001b[33m:\u001b[39m \u001b[32m'auth-store'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 264 |\u001b[39m         newValue\u001b[33m:\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify({\n     \u001b[90m 265 |\u001b[39m           state\u001b[33m:\u001b[39m {\u001b[0m\n\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/Storage.js:21:9)\n      at Object.exports._convertInherit (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:70:25)\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:97:11)\n      at new StorageEvent (node_modules/jsdom/lib/jsdom/living/generated/StorageEvent.js:112:35)\n      at Object.<anonymous> (__tests__/integration/store-persistence.test.tsx:262:28)\n\n  \u25cf Store Persistence Integration Tests \u203a Cross-Tab State Synchronization \u203a prevents infinite sync loops between tabs\n\n    TypeError: Failed to construct 'StorageEvent': parameter 2 has member 'storageArea' that is not of type 'Storage'.\n\n    \u001b[0m \u001b[90m 299 |\u001b[39m       \u001b[90m// Simulate multiple rapid storage events\u001b[39m\n     \u001b[90m 300 |\u001b[39m       \u001b[36mfor\u001b[39m (\u001b[36mlet\u001b[39m i \u001b[33m=\u001b[39m \u001b[35m0\u001b[39m\u001b[33m;\u001b[39m i \u001b[33m<\u001b[39m \u001b[35m10\u001b[39m\u001b[33m;\u001b[39m i\u001b[33m++\u001b[39m) {\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 301 |\u001b[39m         \u001b[36mconst\u001b[39m storageEvent \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mStorageEvent\u001b[39m(\u001b[32m'storage'\u001b[39m\u001b[33m,\u001b[39m {\n     \u001b[90m     |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 302 |\u001b[39m           key\u001b[33m:\u001b[39m \u001b[32m'auth-store'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 303 |\u001b[39m           newValue\u001b[33m:\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify({\n     \u001b[90m 304 |\u001b[39m             state\u001b[33m:\u001b[39m { user\u001b[33m:\u001b[39m { id\u001b[33m:\u001b[39m \u001b[32m`user-${i}`\u001b[39m }\u001b[33m,\u001b[39m token\u001b[33m:\u001b[39m \u001b[32m`token-${i}`\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\n\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/Storage.js:21:9)\n      at Object.exports._convertInherit (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:70:25)\n      at Object.exports.convert (node_modules/jsdom/lib/jsdom/living/generated/StorageEventInit.js:97:11)\n      at new StorageEvent (node_modules/jsdom/lib/jsdom/living/generated/StorageEvent.js:112:35)\n      at Object.<anonymous> (__tests__/integration/store-persistence.test.tsx:301:30)\n\n  \u25cf Store Persistence Integration Tests \u203a Migration and Versioning \u203a handles legacy state format migration\n\n    expect(element).toHaveTextContent()\n\n    Expected element to have text content:\n      none\n    Received:\n      test-thread-123\n\n    \u001b[0m \u001b[90m 331 |\u001b[39m       \u001b[90m// Verify app handles legacy format gracefully\u001b[39m\n     \u001b[90m 332 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'messages-count'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'0'\u001b[39m)\u001b[33m;\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 333 |\u001b[39m       expect(screen\u001b[33m.\u001b[39mgetByTestId(\u001b[32m'active-thread'\u001b[39m))\u001b[33m.\u001b[39mtoHaveTextContent(\u001b[32m'none'\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m     |\u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 334 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 335 |\u001b[39m\n     \u001b[90m 336 |\u001b[39m     it(\u001b[32m'maintains backwards compatibility with older versions'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\n      at Object.toHaveTextContent (__tests__/integration/store-persistence.test.tsx:333:51)\n\n\nTest Suites: 1 failed, 1 passed, 2 of 163 total\nTests:       5 failed, 15 passed, 20 total\nSnapshots:   0 total\nTime:        4.656 s, estimated 62 s\nRan all test suites.\n"
    },
    "dev_launcher": {
      "success": false,
      "duration": 3.67781662940979,
      "output": "============================= test session starts =============================\nplatform win32 -- Python 3.12.4, pytest-8.4.1, pluggy-1.6.0\nrootdir: C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, Faker-37.5.3, langsmith-0.4.15, asyncio-1.1.0, cov-6.2.1, mock-3.14.1, xdist-3.8.0, html-4.1.1, json-report-1.5.0, metadata-3.1.1, timeout-2.4.0, typeguard-4.4.4\nasyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function\ntimeout: 300.0s\ntimeout method: thread\ntimeout func_only: False\ncollected 22 items\n\n============================ no tests ran in 0.27s ============================\n",
      "errors": "ERROR: Wrong expression passed to '-k': *websocket*: at column 1: unexpected character \"*\"\n\n"
    }
  },
  "overall_success": false,
  "total_duration": 18.605316638946533
}