{
  "timestamp": "20250822_161239",
  "level": "integration",
  "environment": "local",
  "services": {
    "auth": {
      "success": false,
      "duration": 35.17332434654236,
      "output": "============================= test session starts =============================\nplatform win32 -- Python 3.12.3, pytest-8.4.1, pluggy-1.6.0\nrootdir: C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\nconfigfile: pytest.ini\nplugins: anyio-4.9.0, Faker-37.5.3, langsmith-0.4.15, asyncio-1.1.0, cov-6.2.1, mock-3.14.1, xdist-3.8.0\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollected 193 items\n\ntests\\integration\\test_auth_oauth_errors.py ........                     [  4%]\ntests\\integration\\test_auth_oauth_google.py ........                     [  8%]\ntests\\integration\\test_oauth_comprehensive_failures.py ................. [ 17%]\n............sss                                                          [ 24%]\ntests\\integration\\test_oauth_flows_auth.py ..                            [ 25%]\ntests\\integration\\test_oauth_flows_core.py ...                           [ 27%]\ntests\\integration\\test_oauth_flows_sync.py ............                  [ 33%]\ntests\\test_auth_token_generation.py ..........                           [ 38%]\ntests\\test_auth_token_security.py ..................                     [ 48%]\ntests\\test_auth_token_validation.py ....F\n\n================================== FAILURES ===================================\n_________ TestJWTTokenValidation.test_validate_token_edge_case_timing _________\n\nself = <auth_service.tests.test_auth_token_validation.TestJWTTokenValidation testMethod=test_validate_token_edge_case_timing>\n\n    def test_validate_token_edge_case_timing(self):\n        \"\"\"Test validation edge cases around timing\"\"\"\n        # Create a token that expires very soon by directly encoding with JWT\n        import jwt\n        near_expiry_time = datetime.now(timezone.utc) + timedelta(seconds=1)\n    \n        # Create payload manually with short expiry\n        payload = {\n            \"sub\": self.test_user_id,\n            \"email\": self.test_email,\n            \"token_type\": \"access\",\n            \"iat\": datetime.now(timezone.utc),\n            \"exp\": near_expiry_time,\n            \"jti\": f\"access_{int(time.time())}\"\n        }\n    \n        # Encode token with short expiry\n        secret = self.jwt_handler.secret\n        token = jwt.encode(payload, secret, algorithm=self.jwt_handler.algorithm)\n    \n        # Should be valid immediately\n        validation_payload = self.jwt_handler.validate_token(token, \"access\")\n>       assert validation_payload is not None\nE       assert None is not None\n\ntests\\test_auth_token_validation.py:270: AssertionError\n------------------------------ Captured log call ------------------------------\nWARNING  auth_service.auth_core.core.jwt_handler:jwt_handler.py:247 Missing required claim: iss\nWARNING  auth_service.auth_core.core.jwt_handler:jwt_handler.py:120 Token claims validation failed\n============================== warnings summary ===============================\ntests\\integration\\test_oauth_comprehensive_failures.py:1245\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\integration\\test_oauth_comprehensive_failures.py:1245: PytestUnknownMarkWarning: Unknown pytest.mark.staging - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.staging\n\ntests\\integration\\test_oauth_comprehensive_failures.py:1288\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\integration\\test_oauth_comprehensive_failures.py:1288: PytestUnknownMarkWarning: Unknown pytest.mark.staging - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.staging\n\ntests/integration/test_auth_oauth_errors.py::TestOAuthErrorHandling::test_oauth_invalid_state_parameter\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\tests\\conftest.py:59: DeprecationWarning: There is no current event loop\n    loop = asyncio.get_event_loop()\n\ntests/integration/test_oauth_comprehensive_failures.py: 21 warnings\n  C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\auth_service\\auth_core\\routes\\auth_routes.py:982: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    content=response.dict(),\n\ntests/integration/test_oauth_comprehensive_failures.py::TestOAuthComprehensiveFailures::test_05_cross_site_request_forgery_token_binding\ntests/integration/test_oauth_comprehensive_failures.py::TestOAuthComprehensiveFailures::test_25_session_fixation_attack\n  C:\\Users\\antho\\AppData\\Roaming\\Python\\Python312\\site-packages\\starlette\\testclient.py:451: DeprecationWarning: Setting per-request cookies=<...> is being deprecated, because the expected behaviour on cookie persistence is ambiguous. Set cookies directly on the client instance instead.\n    return super().request(\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ===========================\nFAILED tests/test_auth_token_validation.py::TestJWTTokenValidation::test_validate_token_edge_case_timing\n!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!\n============ 1 failed, 94 passed, 3 skipped, 26 warnings in 33.00s ============\n",
      "errors": ""
    }
  },
  "overall_success": false,
  "total_duration": 35.17332434654236
}