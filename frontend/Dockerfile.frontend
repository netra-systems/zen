# Dockerfile - Production-ready frontend container
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files
COPY package*.json ./

# Clean npm cache and configure npm for reliability
RUN npm cache clean --force && \
    npm cache verify && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-timeout 300000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set strict-ssl false && \
    npm config set loglevel verbose

# Delete package-lock.json if it exists to avoid integrity issues
RUN rm -f package-lock.json

# Install dependencies with retry logic and fallback to npm install if ci fails
RUN npm install --legacy-peer-deps --no-audit --no-fund || \
    (npm cache clean --force && \
     rm -rf node_modules && \
     npm install --legacy-peer-deps --no-audit --no-fund)

# Copy application code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine

WORKDIR /app

# Copy built application from builder
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/public ./public

# Set environment variables
ENV NODE_ENV=production
ENV PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Expose port (Cloud Run uses 8080 by default)
EXPOSE 8080

# Start the application
CMD ["npm", "start"]