{
  "openapi": "3.0.2",
  "info": {
    "title": "Netra API v2",
    "description": "This is the API for Netra, a platform for AI-powered workload optimization.",
    "version": "2.0.0"
  },
  "paths": {
    "/auth/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Current User Details",
        "description": "Returns the public information for the currently authenticated user.",
        "operationId": "get_current_user_details_api__auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Logs out the user by clearing the authentication cookie.",
        "operationId": "logout_api__auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/auth/login/google": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Login Via Google",
        "operationId": "login_via_google_api__auth_login_google_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Auth Via Google",
        "operationId": "auth_via_google_api__auth_google_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/auth/user": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get User",
        "description": "Returns the current user from the session, if available.",
        "operationId": "get_user_api__auth_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/supply/supply-catalog/": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Catalog",
        "description": "Retrieves a list of all models in the supply catalog.",
        "operationId": "read_supply_catalog_api__supply_supply_catalog__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SupplyOption"
                  },
                  "type": "array",
                  "title": "Response Read Supply Catalog Api  Supply Supply Catalog  Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "supply"
        ],
        "summary": "Create Supply Option",
        "description": "Creates a new supply option in the catalog.",
        "operationId": "create_supply_option_api__supply_supply_catalog__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupplyOptionCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/supply/supply-catalog/{option_id}": {
      "get": {
        "tags": [
          "supply"
        ],
        "summary": "Read Supply Option",
        "description": "Retrieves a single supply option by its ID.",
        "operationId": "read_supply_option_api__supply_supply_catalog__option_id__get",
        "parameters": [
          {
            "name": "option_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Option Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplyOption"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/content": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Content Corpuses",
        "description": "Lists all available, successfully generated content corpuses.",
        "operationId": "list_content_corpuses_api__generation_content_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Content Corpuses Api  Generation Content Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus",
        "description": "Starts a background job to generate a new content corpus.",
        "operationId": "create_content_corpus_api__generation_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus Api  Generation Content Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/logs": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Log Sets",
        "description": "Lists all available, successfully generated synthetic log sets.",
        "operationId": "list_log_sets_api__generation_logs_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "additionalProperties": true,
                    "type": "object"
                  },
                  "type": "array",
                  "title": "Response List Log Sets Api  Generation Logs Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Logs",
        "description": "Starts a background job to generate a new set of synthetic logs.",
        "operationId": "create_synthetic_logs_api__generation_logs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Logs Api  Generation Logs Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/content_corpus": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Content Corpus",
        "description": "Starts a background job to generate a new content corpus and store it in ClickHouse.",
        "operationId": "create_content_corpus_api__generation_content_corpus_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCorpusGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Content Corpus Api  Generation Content Corpus Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/ingest_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Ingest Data",
        "description": "Starts a background job to ingest data into ClickHouse.",
        "operationId": "ingest_data_api__generation_ingest_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataIngestionParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Ingest Data Api  Generation Ingest Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/synthetic_data": {
      "post": {
        "tags": [
          "generation"
        ],
        "summary": "Create Synthetic Data",
        "description": "Starts a background job to generate new synthetic data.",
        "operationId": "create_synthetic_data_api__generation_synthetic_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyntheticDataGenParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Create Synthetic Data Api  Generation Synthetic Data Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/jobs/{job_id}": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "Get Job Status",
        "description": "Retrieves the status of a generation job.",
        "operationId": "get_job_status_api__generation_jobs__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/generation/clickhouse_tables": {
      "get": {
        "tags": [
          "generation"
        ],
        "summary": "List Clickhouse Tables",
        "description": "Lists all tables in the ClickHouse database.",
        "operationId": "list_clickhouse_tables_api__generation_clickhouse_tables_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "title": "Response List Clickhouse Tables Api  Generation Clickhouse Tables Get"
                }
              }
            }
          }
        }
      }
    },
    "/agent/chat/start_agent": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Start Agent",
        "description": "Starts the agent to analyze the user's request.",
        "operationId": "start_agent_api__agent_chat_start_agent_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/agent/chat/start_agent_streaming/{client_id}": {
      "post": {
        "tags": [
          "agent"
        ],
        "summary": "Start Agent Streaming",
        "description": "Starts the agent and streams updates to the client.",
        "operationId": "start_agent_streaming_api__agent_chat_start_agent_streaming__client_id__post",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalysisRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/agent/chat/{run_id}/status": {
      "get": {
        "tags": [
          "agent"
        ],
        "summary": "Get Agent Status",
        "operationId": "get_agent_status_api__agent_chat__run_id__status_get",
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Run Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get App Settings",
        "description": "Retrieve the current application settings.\nOnly accessible to authenticated users.",
        "operationId": "get_app_settings_api__settings_get",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings/log_table": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Log Table",
        "description": "Set the default ClickHouse log table.\nOnly accessible to superusers.",
        "operationId": "set_log_table_api__settings_log_table_post",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings/log_tables": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Add Log Table",
        "description": "Add a new ClickHouse log table to the list of available tables.\nOnly accessible to superusers.",
        "operationId": "add_log_table_api__settings_log_tables_post",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Remove Log Table",
        "description": "Remove a ClickHouse log table from the list of available tables.\nOnly accessible to superusers.",
        "operationId": "remove_log_table_api__settings_log_tables_delete",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogTableSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings/time_period": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Time Period",
        "description": "Set the default time period for log analysis.\nOnly accessible to superusers.",
        "operationId": "set_time_period_api__settings_time_period_post",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimePeriodSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/settings/default_log_table": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Set Default Log Table For Context",
        "description": "Set the default ClickHouse log table for a specific context.\nOnly accessible to superusers.",
        "operationId": "set_default_log_table_for_context_api__settings_default_log_table_post",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultLogTableSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Remove Default Log Table For Context",
        "description": "Remove the default ClickHouse log table for a specific context.\nOnly accessible to superusers.",
        "operationId": "remove_default_log_table_for_context_api__settings_default_log_table_delete",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Args"
            }
          },
          {
            "name": "kwargs",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Kwargs"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultLogTableSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/references": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Get References",
        "description": "Returns a list of available @reference items.",
        "operationId": "get_references_api__references_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceGetResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "references"
        ],
        "summary": "Create Reference",
        "description": "Creates a new @reference item.",
        "operationId": "create_reference_api__references_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/references/{reference_id}": {
      "get": {
        "tags": [
          "references"
        ],
        "summary": "Get Reference",
        "description": "Returns a specific @reference item.",
        "operationId": "get_reference_api__references__reference_id__get",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reference Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "references"
        ],
        "summary": "Update Reference",
        "description": "Updates a specific @reference item.",
        "operationId": "update_reference_api__references__reference_id__put",
        "parameters": [
          {
            "name": "reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Reference Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceItem"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/health/live": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Live",
        "description": "Liveness probe to check if the application is running.",
        "operationId": "live_health_live_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Ready",
        "description": "Readiness probe to check if the application is ready to serve requests.",
        "operationId": "ready_health_ready_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Read Root",
        "operationId": "read_root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/test-error": {
      "get": {
        "summary": "Test Error",
        "operationId": "test_error_test_error_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnalysisRequest": {
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/Settings"
          },
          "request": {
            "$ref": "#/components/schemas/RequestModel"
          }
        },
        "type": "object",
        "required": [
          "settings",
          "request"
        ],
        "title": "AnalysisRequest"
      },
      "AppConfig": {
        "properties": {
          "environment": {
            "type": "string",
            "title": "Environment",
            "default": "development"
          },
          "google_cloud": {
            "$ref": "#/components/schemas/GoogleCloudConfig",
            "default": {
              "project_id": "cryptic-net-466001-n0"
            }
          },
          "clickhouse_native": {
            "$ref": "#/components/schemas/ClickHouseNativeConfig",
            "default": {
              "host": "clickhouse_host_url_placeholder",
              "port": 9440,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https": {
            "$ref": "#/components/schemas/ClickHouseHTTPSConfig",
            "default": {
              "host": "clickhouse_host_url_placeholder",
              "port": 8443,
              "user": "default",
              "password": "",
              "database": "default"
            }
          },
          "clickhouse_https_dev": {
            "$ref": "#/components/schemas/ClickHouseHTTPSDevConfig",
            "default": {
              "host": "clickhouse_host_url_placeholder",
              "port": 8443,
              "user": "development_user",
              "password": "",
              "database": "development",
              "superuser": true
            }
          },
          "clickhouse_logging": {
            "$ref": "#/components/schemas/ClickHouseLoggingConfig",
            "default": {
              "enabled": true,
              "default_table": "logs",
              "default_time_period_days": 7,
              "available_tables": [
                "logs"
              ],
              "default_tables": {},
              "available_time_periods": [
                1,
                7,
                30,
                90
              ]
            }
          },
          "langfuse": {
            "$ref": "#/components/schemas/LangfuseConfig",
            "default": {
              "secret_key": "",
              "public_key": "",
              "host": "https://cloud.langfuse.com/"
            }
          },
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": "default_secret_key"
          },
          "algorithm": {
            "type": "string",
            "title": "Algorithm",
            "default": "HS256"
          },
          "access_token_expire_minutes": {
            "type": "integer",
            "title": "Access Token Expire Minutes",
            "default": 30
          },
          "fernet_key": {
            "type": "string",
            "title": "Fernet Key"
          },
          "jwt_secret_key": {
            "type": "string",
            "title": "Jwt Secret Key"
          },
          "api_base_url": {
            "type": "string",
            "title": "Api Base Url",
            "default": "http://localhost:8000"
          },
          "database_url": {
            "type": "string",
            "title": "Database Url"
          },
          "log_level": {
            "type": "string",
            "title": "Log Level",
            "default": "DEBUG"
          },
          "log_secrets": {
            "type": "boolean",
            "title": "Log Secrets",
            "default": false
          },
          "frontend_url": {
            "type": "string",
            "title": "Frontend Url",
            "default": "/"
          },
          "llm_configs": {
            "additionalProperties": {
              "$ref": "#/components/schemas/LLMConfig"
            },
            "type": "object",
            "title": "Llm Configs",
            "default": {
              "default": {
                "provider": "google",
                "model_name": "gemini-2.5-pro",
                "generation_config": {}
              },
              "analysis": {
                "generation_config": {
                  "temperature": 0.5
                },
                "model_name": "gemini-2.5-pro",
                "provider": "google"
              },
              "gpt-4": {
                "generation_config": {
                  "temperature": 0.8
                },
                "model_name": "gpt-4",
                "provider": "openai"
              }
            }
          }
        },
        "type": "object",
        "title": "AppConfig",
        "description": "Base configuration class."
      },
      "ClickHouseHTTPSConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "clickhouse_host_url_placeholder"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSConfig"
      },
      "ClickHouseHTTPSDevConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "clickhouse_host_url_placeholder"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 8443
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "development_user"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "development"
          },
          "superuser": {
            "type": "boolean",
            "title": "Superuser",
            "default": true
          }
        },
        "type": "object",
        "title": "ClickHouseHTTPSDevConfig"
      },
      "ClickHouseLoggingConfig": {
        "properties": {
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": true
          },
          "default_table": {
            "type": "string",
            "title": "Default Table",
            "default": "logs"
          },
          "default_time_period_days": {
            "type": "integer",
            "title": "Default Time Period Days",
            "default": 7
          },
          "available_tables": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Available Tables"
          },
          "default_tables": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Default Tables"
          },
          "available_time_periods": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Available Time Periods"
          }
        },
        "type": "object",
        "title": "ClickHouseLoggingConfig"
      },
      "ClickHouseNativeConfig": {
        "properties": {
          "host": {
            "type": "string",
            "title": "Host",
            "default": "clickhouse_host_url_placeholder"
          },
          "port": {
            "type": "integer",
            "title": "Port",
            "default": 9440
          },
          "user": {
            "type": "string",
            "title": "User",
            "default": "default"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "default": ""
          },
          "database": {
            "type": "string",
            "title": "Database",
            "default": "default"
          }
        },
        "type": "object",
        "title": "ClickHouseNativeConfig"
      },
      "ContentCorpusGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "maximum": 20.0,
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          },
          "clickhouse_table": {
            "type": "string",
            "title": "Clickhouse Table",
            "description": "The name of the ClickHouse table to store the corpus in.",
            "default": "content_corpus"
          }
        },
        "type": "object",
        "title": "ContentCorpusGenParams"
      },
      "ContentGenParams": {
        "properties": {
          "samples_per_type": {
            "type": "integer",
            "maximum": 100.0,
            "exclusiveMinimum": 0.0,
            "title": "Samples Per Type",
            "description": "Number of samples to generate for each workload type.",
            "default": 10
          },
          "temperature": {
            "type": "number",
            "maximum": 2.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Controls randomness. Higher is more creative.",
            "default": 0.7
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "description": "Nucleus sampling probability."
          },
          "top_k": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Top K",
            "description": "Top-k sampling control."
          },
          "max_cores": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "title": "ContentGenParams"
      },
      "DataIngestionParams": {
        "properties": {
          "data_path": {
            "type": "string",
            "title": "Data Path",
            "description": "The path to the data file to ingest."
          },
          "table_name": {
            "type": "string",
            "title": "Table Name",
            "description": "The name of the table to ingest the data into."
          }
        },
        "type": "object",
        "required": [
          "data_path",
          "table_name"
        ],
        "title": "DataIngestionParams"
      },
      "DataSource": {
        "properties": {
          "source_table": {
            "type": "string",
            "title": "Source Table"
          }
        },
        "type": "object",
        "required": [
          "source_table"
        ],
        "title": "DataSource"
      },
      "DefaultLogTableSettings": {
        "properties": {
          "context": {
            "type": "string",
            "title": "Context"
          },
          "log_table": {
            "type": "string",
            "title": "Log Table"
          }
        },
        "type": "object",
        "required": [
          "context",
          "log_table"
        ],
        "title": "DefaultLogTableSettings"
      },
      "GoogleCloudConfig": {
        "properties": {
          "project_id": {
            "type": "string",
            "title": "Project Id",
            "default": "cryptic-net-466001-n0"
          },
          "client_id": {
            "type": "string",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret"
          }
        },
        "type": "object",
        "title": "GoogleCloudConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "LLMConfig": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider",
            "description": "The LLM provider (e.g., 'google', 'openai')."
          },
          "model_name": {
            "type": "string",
            "title": "Model Name",
            "description": "The name of the model."
          },
          "api_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Key",
            "description": "The API key for the LLM provider."
          },
          "generation_config": {
            "additionalProperties": true,
            "type": "object",
            "title": "Generation Config",
            "description": "A dictionary of generation parameters, e.g., temperature, max_tokens.",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "provider",
          "model_name"
        ],
        "title": "LLMConfig"
      },
      "LangfuseConfig": {
        "properties": {
          "secret_key": {
            "type": "string",
            "title": "Secret Key",
            "default": ""
          },
          "public_key": {
            "type": "string",
            "title": "Public Key",
            "default": ""
          },
          "host": {
            "type": "string",
            "title": "Host",
            "default": "https://cloud.langfuse.com/"
          }
        },
        "type": "object",
        "title": "LangfuseConfig"
      },
      "LogGenParams": {
        "properties": {
          "corpus_id": {
            "type": "string",
            "title": "Corpus Id",
            "description": "The ID of the content corpus to use for generation."
          },
          "num_logs": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Logs",
            "description": "Number of log entries to generate.",
            "default": 1000
          },
          "max_cores": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Max Cores",
            "description": "Max CPU cores to use.",
            "default": 4
          }
        },
        "type": "object",
        "required": [
          "corpus_id"
        ],
        "title": "LogGenParams"
      },
      "LogTableSettings": {
        "properties": {
          "log_table": {
            "type": "string",
            "title": "Log Table"
          }
        },
        "type": "object",
        "required": [
          "log_table"
        ],
        "title": "LogTableSettings"
      },
      "ReferenceCreateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "friendly_name": {
            "type": "string",
            "title": "Friendly Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "friendly_name",
          "type",
          "value",
          "version"
        ],
        "title": "ReferenceCreateRequest",
        "description": "The request model for creating a new reference."
      },
      "ReferenceGetResponse": {
        "properties": {
          "references": {
            "items": {
              "$ref": "#/components/schemas/ReferenceItem"
            },
            "type": "array",
            "title": "References"
          }
        },
        "type": "object",
        "required": [
          "references"
        ],
        "title": "ReferenceGetResponse",
        "description": "The response model for the GET /references endpoint."
      },
      "ReferenceItem": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "friendly_name": {
            "type": "string",
            "title": "Friendly Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "version": {
            "type": "string",
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "friendly_name",
          "type",
          "value",
          "version"
        ],
        "title": "ReferenceItem"
      },
      "ReferenceUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "friendly_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Friendly Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "title": "ReferenceUpdateRequest",
        "description": "The request model for updating a reference."
      },
      "RequestModel": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "workloads": {
            "items": {
              "$ref": "#/components/schemas/Workload"
            },
            "type": "array",
            "title": "Workloads"
          },
          "constraints": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Constraints"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "query",
          "workloads"
        ],
        "title": "RequestModel"
      },
      "Settings": {
        "properties": {
          "debug_mode": {
            "type": "boolean",
            "title": "Debug Mode"
          }
        },
        "type": "object",
        "required": [
          "debug_mode"
        ],
        "title": "Settings"
      },
      "SupplyOption": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "family": {
            "type": "string",
            "title": "Family"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "hosting_type": {
            "type": "string",
            "title": "Hosting Type"
          },
          "cost_per_million_tokens_usd": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Cost Per Million Tokens Usd"
          },
          "quality_score": {
            "type": "number",
            "title": "Quality Score"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "family",
          "name",
          "hosting_type",
          "cost_per_million_tokens_usd",
          "quality_score",
          "id"
        ],
        "title": "SupplyOption"
      },
      "SupplyOptionCreate": {
        "properties": {
          "provider": {
            "type": "string",
            "title": "Provider"
          },
          "family": {
            "type": "string",
            "title": "Family"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "hosting_type": {
            "type": "string",
            "title": "Hosting Type"
          },
          "cost_per_million_tokens_usd": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Cost Per Million Tokens Usd"
          },
          "quality_score": {
            "type": "number",
            "title": "Quality Score"
          }
        },
        "type": "object",
        "required": [
          "provider",
          "family",
          "name",
          "hosting_type",
          "cost_per_million_tokens_usd",
          "quality_score"
        ],
        "title": "SupplyOptionCreate"
      },
      "SyntheticDataGenParams": {
        "properties": {
          "num_traces": {
            "type": "integer",
            "maximum": 100000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Traces",
            "description": "Number of traces to generate.",
            "default": 10000
          },
          "num_users": {
            "type": "integer",
            "maximum": 10000.0,
            "exclusiveMinimum": 0.0,
            "title": "Num Users",
            "description": "Number of unique users to simulate.",
            "default": 100
          },
          "error_rate": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Error Rate",
            "description": "The fraction of traces that should be errors.",
            "default": 0.05
          },
          "event_types": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Event Types",
            "description": "A list of event types to simulate."
          },
          "source_table": {
            "type": "string",
            "title": "Source Table",
            "description": "The name of the source ClickHouse table for the content corpus.",
            "default": "content_corpus"
          },
          "destination_table": {
            "type": "string",
            "title": "Destination Table",
            "description": "The name of the destination ClickHouse table for the generated data.",
            "default": "synthetic_data"
          }
        },
        "type": "object",
        "title": "SyntheticDataGenParams"
      },
      "TimePeriodSettings": {
        "properties": {
          "days": {
            "type": "integer",
            "title": "Days"
          }
        },
        "type": "object",
        "required": [
          "days"
        ],
        "title": "TimePeriodSettings"
      },
      "TimeRange": {
        "properties": {
          "start_time": {
            "type": "string",
            "title": "Start Time"
          },
          "end_time": {
            "type": "string",
            "title": "End Time"
          }
        },
        "type": "object",
        "required": [
          "start_time",
          "end_time"
        ],
        "title": "TimeRange"
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Picture"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "User"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Workload": {
        "properties": {
          "run_id": {
            "type": "string",
            "title": "Run Id"
          },
          "query": {
            "type": "string",
            "title": "Query"
          },
          "data_source": {
            "$ref": "#/components/schemas/DataSource"
          },
          "time_range": {
            "$ref": "#/components/schemas/TimeRange"
          }
        },
        "type": "object",
        "required": [
          "run_id",
          "query",
          "data_source",
          "time_range"
        ],
        "title": "Workload"
      }
    }
  }
}
