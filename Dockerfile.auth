# Dockerfile.auth - Optimized for Google Cloud Run
# Standalone authentication microservice - COMPLETELY INDEPENDENT

# Build stage for dependencies
FROM python:3.11-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy and build Python wheels
COPY auth_service/requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# Runtime stage
FROM python:3.11-slim

WORKDIR /app

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages from wheels
COPY --from=builder /app/wheels /wheels
RUN pip install --no-cache-dir /wheels/* && rm -rf /wheels

# Copy application code - proper directory structure
COPY auth_service/ ./auth_service/
# Copy auth_core to root level for proper imports
COPY auth_service/auth_core/ ./auth_core/

# Create non-root user
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app && \
    mkdir -p /app/logs && \
    chown -R appuser:appuser /app/logs

USER appuser

# Environment variables for Cloud Run
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONIOENCODING=utf-8 \
    PYTHONHASHSEED=random \
    PYTHONOPTIMIZE=1 \
    SERVICE_NAME=auth-service \
    PORT=8080 \
    WORKERS=1 \
    WORKER_CONNECTIONS=1000 \
    MAX_WORKERS=4 \
    TIMEOUT=120 \
    GRACEFUL_TIMEOUT=30 \
    KEEP_ALIVE=5

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

# Use exec form to ensure proper signal handling for Cloud Run
# Cloud Run sends SIGTERM for graceful shutdown
CMD ["sh", "-c", "exec gunicorn auth_service.main:app \
    --bind 0.0.0.0:${PORT} \
    --workers ${WORKERS} \
    --worker-class uvicorn.workers.UvicornWorker \
    --worker-connections ${WORKER_CONNECTIONS} \
    --max-requests 1000 \
    --max-requests-jitter 50 \
    --timeout ${TIMEOUT} \
    --graceful-timeout ${GRACEFUL_TIMEOUT} \
    --keep-alive ${KEEP_ALIVE} \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    --preload"]