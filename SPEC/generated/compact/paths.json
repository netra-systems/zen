{
  "values": [
    "\"\n\n# Default to local build with checks\ncommand = [\n    sys.executable,\n    \"scripts/deploy_to_gcp.py\",\n    \"--project\", \"netra-staging\",\n    \"--build-local\",\n    \"--service-account\", SERVICE_ACCOUNT_KEY\n]\n\n# Add any additional arguments passed to this script\nif len(sys.argv) > 1:\n    command.extend(sys.argv[1:])\nelse:\n    # Default to running checks\n    command.append(\"--run-checks\")\n\n# Execute deployment\nsys.exit(subprocess.call(command))",
    "# ASYNC PATTERN VALIDATION (Level 1 Protection)\n  - id: async-await-pattern-validator\n    name: Async/Await Pattern Validator  \n    entry: python scripts/async_pattern_enforcer.py --precommit-mode\n    language: system\n    files: '\\.py$'\n    stages: [commit]\n    description: 'CRITICAL: Detects await/non-await mismatches and async pattern violations'",
    "#!/usr/bin/env python3\n\"\"\"\nWrapper script for deploying to GCP staging with service account authentication.\nAuto-generated by setup_gcp_service_account.py\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom pathlib import Path\n\n# Service account key path\nSERVICE_ACCOUNT_KEY = r\"",
    "## Next Steps\n\n1. **Run smoke tests** to verify basic functionality\n2. **Test agent workflows** end-to-end\n3. **Monitor WebSocket traffic** in dev tools\n4. **Add e2e tests** for critical event flows\n5. **Document event catalog** in SPEC/websocket_communication.xml",
    "## Utility Modules Created\n\n- `netra_backend/app/utils/redis_utils.py` - Common Redis operations with SSOT patterns\n\n## Business Impact\n\n- **Performance**: Improved connection pooling and async patterns\n- **Reliability**: Consistent error handling and retry logic\n- **Maintainability**: Centralized Redis access patterns\n- **Compliance**: 100% SSOT pattern adoption",
    "## [U+1F6E0][U+FE0F] Available Tools\n- `python scripts/boundary_enforcer.py --enforce` - Full boundary check\n- `python scripts/auto_split_files.py --scan` - Automated file splitting\n- `python scripts/auto_decompose_functions.py --scan` - Function decomposition\n- `python scripts/emergency_boundary_actions.py --assess` - Emergency assessment\n\n---\n*Generated by Boundary Enforcement System v2.0 | Timestamp:",
    "% goal\n\n## Configuration\nTo enable continuous autonomous review, add to CI/CD:\n```bash\npython scripts/test_autonomous_review.py --auto\n```\n\nOr schedule hourly reviews:\n```bash\n0 * * * * cd /path/to/project && python scripts/test_autonomous_review.py --continuous\n```",
    "(ReferenceError|SyntaxError|TypeError).*at.*\\(.*\\.js",
    "**/*.json",
    "**/*.py",
    "**/*.pyc",
    "**/*.test.ts",
    "**/*.test.tsx",
    "**/*.ts",
    "**/*.tsx",
    "**/*_test.py",
    "**/*config.json",
    "**/*test*.py",
    "**/conftest.py",
    "**/golden_path*.py",
    "**/golden_path/**/*.py",
    "**/migration_*.py",
    "**/package.json",
    "**/scripts/check_*.py",
    "**/scripts/scan_*.py",
    "**/test*.py",
    "**/test_*.py",
    "**/test_*uuid*.py",
    "**/test_golden_path*.py",
    "**/tests/**/*.py",
    "**/unified_id_*.py",
    "*/.pytest_cache/*",
    "*/content_corpus.json",
    "*Generated by run_review.py implementing SPEC/review.xml*",
    "- Monitor resources: python scripts/check_resource_limits.py",
    "- Or: python scripts/fix_windows_encoding.py && python tests/unified_test_runner.py",
    "- Run tests to verify: python tests/mission_critical/test_unified_websocket_events.py",
    "- Run: pytest tests/mission_critical/test_staging_websocket_agent_events.py -v",
    "- Run: python scripts/test_staging_websocket_comprehensive.py --quick",
    "- This issue has occurred before (see SPEC/learnings/auth_service_staging_errors_five_whys.xml)",
    "- [ ] Rebuild containers: `docker compose build --no-cache`\n- [ ] Check package.json/requirements.txt\n- [ ] Verify volume mounts\n- [ ] Clear Docker cache if needed",
    "- python scripts/test_staging_websocket_comprehensive.py --debug",
    "- python test_framework/robust_websocket_test_helper.py",
    "--data-file=/tmp/rollback_config.json",
    ".*:\"\nfiles = list(pathlib.Path(\"netra_backend/app\").rglob(\"*.py\"))\nfiles.extend(list(pathlib.Path(\"auth_service\").rglob(\"*.py\")))\nmatches = []\nfor f in files[:100]:  # Limit for speed\n    try:\n        if \"",
    ".*_test\\.py$",
    "../secrets/netra-staging-sa-key.json",
    ".config/gcloud/application_default_credentials.json",
    ".git/netra-audit-config.json",
    ".netra/migration_state.json",
    ".pytest_cache/",
    "/* Generated by Netra QueryBuilder */",
    "/* Generated by Netra QueryBuilder */\n        SELECT",
    "/* Generated by Netra QueryBuilder */\n        SELECT \n            corr(",
    "/* Generated by Netra QueryBuilder */\n        SELECT \n            toDate(timestamp) as date,\n            count() as daily_requests,\n            uniq(session_id) as unique_sessions,\n            avg(latency_ms) as avg_latency\n        FROM metrics_table\n        WHERE user_id =",
    "/* Generated by Netra QueryBuilder */\n        WITH stats AS (\n            SELECT \n                avg(",
    "/* eslint-disable */",
    "/* tslint:disable */",
    "/**/*.py",
    "/**/*.ts",
    "/**/*.tsx",
    "/**/*_test.py",
    "/**/test_*.py",
    "/.dockerenv",
    "/.venv/",
    "/.well-known/",
    "/.well-known/openid_configuration",
    "// Mock fetch for config\n    global.fetch = jest.fn().mockResolvedValue({\n      json: jest.fn().mockResolvedValue({\n        ws_url: 'ws://localhost:8000/ws'\n      })\n    });",
    "// Save auth data to localStorage\nlocalStorage.setItem('jwt_token', '",
    "/0",
    "/10",
    "/10 maximum",
    "/100",
    "/100\n- **Technical Debt**:",
    "/100 (",
    "/100 -",
    "/100 ---",
    "/1000",
    "/100:",
    "/12",
    "/15",
    "/1k tokens)",
    "/2",
    "/3 (",
    "/3 fixes",
    "/3 for",
    "/3 service configurations",
    "/3 tests demonstrate expected behavior",
    "/3)",
    "/4 patterns found",
    "/4 patterns)",
    "/5",
    "/5 fixes applied",
    "/5 levels working",
    "/5 startup fixes applied - some functionality may be degraded",
    "/5 startup fixes applied with",
    "/5 successful",
    "/5 successful,",
    "/50+ tests)",
    "/60 seconds)",
    "/7",
    "/8 tests",
    "/?query=SELECT%20version()",
    "/FI",
    "/ReportingSubAgent - user",
    "/URL/",
    "/Users/",
    "/Users/anthony/Desktop/netra-apex",
    "/Users/anthony/Desktop/netra-apex/config/staging.env",
    "/Users/anthony/Desktop/netra-apex/netra_backend/app/db/clickhouse.py",
    "/Users/anthony/Desktop/netra-apex/netra_backend/app/services/agent_websocket_bridge.py",
    "/Users/anthony/Desktop/netra-apex/performance_validation_report.json",
    "/Users/anthony/Desktop/netra-apex/staging_validation_report.json",
    "/Users/anthony/Documents/GitHub/netra-apex",
    "/Users/anthony/Documents/GitHub/netra-apex/netra_backend/tests",
    "/Users/rindhujajohnson/Netra/GitHub/netra-apex/reports/oauth_staging_validation_",
    "/[\\w\\-./]+\\.\\w+",
    "/[\\w\\-./]+\\.\\w+|[A-Z]:\\\\[\\w\\\\\\-.]+\\.\\w+",
    "/\\d+$",
    "/_next/static/",
    "/_next/static/chunks/webpack.js",
    "/account",
    "/actions/artifacts",
    "/actions/artifacts/",
    "/actions/runs",
    "/actions/runs/",
    "/actions/workflows/",
    "/agent/execute",
    "/agents",
    "/agents/metrics",
    "/agents/status",
    "/agents/{agent_name}",
    "/agents/{agent_name}/report",
    "/agents/{run_id}/cancel",
    "/agents/{run_id}/start",
    "/agents/{run_id}/status",
    "/agents/{run_id}/stop",
    "/alembic/",
    "/alerts",
    "/alerts/acknowledge",
    "/alerts/history",
    "/analyses",
    "/analysis/{analysis_id}",
    "/analysis/{analysis_id}/results",
    "/analysis/{analysis_id}/status",
    "/analytics",
    "/analytics/dashboard",
    "/analytics/summary",
    "/analytics_service/",
    "/analyze",
    "/api",
    "/api-keys",
    "/api-keys/{key_id}",
    "/api-specification",
    "/api/",
    "/api/admin",
    "/api/admin/",
    "/api/agent",
    "/api/agents",
    "/api/agents/",
    "/api/agents/execute",
    "/api/agents/run_agent_v2",
    "/api/agents/start",
    "/api/agents/status",
    "/api/agents/stream",
    "/api/agents/v2/thread/{thread_id}/runs",
    "/api/agents/v2/{run_id}/state",
    "/api/agents/v2/{run_id}/status",
    "/api/auth",
    "/api/auth/",
    "/api/chat",
    "/api/chat/messages",
    "/api/chat/messages/*",
    "/api/chat/messages/health",
    "/api/chat/messages/{message_id}",
    "/api/chat/stream",
    "/api/circuit-breakers/status",
    "/api/circuit-breakers/{breaker_name}",
    "/api/circuit-breakers/{breaker_name}/reset",
    "/api/corpus",
    "/api/database",
    "/api/demo",
    "/api/demo/reports/",
    "/api/discovery",
    "/api/docs",
    "/api/errors",
    "/api/events",
    "/api/example-messages",
    "/api/factory-status",
    "/api/factory-status/compliance",
    "/api/generation",
    "/api/github",
    "/api/health",
    "/api/health/live",
    "/api/health/ready",
    "/api/invoices/",
    "/api/llm-cache",
    "/api/mcp",
    "/api/mcp/",
    "/api/mcp/config",
    "/api/mcp/servers",
    "/api/mcp/ws",
    "/api/messages",
    "/api/metrics",
    "/api/openapi.json",
    "/api/poll",
    "/api/references",
    "/api/shutdown/status",
    "/api/slo",
    "/api/status",
    "/api/supply",
    "/api/supply/compare",
    "/api/supply/enrich",
    "/api/supply/research",
    "/api/synthetic-data",
    "/api/synthetic/corpus",
    "/api/system",
    "/api/threads",
    "/api/tools",
    "/api/tools/",
    "/api/users/",
    "/api/users/create",
    "/api/users/me",
    "/api/users/password",
    "/api/v1",
    "/api/v1/auth",
    "/api/v1/auth/",
    "/api/v1/auth/websocket",
    "/api/v1/jwt",
    "/api/v1/monitoring/database",
    "/api/v1/service",
    "/api/v1/websocket",
    "/api/v1/websocket/protected",
    "/api/v1/ws",
    "/api/v2/users/{user_id}/messages",
    "/api/websocket",
    "/api/websocket/status",
    "/api/ws",
    "/app",
    "/app/",
    "/app/alembic.ini",
    "/app/config/alembic.ini",
    "/app/config/staging_health_config.yaml",
    "/app/db/",
    "/app/public",
    "/app/services/",
    "/auth",
    "/auth/",
    "/auth/agents/",
    "/auth/agents/{agent_id}",
    "/auth/api-call",
    "/auth/callback",
    "/auth/callback/github",
    "/auth/callback/google",
    "/auth/callback?",
    "/auth/callback?token=",
    "/auth/check-authorization",
    "/auth/check-blacklist",
    "/auth/check-permission",
    "/auth/config",
    "/auth/create-agent",
    "/auth/create-token",
    "/auth/dev-login",
    "/auth/dev/login",
    "/auth/dev_login",
    "/auth/domain/check",
    "/auth/e2e/test-auth",
    "/auth/error?",
    "/auth/error?message=",
    "/auth/error?message=redirect_uri_mismatch",
    "/auth/google",
    "/auth/google/callback",
    "/auth/hash-password",
    "/auth/health",
    "/auth/impersonate",
    "/auth/login",
    "/auth/login/google",
    "/auth/login?provider=",
    "/auth/logout",
    "/auth/me",
    "/auth/oauth/callback",
    "/auth/oauth/config",
    "/auth/oauth/providers",
    "/auth/oauth/status",
    "/auth/refresh",
    "/auth/register",
    "/auth/service-token",
    "/auth/status",
    "/auth/tier/validate",
    "/auth/token",
    "/auth/user/enterprise",
    "/auth/user/info",
    "/auth/user/profile",
    "/auth/users/",
    "/auth/users/{user_id}",
    "/auth/validate",
    "/auth/validate-service-token",
    "/auth/validate/domain",
    "/auth/verify",
    "/auth/verify-password",
    "/auth_service/",
    "/authenticate",
    "/auto-refresh",
    "/backend",
    "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
    "/blacklist-token",
    "/bulk",
    "/c",
    "/c/GitHub/netra-apex",
    "/c/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1",
    "/cache",
    "/cache/clear",
    "/cache/invalidate/pattern",
    "/cache/invalidate/tag",
    "/cache/metrics",
    "/callback",
    "/callback/google",
    "/cancel",
    "/cancel/{job_id}",
    "/categories",
    "/change-password",
    "/chat",
    "/chat/message",
    "/check-blacklist",
    "/circuit-breakers",
    "/circuit_breakers",
    "/claude-review",
    "/cleanup",
    "/clear",
    "/clickhouse",
    "/clickhouse_tables",
    "/clients",
    "/cloudsql/",
    "/cloudsql/([^:]+):([^:]+):([^&/?]+)",
    "/cloudsql/netra-staging:us-central1:netra-staging-db",
    "/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "/comments",
    "/compare",
    "/comprehensive_validation_report.json",
    "/config",
    "/config - This configuration endpoint",
    "/config/public",
    "/config/settings.json",
    "/config/update",
    "/config/user",
    "/config/validate",
    "/config/websocket",
    "/connection-pool/metrics",
    "/connections",
    "/connections/refresh",
    "/connections/status",
    "/connectors/staging-connector",
    "/containers/",
    "/content",
    "/content_corpus",
    "/convert",
    "/corpus",
    "/cors/test",
    "/create",
    "/dashboard",
    "/dashboard/summary",
    "/dashboard/{dashboard_id}",
    "/data",
    "/data/corpus",
    "/dataRetentionSettings",
    "/database",
    "/database - Detailed database health",
    "/database-env",
    "/day, $",
    "/debug/async_tasks",
    "/debug/routes",
    "/definitions",
    "/demo",
    "/dependencies/status",
    "/dev/login",
    "/dev/null",
    "/dev_launcher/",
    "/dev_login",
    "/docs",
    "/document",
    "/documents/readme.txt",
    "/does-not-exist",
    "/download?format=",
    "/emergency/alert",
    "/emergency/health-check",
    "/errors",
    "/errors/{error_id}",
    "/errors/{error_id}/resolve",
    "/etc/",
    "/etc/passwd",
    "/etc/secrets/netra-staging-sa-key.json",
    "/etc/shadow",
    "/events",
    "/example",
    "/execute",
    "/export",
    "/export/report",
    "/exports/",
    "/extract",
    "/extract-token",
    "/extract-user-id",
    "/factory",
    "/favicon.ico",
    "/force-cancel",
    "/frontend/",
    "/generate",
    "/generate-simple",
    "/groups/",
    "/health",
    "/health,/metrics,/docs,/openapi.json",
    "/health-score",
    "/health/",
    "/health/alerts/subscribe",
    "/health/auth",
    "/health/backend",
    "/health/clickhouse",
    "/health/clickhouse/analytics",
    "/health/clickhouse/connection",
    "/health/clickhouse/dependencies",
    "/health/clickhouse/metrics",
    "/health/clickhouse/reconnect",
    "/health/component/{component_name}",
    "/health/critical",
    "/health/database",
    "/health/external-apis",
    "/health/live",
    "/health/llm",
    "/health/metrics",
    "/health/ready",
    "/health/services",
    "/health/startup",
    "/health/status/summary",
    "/health/summary",
    "/health/system",
    "/health/websocket",
    "/help",
    "/history",
    "/home/",
    "/industry/{industry}/templates",
    "/info",
    "/ingest_data",
    "/initiate?pr_number=",
    "/invalid",
    "/invalid/path",
    "/isolated",
    "/isolation/alerts",
    "/isolation/dashboard",
    "/isolation/dashboard/config",
    "/isolation/health",
    "/isolation/health-check",
    "/isolation/metrics",
    "/isolation/violations",
    "/issues/",
    "/jobs/{job_id}",
    "/k",
    "/latest",
    "/live",
    "/live - Liveness probe (basic)",
    "/locations/",
    "/login",
    "/login route returns 404 - Next.js routing issue",
    "/login...",
    "/logout",
    "/logs",
    "/mcp",
    "/mcp/call",
    "/mcp/events",
    "/me",
    "/message",
    "/messages",
    "/messages/health",
    "/messages/stream",
    "/messages/{message_id}",
    "/metricDescriptors/run.googleapis.com/request_count",
    "/metrics",
    "/metrics-history",
    "/metrics/business-value/objectives",
    "/metrics/current",
    "/metrics/history",
    "/metrics/prometheus",
    "/metrics/quality/compliance",
    "/metrics/synthetic",
    "/metrics/users",
    "/metrics/velocity/trend",
    "/metrics/{circuit_name}",
    "/metrics/{metric_name}",
    "/migrate-legacy",
    "/migrations/",
    "/mock",
    "/mock$",
    "/mock?",
    "/models",
    "/module/{module_name}/details",
    "/monitoring",
    "/monitoring/isolation",
    "/monitoring/start",
    "/monitoring/stop",
    "/monitoring/websocket",
    "/monitoring/websocket/alerts",
    "/monitoring/websocket/alerts/active",
    "/monitoring/websocket/config/status",
    "/monitoring/websocket/dashboard",
    "/monitoring/websocket/emergency/health-check",
    "/monitoring/websocket/health",
    "/monitoring/websocket/health/availability",
    "/monitoring/websocket/health/detailed",
    "/monitoring/websocket/logs/debug",
    "/monitoring/websocket/metrics/",
    "/monitoring/websocket/metrics/business-impact",
    "/monitoring/websocket/metrics/connections",
    "/monitoring/websocket/metrics/errors",
    "/monitoring/websocket/metrics/latency",
    "/monitoring/websocket/metrics/satisfaction",
    "/monitoring/websocket/metrics/throughput",
    "/monitoring/websocket/metrics/users",
    "/month",
    "/netra-",
    "/netra-apex/",
    "/netra_backend/",
    "/netra_backend/app/db/clickhouse.py",
    "/node_modules/",
    "/nonexistent",
    "/nonexistent-endpoint",
    "/notifications/settings",
    "/oauth/google/config",
    "/oauth/providers",
    "/oauth/status",
    "/openapi.json",
    "/optimization",
    "/orchestration-alignment",
    "/pattern/{pattern}",
    "/performance",
    "/performance-stats",
    "/performance/summary",
    "/permissions",
    "/permissions/{tool_name}",
    "/ping",
    "/pool-metrics",
    "/pool-status",
    "/preferences",
    "/preview",
    "/proc/",
    "/proc/self/cgroup",
    "/profile",
    "/prompts",
    "/prompts/get",
    "/protected",
    "/public",
    "/public-chat",
    "/pulls/",
    "/q",
    "/raw",
    "/readiness",
    "/ready",
    "/ready - Readiness probe with database health",
    "/record/{slo_name}",
    "/redirect",
    "/redis",
    "/redoc",
    "/references",
    "/references/search",
    "/references/{reference_id}",
    "/refresh-context",
    "/register",
    "/registry",
    "/remediation/{module_name}",
    "/report",
    "/reports/generate",
    "/requirements.txt",
    "/resources",
    "/resources/fetch",
    "/resources/read",
    "/revoke-sessions",
    "/revoke-token",
    "/robots.txt",
    "/roi/calculate",
    "/role",
    "/run_agent",
    "/run_agent_v2",
    "/runs",
    "/s",
    "/sample",
    "/sandbox",
    "/sandbox/script.py",
    "/schema-validation",
    "/score",
    "/scripts/",
    "/search",
    "/sec",
    "/secrets/",
    "/security",
    "/sentiment",
    "/servers",
    "/servers/{server_name}/connect",
    "/servers/{server_name}/disconnect",
    "/servers/{server_name}/health",
    "/servers/{server_name}/resources",
    "/servers/{server_name}/status",
    "/servers/{server_name}/tools",
    "/services",
    "/services/{service_name}",
    "/session/{session_id}/feedback",
    "/session/{session_id}/status",
    "/sessions",
    "/sessions/{session_id}",
    "/settings",
    "/settings/default_log_table",
    "/settings/log_table",
    "/settings/log_tables",
    "/settings/time_period",
    "/shared/",
    "/sign-request",
    "/simple-chat",
    "/site-packages/",
    "/spec",
    "/staging",
    "/staging/backend:pr-",
    "/staging/frontend:pr-",
    "/staging/health",
    "/staging/health/critical",
    "/staging/health/database",
    "/staging/health/metrics",
    "/staging/health/metrics?metric_type=configuration",
    "/staging/health/metrics?metric_type=performance",
    "/staging/health/metrics?metric_type=resources",
    "/staging/health/services",
    "/staging/health/websocket",
    "/start",
    "/startup",
    "/startup - Startup validation",
    "/statistics",
    "/stats",
    "/status",
    "/status/{circuit_name}",
    "/status/{job_id}",
    "/status/{slo_name}",
    "/stop",
    "/stream",
    "/summary-stats",
    "/support",
    "/symbols/find-references",
    "/symbols/go-to-definition",
    "/symbols/hierarchy/{file_path:path}",
    "/symbols/index/rebuild",
    "/symbols/index/stats",
    "/symbols/index/update-file",
    "/symbols/navigate",
    "/symbols/search",
    "/synthetic",
    "/synthetic_data",
    "/sys/",
    "/system",
    "/system/comprehensive",
    "/system/status",
    "/tables",
    "/templates",
    "/test",
    "/test-connection",
    "/test-results/",
    "/test-simple",
    "/test/",
    "/test/concurrent-load",
    "/test_",
    "/tests",
    "/tests/",
    "/tests/**/*.py",
    "/thread/{thread_id}/runs",
    "/threads",
    "/threads/",
    "/tmp/act-artifacts/",
    "/tmp/mypy_report",
    "/tmp/rollback_config.json",
    "/toggle",
    "/token",
    "/tools",
    "/tools/call",
    "/tools/discover",
    "/tools/execute",
    "/tools/{server_name}/{tool_name}/schema",
    "/transactions/active",
    "/transactions/stats",
    "/trends",
    "/triage",
    "/ttl",
    "/tutorial",
    "/types/Message",
    "/types/agent",
    "/types/chat",
    "/usage",
    "/user",
    "/user/plan",
    "/users",
    "/usr/src/app/alembic.ini",
    "/usr/src/app/config/alembic.ini",
    "/v2/",
    "/v2/execute",
    "/v2/thread/{thread_id}/runs",
    "/v2/{run_id}/state",
    "/v2/{run_id}/status",
    "/validate",
    "/validate-batch",
    "/validate-connection",
    "/validate-request",
    "/validate-service-token",
    "/var/lib/postgresql/data",
    "/var/run/docker.sock:/var/run/docker.sock:ro",
    "/venv/",
    "/version",
    "/version/",
    "/versions/",
    "/versions/latest",
    "/violations",
    "/websocket",
    "/websocket/",
    "/websocket/status",
    "/windows/system32",
    "/ws",
    "/ws/",
    "/ws/auth/circuit-breaker",
    "/ws/auth/health",
    "/ws/auth/permissiveness",
    "/ws/beacon",
    "/ws/config",
    "/ws/factory",
    "/ws/factory/health",
    "/ws/factory/status",
    "/ws/health",
    "/ws/isolated",
    "/ws/isolated/config",
    "/ws/isolated/health",
    "/ws/isolated/stats",
    "/ws/stats",
    "/ws/test",
    "/ws/{user_id}",
    "/ws[^\"]*",
    "/{agent_name}/circuit_breaker/status",
    "/{corpus_id}",
    "/{corpus_id}/clone",
    "/{corpus_id}/content",
    "/{corpus_id}/document/{document_id}/symbols",
    "/{corpus_id}/generate",
    "/{corpus_id}/statistics",
    "/{corpus_id}/status",
    "/{corpus_id}/upload",
    "/{run_id}/state",
    "/{run_id}/status",
    "/{thread_id}",
    "/{thread_id}/auto-rename",
    "/{thread_id}/messages",
    "1. Deploy the updated services: python scripts/deploy_to_gcp.py --project netra-staging --build-local",
    "1. Execute import migration: python scripts/websocket_notifier_import_migration.py",
    "1. Monitor resources: python scripts/monitor_docker_resources.py",
    "1. Pre-deployment validation: scripts/check_config_before_deploy.py",
    "1. Run full test suite: python tests/unified_test_runner.py",
    "1. Run mission critical tests: python tests/mission_critical/test_websocket_agent_events_suite.py",
    "1. Run: python scripts/dev_launcher.py",
    "1. Run: python scripts/fix_all_import_issues.py --absolute-only",
    "1. Run: python scripts/migrate_llm_models.py",
    "1. Run: python scripts/scan_os_environ_violations.py",
    "1. Run: python scripts/update_staging_clickhouse_secrets.py",
    "1. Updating websocket_core/__init__.py...",
    "2. Deploy using: python scripts/deploy_to_gcp.py --project netra-staging --service backend",
    "2. Execute factory migration: python scripts/websocket_notifier_factory_migration.py",
    "2. Regression testing: tests/regression/test_config_regression.py",
    "2. Run E2E tests: python tests/unified_test_runner.py --category e2e --env staging",
    "2. Run tests: python tests/mission_critical/test_websocket_agent_events_suite.py",
    "2. Run: python scripts/detect_duplicate_code.py --report-only",
    "2. Test ClickHouse connectivity with: python scripts/test_staging_clickhouse.py",
    "2. Test with: python scripts/metadata_validator.py --validate-all",
    "2. Update SPEC/learnings/import_management.xml with new patterns",
    "2. Verify _is_test_context() logic in configuration/base.py",
    "2. Verify connectivity: python scripts/validate_staging_db_connection.py",
    "2. View: app/tests/examples/test_tdd_workflow_demo.py",
    "3. **Test Deployment**: Run `python scripts/deploy_to_gcp.py --project netra-staging --build-local --dry-run`",
    "3. Configuration validator: app/core/configuration/validator.py",
    "3. Consult SPEC/atomic_change_specification.xml for guidance",
    "3. Follow consolidation patterns in SPEC/learnings/websocket_consolidation.xml",
    "3. Or run: python scripts/setup_gcp_service_account.py",
    "3. Run: python scripts/deploy_staging_with_health.py",
    "3. Run: python scripts/validate_llm_test_models.py",
    "3. Validate user isolation: python tests/integration/test_websocket_user_isolation.py",
    "4. Explore: test_framework/decorators.py for all options",
    "4. Re-run validation: python scripts/validate_type_deduplication.py",
    "4. Run 'python scripts/metadata_validator.py --validate-all' to check existing files",
    "4. Run: python netra_backend/tests/core/test_configuration_regression.py",
    "4. See SPEC/independent_services.xml for details",
    "4. Startup validation: app/core/configuration/startup_validator.py",
    "4. Use a different port: python scripts/dev_launcher.py --backend-port 8001",
    "5. Check deployment configuration in scripts/deploy_to_gcp.py",
    ":/sandbox/script.py:ro",
    "<instruction>Check index.xml for complete category listing and learning IDs</instruction>",
    "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Architecture Health Dashboard - Netra</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
    "Add: python shared/lifecycle/interface_evolution_governance.py to .pre-commit-config.yaml",
    "Agent Modification Tracking Helper\n\nThis script helps AI coding agents add or update tracking headers in modified files\naccording to the specification in SPEC/agent_tracking.xml.\n\nUsage:\n    python scripts/agent_tracking_helper.py <file_path> --agent \"Claude Code\" --model \"claude-opus-4-1\" --task-id \"conv_123\" --prompt \"Fix database query\" --changes \"Optimized query performance\"",
    "Agent Test Validator - Comprehensive test runner and quality validator for critical agent tests.\n\nThis module discovers, executes, and validates all agent test suites with comprehensive metrics.\nMaximum 300 lines, 8 lines per function as per SPEC/conventions.xml.",
    "Automated WebSocketNotifier import path migration.\nConverts all non-canonical imports to SSOT canonical path.\n\nUsage:\n    python scripts/websocket_notifier_import_migration.py\n\nPart of GitHub Issue #216 SSOT Remediation Plan - Phase 1.1",
    "Automated factory pattern enforcement for WebSocketNotifier.\nConverts direct instantiation to factory method usage.\n\nUsage:\n    python scripts/websocket_notifier_factory_migration.py\n\nPart of GitHub Issue #216 SSOT Remediation Plan - Phase 2.1",
    "Automatically migrate staging PostgreSQL secrets from URL format to individual variables.\n\nThis script creates/updates individual PostgreSQL secrets in GCP Secret Manager\nfor staging environment to use individual variables instead of DATABASE_URL.\n\nUsage:\n    python scripts/migrate_staging_postgres_secrets_auto.py",
    "CANONICAL: python scripts/deploy_to_gcp_actual.py",
    "CANONICAL: python scripts/deploy_to_gcp_actual.py --project netra-staging",
    "Circular Dependency Checker for Frontend Modules\n\nThis script analyzes the frontend codebase to detect circular dependencies\nthat could cause initialization failures and white screen issues.\n\nUsage:\n    python scripts/check_circular_dependencies.py [--fix]\n    \nOptions:\n    --fix    Attempt to automatically fix simple circular dependencies",
    "Code Review System Package\nImplements SPEC/review.xml for automated code quality validation.",
    "Comprehensive SSOT compliance validation for WebSocketNotifier.\nValidates all aspects of SSOT implementation across the codebase.\n\nUsage:\n    python scripts/websocket_notifier_ssot_validation.py\n\nPart of GitHub Issue #216 SSOT Remediation Plan - Continuous Validation",
    "Configuration Architecture Validation Script\n\nPurpose: Prevent configuration debt like Issue #558 by validating SSOT compliance\nCreated: 2025-09-12 (Issue #558 Resolution)\nUsage: python scripts/validate_configuration_architecture.py",
    "Configuration Change Monitoring Script\n\nDemonstrates how to use the ConfigChangeTracker to monitor configuration\nchanges and prevent regressions like the OAuth 503 errors.\n\nUsage:\n    python scripts/monitor_config_changes.py --snapshot  # Take snapshot\n    python scripts/monitor_config_changes.py --check     # Check for changes\n    python scripts/monitor_config_changes.py --report    # Generate report",
    "Configuration file saved at: scripts/ga4_config.json",
    "Configuration schemas and data models.\n\n**UPDATED**: This file has been migrated to use IsolatedEnvironment\nfor unified environment management. Follows SPEC/unified_environment_management.xml.\n\nFor new code, use:\nfrom netra_backend.app.core.configuration import unified_config_manager",
    "Could not find scripts/deploy_to_gcp.py",
    "DO NOT SET THIS. Use GoogleOAuthProvider.get_redirect_uri() as SSOT. See /auth_service/auth_core/oauth/google_oauth.py:78",
    "Debug script for reproducing uvicorn recursion errors.\n\nThis script was moved from tests/ to scripts/ to prevent pytest from\ndiscovering it during test collection, which was causing port binding conflicts.\n\nUsage: python scripts/debug_uvicorn_recursion.py",
    "DeepAgentState Usage Detection Script\n\nThis script analyzes the codebase to identify all DeepAgentState usage patterns\nand generate a comprehensive migration report.\n\nUsage:\n    python scripts/detect_deepagentstate_usage.py\n    python scripts/detect_deepagentstate_usage.py --output migration_report.md\n    python scripts/detect_deepagentstate_usage.py --json migration_data.json",
    "Dependency Validation Module\nValidates Python/Node.js versions and required dependencies.",
    "Deploy with: python scripts/deploy_to_gcp.py --project",
    "Deployment Configuration Validator\nEnsures GCP deployments match the proven working configuration.\n\nUsage:\n    python scripts/validate_deployment_config.py --environment staging\n    python scripts/validate_deployment_config.py --check-secrets",
    "Deployment Performance Validation Script\n\nValidates deployment performance against optimal settings and benchmarks.\nCreated for Iteration 3 audit follow-up - ensures deployment health and performance.\n\nUsage:\n    python scripts/validate_deployment_performance.py --environment staging\n    python scripts/validate_deployment_performance.py --environment local --detailed",
    "Disable: python scripts/manage_precommit.py disable --reason 'Your reason'",
    "Docker File Organization Compliance Checker\n\nValidates that Docker files are properly organized according to SPEC/docker_file_organization.xml",
    "Docker Resource Monitoring Script\nBased on DOCKER_CRASH_DEEP_10_WHYS_ANALYSIS.md recommendations\n\nThis script monitors actual resource usage of running containers and provides\nrecommendations to prevent resource exhaustion crashes.\n\nUsage:\n    python scripts/monitor_docker_resources.py              # One-time check\n    python scripts/monitor_docker_resources.py --continuous # Continuous monitoring\n    python scripts/monitor_docker_resources.py --analyze    # Deep analysis with recommendations",
    "Duplicate Code Detection Script\nPrevents regression of duplicate code patterns identified in WebSocket consolidation\n\nUsage:\n    python scripts/detect_duplicate_code.py [--threshold 0.8] [--report-only]\n    \nThis script detects:\n- Duplicate class names across files\n- Similar function implementations\n- Multiple wrappers for same functionality\n- Parallel implementations of same feature",
    "E2E Docker Validation Script\n============================\n\nThis script validates that the new E2E Docker setup works correctly:\n1. Tests E2EDockerHelper functionality\n2. Validates port isolation\n3. Checks service health  \n4. Verifies proper cleanup\n\nUsage:\n    python scripts/validate_e2e_docker.py\n    python scripts/validate_e2e_docker.py --quick\n    python scripts/validate_e2e_docker.py --cleanup-only",
    "EXAMPLES:\n    python scripts/coverage_intelligence.py                    # Full detailed report\n    python scripts/coverage_intelligence.py --priority-only    # Quick priority view  \n    python scripts/coverage_intelligence.py --format json      # Machine readable\n    python scripts/coverage_intelligence.py --threshold 85     # Custom threshold\n    python scripts/coverage_intelligence.py --refresh-coverage # Force test run first",
    "EXAMPLES:\n  python scripts/docker_dev_launcher.py              # Start with defaults\n  python scripts/docker_dev_launcher.py --build      # Rebuild images\n  python scripts/docker_dev_launcher.py --verbose    # Show all logs\n  python scripts/docker_dev_launcher.py --cleanup    # Stop and clean up",
    "Emergency Security Validation Script - Issue #271 Cluster\nCRITICAL SECURITY: Immediate validation of user isolation vulnerability\n\nThis script provides emergency security validation for the Issue #271 \nvulnerability cluster, enabling immediate assessment of security risk\nand implementation of protective measures.\n\nUSAGE:\n    python scripts/emergency_security_validation_issue_271.py --mode [validate|monitor|protect]\n    \nBUSINESS IMPACT: Protects $500K+ ARR and enterprise customer data",
    "Enable:  python scripts/manage_precommit.py enable",
    "Enhanced process cleanup utilities with comprehensive Windows support.\n\nThis module provides robust process cleanup functionality for Windows,\nwith special handling for Node.js, npm, and related development processes.\n\nBusiness Value: Platform/Internal - Development Velocity\nPrevents developer time loss due to hanging processes and port conflicts.",
    "Enhanced staging deployment script with comprehensive validation.\n\nThis script combines the existing deploy_to_gcp.py functionality with \nadditional staging-specific validation and fixes.\n\nUsage:\n    python scripts/deploy_staging_with_validation.py [--fix-issues] [--skip-build]",
    "Example: python scripts/deploy_to_gcp.py --project {} --build-local",
    "Examples:\n    # Validate staging environment\n    python scripts/deployment_validation_integration.py --environment staging\n    \n    # Validate production with strict mode\n    python scripts/deployment_validation_integration.py --environment production --strict\n    \n    # Integration in deployment scripts:\n    from scripts.deployment_validation_integration import integrate_with_deployment_script\n    \n    if not integrate_with_deployment_script('staging'):\n        sys.exit(1)",
    "Examples:\n    python scripts/refresh_dev.py           # Full refresh (most common)\n    python scripts/refresh_dev.py backend   # Just backend service\n    python scripts/refresh_dev.py --clean   # Clean rebuild",
    "Examples:\n    python scripts/staging_validation_e2e.py --all\n    python scripts/staging_validation_e2e.py --health-only\n    python scripts/staging_validation_e2e.py --auth-flow --websocket-test\n    python scripts/staging_validation_e2e.py --export results.json",
    "Examples:\n    python scripts/staging_validation_part2_corrected.py --all\n    python scripts/staging_validation_part2_corrected.py --websocket-flows\n    python scripts/staging_validation_part2_corrected.py --thread-management --agent-features\n    python scripts/staging_validation_part2_corrected.py --export results.json",
    "Examples:\n    python scripts/staging_validation_part2_user_flows.py --all\n    python scripts/staging_validation_part2_user_flows.py --websocket-flows\n    python scripts/staging_validation_part2_user_flows.py --thread-management --agent-features\n    python scripts/staging_validation_part2_user_flows.py --export results.json",
    "Examples:\n    python scripts/validate_docker_workflow.py                  # Full validation\n    python scripts/validate_docker_workflow.py --quick          # Skip performance tests  \n    python scripts/validate_docker_workflow.py --report-only    # Generate report without tests\n    python scripts/validate_docker_workflow.py --fix-violations # Auto-fix issues",
    "Examples:\n  # Deployment gate (production)\n  python scripts/ci_ssot_compliance_validator.py --mode=deployment-gate --compliance-level=strict\n  \n  # Pull request validation\n  python scripts/ci_ssot_compliance_validator.py --mode=pr-validation --pr-number=123\n  \n  # Branch protection\n  python scripts/ci_ssot_compliance_validator.py --mode=branch-protection --branch=main",
    "Examples:\n  # Monitor WebSocket patterns only (recommended)\n  python scripts/monitor_ssot_compliance.py --monitor-websocket\n  \n  # Full backend scan with verbose output  \n  python scripts/monitor_ssot_compliance.py --full-scan --verbose\n  \n  # Continuous monitoring (production)\n  python scripts/monitor_ssot_compliance.py --continuous --interval 300\n  \n  # Save current state as baseline\n  python scripts/monitor_ssot_compliance.py --save-baseline",
    "Examples:\n  # Run all staging E2E tests\n  python run_staging_tests.py\n  \n  # Run specific test file\n  python run_staging_tests.py --test tests/e2e/test_staging_e2e_comprehensive.py\n  \n  # Run mission critical tests\n  python run_staging_tests.py --mission-critical\n  \n  # Run with unified test runner\n  python run_staging_tests.py --unified\n  \n  # Check service health only\n  python run_staging_tests.py --health-check",
    "Examples:\n  # Run full validation against staging\n  python scripts/run_websocket_validation.py --environment staging\n\n  # Quick validation with custom output directory\n  python scripts/run_websocket_validation.py --output-dir custom_reports --timeout 300\n\n  # Validation for specific test categories\n  python scripts/run_websocket_validation.py --categories functional integration\n\n  # Continuous validation mode (for CI/CD)\n  python scripts/run_websocket_validation.py --ci-mode --fail-fast",
    "Examples:\n  # Scan with default settings\n  python scripts/scan_string_literals.py\n  \n  # Scan specific directories\n  python scripts/scan_string_literals.py --dirs netra_backend/app auth_service\n  \n  # Include test files in main index\n  python scripts/scan_string_literals.py --include-tests\n  \n  # Custom output location\n  python scripts/scan_string_literals.py --output custom_index.json",
    "Examples:\n  # Show what would be changed (safe)\n  python scripts/migrate_websocket_v2_critical_services.py --dry-run\n  \n  # Validate current state only\n  python scripts/migrate_websocket_v2_critical_services.py --validate-only\n  \n  # Perform actual migration (requires --force)\n  python scripts/migrate_websocket_v2_critical_services.py --force\n  \n  # Use custom backup directory\n  python scripts/migrate_websocket_v2_critical_services.py --dry-run --backup-dir ./my_backups",
    "Examples:\n  # Start real-time monitoring\n  python scripts/production_monitoring.py start --stage canary\n  \n  # Check current metrics\n  python scripts/production_monitoring.py metrics --detailed\n  \n  # Generate daily report\n  python scripts/production_monitoring.py daily-report --email-recipients team@netra.ai",
    "Examples:\n  Default deployment (with checks):\n    python scripts/deploy_staging_with_sa.py\n    \n  Quick deployment (no checks):\n    python scripts/deploy_staging_with_sa.py --no-checks\n    \n  Specify service account key:\n    python scripts/deploy_staging_with_sa.py --key path/to/key.json",
    "Examples:\n  Local validation:\n    python scripts/validate_deployment_performance.py --environment local\n    \n  Staging validation with details:\n    python scripts/validate_deployment_performance.py --environment staging --detailed\n    \n  Save results to file:\n    python scripts/validate_deployment_performance.py --environment staging --output results.json",
    "Examples:\n  python scripts/check_auth_ssot_compliance.py\n  python scripts/check_auth_ssot_compliance.py --exclude-tests\n  python scripts/check_auth_ssot_compliance.py --verbose",
    "Examples:\n  python scripts/fix_port_8000_windows.py                    # Check only\n  python scripts/fix_port_8000_windows.py --kill-processes   # Kill processes using port\n  python scripts/fix_port_8000_windows.py --check-firewall   # Check firewall rules  \n  python scripts/fix_port_8000_windows.py --force            # Force kill processes and fix firewall",
    "Examples:\n  python scripts/import_management.py check       # Check for import issues\n  python scripts/import_management.py fix         # Fix import issues\n  python scripts/import_management.py verify      # Verify critical imports\n  python scripts/import_management.py all         # Run complete workflow\n  python scripts/import_management.py fix --dry-run  # Preview fixes",
    "Examples:\n  python scripts/redis_ssot_import_migration.py --dry-run    # Preview changes\n  python scripts/redis_ssot_import_migration.py --verbose   # Apply with detailed output\n  python scripts/redis_ssot_import_migration.py             # Apply changes silently",
    "Examples:\n  python scripts/run_critical_agent_tests.py\n  python scripts/run_critical_agent_tests.py --dry-run\n  python scripts/run_critical_agent_tests.py --memory-limit 6 --verbose\n  python scripts/run_critical_agent_tests.py --skip-cleanup\n\nThis script protects $500K+ ARR by validating core agent functionality.",
    "Examples:\n  python scripts/run_database_api_compatibility_tests.py\n  python scripts/run_database_api_compatibility_tests.py --suite staging\n  python scripts/run_database_api_compatibility_tests.py --environment staging --real-services\n  python scripts/run_database_api_compatibility_tests.py --suite golden_path --environment staging",
    "Examples:\n  python scripts/run_docker_integration_tests.py --quick\n  python scripts/run_docker_integration_tests.py --comprehensive  \n  python scripts/run_docker_integration_tests.py --ci-mode\n  python scripts/run_docker_integration_tests.py --docker-check",
    "Examples:\n  python scripts/team_updates.py                    # Last 24 hours\n  python scripts/team_updates.py --time-frame=last_hour\n  python scripts/team_updates.py --time-frame=last_week --output=report.md\n  \nTime frames:\n  last_hour     - Changes in the last hour\n  last_5_hours  - Changes in the last 5 hours  \n  last_day      - Changes in the last 24 hours (default)\n  last_week     - Changes in the last week\n  last_month    - Changes in the last month",
    "Examples:\n  python scripts/validate_staging_deployment.py\n  python scripts/validate_staging_deployment.py --verbose\n  python scripts/validate_staging_deployment.py --json\n  python scripts/validate_staging_deployment.py --no-comprehensive\n  python scripts/validate_staging_deployment.py --project netra-staging --verbose",
    "Examples:\n  python scripts/validate_websocket_staging.py\n  python scripts/validate_websocket_staging.py --environment staging\n  python scripts/validate_websocket_staging.py --environment production",
    "Five Whys Root Cause Prevention Demonstration\n\nThis script demonstrates how the WebSocketManagerProtocol prevents the root cause\nidentified in the Five Whys analysis: \"lack of formal interface contracts causing\nimplementation drift during migrations.\"\n\nUsage:\n    python scripts/demonstrate_five_whys_prevention.py",
    "Fix WebSocket timeout configuration issues in GCP staging.\nThis script validates and updates the staging deployment configuration.\n\nRun: python scripts/fix_staging_websocket_timeouts.py",
    "Fix staging GSM secrets - Create the ACTUAL secrets that the deployment expects.\n\nThe deployment script uses --set-secrets which expects these exact GSM secret names\nto exist. This script ensures they exist with proper values.\n\nUsage:\n    python scripts/fix_staging_gsm_secrets.py --project netra-staging --create",
    "For more information, see SPEC/testing.xml Mock-Real Spectrum section.",
    "GCP Load Balancer Configuration Validator\nValidates that all 6 critical requirements are properly configured in Terraform files.\n\nUsage:\n    python scripts/validate_load_balancer_config.py",
    "GCP Load Balancer Configuration Validator\nValidates that all 6 critical requirements are properly configured in Terraform files.\n\nUsage:\n    python scripts/validate_load_balancer_config_simple.py",
    "Generate OpenAPI/Swagger specification from FastAPI app and sync to ReadMe.\n\nThis script:\n1. Loads the FastAPI application\n2. Extracts the OpenAPI specification\n3. Saves it to a JSON file\n4. Optionally syncs it to ReadMe documentation platform\n\nUsage:\n    python generate_openapi_spec.py [--sync-readme] [--readme-api-key KEY] [--readme-version VERSION]",
    "Get cached token data asynchronously - FIXED FOR ASYNC/AWAIT COMPATIBILITY.\n        \n        CRITICAL FIX: Changed from synchronous to async method to match \n        auth_client_core.py expectations. This fixes the \"object NoneType \n        can't be used in 'await' expression\" error.\n        \n        Args:\n            token: The token to retrieve\n            \n        Returns:\n            Cached data if valid, None otherwise",
    "GitHub Issue #263 Validation Script\n===================================\n\nQuick validation script to confirm that the issue #263 reproduction tests work correctly.\nThis script can be run to verify that:\n\n1. The broken patterns fail as expected\n2. The fixed patterns work as expected  \n3. All test infrastructure is functioning\n\nUsage:\n    python3 scripts/validate_issue_263_reproduction.py",
    "High number of import errors. Run 'python scripts/import_management.py fix-all'",
    "Intelligent Remediation Orchestrator - Multi-Agent Team Coordination\n\nThis orchestrator implements the two operational modes defined in \nSPEC/intelligent_remediation_architecture.xml:\n\n1. Tool Mode: LLM agents as information providers to Claude\n2. Orchestrator Mode: Spawning autonomous Claude instances\n\nV1 Critical Implementation - Focused on core orchestration capabilities",
    "LLM Configuration Fix Script\n============================\nThis script helps diagnose and fix LLM configuration issues.\n\nUsage:\n    python scripts/fix_llm_config.py check     # Check current configuration\n    python scripts/fix_llm_config.py fix       # Apply fixes\n    python scripts/fix_llm_config.py test      # Test LLM functionality",
    "MCP Dependency Diagnostic Script\n\nValidates MCP dependency availability and provides detailed diagnostics\nfor troubleshooting integration test collection issues.\n\nThis script helps identify:\n1. Missing MCP packages\n2. Version incompatibilities\n3. Import errors\n4. Environment-specific issues\n\nUsage:\n    python scripts/diagnose_mcp_dependencies.py",
    "MCP Service Realistic Test Validation Script\n==========================================\n\nThis script validates that the new realistic MCP service integration tests\ncan be discovered, imported, and executed successfully.\n\nUsage:\n    python scripts/validate_mcp_realistic_tests.py\n\nWhat it does:\n1. Validates test file structure and imports\n2. Runs test collection to verify pytest compatibility  \n3. Executes a subset of tests to verify functionality\n4. Provides detailed feedback on test health",
    "Main FastAPI application module.\nEntry point for the Netra AI Optimization Platform.\n\n[U+1F534] CRITICAL AUTH ARCHITECTURE:\n- This is the MAIN BACKEND service, NOT the auth service\n- Auth service runs SEPARATELY on port 8001 (see app/auth/auth_service.py)\n- This backend ONLY uses auth_integration to connect to auth service\n- NEVER implement authentication logic here\n- All auth operations go through auth_client\n\nSee: app/auth_integration/CRITICAL_AUTH_ARCHITECTURE.md",
    "Manual ClickHouse table creation for production/staging.\nRun this directly to create required tables in ClickHouse Cloud.\n\nUsage:\n    python scripts/create_clickhouse_tables.py --env staging\n    python scripts/create_clickhouse_tables.py --env production",
    "Migrate staging PostgreSQL secrets from URL format to individual variables.\n\nThis script creates/updates individual PostgreSQL secrets in GCP Secret Manager\nfor staging environment to use individual variables instead of DATABASE_URL.\n\nUsage:\n    python scripts/migrate_staging_postgres_secrets.py",
    "Migration Readiness Validation Script (Issue #346)\n\nValidates that the migration infrastructure is ready and identifies\nthe exact files that need migration for systematic remediation.\n\nUsage:\n    python scripts/validate_migration_readiness.py",
    "Move functionality to netra_backend/app/db/clickhouse.py",
    "NEW: python tests/unified_test_runner.py --execution-mode audit",
    "Network Constants Validation Script\n\nValidates the new centralized network configuration module.\nBusiness Value: Platform/Internal - Configuration Validation - Ensures consistent network\nconfiguration across all environments and services.\n\nUsage:\n    python scripts/validate_network_constants.py\n    python scripts/validate_network_constants.py --environment production",
    "Next Steps:\n1. Run mission critical tests to validate functionality\n2. Measure test collection performance improvement\n3. Update Issue #450 with migration results\n4. Validate Issue #489 performance improvement\n\nRollback Instructions:\n  python scripts/issue_450_redis_import_migration.py --rollback",
    "Node.js not found. Please install Node.js 18+ from https://nodejs.org/",
    "OAuth Configuration Drift Prevention Script\n\nThis script helps prevent OAuth configuration drift by:\n1. Validating OAuth secrets exist in Secret Manager\n2. Checking auth service health  \n3. Creating configuration snapshot for drift detection\n4. Providing early warning system for configuration changes\n\nUsage:\n    python scripts/prevent_oauth_configuration_drift.py --environment staging\n    python scripts/prevent_oauth_configuration_drift.py --environment staging --create-snapshot",
    "OAuth Health Monitor for Cloud Armor\n\nContinuously monitors OAuth callback health and alerts on issues.\nCan be run as a cron job or continuous monitoring service.\n\nUsage:\n    python scripts/monitor_oauth_health.py --once          # Single check\n    python scripts/monitor_oauth_health.py --continuous    # Run continuously\n    python scripts/monitor_oauth_health.py --alert-webhook <URL>  # Send alerts",
    "OAuth SSOT Configuration Validation Script\n\nThis script validates that the new SSOT OAuth configuration system works correctly\nfor all environments (development, test, staging, production).\n\nUsage:\n    python scripts/validate_oauth_ssot_configuration.py",
    "OR run: python scripts/docker_manual.py start",
    "Or use: python scripts/docker_manual.py start",
    "Output file path (default: SPEC/generated/string_literals.json)",
    "PASS:  Configuration fixed! Run 'python scripts/fix_llm_config.py test' to verify",
    "Path to service account JSON key file (default: config/netra-staging-7a1059b7cf26.json)",
    "Please restore scripts/deploy_to_gcp_actual.py",
    "Please run directly: python scripts/docker_manual.py start --environment dev",
    "Pre-commit hook for duplicate code detection.\nIntegrates with existing detect_duplicate_code.py for fast incremental checks.\n\nUsage:\n    python scripts/precommit_duplicate_detector.py [files...]\n    \nThis script:\n1. Performs fast duplicate detection on changed files\n2. Checks against known duplicate patterns\n3. Integrates with existing architecture compliance",
    "Pre-commit hook script to prevent numbered file naming patterns.\n\nThis script prevents files with non-semantic numbered suffixes like:\n- _1.py, _2.py, _3.py (arbitrary splits)\n- _11_20.py (range patterns)\n- _core_1.py, _utilities_2.py (numbered variants)\n\nUsage:\n    python scripts/prevent_numbered_files.py [files...]\n    \nReturns:\n    0 if all files pass validation\n    1 if any files have problematic naming patterns",
    "Production Deployment Script for Token Optimization System\nExecutes the 5-phase deployment strategy with comprehensive monitoring\n\nCRITICAL: This script implements the approved production deployment strategy\nwith zero-downtime deployment and full business value realization.\n\nUsage:\n    python scripts/deploy_token_optimization_production.py --execute\n    python scripts/deploy_token_optimization_production.py --validate-only\n    python scripts/deploy_token_optimization_production.py --rollback",
    "Remediation System Demonstration\n\nThis script demonstrates the complete Critical Remediation Tracking Framework\nby processing the actual Five Whys analysis and showing how the system prevents\nthe \"Analysis Trap\" organizational anti-pattern.\n\nUsage:\n    python scripts/demonstrate_remediation_system.py --demo full\n    python scripts/demonstrate_remediation_system.py --demo extract-only\n    python scripts/demonstrate_remediation_system.py --demo monitoring",
    "Remove this file and use get_clickhouse_client() from netra_backend/app/db/clickhouse.py",
    "Review SPEC/learnings/websocket_consolidation.xml for consolidation strategy.",
    "Route configuration utilities for FastAPI application factory.\n\nCRITICAL: All route prefixes MUST be managed here centrally.\nIndividual routers should NOT define their own prefixes in APIRouter() initialization.\nSee SPEC/learnings/router_double_prefix_pattern.xml for details.",
    "Run 'python scripts/check_e2e_imports.py' to verify",
    "Run 'python scripts/fix_llm_config.py fix' first",
    "Run 'python scripts/fix_llm_config.py fix' to apply fixes",
    "Run 'python scripts/fix_netra_backend_imports.py' to automatically fix these issues",
    "Run 'python scripts/import_management.py fix' to fix them",
    "Run 'python scripts/scan_string_literals.py' first to generate the index.",
    "Run database migrations on Cloud SQL using a dedicated Cloud Run Job.\n\nThis script:\n1. Builds and pushes a lightweight migrations container\n2. Creates/updates a Cloud Run Job for migrations\n3. Executes the job and waits for completion\n4. Reports success/failure\n\nUsage:\n    python scripts/run_cloud_migrations.py --project netra-staging --env staging\n    python scripts/run_cloud_migrations.py --project netra-prod --env production",
    "Run migration script: python scripts/migrate_cloud_run_urls.py --execute",
    "Run tests with coverage first: python tests/unified_test_runner.py --category unit",
    "Run tests with: python -m pytest netra_backend/tests/integration/test_gemini_optimization.py",
    "Run: python scripts/docker_ssot_enforcer.py cleanup",
    "Run: python scripts/fix_all_import_issues.py --absolute-only",
    "Run: python scripts/fix_frontend_test_imports.py",
    "Run: python scripts/fix_websocket_imports.py",
    "Run: python scripts/standardize_factory_patterns.py --standardize",
    "Run: python scripts/validate_factory_contracts.py --fix",
    "Run: python scripts/validate_secrets.py --environment staging --project",
    "Run: python scripts/validate_staging_urls.py --environment staging --fix",
    "SMD|smd\\.py",
    "SPEC/*.xml",
    "SPEC/MISSION_CRITICAL_NAMED_VALUES_INDEX.xml",
    "SPEC/clickhouse_client_architecture.xml",
    "SPEC/gcp_deployment.xml",
    "SPEC/generated/string_literals.json",
    "SPEC/learnings/clickhouse_ssot_violation_remediation.xml",
    "SPEC/learnings/docker_remediation.xml",
    "SPEC/staging_environment.xml",
    "SSOT Compliance Checker for ID Generation Patterns\n\nThis script addresses the Five Whys root cause by implementing systematic\nvalidation of ID generation patterns across the entire codebase.\n\nRoot Cause Addressed:\n- Inadequate change management during SSOT consolidation \n- Missing API contract enforcement\n- Runtime failures instead of compile-time detection\n\nUsage:\n    python scripts/check_id_generation_ssot_compliance.py\n    python scripts/check_id_generation_ssot_compliance.py --fix",
    "SSOT UUID Compliance Checker for Issue #584 Prevention\n\nThis script checks for direct uuid.uuid4() usage that bypasses SSOT patterns,\nhelping prevent future instances of Issue #584 (ID generation inconsistencies).\n\nUsage:\n    python scripts/check_uuid_ssot_compliance.py [--fix] [--path PATH]\n\nReturns:\n    0: No violations found\n    1: Violations found (or fix applied)\n    2: Error occurred",
    "SSOT Violation Tests Verification Script\n\nThis script verifies that all 5 SSOT violation reproduction tests are properly created\nand can be executed to expose WebSocket auth bypass violations.\n\nUsage:\n    python scripts/verify_ssot_violation_tests.py",
    "Script to fix invalid secrets in Google Secret Manager for staging environment.\n\nThis script addresses critical issues found in the staging secrets audit:\n1. Invalid Redis URL with placeholder password\n2. Duplicate/orphaned secrets\n3. Missing mappings\n\nRun with: python scripts/fix_staging_secrets.py",
    "Script to migrate all IsolatedEnvironment imports to the unified shared implementation.\n\nThis script systematically updates all import statements across the codebase to use\nshared.isolated_environment instead of service-specific implementations.\n\nCRITICAL: This migration enforces SSOT compliance per SPEC/unified_environment_management.xml",
    "Script to update execution engine imports for SSOT consolidation.\n\nThis script updates imports throughout the codebase to use the unified\nexecution engine factory and consolidated execution engine.\n\nUsage:\n    python scripts/update_execution_engine_imports.py [--dry-run] [--verbose]",
    "See SPEC/gcp_deployment.xml for deployment guidelines.",
    "See SPEC/learnings/websocket_agent_integration_critical.xml for fix details.",
    "See: SPEC/frontend_deployment_critical.xml for documentation",
    "Setup E2E Bypass Key for Staging Environment\n\nThis script helps set up the E2E authentication bypass key in Google Secrets Manager\nfor the staging environment. It generates a secure key and stores it properly.\n\nUsage:\n    python scripts/setup_E2E_OAUTH_SIMULATION_KEY.py [--project PROJECT_ID]",
    "Solution: python scripts/docker_ssot_enforcer.py cleanup",
    "Staging URL Validation Script\nPrevents localhost URLs from being used in staging/production environments.\n\nThis script validates that:\n1. No localhost references exist in staging/production environment variables\n2. All URLs use appropriate protocols (https/wss for staging/production)\n3. Domain names match expected patterns for each environment\n\nUsage:\n    python scripts/validate_staging_urls.py --environment staging\n    python scripts/validate_staging_urls.py --environment production --fix",
    "Started implementation - identified async/await issue in smd.py:465",
    "Status:  python scripts/manage_precommit.py status",
    "To prevent this issue in future deployments, update scripts/deploy_to_gcp.py",
    "To re-enable: python scripts/manage_precommit.py enable",
    "Try: python scripts/refresh_dev.py --clean",
    "Type Drift Migration Utility\n\nThis utility helps migrate from string-based types to strongly-typed identifiers\nacross the Netra platform to resolve critical type drift issues.\n\nUsage:\n    python scripts/type_drift_migration_utility.py --scan\n    python scripts/type_drift_migration_utility.py --migrate-context --file path/to/file.py\n    python scripts/type_drift_migration_utility.py --validate",
    "Unified tool execution engine - SSOT for all tool execution.\n\nThis module consolidates all tool execution functionality into a single SSOT,\nmerging the best features from:\n- unified_tool_execution.py (WebSocket notifications)\n- tool_dispatcher_execution.py (core delegation pattern)\n- core/interfaces_tools.py (permission checks and validation)\n\nBusiness Value: Single coherent tool execution system with real-time notifications.",
    "Update placeholder secrets in Google Secret Manager for staging deployment.\n\nThis script helps you update the placeholder secrets that are blocking deployment.\nYou need to provide your actual API keys for the services.\n\nUsage:\n    python scripts/update_placeholder_secrets.py",
    "Usage: python scripts/deduplicate_types.py [--dry-run|--migrate|--validate|--clean]",
    "Usage: python scripts/docker_ssot_enforcer.py [validate|cleanup|enforce]",
    "Usage: python scripts/precommit_duplicate_detector.py [files...]",
    "Validate Secrets Before Deployment\nEnsures all required secrets exist and have non-placeholder values.\n\nThis script MUST be run before deploying to staging or production.\nIt implements the canonical secrets management process defined in SPEC/canonical_secrets_management.xml\n\nBusiness Impact: Prevents deployment failures that cost $5K+ per incident in engineering time.",
    "Validation script for Mock-Real Spectrum compliance.\n\nThis script validates that database tests comply with testing.xml Mock-Real Spectrum\nrequirements, ensuring proper use of L3 real containers vs justified L1 mocks.\n\nUsage:\n    python scripts/validate_mock_real_spectrum_compliance.py",
    "Verify Docker Configuration Compliance with SPEC/docker_volume_optimization.xml",
    "Verify that WebSocket regression tests properly catch the bugs.\n\nThis script temporarily breaks the WebSocket implementation to verify\nthat our regression tests would fail without the fixes, then restores\nthe correct implementation.\n\nUsage:\n    python scripts/verify_websocket_regression_tests.py",
    "WARNING: [U+FE0F] Secret validation script not found (scripts/validate_secrets.py)",
    "WebSocket Event Compliance Validator\n\nValidates that the WebSocket implementation follows the specification from \nSPEC/learnings/websocket_agent_integration_critical.xml",
    "WebSocket Staging Connectivity Validator\nTests WebSocket handshake to staging environment\n\nCRITICAL: This script validates that WebSocket infrastructure fixes are working\nBusiness Impact: Ensures $120K+ MRR chat functionality is operational\n\nUsage:\n    python scripts/validate_websocket_staging.py\n    python scripts/validate_websocket_staging.py --environment staging\n    python scripts/validate_websocket_staging.py --environment production",
    "When deploying with: python scripts/deploy_to_gcp.py --project netra-staging",
    "Windows Port 8000 Permission Error Fix\n\nThis script resolves the Windows socket permission error [WinError 10013] that prevents\nthe backend service from binding to port 8000.\n\nCommon causes addressed:\n1. Process already using port 8000\n2. Windows firewall blocking port access\n3. Orphaned processes from previous dev launcher runs\n4. System-reserved ports (Windows dynamic port range)\n\nUsage:\n    python scripts/fix_port_8000_windows.py [--kill-processes] [--check-firewall] [--force]",
    "Windows-specific process cleanup utilities.\n\nThis module provides robust process cleanup functionality for Windows,\nparticularly for Node.js processes that tend to hang after tests or dev launcher.\n\nBusiness Value: Platform/Internal - Development Velocity\nPrevents developer time loss due to hanging processes and port conflicts.",
    "You can now run: python scripts/run_gtm_setup.py",
    "[U+1F4CB] Index created at: SPEC/learnings/index.xml",
    "[U+1F527] Run: python scripts/diagnose_migration_state.py --recover",
    "[U+1F680] Ready to deploy with: python scripts/deploy_to_gcp.py --project netra-staging --build-local",
    "[bold green]Setup Complete![/bold green]\n\nNext steps:\n1. Edit .act.secrets with your secrets\n2. Run: python scripts/act_wrapper.py list\n3. Test: python scripts/act_wrapper.py run test-smoke\n\nDocumentation: docs/ACT_LOCAL_TESTING_GUIDE.md",
    "[green][U+2713][/green] Configuration exported to oauth_redirect_uris.json",
    "[yellow]Please ensure service account key is at: config/netra-staging-7a1059b7cf26.json[/yellow]",
    "\\.json$",
    "\\.xml$",
    "_(core|utilities|helpers|fixtures|services|managers)_\\d+\\.py$",
    "_\\d+\\.py$",
    "_\\d+\\.py$|_v\\d+\\.py$",
    "_\\d+_\\d+\\.py$",
    "_backup\\.py$",
    "_backup\\.xml$",
    "_batch_\\d+\\.py$",
    "_core_\\d+\\.py$",
    "_deprecated\\.xml$",
    "_enhanced\\.py$",
    "_fixed\\.py$",
    "_fixtures_\\d+\\.py$",
    "_helpers_\\d+\\.py$",
    "_legacy\\.xml$",
    "_managers_\\d+\\.py$",
    "_new\\.py$",
    "_old\\.py$",
    "_old\\.xml$",
    "_services_\\d+\\.py$",
    "_temp\\.py$",
    "_tmp\\.py$",
    "_utilities_\\d+\\.py$",
    "_v\\d+\\.py$",
    "`\n- **Created SSOT implementation:** `netra_backend/app/agents/supervisor_ssot.py`\n\n### 2. Import Updates\n- **Files updated:**",
    "analytics_service/**/*.py",
    "analytics_service/analytics_core/isolated_environment.py",
    "app/**/*.py",
    "app/agents/*.py",
    "app/agents/state.py",
    "app/agents/synthetic_data_progress_tracker.py",
    "app/chat/page.tsx",
    "app/core/*.py",
    "app/core/degradation_strategies.py",
    "app/db/*.py",
    "app/main.py",
    "app/monitoring/alert_manager_core.py",
    "app/monitoring/alert_notifications.py",
    "app/page.tsx",
    "app/routes/utils/thread_title_generator.py",
    "app/routes/websockets.py",
    "app/schemas.py",
    "app/schemas/WebSocket.py",
    "app/schemas/websocket_types.py",
    "app/services/admin.py",
    "app/services/agent_service.py",
    "app/services/security_service.py",
    "app/services/user.py",
    "app/tests/**/*test*.py",
    "app/tests/agents/test_supervisor_consolidated_comprehensive.py",
    "app/tests/core/test_async_utils.py",
    "app/tests/core/test_error_handling.py",
    "app/tests/core/test_missing_tests_11_30.py",
    "app/tests/performance/test_agent_load_stress.py",
    "app/tests/performance/test_benchmark_metrics.py",
    "app/tests/performance/test_concurrent_processing.py",
    "app/tests/performance/test_corpus_generation_perf.py",
    "app/tests/performance/test_database_performance.py",
    "app/tests/performance/test_large_scale_generation.py",
    "app/tests/routes/test_health_route.py",
    "app/tests/services/test_quality_gate_service_comprehensive.py",
    "app/tests/services/test_tool_permission_service_comprehensive.py",
    "app/utils/helpers.py",
    "app/websocket/*.py",
    "app/ws_manager.py",
    "auth/context.tsx",
    "auth_service/**/*.py",
    "auth_service/auth_core/auth_environment.py",
    "auth_service/auth_core/core/jwt_cache.py",
    "auth_service/auth_core/core/jwt_handler.py",
    "auth_service/auth_core/core/token_validator.py",
    "auth_service/auth_core/isolated_environment.py",
    "auth_service/tests/**/*.py",
    "auth_service/tests/**/*test*.py",
    "auth_service/tests/test_auth_comprehensive.py",
    "background_jobs/__init__.py",
    "caching/__init__.py",
    "cat SPEC/learnings/import_management.xml",
    "components/chat/MainChat.tsx",
    "config/audit.json",
    "config/default.json",
    "config\\.json",
    "corpus/clickhouse_operations.py",
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; font-src 'self' data: https://cdn.jsdelivr.net; img-src 'self' data: https://cdn.jsdelivr.net https://fastapi.tiangolo.com; connect-src 'self'",
    "del netra_backend\\app\\agents\\supervisor_agent.py",
    "del netra_backend\\app\\agents\\supervisor_agent_modern.py",
    "dev_launcher/**/*.py",
    "dev_launcher/isolated_environment.py",
    "dev_launcher/secret_loader.py",
    "discovery/__init__.py",
    "frontend/**/*.test.py",
    "frontend/**/*.ts",
    "frontend/**/*.tsx",
    "frontend/__tests__/integration/critical/backend-authentication-system-failure.test.tsx",
    "frontend/__tests__/utils/test-helpers.tsx",
    "frontend/package.json",
    "frontend/src/services/websocket.js",
    "frontend/types/agent.ts",
    "frontend/types/backend_schema_auto_generated.ts",
    "frontend/types/chat.ts",
    "frontend/types/domains/agents.ts",
    "frontend/types/domains/messages.ts",
    "frontend/types/domains/threads.ts",
    "frontend/types/domains/websocket.ts",
    "frontend/types/shared/base.ts",
    "frontend/types/store-types.ts",
    "grep -r --include='*.py' '^def .*):$' app/ | head -20",
    "grep -r --include='*.py' 'except:' app/ | head -10",
    "grep -r --include='*.py' 'f\".*SELECT\\|f\".*INSERT\\|f\".*UPDATE\\|f\".*DELETE' app/ | head -5",
    "grep -r --include='*.py' 'for .* in .*:' app/ | grep -A 2 'db\\|query\\|select' | head -10",
    "grep -r --include='*.py' --include='*.ts' --include='*.tsx' 'TODO\\|FIXME' . | head -20",
    "grep -r --include='*.ts' --include='*.tsx' ': any' frontend/types/ | head -10",
    "grep -r --include='*.ts' --include='*.tsx' '\\.then(' frontend/ | grep -v '\\.catch(' | head -10",
    "grep -r --include='*.ts' --include='*.tsx' 'console\\.log' frontend/ | head -10",
    "lib/logger.ts",
    "lib/unified-api-config.ts",
    "logs/emergency_report.json",
    "logs/urgent_violations.json",
    "logs/warning_report.json",
    "modules/__init__.py",
    "modules/netra_mcp_core.py",
    "modules/netra_mcp_models.py",
    "modules/netra_mcp_prompts.py",
    "modules/netra_mcp_resources.py",
    "modules/netra_mcp_tools.py",
    "netra_backend/**/*.py",
    "netra_backend/app/agents/actions_agent_execution.py",
    "netra_backend/app/agents/actions_to_meet_goals_sub_agent.py",
    "netra_backend/app/agents/admin_tool_dispatcher/tool_handlers_core.py",
    "netra_backend/app/agents/admin_tool_dispatcher/validation.py",
    "netra_backend/app/agents/base/execution_context.py",
    "netra_backend/app/agents/chat_orchestrator/model_cascade.py",
    "netra_backend/app/agents/chat_orchestrator_main.py",
    "netra_backend/app/agents/corpus_admin/agent.py",
    "netra_backend/app/agents/corpus_admin_sub_agent.py",
    "netra_backend/app/agents/data_sub_agent/analysis_engine.py",
    "netra_backend/app/agents/data_sub_agent/anomaly_detector.py",
    "netra_backend/app/agents/data_sub_agent/clickhouse_client.py",
    "netra_backend/app/agents/data_sub_agent/execution_core.py",
    "netra_backend/app/agents/data_sub_agent/execution_engine.py",
    "netra_backend/app/agents/demo_service/optimization.py",
    "netra_backend/app/agents/execution_engine_consolidated.py",
    "netra_backend/app/agents/mcp_integration/context_manager.py",
    "netra_backend/app/agents/mcp_integration/mcp_intent_detector.py",
    "netra_backend/app/agents/optimizations_core_sub_agent.py",
    "netra_backend/app/agents/reporting_sub_agent.py",
    "netra_backend/app/agents/supervisor/agent_execution_context_manager.py",
    "netra_backend/app/agents/supervisor/agent_registry.py",
    "netra_backend/app/agents/supervisor/execution_engine.py",
    "netra_backend/app/agents/supervisor/request_scoped_execution_engine.py",
    "netra_backend/app/agents/supervisor_admin_init.py",
    "netra_backend/app/agents/supervisor_agent.py",
    "netra_backend/app/agents/supervisor_agent_modern.py",
    "netra_backend/app/agents/supervisor_consolidated.py",
    "netra_backend/app/agents/synthetic_data/core.py",
    "netra_backend/app/agents/triage_sub_agent.py",
    "netra_backend/app/agents/triage_sub_agent/executor.py",
    "netra_backend/app/agents/triage_sub_agent/processing.py",
    "netra_backend/app/auth_integration/auth.py",
    "netra_backend/app/clickhouse/__init__.py",
    "netra_backend/app/core/backend_environment.py",
    "netra_backend/app/core/configuration/database.py",
    "netra_backend/app/core/configuration/environment.py",
    "netra_backend/app/core/configuration/environment_detector.py",
    "netra_backend/app/core/configuration/secrets.py",
    "netra_backend/app/core/configuration/unified_secrets.py",
    "netra_backend/app/core/database.py",
    "netra_backend/app/core/health_configuration.py",
    "netra_backend/app/core/isolated_environment.py",
    "netra_backend/app/core/startup_config.py",
    "netra_backend/app/core/transaction_core.py",
    "netra_backend/app/core/unified_id_manager.py",
    "netra_backend/app/core/websocket_message_handler.py",
    "netra_backend/app/database/migration_manager.py",
    "netra_backend/app/db/clickhouse.py",
    "netra_backend/app/db/clickhouse_client.py",
    "netra_backend/app/db/clickhouse_reliable_manager.py",
    "netra_backend/app/db/client_clickhouse.py",
    "netra_backend/app/db/database_initializer.py",
    "netra_backend/app/db/models.py",
    "netra_backend/app/db/postgres_core.py",
    "netra_backend/app/error_aggregator.py",
    "netra_backend/app/guardrails/input_filters.py",
    "netra_backend/app/main.py",
    "netra_backend/app/models/message.py",
    "netra_backend/app/monitoring/configuration_drift_alerts.py",
    "netra_backend/app/monitoring/configuration_drift_monitor.py",
    "netra_backend/app/monitoring/prometheus_exporter.py",
    "netra_backend/app/monitoring/unified_configuration_monitoring.py",
    "netra_backend/app/redis_manager.py",
    "netra_backend/app/routes/websocket.py",
    "netra_backend/app/routes/websocket_secure.py",
    "netra_backend/app/routes/websocket_ssot.py",
    "netra_backend/app/routes/websocket_unified.py",
    "netra_backend/app/services/cache/semantic_cache.py",
    "netra_backend/app/services/external_service_client.py",
    "netra_backend/app/services/file_storage_service.py",
    "netra_backend/app/services/startup_fixes_integration.py",
    "netra_backend/app/services/supply_research_scheduler.py",
    "netra_backend/app/services/tenant_service.py",
    "netra_backend/app/services/unified_health_service.py",
    "netra_backend/app/services/user_auth_service.py",
    "netra_backend/app/services/user_execution_context.py",
    "netra_backend/app/services/user_websocket_emitter.py",
    "netra_backend/app/services/websocket_bridge_factory.py",
    "netra_backend/app/services/websocket_emitter_pool.py",
    "netra_backend/app/services/websocket_event_emitter.py",
    "netra_backend/app/services/websocket_manager.py",
    "netra_backend/app/startup_module.py",
    "netra_backend/app/tools/deep_research_api.py",
    "netra_backend/app/tools/sandboxed_interpreter.py",
    "netra_backend/app/websocket/__init__.py",
    "netra_backend/app/websocket/manager.py",
    "netra_backend/app/websocket_core/__init__.py",
    "netra_backend/app/websocket_core/batch_message_core.py",
    "netra_backend/app/websocket_core/batch_message_handler.py",
    "netra_backend/app/websocket_core/broadcast.py",
    "netra_backend/app/websocket_core/broadcast_core.py",
    "netra_backend/app/websocket_core/compression.py",
    "netra_backend/app/websocket_core/connection_executor.py",
    "netra_backend/app/websocket_core/connection_info.py",
    "netra_backend/app/websocket_core/enhanced_rate_limiter.py",
    "netra_backend/app/websocket_core/error_recovery_handler.py",
    "netra_backend/app/websocket_core/isolated_event_emitter.py",
    "netra_backend/app/websocket_core/manager.py",
    "netra_backend/app/websocket_core/performance_monitor_core.py",
    "netra_backend/app/websocket_core/rate_limiter.py",
    "netra_backend/app/websocket_core/reconnection_types.py",
    "netra_backend/app/websocket_core/state_synchronization_manager.py",
    "netra_backend/app/websocket_core/state_synchronizer.py",
    "netra_backend/app/websocket_core/unified.py",
    "netra_backend/app/websocket_core/unified_websocket_auth.py",
    "netra_backend/app/websocket_core/user_context_extractor.py",
    "netra_backend/app/websocket_core_info.py",
    "netra_backend/tests/**/*.py",
    "netra_backend/tests/agents/test_data_sub_agent_consolidated.py",
    "netra_backend/tests/agents/test_data_sub_agent_core.py",
    "netra_backend/tests/agents/test_supervisor_bulletproof.py",
    "netra_backend/tests/agents/test_supply_researcher_scheduler.py",
    "netra_backend/tests/clickhouse/metrics_aggregation_tests.py",
    "netra_backend/tests/clickhouse/test_performance_metrics_extraction.py",
    "netra_backend/tests/clickhouse/test_query_correctness.py",
    "netra_backend/tests/config/test_unified_config_integration.py",
    "netra_backend/tests/core/test_core_comprehensive.py",
    "netra_backend/tests/critical/test_execution_context_hashable_regression.py",
    "netra_backend/tests/datetime_string_test_helpers.py",
    "netra_backend/tests/debug_migration_test_helpers.py",
    "netra_backend/tests/e2e/conftest.py",
    "netra_backend/tests/e2e/test_complete_real_pipeline_e2e.py",
    "netra_backend/tests/e2e/test_message_handler_websocket_readiness_flow.py",
    "netra_backend/tests/e2e/test_websocket_integration_core.py",
    "netra_backend/tests/e2e/test_websocket_integration_fixtures.py",
    "netra_backend/tests/helpers/staging_base.py",
    "netra_backend/tests/helpers/websocket_test_helpers.py",
    "netra_backend/tests/integration/agent_execution/test_supervisor_orchestration_patterns.py",
    "netra_backend/tests/integration/agent_pipeline_mocks.py",
    "netra_backend/tests/integration/agents/test_agent_execution_comprehensive.py",
    "netra_backend/tests/integration/agents/test_websocket_factory_integration.py",
    "netra_backend/tests/integration/backend-authentication-integration-failures.py",
    "netra_backend/tests/integration/base.py",
    "netra_backend/tests/integration/critical_missing/shared_infrastructure/containerized_services.py",
    "netra_backend/tests/integration/critical_paths/l4_staging_critical_base.py",
    "netra_backend/tests/integration/critical_paths/test_billing_accuracy_l4.py",
    "netra_backend/tests/integration/critical_paths/test_dashboard_query_performance.py",
    "netra_backend/tests/integration/critical_paths/test_enterprise_auth_integration_l4.py",
    "netra_backend/tests/integration/critical_paths/test_high_performance_websocket_stress.py",
    "netra_backend/tests/integration/critical_paths/test_multi_tenant_data_isolation_l4.py",
    "netra_backend/tests/integration/critical_paths/test_performance_scalability_l2.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_e2e_l4.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_validation_l4.py",
    "netra_backend/tests/integration/critical_paths/test_websocket_jwt_encoding.py",
    "netra_backend/tests/integration/deployment_config_fixtures.py",
    "netra_backend/tests/integration/error_handling/test_comprehensive_error_handling_integration.py",
    "netra_backend/tests/integration/golden_path/test_complete_golden_path_integration.py",
    "netra_backend/tests/integration/golden_path/test_complete_golden_path_integration_enhanced.py",
    "netra_backend/tests/integration/golden_path/test_multi_user_isolation_integration.py",
    "netra_backend/tests/integration/golden_path/test_user_context_factory_integration.py",
    "netra_backend/tests/integration/golden_path/test_websocket_event_persistence_integration.py",
    "netra_backend/tests/integration/integration.py",
    "netra_backend/tests/integration/jwt_token_helpers.py",
    "netra_backend/tests/integration/race_conditions/test_message_handler_race_condition_reproduction.py",
    "netra_backend/tests/integration/services/test_message_handler_service_readiness_timing.py",
    "netra_backend/tests/integration/sso_saml_components.py",
    "netra_backend/tests/integration/staging_config/base.py",
    "netra_backend/tests/integration/test_agent_execution_logging.py",
    "netra_backend/tests/integration/test_agent_websocket_events.py",
    "netra_backend/tests/integration/test_auth_edge_cases_l3.py",
    "netra_backend/tests/integration/test_database_manager_business_scenarios.py",
    "netra_backend/tests/integration/test_database_manager_integration_comprehensive.py",
    "netra_backend/tests/integration/test_database_manager_stress_scenarios.py",
    "netra_backend/tests/integration/test_dev_launcher_startup.py",
    "netra_backend/tests/integration/test_free_to_paid_conversion.py",
    "netra_backend/tests/integration/test_mcp_service_realistic.py",
    "netra_backend/tests/integration/test_supervisor_agent_coordination.py",
    "netra_backend/tests/integration/test_unified_message_flow.py",
    "netra_backend/tests/integration/test_user_login_flows_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_extended_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_l3.py",
    "netra_backend/tests/integration/test_websocket_subprotocol_negotiation_regression.py",
    "netra_backend/tests/integration/test_ws_connection_mocks.py",
    "netra_backend/tests/integration/uvs/test_error_handling_edge_cases.py",
    "netra_backend/tests/integration/uvs/test_reporting_context_integration.py",
    "netra_backend/tests/integration/uvs/test_user_context_factory_isolation.py",
    "netra_backend/tests/integration/uvs/test_user_isolation_validation_core.py",
    "netra_backend/tests/integration/websocket_recovery_fixtures.py",
    "netra_backend/tests/json_file_crypto_test_helpers.py",
    "netra_backend/tests/llm_mocks.py",
    "netra_backend/tests/network_pagination_test_helpers.py",
    "netra_backend/tests/performance/performance_baseline_config.py",
    "netra_backend/tests/performance/test_agent_load_stress.py",
    "netra_backend/tests/performance/test_comprehensive_backend_performance.py",
    "netra_backend/tests/performance/test_performance_monitoring.py",
    "netra_backend/tests/performance/test_sla_compliance.py",
    "netra_backend/tests/services/test_generation_service_comprehensive.py",
    "netra_backend/tests/services/test_scheduler_jobs_core.py",
    "netra_backend/tests/services/test_scheduler_retry_logic.py",
    "netra_backend/tests/services/test_supply_research_scheduler_jobs.py",
    "netra_backend/tests/services/test_ws_connection_mocks.py",
    "netra_backend/tests/test_compression_auth.py",
    "netra_backend/tests/test_config_core.py",
    "netra_backend/tests/test_health_monitor_adaptive.py",
    "netra_backend/tests/test_performance_batching.py",
    "netra_backend/tests/test_route_fixtures.py",
    "netra_backend/tests/test_utilities.py",
    "netra_backend/tests/test_websocket_bidirectional_types.py",
    "netra_backend/tests/unified_system/test_dev_launcher_startup.py",
    "netra_backend/tests/unified_system/test_service_recovery.py",
    "netra_backend/tests/unified_system/test_websocket_state.py",
    "netra_backend/tests/unit/agents/data_sub_agent/test_clickhouse_client.py",
    "netra_backend/tests/unit/agents/test_agent_execution_core_comprehensive.py",
    "netra_backend/tests/unit/agents/test_base_agent_comprehensive.py",
    "netra_backend/tests/unit/agents/test_tool_execution_error_handling_resilience.py",
    "netra_backend/tests/unit/agents/test_unified_tool_execution_websocket_notifications.py",
    "netra_backend/tests/unit/core/registry/test_tool_registry_dynamic_discovery.py",
    "netra_backend/tests/unit/db/test_database_manager.py",
    "netra_backend/tests/unit/error_handling/test_comprehensive_error_handling_unit.py",
    "netra_backend/tests/unit/services/test_message_handler_readiness_validation.py",
    "netra_backend/tests/unit/test_health_checkers_core.py",
    "netra_backend/tests/unit/test_mcp_service_core.py",
    "netra_backend/tests/unit/test_metrics_collector_core.py",
    "netra_backend/tests/unit/test_startup_module_comprehensive.py",
    "netra_backend/tests/unit/test_subagent_logging.py",
    "netra_backend/tests/unit/test_websocket_memory_leaks.py",
    "netra_backend/tests/unit/test_websocket_state_checking_regression.py",
    "netra_backend/tests/unit/websocket_core/test_agent_websocket_bridge_unit.py",
    "netra_backend/tests/unit/websocket_core/test_websocket_event_delivery_unit.py",
    "netra_backend/tests/unit/websocket_core/test_websocket_manager_event_integration_unit.py",
    "netra_backend/tests/websocket/test_connection_manager.py",
    "netra_backend/tests/websocket/test_message_handler.py",
    "netra_backend/tests/websocket/test_websocket_integration_performance.py",
    "netra_mcp/__init__.py",
    "payments/__init__.py",
    "providers/WebSocketProvider.tsx",
    "python -m pytest netra_backend/tests/integration/test_mcp_service_realistic.py -v",
    "python -m pytest tests/e2e/staging/test_priority1_critical.py -v --tb=short",
    "python -m pytest tests/e2e/staging/test_priority1_critical.py::TestCriticalUserExperience::test_023_streaming_partial_results_real -v --tb=short --timeout=120",
    "python -m pytest tests/e2e/staging/test_priority1_critical.py::TestCriticalUserExperience::test_025_critical_event_delivery_real -v --tb=short --timeout=60",
    "python -m pytest tests/integration/deployment_validation/test_staging_websocket_baseline.py -v",
    "python -m pytest tests/integration/deployment_validation/test_websocket_performance_post_deployment.py -v",
    "python -m pytest tests/mission_critical/test_*_violation.py tests/e2e/test_golden_path_auth_ssot_compliance.py -v",
    "python -m pytest tests/mission_critical/test_websocket_jwt_bypass_violation.py -v",
    "python -m pytest tests/unit/deployment_validation/test_asyncio_selector_optimization.py -v",
    "python -m pytest tests/unit/deployment_validation/test_circuit_breaker_readiness.py -v",
    "python -m pytest tests/unit/deployment_validation/test_websocket_timeout_config_gap.py -v",
    "python netra_backend/app/alembic/run_migrations.py",
    "python scripts/api_contract_validator.py --validate-all --breaking-changes-only",
    "python scripts/async_pattern_enforcer.py --ci-mode --fail-fast",
    "python scripts/audit_staging_oauth_secrets.py --update \\",
    "python scripts/boundary_enforcer.py",
    "python scripts/boundary_enforcer.py --check",
    "python scripts/check_architecture_compliance.py",
    "python scripts/check_architecture_compliance.py --ci-mode",
    "python scripts/check_e2e_imports.py --report",
    "python scripts/ci_pipeline_enhancer.py --performance-only",
    "python scripts/cleanup_duplicate_tests.py",
    "python scripts/code_audit_orchestrator.py",
    "python scripts/compliance/stub_checker.py",
    "python scripts/comprehensive_import_scanner.py",
    "python scripts/comprehensive_import_scanner.py --json-output",
    "python scripts/deploy_staging.py",
    "python scripts/deploy_to_gcp.py --project",
    "python scripts/deploy_to_gcp.py --project netra-staging --build-local",
    "python scripts/deploy_to_gcp.py --service auth --build-local",
    "python scripts/deploy_to_gcp.py --service auth --project netra-staging --build-local",
    "python scripts/deploy_to_gcp.py --service backend --project netra-staging --build-local",
    "python scripts/deploy_to_gcp.py --service frontend --project netra-staging --build-local",
    "python scripts/deploy_to_gcp_actual.py",
    "python scripts/deploy_to_gcp_actual.py --project netra-staging --build-local",
    "python scripts/dev_launcher.py",
    "python scripts/diagnose_migration_state.py --recover",
    "python scripts/docker_compose_log_introspector.py analyze",
    "python scripts/docker_env_manager.py start",
    "python scripts/docker_env_manager.py stop all",
    "python scripts/docker_manual.py start --environment dev",
    "python scripts/docker_manual.py status",
    "python scripts/docker_manual.py stop --environment dev",
    "python scripts/duplicate_detector.py",
    "python scripts/duplicate_detector.py --severity high --max-results 5",
    "python scripts/fix_all_import_issues.py --absolute-only",
    "python scripts/fix_netra_backend_imports.py",
    "python scripts/fix_staging_gsm_secrets.py --project",
    "python scripts/import_management.py all",
    "python scripts/import_management.py check",
    "python scripts/import_management.py fix",
    "python scripts/migrate_cloud_run_urls.py --execute",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 1 --auto-commit",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 1 --dry-run",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 2 --auto-commit",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 2 --dry-run",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 3 --auto-commit",
    "python scripts/migrate_mock_to_usercontext.py --execute-batch 3 --dry-run",
    "python scripts/monitor_config_changes.py --check",
    "python scripts/monitor_config_changes.py --report",
    "python scripts/monitor_config_changes.py --snapshot",
    "python scripts/prevent_numbered_files.py --check",
    "python scripts/prevent_numbered_files.py --fix",
    "python scripts/scan_string_literals.py",
    "python scripts/setup_gcp_service_account.py",
    "python scripts/team_updates_sync.py last_day",
    "python scripts/unified_test_runner.py --category integration --pattern 'mcp_service_realistic'",
    "python scripts/validate_layer_config.py",
    "python tests/e2e/staging/test_1_websocket_events_staging.py",
    "python tests/e2e/staging_auth_bypass.py",
    "python tests/e2e/test_complete_authenticated_chat_workflow_e2e.py",
    "python tests/mission_critical/test_websocket_agent_events_suite.py",
    "python tests/post_deployment/test_auth_integration.py --environment",
    "python tests/unified_test_runner.py --categories smoke",
    "python tests/unified_test_runner.py --env staging --category e2e",
    "python tests/unified_test_runner.py --pattern 'test_database_cross_service_integration.py' --real-services --category integration",
    "python unicode_remediation_emergency.py tests/critical",
    "python3 -m py_compile netra_backend/app/services/redis_client.py",
    "python3 scripts/redis_migration_phase1.py",
    "python3 scripts/test_quality_standards.py --scan-all",
    "quality_gate/__init__.py",
    "quality_gate/quality_gate_core.py",
    "quality_gate/quality_gate_metrics.py",
    "quality_gate/quality_gate_models.py",
    "quality_gate/quality_gate_patterns.py",
    "quality_gate/quality_gate_validators.py",
    "reports/cleanup_log.json",
    "reports/coverage/coverage.json",
    "reports/gcp_auto_debug.json",
    "scripts/**/*.py",
    "scripts/*.py",
    "scripts/allocate_test_ports.py",
    "scripts/api_contract_validator.py",
    "scripts/api_governance_framework.py",
    "scripts/async_pattern_enforcer.py",
    "scripts/auto_split_files.py",
    "scripts/boundary_enforcer.py",
    "scripts/business_value_test_index.py",
    "scripts/check_architecture_compliance.py",
    "scripts/ci_pipeline_enhancer.py",
    "scripts/code_audit_orchestrator.py",
    "scripts/compliance/mock_justification_checker.py",
    "scripts/coverage_intelligence.py",
    "scripts/deploy_to_gcp.py",
    "scripts/deploy_to_gcp_actual.py",
    "scripts/detect_duplicate_code.py",
    "scripts/developer_training_generator.py",
    "scripts/docker_log_introspection.py",
    "scripts/docker_manual.py",
    "scripts/enforce_isolated_environment_compliance.py",
    "scripts/fix_e2e_imports.py",
    "scripts/fix_imports.py",
    "scripts/fix_staging_deployment.py",
    "scripts/netra-staging-sa-key.json",
    "scripts/redis_ssot_import_migration.py",
    "scripts/refresh_dev.py",
    "scripts/scan_string_literals.py",
    "scripts/seed_dev_data.py",
    "scripts/staging_health_checks.py",
    "scripts/test_quality_standards.py",
    "scripts/validate_environment_urls.py",
    "scripts/validate_secrets.py",
    "scripts/validate_staging_config.py",
    "scripts/websocket_notifier_import_migration.py",
    "scripts/workflow_validator.py",
    "secrets/netra-staging-sa-key.json",
    "secrets\\.json",
    "shared/id_generation/unified_id_generator.py",
    "shared/isolated_environment.py",
    "shared/jwt_secret_manager.py",
    "shared/schemas.json",
    "shared/types.ts",
    "test_.*\\.py$",
    "test_framework/**/*.py",
    "test_framework/comprehensive_reporter.py",
    "test_framework/decorators.py",
    "test_framework/fixtures/auth.py",
    "test_framework/jwt_test_utils.py",
    "test_framework/mocks/websocket_mocks.py",
    "test_framework/real_services_test_fixtures.py",
    "test_framework/robust_websocket_test_helper.py",
    "test_framework/runner.py",
    "test_framework/ssot/e2e_auth_helper.py",
    "test_framework/staging_websocket_test_helper.py",
    "test_framework/test_discovery.py",
    "test_framework/unified_docker_manager.py",
    "test_framework/websocket_helpers.py",
    "test_reports/test_report_20250824_090437.json",
    "tests/**/*.py",
    "tests/**/*test*.py",
    "tests/conftest.py",
    "tests/critical/test_websocket_agent_startup.py",
    "tests/critical/test_websocket_circular_import_regression.py",
    "tests/critical/test_websocket_message_regression.py",
    "tests/e2e/agent_isolation/test_file_system_isolation.py",
    "tests/e2e/agent_isolation/test_memory_isolation.py",
    "tests/e2e/agent_startup_performance_measurer.py",
    "tests/e2e/conftest.py",
    "tests/e2e/error_handling/test_comprehensive_error_handling_e2e.py",
    "tests/e2e/first_time_user/real_critical_auth_helpers.py",
    "tests/e2e/fixtures/__init__.py",
    "tests/e2e/golden_path/test_authenticated_complete_user_journey_business_value.py",
    "tests/e2e/golden_path/test_complete_golden_path_business_value.py",
    "tests/e2e/golden_path/test_complete_golden_path_business_value.py::TestCompleteGoldenPathBusinessValue::test_complete_user_journey_delivers_business_value",
    "tests/e2e/golden_path/test_complete_golden_path_user_journey_comprehensive.py",
    "tests/e2e/golden_path/test_config_ssot_golden_path_staging.py",
    "tests/e2e/golden_path/test_websocket_agent_events_validation.py",
    "tests/e2e/integration/test_agent_orchestration_real_llm.py",
    "tests/e2e/integration/test_auth_jwt_refresh.py",
    "tests/e2e/integration/test_auth_jwt_security.py",
    "tests/e2e/jwt_token_helpers.py",
    "tests/e2e/performance/test_performance_sla_validation.py",
    "tests/e2e/real_services_manager.py",
    "tests/e2e/reconnection_test_helpers.py",
    "tests/e2e/resilience/test_response_persistence_recovery.py",
    "tests/e2e/resource_isolation/infrastructure/__init__.py",
    "tests/e2e/resource_isolation/suite/test_suite_core.py",
    "tests/e2e/resource_isolation/test_infrastructure.py",
    "tests/e2e/resource_isolation/test_suite.py",
    "tests/e2e/service-to-service-authentication-failures.py",
    "tests/e2e/service_failure_tester.py",
    "tests/e2e/staging/test_golden_path_database_flow.py",
    "tests/e2e/test_agent_message_flow_implementation.py",
    "tests/e2e/test_agent_orchestration.py",
    "tests/e2e/test_agent_orchestration_e2e_comprehensive.py",
    "tests/e2e/test_agent_orchestration_real_llm.py",
    "tests/e2e/test_agent_websocket_events_comprehensive.py",
    "tests/e2e/test_agent_write_review_refine_integration_core.py",
    "tests/e2e/test_concurrent_agent_startup_core.py",
    "tests/e2e/test_concurrent_agent_startup_performance.py",
    "tests/e2e/test_cors_dynamic_ports.py",
    "tests/e2e/test_data_factory.py",
    "tests/e2e/test_helpers.py",
    "tests/e2e/test_helpers/__init__.py",
    "tests/e2e/test_helpers/throughput_helpers.py",
    "tests/e2e/test_multi_agent_collaboration_response.py",
    "tests/e2e/test_performance_targets.py",
    "tests/e2e/test_quality_gate_response_validation.py",
    "tests/e2e/test_rapid_message_succession_agent.py",
    "tests/e2e/test_rapid_message_succession_api.py",
    "tests/e2e/test_rapid_message_succession_core.py",
    "tests/e2e/test_resource_limits.py",
    "tests/e2e/test_response_quality.py",
    "tests/e2e/test_soak_testing.py",
    "tests/e2e/test_spike_recovery_core.py",
    "tests/e2e/test_spike_recovery_performance.py",
    "tests/e2e/test_staging_e2e_comprehensive.py",
    "tests/e2e/test_startup_initialization.py",
    "tests/e2e/test_websocket_immediate_disconnect_regression.py",
    "tests/e2e/websocket_resilience/test_2_midstream_disconnection_recovery_websocket.py",
    "tests/e2e/websocket_resilience/test_websocket_connection_concurrent.py",
    "tests/e2e/websocket_resilience/test_websocket_security_attacks.py",
    "tests/e2e/websocket_resilience/test_websocket_security_audit.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_advanced.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_flow.py",
    "tests/factories.py",
    "tests/integration/agent_execution_flows/test_agent_execution_context_management.py",
    "tests/integration/agent_execution_flows/test_user_execution_context_isolation.py",
    "tests/integration/config_ssot/test_config_ssot_direct_environ_access_violations.py",
    "tests/integration/config_ssot/test_config_ssot_environment_isolation_patterns.py",
    "tests/integration/config_ssot/test_config_ssot_scattered_config_antipatterns.py",
    "tests/integration/config_ssot/test_config_ssot_unified_config_manager_patterns.py",
    "tests/integration/config_ssot/test_config_system_consistency_integration.py",
    "tests/integration/configuration/test_configuration_drift_monitoring_comprehensive.py",
    "tests/integration/critical_paths/test_websocket_binary_message_handling.py",
    "tests/integration/critical_paths/test_websocket_broadcast_performance.py",
    "tests/integration/critical_paths/test_websocket_circuit_breaker.py",
    "tests/integration/critical_paths/test_websocket_connection_draining.py",
    "tests/integration/critical_paths/test_websocket_connection_pooling.py",
    "tests/integration/critical_paths/test_websocket_health_check.py",
    "tests/integration/critical_paths/test_websocket_heartbeat_monitoring.py",
    "tests/integration/critical_paths/test_websocket_message_compression.py",
    "tests/integration/critical_paths/test_websocket_message_delivery_guarantee.py",
    "tests/integration/critical_paths/test_websocket_rate_limiting_per_client.py",
    "tests/integration/critical_paths/test_websocket_reconnection_state_recovery.py",
    "tests/integration/database/test_database_operations_ssot.py",
    "tests/integration/database/test_staging_api_compatibility.py",
    "tests/integration/dependencies/test_api_compatibility_regression.py",
    "tests/integration/golden_path/test_golden_path_complete_e2e_comprehensive.py",
    "tests/integration/infrastructure/test_docker_manager_validation.py",
    "tests/integration/infrastructure/test_unified_docker_manager_integration.py::TestUnifiedDockerManagerCIPipeline",
    "tests/integration/infrastructure/test_unified_docker_manager_integration.py::TestUnifiedDockerManagerCrossPlatform",
    "tests/integration/infrastructure/test_unified_docker_manager_integration.py::TestUnifiedDockerManagerEnvironmentIsolation",
    "tests/integration/infrastructure/test_unified_docker_manager_integration.py::TestUnifiedDockerManagerOrchestration",
    "tests/integration/infrastructure/test_unified_docker_manager_integration.py::TestUnifiedDockerManagerResourceManagement",
    "tests/integration/test_database_cross_service_integration.py",
    "tests/integration/test_deepagentstate_e2e_isolation_vulnerability.py",
    "tests/integration/test_user_context_manager_integration.py",
    "tests/integration/test_websocket_agent_integration.py",
    "tests/integration/test_websocket_redis_pubsub.py",
    "tests/logging_coverage/test_authentication_failure_logging.py",
    "tests/logging_coverage/test_service_dependency_failure_logging.py",
    "tests/mission_critical/test_async_pattern_compliance.py",
    "tests/mission_critical/test_config_manager_ssot_violations.py",
    "tests/mission_critical/test_configuration_validator_ssot_violations.py",
    "tests/mission_critical/test_final_validation.py",
    "tests/mission_critical/test_first_message_experience.py",
    "tests/mission_critical/test_single_config_manager_ssot.py",
    "tests/mission_critical/test_token_optimization_compliance.py",
    "tests/mission_critical/test_websocket_agent_events_suite.py",
    "tests/mission_critical/test_websocket_agent_events_suite.py::TestRegressionPrevention",
    "tests/mission_critical/test_websocket_basic_events.py",
    "tests/mission_critical/test_websocket_bridge_critical_flows.py",
    "tests/mission_critical/test_websocket_comprehensive_validation.py",
    "tests/mission_critical/test_websocket_critical_validation.py",
    "tests/mission_critical/test_websocket_event_reliability_comprehensive.py",
    "tests/mission_critical/test_websocket_event_validation_suite.py",
    "tests/mission_critical/test_websocket_reliability_focused.py",
    "tests/mission_critical/test_websocket_subagent_events.py",
    "tests/pre_deployment/test_environment_url_validation.py",
    "tests/pre_deployment/test_environment_url_validation.py::TestGoldenPathEnvironmentIntegration",
    "tests/pre_deployment/test_environment_url_validation.py::TestServiceHealthClientEnvironmentURLValidation",
    "tests/remediation/test_issue_358_golden_path_validation.py::TestIssue358GoldenPathValidation::test_02_user_execution_context_has_websocket_client_id_parameter",
    "tests/remediation/test_issue_358_golden_path_validation.py::TestIssue358GoldenPathValidation::test_10_golden_path_integration_readiness_complete",
    "tests/run_staging_tests.py",
    "tests/security/test_deepagentstate_cross_contamination_patterns.py",
    "tests/services/test_ws_connection_basic.py",
    "tests/services/test_ws_connection_mocks.py",
    "tests/services/test_ws_connection_performance.py",
    "tests/unified/e2e/concurrent_user_simulators.py",
    "tests/unified/e2e/file_upload_pipeline_test_suite.py",
    "tests/unified/e2e/helpers/error_propagation/__init__.py",
    "tests/unified/e2e/helpers/service_independence/__init__.py",
    "tests/unified/e2e/helpers/service_independence_helpers.py",
    "tests/unified/e2e/onboarding_flow_executor.py",
    "tests/unified/e2e/session_persistence_manager.py",
    "tests/unified/e2e/test_agent_billing_flow.py",
    "tests/unified/e2e/test_agent_collaboration_real.py",
    "tests/unified/e2e/test_agent_failure_websocket_recovery.py",
    "tests/unified/e2e/test_agent_orchestration_real_llm.py",
    "tests/unified/e2e/test_ai_supply_chain_failover.py",
    "tests/unified/e2e/test_auth_token_expiry.py",
    "tests/unified/e2e/test_auth_websocket_connection.py",
    "tests/unified/e2e/test_auth_websocket_performance.py",
    "tests/unified/e2e/test_auth_websocket_recovery.py",
    "tests/unified/e2e/test_cost_tracking_accuracy.py",
    "tests/unified/e2e/test_cross_service_transaction.py",
    "tests/unified/e2e/test_data_crud_unified.py",
    "tests/unified/e2e/test_database_consistency.py",
    "tests/unified/e2e/test_disaster_recovery.py",
    "tests/unified/e2e/test_error_cascade_prevention.py",
    "tests/unified/e2e/test_export_pipeline.py",
    "tests/unified/e2e/test_health_monitoring_recovery.py",
    "tests/unified/e2e/test_memory_leak_detection.py",
    "tests/unified/e2e/test_quota_management.py",
    "tests/unified/e2e/test_real_rate_limiting.py",
    "tests/unified/e2e/test_service_failure_recovery.py",
    "tests/unified/e2e/test_session_persistence.py",
    "tests/unified/e2e/test_session_state_synchronization.py",
    "tests/unified/e2e/test_thread_management_websocket.py",
    "tests/unified/e2e/test_token_expiry_refresh.py",
    "tests/unified/e2e/test_token_lifecycle.py",
    "tests/unified/e2e/test_websocket_event_completeness.py",
    "tests/unified/e2e/test_websocket_guarantees.py",
    "tests/unified/e2e/test_websocket_message_format_validation.py",
    "tests/unified/e2e/test_websocket_message_guarantees.py",
    "tests/unified/e2e/test_websocket_resilience.py",
    "tests/unified/e2e/test_workspace_isolation.py",
    "tests/unified/e2e/websocket_message_guarantee_helpers.py",
    "tests/unified/health_service_checker.py",
    "tests/unified/oauth_flow_manager.py",
    "tests/unified/test_load_performance.py",
    "tests/unified/test_oauth_flow.py",
    "tests/unified/test_transaction_consistency.py",
    "tests/unified_test_runner.py",
    "tests/unit/agents/supervisor/test_user_execution_context_correct_patterns.py",
    "tests/unit/agents/supervisor/test_user_execution_context_migration_helpers.py",
    "tests/unit/agents/supervisor/test_user_execution_context_validation_security.py",
    "tests/unit/id_generation/test_id_generation_inconsistency_reproduction.py",
    "tests/unit/scripts/test_deploy_to_gcp.py",
    "tests/unit/ssot_validation/test_websocket_notifier_ssot_compliance.py",
    "tests/unit/ssot_validation/test_websocket_notifier_ssot_violations.py",
    "tests/unit/test_deepagentstate_user_isolation_vulnerability.py",
    "tests/unit/test_security_vulnerability_fixes.py",
    "tests/unit/test_websocket_connection_paradox_regression.py",
    "tests/validation/test_issue_263_broken_patterns_demo.py",
    "tests/validation/test_issue_263_core_problems.py",
    "tests/websocket/test_secure_websocket.py",
    "tests/websocket/test_websocket_regression_prevention.py",
    "tracing/__init__.py",
    "websocket/message_handler.py",
    "websocket/message_queue.py",
    "websocket/quality_alert_handler.py",
    "websocket/quality_manager.py",
    "websocket/quality_message_router.py",
    "websocket/quality_metrics_handler.py",
    "websocket/quality_report_handler.py",
    "websocket/quality_validation_handler.py",
    "| **Methodology:** [SPEC/master_wip_index.xml](SPEC/master_wip_index.xml)\n> \n> **Quick Navigation:** [Executive Summary](#executive-summary) | [Compliance Breakdown](#compliance-breakdown) | [Testing Metrics](#testing-metrics) | [Action Items](#action-items)\n\n---\n\n## Executive Summary\n\n### Overall System Health Score: **",
    "~/.config/gcloud/application_default_credentials.json",
    "~/Library/Group Containers/group.com.docker/settings.json"
  ]
}