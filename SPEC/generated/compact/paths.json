{
  "values": [
    "\"\n\n# Default to local build with checks\ncommand = [\n    sys.executable,\n    \"scripts/deploy_to_gcp.py\",\n    \"--project\", \"netra-staging\",\n    \"--build-local\",\n    \"--service-account\", SERVICE_ACCOUNT_KEY\n]\n\n# Add any additional arguments passed to this script\nif len(sys.argv) > 1:\n    command.extend(sys.argv[1:])\nelse:\n    # Default to running checks\n    command.append(\"--run-checks\")\n\n# Execute deployment\nsys.exit(subprocess.call(command))",
    "#!/bin/bash\n# AI Agent Metadata Archive Hook\n\necho \"Archiving metadata to audit log...\"\n\n# Archive metadata\npython scripts/metadata_archiver.py --archive\n\necho \"‚úÖ Metadata archived\"\nexit 0",
    "#!/bin/bash\n# AI Agent Metadata Validation Hook\n\necho \"Validating AI agent metadata headers...\"\n\n# Run metadata validator\npython scripts/metadata_validator.py --validate-all\n\nif [ $? -ne 0 ]; then\n    echo \"‚ùå Metadata validation failed. Please fix metadata headers before committing.\"\n    exit 1\nfi\n\necho \"‚úÖ Metadata validation passed\"\nexit 0",
    "#!/usr/bin/env python3\n\"\"\"\nWrapper script for deploying to GCP staging with service account authentication.\nAuto-generated by setup_gcp_service_account.py\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom pathlib import Path\n\n# Service account key path\nSERVICE_ACCOUNT_KEY = r\"",
    "## Next Steps\n\n1. **Run smoke tests** to verify basic functionality\n2. **Test agent workflows** end-to-end\n3. **Monitor WebSocket traffic** in dev tools\n4. **Add e2e tests** for critical event flows\n5. **Document event catalog** in SPEC/websocket_communication.xml",
    "## üõ†Ô∏è Available Tools\n- `python scripts/boundary_enforcer.py --enforce` - Full boundary check\n- `python scripts/auto_split_files.py --scan` - Automated file splitting\n- `python scripts/auto_decompose_functions.py --scan` - Function decomposition\n- `python scripts/emergency_boundary_actions.py --assess` - Emergency assessment\n\n---\n*Generated by Boundary Enforcement System v2.0 | Timestamp:",
    "% goal\n\n## Configuration\nTo enable continuous autonomous review, add to CI/CD:\n```bash\npython scripts/test_autonomous_review.py --auto\n```\n\nOr schedule hourly reviews:\n```bash\n0 * * * * cd /path/to/project && python scripts/test_autonomous_review.py --continuous\n```",
    "**/*.json",
    "**/*.py",
    "**/*.test.ts",
    "**/*.test.tsx",
    "**/*.ts",
    "**/*.tsx",
    "**/*_test.py",
    "**/*config.json",
    "**/package.json",
    "**/test_*.py",
    "*/.pytest_cache/*",
    "*/content_corpus.json",
    "*Generated by run_review.py implementing SPEC/review.xml*",
    ".*:\"\nfiles = list(pathlib.Path(\"netra_backend/app\").rglob(\"*.py\"))\nfiles.extend(list(pathlib.Path(\"auth_service\").rglob(\"*.py\")))\nmatches = []\nfor f in files[:100]:  # Limit for speed\n    try:\n        if \"",
    ".*_test\\.py$",
    ".git/netra-audit-config.json",
    ".netra/migration_state.json",
    ".netra/startup_status.json",
    ".pytest_cache/",
    "/**/*.py",
    "/**/*.ts",
    "/**/*.tsx",
    "/**/*_test.py",
    "/**/test_*.py",
    "/_next/static/chunks/webpack.js",
    "/api/",
    "/api/admin",
    "/api/admin/",
    "/api/admin/*",
    "/api/agent",
    "/api/agents/",
    "/api/agents/start",
    "/api/auth",
    "/api/auth/callback",
    "/api/auth/config",
    "/api/auth/dev_login",
    "/api/auth/google/callback",
    "/api/auth/login",
    "/api/auth/logout",
    "/api/auth/refresh",
    "/api/auth/token",
    "/api/corpus",
    "/api/demo",
    "/api/demo/reports/",
    "/api/external",
    "/api/factory-status",
    "/api/factory-status/compliance",
    "/api/generation",
    "/api/github",
    "/api/health",
    "/api/invoices/",
    "/api/llm-cache",
    "/api/mcp",
    "/api/mcp-client",
    "/api/mcp/",
    "/api/mcp/ws",
    "/api/mcp/ws (MCP-specific)",
    "/api/poll",
    "/api/references",
    "/api/supply",
    "/api/supply/compare",
    "/api/supply/enrich",
    "/api/supply/research",
    "/api/synthetic-data",
    "/api/synthetic/corpus",
    "/api/test",
    "/api/threads",
    "/api/tools",
    "/api/tools/",
    "/api/users",
    "/api/users/create",
    "/api/users/me",
    "/api/users/password",
    "/api/v1/agents",
    "/api/v1/database",
    "/api/v1/discovery",
    "/api/v1/example-messages",
    "/api/v1/status",
    "/api/v1/threads/",
    "/api/v1/threads/[0-9a-f-]+",
    "/api/v1/users",
    "/api/v1/users/*",
    "/api/v2/agents",
    "/api/v2/users/{user_id}/messages",
    "/openapi.json",
    "/sandbox/script.py",
    "/tests/**/*.py",
    "/v1/",
    "/v2/",
    "/websocket/",
    "/websocket/auth",
    "/websocket/validate",
    "/ws/",
    "/ws/config",
    "/ws/health",
    "/ws/stats",
    "/ws/test",
    "/ws/{user_id}",
    "1. Run: python scripts/dev_launcher.py",
    "1. Run: python scripts/fix_all_import_issues.py --absolute-only",
    "2. Run: python scripts/detect_duplicate_code.py --report-only",
    "2. Test with: python scripts/metadata_validator.py --validate-all",
    "2. Update SPEC/learnings/import_management.xml with new patterns",
    "2. View: app/tests/examples/test_tdd_workflow_demo.py",
    "3. Follow consolidation patterns in SPEC/learnings/websocket_consolidation.xml",
    "3. Or run: python scripts/setup_gcp_service_account.py",
    "4. Explore: test_framework/decorators.py for all options",
    "4. Re-run validation: python scripts/validate_type_deduplication.py",
    "4. Run 'python scripts/metadata_validator.py --validate-all' to check existing files",
    ":/sandbox/script.py:ro",
    "<instruction>Check index.xml for complete category listing and learning IDs</instruction>",
    "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Architecture Health Dashboard - Netra</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
    "Agent Modification Tracking Helper\n\nThis script helps AI coding agents add or update tracking headers in modified files\naccording to the specification in SPEC/agent_tracking.xml.\n\nUsage:\n    python scripts/agent_tracking_helper.py <file_path> --agent \"Claude Code\" --model \"claude-opus-4-1\" --task-id \"conv_123\" --prompt \"Fix database query\" --changes \"Optimized query performance\"",
    "Agent Test Validator - Comprehensive test runner and quality validator for critical agent tests.\n\nThis module discovers, executes, and validates all agent test suites with comprehensive metrics.\nMaximum 300 lines, 8 lines per function as per SPEC/conventions.xml.",
    "Code Review System Package\nImplements SPEC/review.xml for automated code quality validation.",
    "Debug script for reproducing uvicorn recursion errors.\n\nThis script was moved from tests/ to scripts/ to prevent pytest from\ndiscovering it during test collection, which was causing port binding conflicts.\n\nUsage: python scripts/debug_uvicorn_recursion.py",
    "Dependency Validation Module\nValidates Python/Node.js versions and required dependencies.",
    "Deploy with: python scripts/deploy_to_gcp.py --project",
    "Disable: python scripts/manage_precommit.py disable --reason 'Your reason'",
    "Duplicate Code Detection Script\nPrevents regression of duplicate code patterns identified in WebSocket consolidation\n\nUsage:\n    python scripts/detect_duplicate_code.py [--threshold 0.8] [--report-only]\n    \nThis script detects:\n- Duplicate class names across files\n- Similar function implementations\n- Multiple wrappers for same functionality\n- Parallel implementations of same feature",
    "Enable:  python scripts/manage_precommit.py enable",
    "Enhanced staging deployment script with comprehensive validation.\n\nThis script combines the existing deploy_to_gcp.py functionality with \nadditional staging-specific validation and fixes.\n\nUsage:\n    python scripts/deploy_staging_with_validation.py [--fix-issues] [--skip-build]",
    "Example: python scripts/deploy_to_gcp.py --project {} --build-local",
    "Examples:\n  # Check specific workflow run\n  python verify_workflow_status.py --repo owner/repo --run-id 123456\n  \n  # Check latest workflow run by name\n  python verify_workflow_status.py --repo owner/repo --workflow-name \"test-suite\"\n  \n  # Wait for workflow completion\n  python verify_workflow_status.py --repo owner/repo --workflow-name \"deploy\" --wait-for-completion\n  \n  # JSON output\n  python verify_workflow_status.py --repo owner/repo --run-id 123456 --output json",
    "Examples:\n  # Scan with default settings\n  python scripts/scan_string_literals.py\n  \n  # Scan specific directories\n  python scripts/scan_string_literals.py --dirs netra_backend/app auth_service\n  \n  # Include test files in main index\n  python scripts/scan_string_literals.py --include-tests\n  \n  # Custom output location\n  python scripts/scan_string_literals.py --output custom_index.json",
    "Examples:\n  Default deployment (fast, no checks):\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local\n    \n  With pre-deployment checks:\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local --run-checks\n    \n  Cloud Build (slower):\n    python scripts/deploy_to_gcp.py --project netra-staging\n    \nSee SPEC/gcp_deployment.xml for detailed guidelines.",
    "Examples:\n  Default deployment (with checks):\n    python scripts/deploy_staging_with_sa.py\n    \n  Quick deployment (no checks):\n    python scripts/deploy_staging_with_sa.py --no-checks\n    \n  Specify service account key:\n    python scripts/deploy_staging_with_sa.py --key path/to/key.json",
    "Examples:\n  python scripts/import_management.py check       # Check for import issues\n  python scripts/import_management.py fix         # Fix import issues\n  python scripts/import_management.py verify      # Verify critical imports\n  python scripts/import_management.py all         # Run complete workflow\n  python scripts/import_management.py fix --dry-run  # Preview fixes",
    "Examples:\n  python scripts/team_updates.py                    # Last 24 hours\n  python scripts/team_updates.py --time-frame=last_hour\n  python scripts/team_updates.py --time-frame=last_week --output=report.md\n  \nTime frames:\n  last_hour     - Changes in the last hour\n  last_5_hours  - Changes in the last 5 hours  \n  last_day      - Changes in the last 24 hours (default)\n  last_week     - Changes in the last week\n  last_month    - Changes in the last month",
    "Examples:\n  python scripts/unified_import_manager.py check        # Check compliance only\n  python scripts/unified_import_manager.py fix         # Fix issues automatically  \n  python scripts/unified_import_manager.py report      # Generate detailed report\n  python scripts/unified_import_manager.py all         # Check, fix, and report\n  python scripts/unified_import_manager.py precommit   # Pre-commit hook mode",
    "Examples:\n  python scripts/validate_staging_deployment.py\n  python scripts/validate_staging_deployment.py --verbose\n  python scripts/validate_staging_deployment.py --json\n  python scripts/validate_staging_deployment.py --no-comprehensive\n  python scripts/validate_staging_deployment.py --project netra-staging --verbose",
    "GCP Deployment Script for Netra Apex Platform\nDeploys all three services (backend, auth, frontend) to Google Cloud Run\n\nIMPORTANT: This is the OFFICIAL deployment script. Do NOT create new deployment scripts.\nUse this script with appropriate flags for all GCP staging deployments.\n\nQuick Start:\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local\n\nSee SPEC/gcp_deployment.xml for comprehensive deployment guidelines.",
    "Generate OpenAPI/Swagger specification from FastAPI app and sync to ReadMe.\n\nThis script:\n1. Loads the FastAPI application\n2. Extracts the OpenAPI specification\n3. Saves it to a JSON file\n4. Optionally syncs it to ReadMe documentation platform\n\nUsage:\n    python generate_openapi_spec.py [--sync-readme] [--readme-api-key KEY] [--readme-version VERSION]",
    "GitHub Workflow Status Verification Script\n\nVerifies GitHub workflow run status via the GitHub API.\nSupports authentication, retry logic, and detailed status reporting.\n\nUsage:\n    python verify_workflow_status.py --repo owner/repo --workflow-name \"CI\" --run-id 123456\n    python verify_workflow_status.py --repo owner/repo --workflow-name \"CI\" --wait-for-completion",
    "High number of import errors. Run 'python scripts/import_management.py fix-all'",
    "JWT Secret Consistency Validation Script\n\nThis script validates that both the auth service and backend service\nuse the same JWT secret for token validation consistency.\n\nUsage:\n    python scripts/validate_jwt_consistency.py",
    "Main FastAPI application module.\nEntry point for the Netra AI Optimization Platform.\n\nüî¥ CRITICAL AUTH ARCHITECTURE:\n- This is the MAIN BACKEND service, NOT the auth service\n- Auth service runs SEPARATELY on port 8001 (see app/auth/auth_service.py)\n- This backend ONLY uses auth_integration to connect to auth service\n- NEVER implement authentication logic here\n- All auth operations go through auth_client\n\nSee: app/auth_integration/CRITICAL_AUTH_ARCHITECTURE.md",
    "Network Constants Validation Script\n\nValidates the new centralized network configuration module.\nBusiness Value: Platform/Internal - Configuration Validation - Ensures consistent network\nconfiguration across all environments and services.\n\nUsage:\n    python scripts/validate_network_constants.py\n    python scripts/validate_network_constants.py --environment production",
    "Node.js not found. Please install Node.js 18+ from https://nodejs.org/",
    "Output file path (default: SPEC/generated/string_literals.json)",
    "Path to service account JSON key file (default: config/netra-staging-7a1059b7cf26.json)",
    "Pre-commit hook for duplicate code detection.\nIntegrates with existing detect_duplicate_code.py for fast incremental checks.\n\nUsage:\n    python scripts/precommit_duplicate_detector.py [files...]\n    \nThis script:\n1. Performs fast duplicate detection on changed files\n2. Checks against known duplicate patterns\n3. Integrates with existing architecture compliance",
    "Pre-commit hook script to prevent numbered file naming patterns.\n\nThis script prevents files with non-semantic numbered suffixes like:\n- _1.py, _2.py, _3.py (arbitrary splits)\n- _11_20.py (range patterns)\n- _core_1.py, _utilities_2.py (numbered variants)\n\nUsage:\n    python scripts/prevent_numbered_files.py [files...]\n    \nReturns:\n    0 if all files pass validation\n    1 if any files have problematic naming patterns",
    "Review SPEC/learnings/websocket_consolidation.xml for consolidation strategy.",
    "Run 'python scripts/check_e2e_imports.py' to verify",
    "Run 'python scripts/fix_netra_backend_imports.py' to automatically fix these issues",
    "Run 'python scripts/import_management.py fix' to fix them",
    "Run 'python scripts/scan_string_literals.py' first to generate the index.",
    "Run 'python scripts/unified_import_manager.py fix' to automatically fix import issues",
    "Run: python scripts/fix_all_import_issues.py --absolute-only",
    "Run: python scripts/fix_frontend_test_imports.py",
    "Run: python scripts/fix_websocket_imports.py",
    "SPEC/*.xml",
    "SPEC/gcp_deployment.xml",
    "SPEC/generated/string_literals.json",
    "SPEC/staging_environment.xml",
    "See SPEC/gcp_deployment.xml for deployment guidelines.",
    "Status:  python scripts/manage_precommit.py status",
    "To re-enable: python scripts/manage_precommit.py enable",
    "Update staging secrets for GCP deployment.\nThis script updates critical secrets in GCP Secret Manager for staging environment.\n\nUsage:\n    python scripts/update_staging_secrets.py --check  # Check current values\n    python scripts/update_staging_secrets.py --update # Update secrets",
    "Usage: python scripts/deduplicate_types.py [--dry-run|--migrate|--validate|--clean]",
    "Usage: python scripts/precommit_duplicate_detector.py [files...]",
    "[bold green]Setup Complete![/bold green]\n\nNext steps:\n1. Edit .act.secrets with your secrets\n2. Run: python scripts/act_wrapper.py list\n3. Test: python scripts/act_wrapper.py run test-smoke\n\nDocumentation: docs/ACT_LOCAL_TESTING_GUIDE.md",
    "[green]‚úì[/green] Configuration exported to oauth_redirect_uris.json",
    "[yellow]Please ensure service account key is at: config/netra-staging-7a1059b7cf26.json[/yellow]",
    "\\.json$",
    "_(core|utilities|helpers|fixtures|services|managers)_\\d+\\.py$",
    "_\\d+\\.py$",
    "_\\d+\\.py$|_v\\d+\\.py$",
    "_\\d+_\\d+\\.py$",
    "_backup\\.py$",
    "_backup\\.xml$",
    "_batch_\\d+\\.py$",
    "_core_\\d+\\.py$",
    "_deprecated\\.xml$",
    "_enhanced\\.py$",
    "_fixed\\.py$",
    "_fixtures_\\d+\\.py$",
    "_helpers_\\d+\\.py$",
    "_legacy\\.xml$",
    "_managers_\\d+\\.py$",
    "_new\\.py$",
    "_old\\.py$",
    "_old\\.xml$",
    "_services_\\d+\\.py$",
    "_temp\\.py$",
    "_tmp\\.py$",
    "_utilities_\\d+\\.py$",
    "_v\\d+\\.py$",
    "app/**/*.py",
    "app/agents/*.py",
    "app/agents/state.py",
    "app/chat/page.tsx",
    "app/core/*.py",
    "app/db/*.py",
    "app/main.py",
    "app/monitoring/alert_manager_core.py",
    "app/monitoring/alert_notifications.py",
    "app/page.tsx",
    "app/routes/websockets.py",
    "app/schemas.py",
    "app/schemas/WebSocket.py",
    "app/schemas/websocket_types.py",
    "app/services/admin.py",
    "app/services/agent_service.py",
    "app/services/security_service.py",
    "app/services/user.py",
    "app/tests/**/*test*.py",
    "app/tests/agents/test_supervisor_consolidated_comprehensive.py",
    "app/tests/core/test_async_utils.py",
    "app/tests/core/test_error_handling.py",
    "app/tests/core/test_missing_tests_11_30.py",
    "app/tests/performance/test_agent_load_stress.py",
    "app/tests/performance/test_benchmark_metrics.py",
    "app/tests/performance/test_concurrent_processing.py",
    "app/tests/performance/test_corpus_generation_perf.py",
    "app/tests/performance/test_database_performance.py",
    "app/tests/performance/test_large_scale_generation.py",
    "app/tests/routes/test_health_route.py",
    "app/tests/services/test_quality_gate_service_comprehensive.py",
    "app/tests/services/test_tool_permission_service_comprehensive.py",
    "app/utils/helpers.py",
    "app/websocket/*.py",
    "app/ws_manager.py",
    "auth_service/tests/**/*test*.py",
    "background_jobs/__init__.py",
    "caching/__init__.py",
    "cat SPEC/learnings/import_management.xml",
    "components/chat/MainChat.tsx",
    "config/audit.json",
    "config\\.json",
    "dev_launcher/secret_loader.py",
    "discovery/__init__.py",
    "frontend/**/*.ts",
    "frontend/**/*.tsx",
    "frontend/package.json",
    "frontend/types/agent.ts",
    "frontend/types/backend_schema_auto_generated.ts",
    "frontend/types/chat.ts",
    "grep -r --include='*.py' '^def .*):$' app/ | head -20",
    "grep -r --include='*.py' 'except:' app/ | head -10",
    "grep -r --include='*.py' 'f\".*SELECT\\|f\".*INSERT\\|f\".*UPDATE\\|f\".*DELETE' app/ | head -5",
    "grep -r --include='*.py' 'for .* in .*:' app/ | grep -A 2 'db\\|query\\|select' | head -10",
    "grep -r --include='*.py' --include='*.ts' --include='*.tsx' 'TODO\\|FIXME' . | head -20",
    "grep -r --include='*.ts' --include='*.tsx' ': any' frontend/types/ | head -10",
    "grep -r --include='*.ts' --include='*.tsx' '\\.then(' frontend/ | grep -v '\\.catch(' | head -10",
    "grep -r --include='*.ts' --include='*.tsx' 'console\\.log' frontend/ | head -10",
    "logs/emergency_report.json",
    "logs/urgent_violations.json",
    "logs/warning_report.json",
    "modules/__init__.py",
    "modules/netra_mcp_core.py",
    "modules/netra_mcp_models.py",
    "modules/netra_mcp_prompts.py",
    "modules/netra_mcp_resources.py",
    "modules/netra_mcp_tools.py",
    "netra_backend/**/*.py",
    "netra_backend/app/agents/supervisor_admin_init.py",
    "netra_backend/app/clickhouse/__init__.py",
    "netra_backend/app/core/configuration/services.py",
    "netra_backend/app/core/database.py",
    "netra_backend/app/core/transaction_core.py",
    "netra_backend/app/database/migration_manager.py",
    "netra_backend/app/db/models.py",
    "netra_backend/app/dependencies.py",
    "netra_backend/app/error_aggregator.py",
    "netra_backend/app/models/message.py",
    "netra_backend/app/monitoring/prometheus_exporter.py",
    "netra_backend/app/routes/websocket_unified.py",
    "netra_backend/app/services/apex_optimizer_agent/models.py",
    "netra_backend/app/services/external_service_client.py",
    "netra_backend/app/services/file_storage_service.py",
    "netra_backend/app/services/llm/cost_optimizer.py",
    "netra_backend/app/services/supply_research_scheduler.py",
    "netra_backend/app/services/tenant_service.py",
    "netra_backend/app/services/user_auth_service.py",
    "netra_backend/app/websocket/__init__.py",
    "netra_backend/app/websocket_core/batch_message_core.py",
    "netra_backend/app/websocket_core/batch_message_handler.py",
    "netra_backend/app/websocket_core/broadcast.py",
    "netra_backend/app/websocket_core/broadcast_core.py",
    "netra_backend/app/websocket_core/compression.py",
    "netra_backend/app/websocket_core/connection_executor.py",
    "netra_backend/app/websocket_core/connection_info.py",
    "netra_backend/app/websocket_core/enhanced_rate_limiter.py",
    "netra_backend/app/websocket_core/error_recovery_handler.py",
    "netra_backend/app/websocket_core/performance_monitor_core.py",
    "netra_backend/app/websocket_core/rate_limiter.py",
    "netra_backend/app/websocket_core/reconnection_types.py",
    "netra_backend/app/websocket_core/state_synchronization_manager.py",
    "netra_backend/app/websocket_core/state_synchronizer.py",
    "netra_backend/app/websocket_core/unified.py",
    "netra_backend/app/websocket_core_info.py",
    "netra_backend/tests/agents/test_data_sub_agent_consolidated.py",
    "netra_backend/tests/agents/test_supply_researcher_scheduler.py",
    "netra_backend/tests/clickhouse/metrics_aggregation_tests.py",
    "netra_backend/tests/clickhouse/test_performance_metrics_extraction.py",
    "netra_backend/tests/clickhouse/test_query_correctness.py",
    "netra_backend/tests/datetime_string_test_helpers.py",
    "netra_backend/tests/debug_migration_test_helpers.py",
    "netra_backend/tests/e2e/test_complete_real_pipeline_e2e.py",
    "netra_backend/tests/integration/base.py",
    "netra_backend/tests/integration/critical_paths/test_billing_accuracy_l4.py",
    "netra_backend/tests/integration/critical_paths/test_dashboard_query_performance.py",
    "netra_backend/tests/integration/critical_paths/test_enterprise_auth_integration_l4.py",
    "netra_backend/tests/integration/critical_paths/test_multi_tenant_data_isolation_l4.py",
    "netra_backend/tests/integration/critical_paths/test_performance_scalability_l2.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_e2e_l4.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_validation_l4.py",
    "netra_backend/tests/integration/deployment_config_fixtures.py",
    "netra_backend/tests/integration/integration.py",
    "netra_backend/tests/integration/sso_saml_components.py",
    "netra_backend/tests/integration/test_auth_edge_cases_l3.py",
    "netra_backend/tests/integration/test_unified_message_flow.py",
    "netra_backend/tests/integration/test_user_login_flows_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_extended_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_l3.py",
    "netra_backend/tests/integration/test_ws_connection_mocks.py",
    "netra_backend/tests/json_file_crypto_test_helpers.py",
    "netra_backend/tests/llm_mocks.py",
    "netra_backend/tests/network_pagination_test_helpers.py",
    "netra_backend/tests/performance/performance_baseline_config.py",
    "netra_backend/tests/performance/test_agent_load_stress.py",
    "netra_backend/tests/performance/test_comprehensive_backend_performance.py",
    "netra_backend/tests/performance/test_performance_monitoring.py",
    "netra_backend/tests/performance/test_sla_compliance.py",
    "netra_backend/tests/services/test_scheduler_jobs_core.py",
    "netra_backend/tests/services/test_scheduler_retry_logic.py",
    "netra_backend/tests/services/test_supply_research_scheduler_jobs.py",
    "netra_backend/tests/test_compression_auth.py",
    "netra_backend/tests/test_config_core.py",
    "netra_backend/tests/test_health_monitor_adaptive.py",
    "netra_backend/tests/test_performance_batching.py",
    "netra_backend/tests/test_route_fixtures.py",
    "netra_backend/tests/test_utilities.py",
    "netra_backend/tests/test_websocket_bidirectional_types.py",
    "netra_backend/tests/unified_system/test_dev_launcher_startup.py",
    "netra_backend/tests/unified_system/test_service_recovery.py",
    "netra_backend/tests/unit/test_metrics_collector_core.py",
    "netra_backend/tests/websocket/test_websocket_integration_performance.py",
    "netra_mcp/__init__.py",
    "payments/__init__.py",
    "providers/WebSocketProvider.tsx",
    "python scripts/check_e2e_imports.py --report",
    "python scripts/code_audit_orchestrator.py",
    "python scripts/deploy_staging.py",
    "python scripts/deploy_to_gcp.py --project",
    "python scripts/fix_netra_backend_imports.py",
    "python scripts/import_management.py all",
    "python scripts/import_management.py check",
    "python scripts/import_management.py fix",
    "python scripts/scan_string_literals.py",
    "python scripts/setup_gcp_service_account.py",
    "python scripts/team_updates_sync.py last_day",
    "python scripts/unified_import_manager.py fix",
    "quality_gate/__init__.py",
    "quality_gate/quality_gate_core.py",
    "quality_gate/quality_gate_metrics.py",
    "quality_gate/quality_gate_models.py",
    "quality_gate/quality_gate_patterns.py",
    "quality_gate/quality_gate_validators.py",
    "reports/cleanup_log.json",
    "reports/coverage/coverage.json",
    "scripts/**/*.py",
    "scripts/auto_split_files.py",
    "scripts/boundary_enforcer.py",
    "scripts/business_value_test_index.py",
    "scripts/check_architecture_compliance.py",
    "scripts/code_audit_orchestrator.py",
    "scripts/deploy_to_gcp.py",
    "scripts/detect_duplicate_code.py",
    "scripts/fix_e2e_imports.py",
    "scripts/fix_staging_deployment.py",
    "scripts/scan_string_literals.py",
    "scripts/start_with_discovery.js",
    "scripts/validate_staging_config.py",
    "scripts/workflow_validator.py",
    "secrets\\.json",
    "shared/schemas.json",
    "shared/types.ts",
    "test_.*\\.py$",
    "test_framework/**/*.py",
    "test_framework/comprehensive_reporter.py",
    "test_framework/real_services_test_fixtures.py",
    "test_framework/runner.py",
    "test_framework/test_discovery.py",
    "tests/**/*.py",
    "tests/**/*test*.py",
    "tests/conftest.py",
    "tests/e2e/agent_isolation/test_file_system_isolation.py",
    "tests/e2e/agent_isolation/test_memory_isolation.py",
    "tests/e2e/agent_startup_performance_measurer.py",
    "tests/e2e/fixtures/__init__.py",
    "tests/e2e/integration/test_agent_orchestration_real_llm.py",
    "tests/e2e/integration/test_auth_jwt_refresh.py",
    "tests/e2e/integration/test_auth_jwt_security.py",
    "tests/e2e/performance/test_performance_sla_validation.py",
    "tests/e2e/resource_isolation/infrastructure/__init__.py",
    "tests/e2e/resource_isolation/suite/test_suite_core.py",
    "tests/e2e/resource_isolation/test_infrastructure.py",
    "tests/e2e/resource_isolation/test_suite.py",
    "tests/e2e/service_failure_tester.py",
    "tests/e2e/test_concurrent_agent_startup_core.py",
    "tests/e2e/test_concurrent_agent_startup_performance.py",
    "tests/e2e/test_data_factory.py",
    "tests/e2e/test_helpers.py",
    "tests/e2e/test_helpers/__init__.py",
    "tests/e2e/test_helpers/throughput_helpers.py",
    "tests/e2e/test_soak_testing.py",
    "tests/e2e/test_startup_initialization.py",
    "tests/e2e/websocket_resilience/test_2_midstream_disconnection_recovery_websocket.py",
    "tests/e2e/websocket_resilience/test_websocket_connection_concurrent.py",
    "tests/e2e/websocket_resilience/test_websocket_security_attacks.py",
    "tests/e2e/websocket_resilience/test_websocket_security_audit.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_advanced.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_flow.py",
    "tests/factories.py",
    "tests/unified/e2e/concurrent_user_simulators.py",
    "tests/unified/e2e/file_upload_pipeline_test_suite.py",
    "tests/unified/e2e/helpers/error_propagation/__init__.py",
    "tests/unified/e2e/helpers/service_independence/__init__.py",
    "tests/unified/e2e/helpers/service_independence_helpers.py",
    "tests/unified/e2e/onboarding_flow_executor.py",
    "tests/unified/e2e/session_persistence_manager.py",
    "tests/unified/e2e/test_agent_billing_flow.py",
    "tests/unified/e2e/test_agent_collaboration_real.py",
    "tests/unified/e2e/test_agent_failure_websocket_recovery.py",
    "tests/unified/e2e/test_agent_orchestration_real_llm.py",
    "tests/unified/e2e/test_ai_supply_chain_failover.py",
    "tests/unified/e2e/test_auth_token_expiry.py",
    "tests/unified/e2e/test_auth_websocket_connection.py",
    "tests/unified/e2e/test_auth_websocket_performance.py",
    "tests/unified/e2e/test_auth_websocket_recovery.py",
    "tests/unified/e2e/test_cost_tracking_accuracy.py",
    "tests/unified/e2e/test_cross_service_transaction.py",
    "tests/unified/e2e/test_data_crud_unified.py",
    "tests/unified/e2e/test_database_consistency.py",
    "tests/unified/e2e/test_disaster_recovery.py",
    "tests/unified/e2e/test_error_cascade_prevention.py",
    "tests/unified/e2e/test_export_pipeline.py",
    "tests/unified/e2e/test_health_monitoring_recovery.py",
    "tests/unified/e2e/test_memory_leak_detection.py",
    "tests/unified/e2e/test_quota_management.py",
    "tests/unified/e2e/test_real_rate_limiting.py",
    "tests/unified/e2e/test_service_failure_recovery.py",
    "tests/unified/e2e/test_session_persistence.py",
    "tests/unified/e2e/test_session_state_synchronization.py",
    "tests/unified/e2e/test_thread_management_websocket.py",
    "tests/unified/e2e/test_token_expiry_refresh.py",
    "tests/unified/e2e/test_token_lifecycle.py",
    "tests/unified/e2e/test_websocket_event_completeness.py",
    "tests/unified/e2e/test_websocket_guarantees.py",
    "tests/unified/e2e/test_websocket_message_format_validation.py",
    "tests/unified/e2e/test_websocket_message_guarantees.py",
    "tests/unified/e2e/test_websocket_resilience.py",
    "tests/unified/e2e/test_workspace_isolation.py",
    "tests/unified/e2e/websocket_message_guarantee_helpers.py",
    "tests/unified/health_service_checker.py",
    "tests/unified/oauth_flow_manager.py",
    "tests/unified/test_load_performance.py",
    "tests/unified/test_oauth_flow.py",
    "tests/unified/test_transaction_consistency.py",
    "tracing/__init__.py",
    "unified_tool_registry/__init__.py",
    "unified_tool_registry/data_management_handlers.py",
    "unified_tool_registry/execution_engine.py",
    "unified_tool_registry/models.py",
    "unified_tool_registry/optimization_handlers.py",
    "unified_tool_registry/registry.py",
    "unified_tool_registry/system_handlers.py",
    "unified_tool_registry/tool_handlers.py",
    "unified_tool_registry/tool_registrations.py",
    "| **Methodology:** [SPEC/master_wip_index.xml](SPEC/master_wip_index.xml)\n> \n> **Quick Navigation:** [Executive Summary](#executive-summary) | [Compliance Breakdown](#compliance-breakdown) | [Testing Metrics](#testing-metrics) | [Action Items](#action-items)\n\n---\n\n## Executive Summary\n\n### Overall System Health Score: **",
    "~/.config/gcloud/application_default_credentials.json",
    "üìã Index created at: SPEC/learnings/index.xml"
  ]
}