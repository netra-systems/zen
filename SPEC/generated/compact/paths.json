{
  "values": [
    "\"\n\n# Default to local build with checks\ncommand = [\n    sys.executable,\n    \"scripts/deploy_to_gcp.py\",\n    \"--project\", \"netra-staging\",\n    \"--build-local\",\n    \"--service-account\", SERVICE_ACCOUNT_KEY\n]\n\n# Add any additional arguments passed to this script\nif len(sys.argv) > 1:\n    command.extend(sys.argv[1:])\nelse:\n    # Default to running checks\n    command.append(\"--run-checks\")\n\n# Execute deployment\nsys.exit(subprocess.call(command))",
    "#!/bin/bash\n# AI Agent Metadata Archive Hook\n\necho \"Archiving metadata to audit log...\"\n\n# Archive metadata\npython scripts/metadata_archiver.py --archive\n\necho \"‚úÖ Metadata archived\"\nexit 0",
    "#!/bin/bash\n# AI Agent Metadata Validation Hook\n\necho \"Validating AI agent metadata headers...\"\n\n# Run metadata validator\npython scripts/metadata_validator.py --validate-all\n\nif [ $? -ne 0 ]; then\n    echo \"‚ùå Metadata validation failed. Please fix metadata headers before committing.\"\n    exit 1\nfi\n\necho \"‚úÖ Metadata validation passed\"\nexit 0",
    "#!/usr/bin/env python3\n\"\"\"\nWrapper script for deploying to GCP staging with service account authentication.\nAuto-generated by setup_gcp_service_account.py\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom pathlib import Path\n\n# Service account key path\nSERVICE_ACCOUNT_KEY = r\"",
    "## Next Steps\n\n1. **Run smoke tests** to verify basic functionality\n2. **Test agent workflows** end-to-end\n3. **Monitor WebSocket traffic** in dev tools\n4. **Add e2e tests** for critical event flows\n5. **Document event catalog** in SPEC/websocket_communication.xml",
    "## üõ†Ô∏è Available Tools\n- `python scripts/boundary_enforcer.py --enforce` - Full boundary check\n- `python scripts/auto_split_files.py --scan` - Automated file splitting\n- `python scripts/auto_decompose_functions.py --scan` - Function decomposition\n- `python scripts/emergency_boundary_actions.py --assess` - Emergency assessment\n\n---\n*Generated by Boundary Enforcement System v2.0 | Timestamp:",
    "% goal\n\n## Configuration\nTo enable continuous autonomous review, add to CI/CD:\n```bash\npython scripts/test_autonomous_review.py --auto\n```\n\nOr schedule hourly reviews:\n```bash\n0 * * * * cd /path/to/project && python scripts/test_autonomous_review.py --continuous\n```",
    "(ReferenceError|SyntaxError|TypeError).*at.*\\(.*\\.js",
    "**/*.json",
    "**/*.py",
    "**/*.test.ts",
    "**/*.test.tsx",
    "**/*.ts",
    "**/*.tsx",
    "**/*_test.py",
    "**/*config.json",
    "**/*test*.py",
    "**/conftest.py",
    "**/package.json",
    "**/test*.py",
    "**/test_*.py",
    "*/.pytest_cache/*",
    "*/content_corpus.json",
    "*Generated by run_review.py implementing SPEC/review.xml*",
    "- This issue has occurred before (see SPEC/learnings/auth_service_staging_errors_five_whys.xml)",
    "- [ ] Rebuild containers: `docker compose build --no-cache`\n- [ ] Check package.json/requirements.txt\n- [ ] Verify volume mounts\n- [ ] Clear Docker cache if needed",
    ".*:\"\nfiles = list(pathlib.Path(\"netra_backend/app\").rglob(\"*.py\"))\nfiles.extend(list(pathlib.Path(\"auth_service\").rglob(\"*.py\")))\nmatches = []\nfor f in files[:100]:  # Limit for speed\n    try:\n        if \"",
    ".*_test\\.py$",
    "../secrets/netra-staging-sa-key.json",
    ".config/gcloud/application_default_credentials.json",
    ".git/netra-audit-config.json",
    ".netra/migration_state.json",
    ".netra/startup_status.json",
    ".pytest_cache/",
    "/* Generated by Netra QueryBuilder */",
    "/* LLM-Generated Query */",
    "/* eslint-disable */",
    "/* tslint:disable */",
    "/**/*.py",
    "/**/*.ts",
    "/**/*.tsx",
    "/**/*_test.py",
    "/**/test_*.py",
    "/.dockerenv",
    "/.venv/",
    "/.well-known/openid_configuration",
    "// Mock fetch for config\n    global.fetch = jest.fn().mockResolvedValue({\n      json: jest.fn().mockResolvedValue({\n        ws_url: 'ws://localhost:8000/ws'\n      })\n    });",
    "/10",
    "/100",
    "/100\n- **Recommendation**: **",
    "/100\n- **Technical Debt**:",
    "/100 (",
    "/100 ---",
    "/100:",
    "/12",
    "/1k tokens)",
    "/3 service configurations",
    "/3)",
    "/5 fixes",
    "/5 fixes applied",
    "/5 startup fixes",
    "/60 seconds)",
    "/FI",
    "/[\\w\\-./]+\\.\\w+",
    "/[\\w\\-./]+\\.\\w+|[A-Z]:\\\\[\\w\\\\\\-.]+\\.\\w+",
    "/_next/static/",
    "/_next/static/chunks/webpack.js",
    "/account",
    "/actions/artifacts",
    "/actions/artifacts/",
    "/actions/runs",
    "/actions/runs/",
    "/actions/workflows/",
    "/agents",
    "/agents/metrics",
    "/agents/status",
    "/agents/{agent_name}",
    "/agents/{agent_name}/report",
    "/alerts",
    "/alerts/acknowledge",
    "/analyses",
    "/analysis/{analysis_id}",
    "/analysis/{analysis_id}/results",
    "/analysis/{analysis_id}/status",
    "/analytics",
    "/analytics/dashboard",
    "/analytics/summary",
    "/analyze",
    "/api",
    "/api-keys",
    "/api-keys/{key_id}",
    "/api-specification",
    "/api/",
    "/api/admin",
    "/api/admin/",
    "/api/admin/*",
    "/api/agent",
    "/api/agents",
    "/api/agents/",
    "/api/agents/${agentType}",
    "/api/agents/start",
    "/api/corpus",
    "/api/database",
    "/api/demo",
    "/api/demo/reports/",
    "/api/discovery",
    "/api/example-messages",
    "/api/factory-status",
    "/api/factory-status/compliance",
    "/api/generation",
    "/api/github",
    "/api/health",
    "/api/invoices/",
    "/api/llm-cache",
    "/api/mcp",
    "/api/mcp/",
    "/api/mcp/ws",
    "/api/mcp/ws (MCP-specific)",
    "/api/metrics",
    "/api/poll",
    "/api/references",
    "/api/status",
    "/api/supply",
    "/api/supply/compare",
    "/api/supply/enrich",
    "/api/supply/research",
    "/api/synthetic-data",
    "/api/synthetic/corpus",
    "/api/system",
    "/api/threads",
    "/api/threads/",
    "/api/threads/[0-9a-f-]+",
    "/api/tools",
    "/api/tools/",
    "/api/users",
    "/api/users/*",
    "/api/users/create",
    "/api/users/me",
    "/api/users/password",
    "/api/v1/auth",
    "/api/v2/agents",
    "/api/v2/users/{user_id}/messages",
    "/app",
    "/app/alembic.ini",
    "/app/config/alembic.ini",
    "/auth",
    "/auth/agents/",
    "/auth/api-call",
    "/auth/callback",
    "/auth/callback/google",
    "/auth/callback?token=",
    "/auth/check-authorization",
    "/auth/check-blacklist",
    "/auth/check-permission",
    "/auth/config",
    "/auth/create-agent",
    "/auth/create-token",
    "/auth/dev/login",
    "/auth/dev_login",
    "/auth/error?message=",
    "/auth/error?message=redirect_uri_mismatch",
    "/auth/google",
    "/auth/google/callback",
    "/auth/hash-password",
    "/auth/health",
    "/auth/impersonate",
    "/auth/login",
    "/auth/login/google",
    "/auth/login?provider=",
    "/auth/logout",
    "/auth/me",
    "/auth/oauth/",
    "/auth/refresh",
    "/auth/service-token",
    "/auth/token",
    "/auth/users/",
    "/auth/validate",
    "/auth/validate-service-token",
    "/auth/verify",
    "/auth/verify-password",
    "/auto-refresh",
    "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
    "/bulk",
    "/c",
    "/c/Users/antho/OneDrive/Desktop/Netra/netra-core-generation-1",
    "/cache",
    "/cache/clear",
    "/cache/invalidate/pattern",
    "/cache/invalidate/tag",
    "/cache/metrics",
    "/callback",
    "/callback/google",
    "/cancel/{job_id}",
    "/categories",
    "/change-password",
    "/chat",
    "/check-blacklist",
    "/circuit-breakers",
    "/circuit_breakers",
    "/claude-review",
    "/cleanup",
    "/clear",
    "/clickhouse_tables",
    "/clients",
    "/cloudsql/",
    "/cloudsql/([^:]+):([^:]+):([^&/?]+)",
    "/cloudsql/PROJECT:REGION:INSTANCE or hostname",
    "/cloudsql/[^/]+",
    "/cloudsql/[^/]+/(.+)",
    "/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "/comments",
    "/compare",
    "/config",
    "/config/public",
    "/config/update",
    "/config/user",
    "/config/validate",
    "/config/websocket",
    "/connections",
    "/connections/refresh",
    "/connections/status",
    "/containers/",
    "/content",
    "/content_corpus",
    "/convert",
    "/corpus",
    "/cors/test",
    "/create",
    "/dashboard",
    "/dashboard/metrics",
    "/dashboard/summary",
    "/data",
    "/dataRetentionSettings",
    "/database",
    "/database-env",
    "/day, $",
    "/debug/async_tasks",
    "/debug/routes",
    "/demo",
    "/dependencies/status",
    "/dev/login",
    "/dev_login",
    "/diagnostics/database",
    "/docs",
    "/docs/best-practices",
    "/document",
    "/does-not-exist",
    "/download?format=",
    "/e2e/test-auth",
    "/errors",
    "/errors/{error_id}",
    "/errors/{error_id}/resolve",
    "/etc/",
    "/etc/passwd",
    "/etc/secrets/netra-staging-sa-key.json",
    "/etc/shadow",
    "/events",
    "/example",
    "/examples",
    "/examples/action-plans",
    "/execute",
    "/export",
    "/export/report",
    "/exports/",
    "/exports/corpus_",
    "/extract",
    "/favicon.ico",
    "/force-cancel",
    "/generate",
    "/generate-simple",
    "/github",
    "/google",
    "/groups/",
    "/health",
    "/health/",
    "/health/component/{component_name}",
    "/health/database",
    "/health/external-apis",
    "/health/live",
    "/health/llm",
    "/health/ready",
    "/health/redis",
    "/health/startup",
    "/health/summary",
    "/health/system",
    "/help/requests",
    "/history",
    "/industry/{industry}/templates",
    "/info",
    "/ingest_data",
    "/initiate?pr_number=",
    "/invalid",
    "/invalid/path",
    "/issues/",
    "/jobs/{job_id}",
    "/k",
    "/latest",
    "/live",
    "/login",
    "/login route returns 404 - Next.js routing issue",
    "/login...",
    "/logout",
    "/logs",
    "/mcp",
    "/mcp/call",
    "/mcp/events",
    "/me",
    "/message",
    "/metricDescriptors/run.googleapis.com/request_count",
    "/metrics",
    "/metrics-history",
    "/metrics/business-value/objectives",
    "/metrics/current",
    "/metrics/history",
    "/metrics/quality/compliance",
    "/metrics/synthetic",
    "/metrics/velocity/trend",
    "/metrics/{circuit_name}",
    "/metrics/{metric_name}",
    "/migrate-legacy",
    "/mock",
    "/mock$",
    "/mock?",
    "/models",
    "/module/{module_name}/details",
    "/monitoring",
    "/monitoring/start",
    "/monitoring/stop",
    "/month",
    "/netra_backend/app/db/clickhouse.py",
    "/node_modules/",
    "/nonexistent",
    "/nonexistent-endpoint",
    "/notifications/settings",
    "/oauth",
    "/oauth/google/config",
    "/oauth/status",
    "/oauth2/v2.0/authorize",
    "/oauth2/v2.0/token",
    "/openapi.json",
    "/optimization",
    "/orchestration-alignment",
    "/password-reset/confirm",
    "/password-reset/request",
    "/pattern/{pattern}",
    "/performance",
    "/performance/summary",
    "/permissions",
    "/permissions/{tool_name}",
    "/ping",
    "/pool-metrics",
    "/pool-status",
    "/preferences",
    "/preview",
    "/proc/",
    "/proc/self/cgroup",
    "/profile",
    "/prompts",
    "/prompts/get",
    "/protected",
    "/providers",
    "/public",
    "/pulls/",
    "/q",
    "/raw",
    "/readiness",
    "/ready",
    "/redoc",
    "/references",
    "/references/search",
    "/references/{reference_id}",
    "/refresh",
    "/register",
    "/remediation/{module_name}",
    "/report",
    "/reports/generate",
    "/requirements.txt",
    "/resources",
    "/resources/fetch",
    "/resources/read",
    "/revoke-sessions",
    "/robots.txt",
    "/roi/calculate",
    "/role",
    "/run_agent",
    "/runs",
    "/s",
    "/sample",
    "/sandbox",
    "/sandbox/script.py",
    "/schema-validation",
    "/score",
    "/search",
    "/secrets/",
    "/security",
    "/sentiment",
    "/servers",
    "/servers/{server_name}/connect",
    "/servers/{server_name}/disconnect",
    "/servers/{server_name}/health",
    "/servers/{server_name}/resources",
    "/servers/{server_name}/status",
    "/servers/{server_name}/tools",
    "/service-token",
    "/services",
    "/services/{service_name}",
    "/session",
    "/session/{session_id}/feedback",
    "/session/{session_id}/status",
    "/sessions",
    "/sessions/{session_id}",
    "/settings",
    "/settings/default_log_table",
    "/settings/log_table",
    "/settings/log_tables",
    "/settings/time_period",
    "/site-packages/",
    "/spec",
    "/staging/backend:pr-",
    "/staging/frontend:pr-",
    "/startup",
    "/statistics",
    "/stats",
    "/status",
    "/status/{circuit_name}",
    "/status/{job_id}",
    "/stream",
    "/summary-stats",
    "/support",
    "/support/consultation",
    "/symbols/find-references",
    "/symbols/go-to-definition",
    "/symbols/hierarchy/{file_path:path}",
    "/symbols/index/rebuild",
    "/symbols/index/stats",
    "/symbols/index/update-file",
    "/symbols/navigate",
    "/symbols/search",
    "/synthetic",
    "/synthetic_data",
    "/sys/",
    "/system",
    "/system/comprehensive",
    "/tables",
    "/templates",
    "/templates/analysis",
    "/templates/optimization",
    "/templates/reports",
    "/test",
    "/test-connection",
    "/test-simple",
    "/test/",
    "/tests",
    "/tests/",
    "/tests/**/*.py",
    "/thread/{thread_id}/runs",
    "/threads",
    "/threads/",
    "/tmp/act-artifacts/",
    "/toggle",
    "/token",
    "/tools",
    "/tools/call",
    "/tools/data-validator",
    "/tools/diagnostics",
    "/tools/discover",
    "/tools/execute",
    "/tools/planning-wizard",
    "/tools/report-builder",
    "/tools/sample-analysis",
    "/tools/{server_name}/{tool_name}/schema",
    "/transactions/active",
    "/transactions/stats",
    "/trends",
    "/triage",
    "/ttl",
    "/tutorial",
    "/types/Message",
    "/types/agent",
    "/types/chat",
    "/usage",
    "/user/plan",
    "/users",
    "/usr/src/app/alembic.ini",
    "/usr/src/app/config/alembic.ini",
    "/v2/",
    "/validate",
    "/var/lib/postgresql/data",
    "/venv/",
    "/verify",
    "/version",
    "/version/",
    "/versions/",
    "/versions/latest",
    "/violations",
    "/websocket",
    "/websocket/",
    "/websocket/auth",
    "/websocket/validate",
    "/windows/system32",
    "/ws",
    "/ws (legacy insecure)",
    "/ws/",
    "/ws/config",
    "/ws/health",
    "/ws/stats",
    "/ws/test",
    "/ws/{user_id}",
    "/ws[^\"]*",
    "/{agent_name}/circuit_breaker/status",
    "/{corpus_id}",
    "/{corpus_id}/clone",
    "/{corpus_id}/content",
    "/{corpus_id}/document/{document_id}/symbols",
    "/{corpus_id}/generate",
    "/{corpus_id}/statistics",
    "/{corpus_id}/status",
    "/{corpus_id}/upload",
    "/{run_id}/state",
    "/{run_id}/status",
    "/{thread_id}",
    "/{thread_id}/auto-rename",
    "/{thread_id}/messages",
    "1. Deploy the updated services: python scripts/deploy_to_gcp.py --project netra-staging --build-local",
    "1. Run: python scripts/dev_launcher.py",
    "1. Run: python scripts/fix_all_import_issues.py --absolute-only",
    "1. Run: python scripts/migrate_llm_models.py",
    "1. Run: python scripts/update_staging_clickhouse_secrets.py",
    "2. Run: python scripts/detect_duplicate_code.py --report-only",
    "2. Test ClickHouse connectivity with: python scripts/test_staging_clickhouse.py",
    "2. Test with: python scripts/metadata_validator.py --validate-all",
    "2. Update SPEC/learnings/import_management.xml with new patterns",
    "2. Verify _is_test_context() logic in configuration/base.py",
    "2. Verify connectivity: python scripts/validate_staging_db_connection.py",
    "2. View: app/tests/examples/test_tdd_workflow_demo.py",
    "3. **Test Deployment**: Run `python scripts/deploy_to_gcp.py --project netra-staging --build-local --dry-run`",
    "3. Consult SPEC/atomic_change_specification.xml for guidance",
    "3. Follow consolidation patterns in SPEC/learnings/websocket_consolidation.xml",
    "3. Or run: python scripts/setup_gcp_service_account.py",
    "3. Run: python scripts/validate_llm_test_models.py",
    "4. Explore: test_framework/decorators.py for all options",
    "4. Re-run validation: python scripts/validate_type_deduplication.py",
    "4. Run 'python scripts/metadata_validator.py --validate-all' to check existing files",
    "4. Run: python netra_backend/tests/core/test_configuration_regression.py",
    "4. See SPEC/independent_services.xml for details",
    "4. Use a different port: python scripts/dev_launcher.py --backend-port 8001",
    "5. Check deployment configuration in scripts/deploy_to_gcp.py",
    ":/sandbox/script.py:ro",
    "<instruction>Check index.xml for complete category listing and learning IDs</instruction>",
    "<meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Architecture Health Dashboard - Netra</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
    "Agent Modification Tracking Helper\n\nThis script helps AI coding agents add or update tracking headers in modified files\naccording to the specification in SPEC/agent_tracking.xml.\n\nUsage:\n    python scripts/agent_tracking_helper.py <file_path> --agent \"Claude Code\" --model \"claude-opus-4-1\" --task-id \"conv_123\" --prompt \"Fix database query\" --changes \"Optimized query performance\"",
    "Agent Test Validator - Comprehensive test runner and quality validator for critical agent tests.\n\nThis module discovers, executes, and validates all agent test suites with comprehensive metrics.\nMaximum 300 lines, 8 lines per function as per SPEC/conventions.xml.",
    "Auth Service Configuration\nHandles environment variable loading with staging/production awareness\n\n**UPDATED**: Now uses auth_service's own IsolatedEnvironment for unified environment management.\nFollows SPEC/unified_environment_management.xml and SPEC/independent_services.xml for consistent \nenvironment access while maintaining complete microservice independence.",
    "Automatically migrate staging PostgreSQL secrets from URL format to individual variables.\n\nThis script creates/updates individual PostgreSQL secrets in GCP Secret Manager\nfor staging environment to use individual variables instead of DATABASE_URL.\n\nUsage:\n    python scripts/migrate_staging_postgres_secrets_auto.py",
    "Circular Dependency Checker for Frontend Modules\n\nThis script analyzes the frontend codebase to detect circular dependencies\nthat could cause initialization failures and white screen issues.\n\nUsage:\n    python scripts/check_circular_dependencies.py [--fix]\n    \nOptions:\n    --fix    Attempt to automatically fix simple circular dependencies",
    "Code Review System Package\nImplements SPEC/review.xml for automated code quality validation.",
    "Configuration file saved at: scripts/ga4_config.json",
    "Configuration schemas and data models.\n\n**UPDATED**: This file has been migrated to use IsolatedEnvironment\nfor unified environment management. Follows SPEC/unified_environment_management.xml.\n\nFor new code, use:\nfrom netra_backend.app.core.configuration import unified_config_manager",
    "Could not find scripts/deploy_to_gcp.py",
    "Debug script for reproducing uvicorn recursion errors.\n\nThis script was moved from tests/ to scripts/ to prevent pytest from\ndiscovering it during test collection, which was causing port binding conflicts.\n\nUsage: python scripts/debug_uvicorn_recursion.py",
    "Dependency Validation Module\nValidates Python/Node.js versions and required dependencies.",
    "Deploy with: python scripts/deploy_to_gcp.py --project",
    "Deployment Performance Validation Script\n\nValidates deployment performance against optimal settings and benchmarks.\nCreated for Iteration 3 audit follow-up - ensures deployment health and performance.\n\nUsage:\n    python scripts/validate_deployment_performance.py --environment staging\n    python scripts/validate_deployment_performance.py --environment local --detailed",
    "Disable: python scripts/manage_precommit.py disable --reason 'Your reason'",
    "Docker File Organization Compliance Checker\n\nValidates that Docker files are properly organized according to SPEC/docker_file_organization.xml",
    "Duplicate Code Detection Script\nPrevents regression of duplicate code patterns identified in WebSocket consolidation\n\nUsage:\n    python scripts/detect_duplicate_code.py [--threshold 0.8] [--report-only]\n    \nThis script detects:\n- Duplicate class names across files\n- Similar function implementations\n- Multiple wrappers for same functionality\n- Parallel implementations of same feature",
    "EXAMPLES:\n  python scripts/docker_dev_launcher.py              # Start with defaults\n  python scripts/docker_dev_launcher.py --build      # Rebuild images\n  python scripts/docker_dev_launcher.py --verbose    # Show all logs\n  python scripts/docker_dev_launcher.py --cleanup    # Stop and clean up",
    "Enable:  python scripts/manage_precommit.py enable",
    "Enhanced process cleanup utilities with comprehensive Windows support.\n\nThis module provides robust process cleanup functionality for Windows,\nwith special handling for Node.js, npm, and related development processes.\n\nBusiness Value: Platform/Internal - Development Velocity\nPrevents developer time loss due to hanging processes and port conflicts.",
    "Enhanced staging deployment script with comprehensive validation.\n\nThis script combines the existing deploy_to_gcp.py functionality with \nadditional staging-specific validation and fixes.\n\nUsage:\n    python scripts/deploy_staging_with_validation.py [--fix-issues] [--skip-build]",
    "Example: python scripts/deploy_to_gcp.py --project {} --build-local",
    "Examples:\n    python scripts/staging_validation_e2e.py --all\n    python scripts/staging_validation_e2e.py --health-only\n    python scripts/staging_validation_e2e.py --auth-flow --websocket-test\n    python scripts/staging_validation_e2e.py --export results.json",
    "Examples:\n    python scripts/staging_validation_part2_corrected.py --all\n    python scripts/staging_validation_part2_corrected.py --websocket-flows\n    python scripts/staging_validation_part2_corrected.py --thread-management --agent-features\n    python scripts/staging_validation_part2_corrected.py --export results.json",
    "Examples:\n    python scripts/staging_validation_part2_user_flows.py --all\n    python scripts/staging_validation_part2_user_flows.py --websocket-flows\n    python scripts/staging_validation_part2_user_flows.py --thread-management --agent-features\n    python scripts/staging_validation_part2_user_flows.py --export results.json",
    "Examples:\n  # Scan with default settings\n  python scripts/scan_string_literals.py\n  \n  # Scan specific directories\n  python scripts/scan_string_literals.py --dirs netra_backend/app auth_service\n  \n  # Include test files in main index\n  python scripts/scan_string_literals.py --include-tests\n  \n  # Custom output location\n  python scripts/scan_string_literals.py --output custom_index.json",
    "Examples:\n  Default deployment (fast, no checks):\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local\n    \n  With pre-deployment checks:\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local --run-checks\n    \n  Cloud Build (slower):\n    python scripts/deploy_to_gcp.py --project netra-staging\n    \nSee SPEC/gcp_deployment.xml for detailed guidelines.",
    "Examples:\n  Default deployment (with checks):\n    python scripts/deploy_staging_with_sa.py\n    \n  Quick deployment (no checks):\n    python scripts/deploy_staging_with_sa.py --no-checks\n    \n  Specify service account key:\n    python scripts/deploy_staging_with_sa.py --key path/to/key.json",
    "Examples:\n  Local validation:\n    python scripts/validate_deployment_performance.py --environment local\n    \n  Staging validation with details:\n    python scripts/validate_deployment_performance.py --environment staging --detailed\n    \n  Save results to file:\n    python scripts/validate_deployment_performance.py --environment staging --output results.json",
    "Examples:\n  python scripts/fix_port_8000_windows.py                    # Check only\n  python scripts/fix_port_8000_windows.py --kill-processes   # Kill processes using port\n  python scripts/fix_port_8000_windows.py --check-firewall   # Check firewall rules  \n  python scripts/fix_port_8000_windows.py --force            # Force kill processes and fix firewall",
    "Examples:\n  python scripts/import_management.py check       # Check for import issues\n  python scripts/import_management.py fix         # Fix import issues\n  python scripts/import_management.py verify      # Verify critical imports\n  python scripts/import_management.py all         # Run complete workflow\n  python scripts/import_management.py fix --dry-run  # Preview fixes",
    "Examples:\n  python scripts/team_updates.py                    # Last 24 hours\n  python scripts/team_updates.py --time-frame=last_hour\n  python scripts/team_updates.py --time-frame=last_week --output=report.md\n  \nTime frames:\n  last_hour     - Changes in the last hour\n  last_5_hours  - Changes in the last 5 hours  \n  last_day      - Changes in the last 24 hours (default)\n  last_week     - Changes in the last week\n  last_month    - Changes in the last month",
    "Examples:\n  python scripts/unified_import_manager.py check        # Check compliance only\n  python scripts/unified_import_manager.py fix         # Fix issues automatically  \n  python scripts/unified_import_manager.py report      # Generate detailed report\n  python scripts/unified_import_manager.py all         # Check, fix, and report\n  python scripts/unified_import_manager.py precommit   # Pre-commit hook mode",
    "Examples:\n  python scripts/validate_staging_deployment.py\n  python scripts/validate_staging_deployment.py --verbose\n  python scripts/validate_staging_deployment.py --json\n  python scripts/validate_staging_deployment.py --no-comprehensive\n  python scripts/validate_staging_deployment.py --project netra-staging --verbose",
    "For more information, see SPEC/testing.xml Mock-Real Spectrum section.",
    "GCP Deployment Script for Netra Apex Platform\nDeploys all three services (backend, auth, frontend) to Google Cloud Run\n\nIMPORTANT: This is the OFFICIAL deployment script. Do NOT create new deployment scripts.\nUse this script with appropriate flags for all GCP staging deployments.\n\nQuick Start:\n    python scripts/deploy_to_gcp.py --project netra-staging --build-local\n\nSee SPEC/gcp_deployment.xml for comprehensive deployment guidelines.",
    "GCP Load Balancer Configuration Validator\nValidates that all 6 critical requirements are properly configured in Terraform files.\n\nUsage:\n    python scripts/validate_load_balancer_config.py",
    "GCP Load Balancer Configuration Validator\nValidates that all 6 critical requirements are properly configured in Terraform files.\n\nUsage:\n    python scripts/validate_load_balancer_config_simple.py",
    "Generate OpenAPI/Swagger specification from FastAPI app and sync to ReadMe.\n\nThis script:\n1. Loads the FastAPI application\n2. Extracts the OpenAPI specification\n3. Saves it to a JSON file\n4. Optionally syncs it to ReadMe documentation platform\n\nUsage:\n    python generate_openapi_spec.py [--sync-readme] [--readme-api-key KEY] [--readme-version VERSION]",
    "High number of import errors. Run 'python scripts/import_management.py fix-all'",
    "Intelligent Remediation Orchestrator - Multi-Agent Team Coordination\n\nThis orchestrator implements the two operational modes defined in \nSPEC/intelligent_remediation_architecture.xml:\n\n1. Tool Mode: LLM agents as information providers to Claude\n2. Orchestrator Mode: Spawning autonomous Claude instances\n\nV1 Critical Implementation - Focused on core orchestration capabilities",
    "JWT Secret Consistency Validation Script\n\nThis script validates that both the auth service and backend service\nuse the same JWT secret for token validation consistency.\n\nUsage:\n    python scripts/validate_jwt_consistency.py",
    "Main FastAPI application module.\nEntry point for the Netra AI Optimization Platform.\n\nüî¥ CRITICAL AUTH ARCHITECTURE:\n- This is the MAIN BACKEND service, NOT the auth service\n- Auth service runs SEPARATELY on port 8001 (see app/auth/auth_service.py)\n- This backend ONLY uses auth_integration to connect to auth service\n- NEVER implement authentication logic here\n- All auth operations go through auth_client\n\nSee: app/auth_integration/CRITICAL_AUTH_ARCHITECTURE.md",
    "Migrate staging PostgreSQL secrets from URL format to individual variables.\n\nThis script creates/updates individual PostgreSQL secrets in GCP Secret Manager\nfor staging environment to use individual variables instead of DATABASE_URL.\n\nUsage:\n    python scripts/migrate_staging_postgres_secrets.py",
    "Move functionality to netra_backend/app/db/clickhouse.py",
    "Network Constants Validation Script\n\nValidates the new centralized network configuration module.\nBusiness Value: Platform/Internal - Configuration Validation - Ensures consistent network\nconfiguration across all environments and services.\n\nUsage:\n    python scripts/validate_network_constants.py\n    python scripts/validate_network_constants.py --environment production",
    "Node.js not found. Please install Node.js 18+ from https://nodejs.org/",
    "OAuth Health Monitor for Cloud Armor\n\nContinuously monitors OAuth callback health and alerts on issues.\nCan be run as a cron job or continuous monitoring service.\n\nUsage:\n    python scripts/monitor_oauth_health.py --once          # Single check\n    python scripts/monitor_oauth_health.py --continuous    # Run continuously\n    python scripts/monitor_oauth_health.py --alert-webhook <URL>  # Send alerts",
    "Output file path (default: SPEC/generated/string_literals.json)",
    "Path to service account JSON key file (default: config/netra-staging-7a1059b7cf26.json)",
    "Pre-Deployment Audit Script\nImplements SPEC/pre_deployment_audit.xml to catch LLM coding errors before deployment\nFocuses on RECENT changes and NEW issues, not pre-existing violations",
    "Pre-commit hook for duplicate code detection.\nIntegrates with existing detect_duplicate_code.py for fast incremental checks.\n\nUsage:\n    python scripts/precommit_duplicate_detector.py [files...]\n    \nThis script:\n1. Performs fast duplicate detection on changed files\n2. Checks against known duplicate patterns\n3. Integrates with existing architecture compliance",
    "Pre-commit hook script to prevent numbered file naming patterns.\n\nThis script prevents files with non-semantic numbered suffixes like:\n- _1.py, _2.py, _3.py (arbitrary splits)\n- _11_20.py (range patterns)\n- _core_1.py, _utilities_2.py (numbered variants)\n\nUsage:\n    python scripts/prevent_numbered_files.py [files...]\n    \nReturns:\n    0 if all files pass validation\n    1 if any files have problematic naming patterns",
    "Remove this file and use get_clickhouse_client() from netra_backend/app/db/clickhouse.py",
    "Review SPEC/learnings/websocket_consolidation.xml for consolidation strategy.",
    "Route configuration utilities for FastAPI application factory.\n\nCRITICAL: All route prefixes MUST be managed here centrally.\nIndividual routers should NOT define their own prefixes in APIRouter() initialization.\nSee SPEC/learnings/router_double_prefix_pattern.xml for details.",
    "Run 'python scripts/check_e2e_imports.py' to verify",
    "Run 'python scripts/fix_netra_backend_imports.py' to automatically fix these issues",
    "Run 'python scripts/import_management.py fix' to fix them",
    "Run 'python scripts/scan_string_literals.py' first to generate the index.",
    "Run 'python scripts/unified_import_manager.py fix' to automatically fix import issues",
    "Run tests with: python -m pytest netra_backend/tests/integration/test_gemini_optimization.py",
    "Run: python scripts/fix_all_import_issues.py --absolute-only",
    "Run: python scripts/fix_frontend_test_imports.py",
    "Run: python scripts/fix_websocket_imports.py",
    "Run: python scripts/validate_secrets.py --environment staging --project",
    "Run: python scripts/validate_staging_urls.py --environment staging --fix",
    "SPEC/*.xml",
    "SPEC/clickhouse_client_architecture.xml",
    "SPEC/gcp_deployment.xml",
    "SPEC/generated/string_literals.json",
    "SPEC/learnings/clickhouse_ssot_violation_remediation.xml",
    "SPEC/learnings/docker_remediation.xml",
    "SPEC/staging_environment.xml",
    "Script to fix invalid secrets in Google Secret Manager for staging environment.\n\nThis script addresses critical issues found in the staging secrets audit:\n1. Invalid Redis URL with placeholder password\n2. Duplicate/orphaned secrets\n3. Missing mappings\n\nRun with: python scripts/fix_staging_secrets.py",
    "See SPEC/gcp_deployment.xml for deployment guidelines.",
    "See SPEC/learnings/websocket_agent_integration_critical.xml for fix details.",
    "Setup E2E Bypass Key for Staging Environment\n\nThis script helps set up the E2E authentication bypass key in Google Secrets Manager\nfor the staging environment. It generates a secure key and stores it properly.\n\nUsage:\n    python scripts/setup_E2E_OAUTH_SIMULATION_KEY.py [--project PROJECT_ID]",
    "Staging URL Validation Script\nPrevents localhost URLs from being used in staging/production environments.\n\nThis script validates that:\n1. No localhost references exist in staging/production environment variables\n2. All URLs use appropriate protocols (https/wss for staging/production)\n3. Domain names match expected patterns for each environment\n\nUsage:\n    python scripts/validate_staging_urls.py --environment staging\n    python scripts/validate_staging_urls.py --environment production --fix",
    "Status:  python scripts/manage_precommit.py status",
    "To re-enable: python scripts/manage_precommit.py enable",
    "Update placeholder secrets in Google Secret Manager for staging deployment.\n\nThis script helps you update the placeholder secrets that are blocking deployment.\nYou need to provide your actual API keys for the services.\n\nUsage:\n    python scripts/update_placeholder_secrets.py",
    "Update staging secrets for GCP deployment.\nThis script updates critical secrets in GCP Secret Manager for staging environment.\n\nUsage:\n    python scripts/update_staging_secrets.py --check  # Check current values\n    python scripts/update_staging_secrets.py --update # Update secrets",
    "Usage: python scripts/deduplicate_types.py [--dry-run|--migrate|--validate|--clean]",
    "Usage: python scripts/precommit_duplicate_detector.py [files...]",
    "Validate Secrets Before Deployment\nEnsures all required secrets exist and have non-placeholder values.\n\nThis script MUST be run before deploying to staging or production.\nIt implements the canonical secrets management process defined in SPEC/canonical_secrets_management.xml\n\nBusiness Impact: Prevents deployment failures that cost $5K+ per incident in engineering time.",
    "Validation script for Mock-Real Spectrum compliance.\n\nThis script validates that database tests comply with testing.xml Mock-Real Spectrum\nrequirements, ensuring proper use of L3 real containers vs justified L1 mocks.\n\nUsage:\n    python scripts/validate_mock_real_spectrum_compliance.py",
    "Verify that WebSocket regression tests properly catch the bugs.\n\nThis script temporarily breaks the WebSocket implementation to verify\nthat our regression tests would fail without the fixes, then restores\nthe correct implementation.\n\nUsage:\n    python scripts/verify_websocket_regression_tests.py",
    "When deploying with: python scripts/deploy_to_gcp.py --project netra-staging",
    "Windows Port 8000 Permission Error Fix\n\nThis script resolves the Windows socket permission error [WinError 10013] that prevents\nthe backend service from binding to port 8000.\n\nCommon causes addressed:\n1. Process already using port 8000\n2. Windows firewall blocking port access\n3. Orphaned processes from previous dev launcher runs\n4. System-reserved ports (Windows dynamic port range)\n\nUsage:\n    python scripts/fix_port_8000_windows.py [--kill-processes] [--check-firewall] [--force]",
    "Windows-specific process cleanup utilities.\n\nThis module provides robust process cleanup functionality for Windows,\nparticularly for Node.js processes that tend to hang after tests or dev launcher.\n\nBusiness Value: Platform/Internal - Development Velocity\nPrevents developer time loss due to hanging processes and port conflicts.",
    "You can now run: python scripts/run_gtm_setup.py",
    "[bold green]Setup Complete![/bold green]\n\nNext steps:\n1. Edit .act.secrets with your secrets\n2. Run: python scripts/act_wrapper.py list\n3. Test: python scripts/act_wrapper.py run test-smoke\n\nDocumentation: docs/ACT_LOCAL_TESTING_GUIDE.md",
    "[green]‚úì[/green] Configuration exported to oauth_redirect_uris.json",
    "[yellow]Please ensure service account key is at: config/netra-staging-7a1059b7cf26.json[/yellow]",
    "\\.json$",
    "_(core|utilities|helpers|fixtures|services|managers)_\\d+\\.py$",
    "_\\d+\\.py$",
    "_\\d+\\.py$|_v\\d+\\.py$",
    "_\\d+_\\d+\\.py$",
    "_backup\\.py$",
    "_backup\\.xml$",
    "_batch_\\d+\\.py$",
    "_core_\\d+\\.py$",
    "_deprecated\\.xml$",
    "_enhanced\\.py$",
    "_fixed\\.py$",
    "_fixtures_\\d+\\.py$",
    "_helpers_\\d+\\.py$",
    "_legacy\\.xml$",
    "_managers_\\d+\\.py$",
    "_new\\.py$",
    "_old\\.py$",
    "_old\\.xml$",
    "_services_\\d+\\.py$",
    "_temp\\.py$",
    "_tmp\\.py$",
    "_utilities_\\d+\\.py$",
    "_v\\d+\\.py$",
    "app/**/*.py",
    "app/agents/*.py",
    "app/agents/state.py",
    "app/agents/synthetic_data_progress_tracker.py",
    "app/chat/page.tsx",
    "app/core/*.py",
    "app/core/degradation_strategies.py",
    "app/db/*.py",
    "app/main.py",
    "app/monitoring/alert_manager_core.py",
    "app/monitoring/alert_notifications.py",
    "app/page.tsx",
    "app/routes/utils/thread_title_generator.py",
    "app/routes/websockets.py",
    "app/schemas.py",
    "app/schemas/WebSocket.py",
    "app/schemas/websocket_types.py",
    "app/services/admin.py",
    "app/services/agent_service.py",
    "app/services/security_service.py",
    "app/services/user.py",
    "app/tests/**/*test*.py",
    "app/tests/agents/test_supervisor_consolidated_comprehensive.py",
    "app/tests/core/test_async_utils.py",
    "app/tests/core/test_error_handling.py",
    "app/tests/core/test_missing_tests_11_30.py",
    "app/tests/performance/test_agent_load_stress.py",
    "app/tests/performance/test_benchmark_metrics.py",
    "app/tests/performance/test_concurrent_processing.py",
    "app/tests/performance/test_corpus_generation_perf.py",
    "app/tests/performance/test_database_performance.py",
    "app/tests/performance/test_large_scale_generation.py",
    "app/tests/routes/test_health_route.py",
    "app/tests/services/test_quality_gate_service_comprehensive.py",
    "app/tests/services/test_tool_permission_service_comprehensive.py",
    "app/utils/helpers.py",
    "app/websocket/*.py",
    "app/ws_manager.py",
    "auth/context.tsx",
    "auth_service/**/*.py",
    "auth_service/tests/**/*.py",
    "auth_service/tests/**/*test*.py",
    "auth_service/tests/test_auth_comprehensive.py",
    "background_jobs/__init__.py",
    "caching/__init__.py",
    "cat SPEC/learnings/import_management.xml",
    "components/chat/MainChat.tsx",
    "config/audit.json",
    "config\\.json",
    "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; font-src 'self' data: https://cdn.jsdelivr.net; img-src 'self' data: https://cdn.jsdelivr.net https://fastapi.tiangolo.com; connect-src 'self'",
    "dev_launcher/secret_loader.py",
    "discovery/__init__.py",
    "frontend/**/*.test.py",
    "frontend/**/*.ts",
    "frontend/**/*.tsx",
    "frontend/__tests__/integration/critical/backend-authentication-system-failure.test.tsx",
    "frontend/__tests__/utils/test-helpers.tsx",
    "frontend/package.json",
    "frontend/src/services/websocket.js",
    "frontend/types/agent.ts",
    "frontend/types/backend_schema_auto_generated.ts",
    "frontend/types/chat.ts",
    "frontend/types/domains/agents.ts",
    "frontend/types/domains/messages.ts",
    "frontend/types/domains/threads.ts",
    "frontend/types/domains/websocket.ts",
    "frontend/types/shared/base.ts",
    "frontend/types/store-types.ts",
    "grep -r --include='*.py' '^def .*):$' app/ | head -20",
    "grep -r --include='*.py' 'except:' app/ | head -10",
    "grep -r --include='*.py' 'f\".*SELECT\\|f\".*INSERT\\|f\".*UPDATE\\|f\".*DELETE' app/ | head -5",
    "grep -r --include='*.py' 'for .* in .*:' app/ | grep -A 2 'db\\|query\\|select' | head -10",
    "grep -r --include='*.py' --include='*.ts' --include='*.tsx' 'TODO\\|FIXME' . | head -20",
    "grep -r --include='*.ts' --include='*.tsx' ': any' frontend/types/ | head -10",
    "grep -r --include='*.ts' --include='*.tsx' '\\.then(' frontend/ | grep -v '\\.catch(' | head -10",
    "grep -r --include='*.ts' --include='*.tsx' 'console\\.log' frontend/ | head -10",
    "lib/logger.ts",
    "lib/unified-api-config.ts",
    "logs/emergency_report.json",
    "logs/urgent_violations.json",
    "logs/warning_report.json",
    "modules/__init__.py",
    "modules/netra_mcp_core.py",
    "modules/netra_mcp_models.py",
    "modules/netra_mcp_prompts.py",
    "modules/netra_mcp_resources.py",
    "modules/netra_mcp_tools.py",
    "netra_backend/**/*.py",
    "netra_backend/app/agents/actions_agent_execution.py",
    "netra_backend/app/agents/actions_to_meet_goals_sub_agent.py",
    "netra_backend/app/agents/admin_tool_dispatcher/tool_handlers_core.py",
    "netra_backend/app/agents/admin_tool_dispatcher/validation.py",
    "netra_backend/app/agents/chat_orchestrator/model_cascade.py",
    "netra_backend/app/agents/chat_orchestrator_main.py",
    "netra_backend/app/agents/corpus_admin/agent.py",
    "netra_backend/app/agents/data_sub_agent/analysis_engine.py",
    "netra_backend/app/agents/data_sub_agent/anomaly_detector.py",
    "netra_backend/app/agents/data_sub_agent/clickhouse_client.py",
    "netra_backend/app/agents/data_sub_agent/execution_core.py",
    "netra_backend/app/agents/data_sub_agent/execution_engine.py",
    "netra_backend/app/agents/demo_service/optimization.py",
    "netra_backend/app/agents/mcp_integration/context_manager.py",
    "netra_backend/app/agents/mcp_integration/mcp_intent_detector.py",
    "netra_backend/app/agents/optimizations_core_sub_agent.py",
    "netra_backend/app/agents/reporting_sub_agent.py",
    "netra_backend/app/agents/supervisor_admin_init.py",
    "netra_backend/app/agents/supervisor_consolidated.py",
    "netra_backend/app/agents/synthetic_data/core.py",
    "netra_backend/app/agents/triage_sub_agent.py",
    "netra_backend/app/agents/triage_sub_agent/executor.py",
    "netra_backend/app/agents/triage_sub_agent/processing.py",
    "netra_backend/app/auth_integration/auth.py",
    "netra_backend/app/clickhouse/__init__.py",
    "netra_backend/app/core/configuration/database.py",
    "netra_backend/app/core/configuration/environment.py",
    "netra_backend/app/core/configuration/environment_detector.py",
    "netra_backend/app/core/configuration/secrets.py",
    "netra_backend/app/core/configuration/services.py",
    "netra_backend/app/core/configuration/unified_secrets.py",
    "netra_backend/app/core/database.py",
    "netra_backend/app/core/health_configuration.py",
    "netra_backend/app/core/startup_config.py",
    "netra_backend/app/core/transaction_core.py",
    "netra_backend/app/database/migration_manager.py",
    "netra_backend/app/db/clickhouse.py",
    "netra_backend/app/db/clickhouse_client.py",
    "netra_backend/app/db/clickhouse_reliable_manager.py",
    "netra_backend/app/db/client_clickhouse.py",
    "netra_backend/app/db/database_initializer.py",
    "netra_backend/app/db/models.py",
    "netra_backend/app/db/postgres_core.py",
    "netra_backend/app/dependencies.py",
    "netra_backend/app/error_aggregator.py",
    "netra_backend/app/guardrails/input_filters.py",
    "netra_backend/app/main.py",
    "netra_backend/app/models/message.py",
    "netra_backend/app/monitoring/prometheus_exporter.py",
    "netra_backend/app/routes/websocket_secure.py",
    "netra_backend/app/routes/websocket_unified.py",
    "netra_backend/app/services/apex_optimizer_agent/models.py",
    "netra_backend/app/services/cache/semantic_cache.py",
    "netra_backend/app/services/external_service_client.py",
    "netra_backend/app/services/file_storage_service.py",
    "netra_backend/app/services/llm/cost_optimizer.py",
    "netra_backend/app/services/startup_fixes_integration.py",
    "netra_backend/app/services/supply_research_scheduler.py",
    "netra_backend/app/services/tenant_service.py",
    "netra_backend/app/services/unified_health_service.py",
    "netra_backend/app/services/user_auth_service.py",
    "netra_backend/app/services/websocket_manager.py",
    "netra_backend/app/startup_module.py",
    "netra_backend/app/tools/deep_research_api.py",
    "netra_backend/app/tools/sandboxed_interpreter.py",
    "netra_backend/app/websocket/__init__.py",
    "netra_backend/app/websocket_core/batch_message_core.py",
    "netra_backend/app/websocket_core/batch_message_handler.py",
    "netra_backend/app/websocket_core/broadcast.py",
    "netra_backend/app/websocket_core/broadcast_core.py",
    "netra_backend/app/websocket_core/compression.py",
    "netra_backend/app/websocket_core/connection_executor.py",
    "netra_backend/app/websocket_core/connection_info.py",
    "netra_backend/app/websocket_core/enhanced_rate_limiter.py",
    "netra_backend/app/websocket_core/error_recovery_handler.py",
    "netra_backend/app/websocket_core/performance_monitor_core.py",
    "netra_backend/app/websocket_core/rate_limiter.py",
    "netra_backend/app/websocket_core/reconnection_types.py",
    "netra_backend/app/websocket_core/state_synchronization_manager.py",
    "netra_backend/app/websocket_core/state_synchronizer.py",
    "netra_backend/app/websocket_core/unified.py",
    "netra_backend/app/websocket_core_info.py",
    "netra_backend/tests/**/*.py",
    "netra_backend/tests/agents/test_data_sub_agent_consolidated.py",
    "netra_backend/tests/agents/test_supply_researcher_scheduler.py",
    "netra_backend/tests/clickhouse/metrics_aggregation_tests.py",
    "netra_backend/tests/clickhouse/test_performance_metrics_extraction.py",
    "netra_backend/tests/clickhouse/test_query_correctness.py",
    "netra_backend/tests/core/test_core_comprehensive.py",
    "netra_backend/tests/critical/test_execution_context_hashable_regression.py",
    "netra_backend/tests/datetime_string_test_helpers.py",
    "netra_backend/tests/debug_migration_test_helpers.py",
    "netra_backend/tests/e2e/conftest.py",
    "netra_backend/tests/e2e/test_complete_real_pipeline_e2e.py",
    "netra_backend/tests/helpers/staging_base.py",
    "netra_backend/tests/integration/backend-authentication-integration-failures.py",
    "netra_backend/tests/integration/base.py",
    "netra_backend/tests/integration/critical_missing/shared_infrastructure/containerized_services.py",
    "netra_backend/tests/integration/critical_paths/l4_staging_critical_base.py",
    "netra_backend/tests/integration/critical_paths/test_billing_accuracy_l4.py",
    "netra_backend/tests/integration/critical_paths/test_dashboard_query_performance.py",
    "netra_backend/tests/integration/critical_paths/test_enterprise_auth_integration_l4.py",
    "netra_backend/tests/integration/critical_paths/test_multi_tenant_data_isolation_l4.py",
    "netra_backend/tests/integration/critical_paths/test_performance_scalability_l2.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_e2e_l4.py",
    "netra_backend/tests/integration/critical_paths/test_production_deployment_validation_l4.py",
    "netra_backend/tests/integration/deployment_config_fixtures.py",
    "netra_backend/tests/integration/integration.py",
    "netra_backend/tests/integration/sso_saml_components.py",
    "netra_backend/tests/integration/staging_config/base.py",
    "netra_backend/tests/integration/test_auth_edge_cases_l3.py",
    "netra_backend/tests/integration/test_dev_launcher_startup.py",
    "netra_backend/tests/integration/test_unified_message_flow.py",
    "netra_backend/tests/integration/test_user_login_flows_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_extended_l3.py",
    "netra_backend/tests/integration/test_websocket_auth_cold_start_l3.py",
    "netra_backend/tests/integration/test_websocket_subprotocol_negotiation_regression.py",
    "netra_backend/tests/integration/test_ws_connection_mocks.py",
    "netra_backend/tests/json_file_crypto_test_helpers.py",
    "netra_backend/tests/llm_mocks.py",
    "netra_backend/tests/network_pagination_test_helpers.py",
    "netra_backend/tests/performance/performance_baseline_config.py",
    "netra_backend/tests/performance/test_agent_load_stress.py",
    "netra_backend/tests/performance/test_comprehensive_backend_performance.py",
    "netra_backend/tests/performance/test_performance_monitoring.py",
    "netra_backend/tests/performance/test_sla_compliance.py",
    "netra_backend/tests/services/test_scheduler_jobs_core.py",
    "netra_backend/tests/services/test_scheduler_retry_logic.py",
    "netra_backend/tests/services/test_supply_research_scheduler_jobs.py",
    "netra_backend/tests/test_compression_auth.py",
    "netra_backend/tests/test_config_core.py",
    "netra_backend/tests/test_health_monitor_adaptive.py",
    "netra_backend/tests/test_performance_batching.py",
    "netra_backend/tests/test_route_fixtures.py",
    "netra_backend/tests/test_utilities.py",
    "netra_backend/tests/test_websocket_bidirectional_types.py",
    "netra_backend/tests/unified_system/test_dev_launcher_startup.py",
    "netra_backend/tests/unified_system/test_service_recovery.py",
    "netra_backend/tests/unit/test_metrics_collector_core.py",
    "netra_backend/tests/unit/test_websocket_state_checking_regression.py",
    "netra_backend/tests/websocket/test_connection_manager.py",
    "netra_backend/tests/websocket/test_message_handler.py",
    "netra_backend/tests/websocket/test_websocket_integration_performance.py",
    "netra_mcp/__init__.py",
    "payments/__init__.py",
    "providers/WebSocketProvider.tsx",
    "python netra_backend/app/alembic/run_migrations.py",
    "python scripts/audit_staging_oauth_secrets.py --update \\",
    "python scripts/boundary_enforcer.py",
    "python scripts/boundary_enforcer.py --check",
    "python scripts/check_architecture_compliance.py",
    "python scripts/check_architecture_compliance.py --ci-mode",
    "python scripts/check_e2e_imports.py --report",
    "python scripts/cleanup_duplicate_tests.py",
    "python scripts/code_audit_orchestrator.py",
    "python scripts/compliance/stub_checker.py",
    "python scripts/comprehensive_import_scanner.py",
    "python scripts/comprehensive_import_scanner.py --json-output",
    "python scripts/deploy_staging.py",
    "python scripts/deploy_to_gcp.py --project",
    "python scripts/deploy_to_gcp.py --project netra-staging --build-local",
    "python scripts/deploy_to_gcp.py --service auth --build-local",
    "python scripts/dev_launcher.py",
    "python scripts/diagnose_migration_state.py --recover",
    "python scripts/docker_compose_log_introspector.py analyze",
    "python scripts/docker_env_manager.py start",
    "python scripts/docker_env_manager.py stop all",
    "python scripts/docker_services.py logs netra      # View Netra logs",
    "python scripts/docker_services.py start frontend  # Start just frontend",
    "python scripts/docker_services.py start full      # Start everything",
    "python scripts/docker_services.py start netra     # Start just Netra backend",
    "python scripts/docker_services.py start test      # Start test environment",
    "python scripts/docker_services.py stop            # Stop all services",
    "python scripts/duplicate_detector.py",
    "python scripts/duplicate_detector.py --severity high --max-results 5",
    "python scripts/fix_all_import_issues.py --absolute-only",
    "python scripts/fix_netra_backend_imports.py",
    "python scripts/import_management.py all",
    "python scripts/import_management.py check",
    "python scripts/import_management.py fix",
    "python scripts/prevent_numbered_files.py --check",
    "python scripts/prevent_numbered_files.py --fix",
    "python scripts/scan_string_literals.py",
    "python scripts/setup_gcp_service_account.py",
    "python scripts/team_updates_sync.py last_day",
    "python scripts/unified_import_manager.py fix",
    "python tests/e2e/staging_auth_bypass.py",
    "python tests/post_deployment/test_auth_integration.py --environment",
    "quality_gate/__init__.py",
    "quality_gate/quality_gate_core.py",
    "quality_gate/quality_gate_metrics.py",
    "quality_gate/quality_gate_models.py",
    "quality_gate/quality_gate_patterns.py",
    "quality_gate/quality_gate_validators.py",
    "reports/cleanup_log.json",
    "reports/coverage/coverage.json",
    "scripts/**/*.py",
    "scripts/*.py",
    "scripts/auto_split_files.py",
    "scripts/boundary_enforcer.py",
    "scripts/business_value_test_index.py",
    "scripts/check_architecture_compliance.py",
    "scripts/code_audit_orchestrator.py",
    "scripts/deploy_to_gcp.py",
    "scripts/detect_duplicate_code.py",
    "scripts/docker_log_introspection.py",
    "scripts/fix_e2e_imports.py",
    "scripts/fix_staging_deployment.py",
    "scripts/netra-staging-sa-key.json",
    "scripts/scan_string_literals.py",
    "scripts/setup_e2e_test_ports.py",
    "scripts/validate_secrets.py",
    "scripts/validate_staging_config.py",
    "scripts/workflow_validator.py",
    "secrets/netra-staging-sa-key.json",
    "secrets\\.json",
    "shared/schemas.json",
    "shared/types.ts",
    "test_.*\\.py$",
    "test_framework/**/*.py",
    "test_framework/comprehensive_reporter.py",
    "test_framework/real_services_test_fixtures.py",
    "test_framework/runner.py",
    "test_framework/test_discovery.py",
    "test_reports/test_report_20250824_090437.json",
    "tests/**/*.py",
    "tests/**/*test*.py",
    "tests/conftest.py",
    "tests/critical/test_websocket_agent_startup.py",
    "tests/critical/test_websocket_circular_import_regression.py",
    "tests/critical/test_websocket_message_regression.py",
    "tests/e2e/agent_isolation/test_file_system_isolation.py",
    "tests/e2e/agent_isolation/test_memory_isolation.py",
    "tests/e2e/agent_startup_performance_measurer.py",
    "tests/e2e/conftest.py",
    "tests/e2e/first_time_user/real_critical_auth_helpers.py",
    "tests/e2e/fixtures/__init__.py",
    "tests/e2e/integration/test_agent_orchestration_real_llm.py",
    "tests/e2e/integration/test_auth_jwt_refresh.py",
    "tests/e2e/integration/test_auth_jwt_security.py",
    "tests/e2e/performance/test_performance_sla_validation.py",
    "tests/e2e/resource_isolation/infrastructure/__init__.py",
    "tests/e2e/resource_isolation/suite/test_suite_core.py",
    "tests/e2e/resource_isolation/test_infrastructure.py",
    "tests/e2e/resource_isolation/test_suite.py",
    "tests/e2e/service-to-service-authentication-failures.py",
    "tests/e2e/service_failure_tester.py",
    "tests/e2e/test_agent_orchestration_e2e_comprehensive.py",
    "tests/e2e/test_concurrent_agent_startup_core.py",
    "tests/e2e/test_concurrent_agent_startup_performance.py",
    "tests/e2e/test_cors_dynamic_ports.py",
    "tests/e2e/test_data_factory.py",
    "tests/e2e/test_helpers.py",
    "tests/e2e/test_helpers/__init__.py",
    "tests/e2e/test_helpers/throughput_helpers.py",
    "tests/e2e/test_performance_targets.py",
    "tests/e2e/test_rapid_message_succession_agent.py",
    "tests/e2e/test_rapid_message_succession_api.py",
    "tests/e2e/test_rapid_message_succession_core.py",
    "tests/e2e/test_resource_limits.py",
    "tests/e2e/test_response_quality.py",
    "tests/e2e/test_soak_testing.py",
    "tests/e2e/test_spike_recovery_core.py",
    "tests/e2e/test_spike_recovery_performance.py",
    "tests/e2e/test_startup_initialization.py",
    "tests/e2e/test_websocket_immediate_disconnect_regression.py",
    "tests/e2e/websocket_resilience/test_2_midstream_disconnection_recovery_websocket.py",
    "tests/e2e/websocket_resilience/test_websocket_connection_concurrent.py",
    "tests/e2e/websocket_resilience/test_websocket_security_attacks.py",
    "tests/e2e/websocket_resilience/test_websocket_security_audit.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_advanced.py",
    "tests/e2e/websocket_resilience/test_websocket_token_refresh_flow.py",
    "tests/factories.py",
    "tests/integration/critical_paths/test_websocket_binary_message_handling.py",
    "tests/integration/critical_paths/test_websocket_broadcast_performance.py",
    "tests/integration/critical_paths/test_websocket_circuit_breaker.py",
    "tests/integration/critical_paths/test_websocket_connection_draining.py",
    "tests/integration/critical_paths/test_websocket_connection_pooling.py",
    "tests/integration/critical_paths/test_websocket_health_check.py",
    "tests/integration/critical_paths/test_websocket_heartbeat_monitoring.py",
    "tests/integration/critical_paths/test_websocket_message_compression.py",
    "tests/integration/critical_paths/test_websocket_message_delivery_guarantee.py",
    "tests/integration/critical_paths/test_websocket_rate_limiting_per_client.py",
    "tests/integration/critical_paths/test_websocket_reconnection_state_recovery.py",
    "tests/integration/test_websocket_agent_integration.py",
    "tests/integration/test_websocket_redis_pubsub.py",
    "tests/mission_critical/test_final_validation.py",
    "tests/mission_critical/test_websocket_agent_events_suite.py",
    "tests/mission_critical/test_websocket_agent_events_suite.py::TestRegressionPrevention",
    "tests/services/test_ws_connection_basic.py",
    "tests/services/test_ws_connection_mocks.py",
    "tests/services/test_ws_connection_performance.py",
    "tests/unified/e2e/concurrent_user_simulators.py",
    "tests/unified/e2e/file_upload_pipeline_test_suite.py",
    "tests/unified/e2e/helpers/error_propagation/__init__.py",
    "tests/unified/e2e/helpers/service_independence/__init__.py",
    "tests/unified/e2e/helpers/service_independence_helpers.py",
    "tests/unified/e2e/onboarding_flow_executor.py",
    "tests/unified/e2e/session_persistence_manager.py",
    "tests/unified/e2e/test_agent_billing_flow.py",
    "tests/unified/e2e/test_agent_collaboration_real.py",
    "tests/unified/e2e/test_agent_failure_websocket_recovery.py",
    "tests/unified/e2e/test_agent_orchestration_real_llm.py",
    "tests/unified/e2e/test_ai_supply_chain_failover.py",
    "tests/unified/e2e/test_auth_token_expiry.py",
    "tests/unified/e2e/test_auth_websocket_connection.py",
    "tests/unified/e2e/test_auth_websocket_performance.py",
    "tests/unified/e2e/test_auth_websocket_recovery.py",
    "tests/unified/e2e/test_cost_tracking_accuracy.py",
    "tests/unified/e2e/test_cross_service_transaction.py",
    "tests/unified/e2e/test_data_crud_unified.py",
    "tests/unified/e2e/test_database_consistency.py",
    "tests/unified/e2e/test_disaster_recovery.py",
    "tests/unified/e2e/test_error_cascade_prevention.py",
    "tests/unified/e2e/test_export_pipeline.py",
    "tests/unified/e2e/test_health_monitoring_recovery.py",
    "tests/unified/e2e/test_memory_leak_detection.py",
    "tests/unified/e2e/test_quota_management.py",
    "tests/unified/e2e/test_real_rate_limiting.py",
    "tests/unified/e2e/test_service_failure_recovery.py",
    "tests/unified/e2e/test_session_persistence.py",
    "tests/unified/e2e/test_session_state_synchronization.py",
    "tests/unified/e2e/test_thread_management_websocket.py",
    "tests/unified/e2e/test_token_expiry_refresh.py",
    "tests/unified/e2e/test_token_lifecycle.py",
    "tests/unified/e2e/test_websocket_event_completeness.py",
    "tests/unified/e2e/test_websocket_guarantees.py",
    "tests/unified/e2e/test_websocket_message_format_validation.py",
    "tests/unified/e2e/test_websocket_message_guarantees.py",
    "tests/unified/e2e/test_websocket_resilience.py",
    "tests/unified/e2e/test_workspace_isolation.py",
    "tests/unified/e2e/websocket_message_guarantee_helpers.py",
    "tests/unified/health_service_checker.py",
    "tests/unified/oauth_flow_manager.py",
    "tests/unified/test_load_performance.py",
    "tests/unified/test_oauth_flow.py",
    "tests/unified/test_transaction_consistency.py",
    "tests/unit/test_websocket_connection_paradox_regression.py",
    "tests/websocket/test_websocket_regression_prevention.py",
    "tracing/__init__.py",
    "unified_tool_registry/__init__.py",
    "unified_tool_registry/data_management_handlers.py",
    "unified_tool_registry/execution_engine.py",
    "unified_tool_registry/models.py",
    "unified_tool_registry/optimization_handlers.py",
    "unified_tool_registry/registry.py",
    "unified_tool_registry/system_handlers.py",
    "unified_tool_registry/tool_handlers.py",
    "unified_tool_registry/tool_registrations.py",
    "| **Methodology:** [SPEC/master_wip_index.xml](SPEC/master_wip_index.xml)\n> \n> **Quick Navigation:** [Executive Summary](#executive-summary) | [Compliance Breakdown](#compliance-breakdown) | [Testing Metrics](#testing-metrics) | [Action Items](#action-items)\n\n---\n\n## Executive Summary\n\n### Overall System Health Score: **",
    "~/.config/gcloud/application_default_credentials.json",
    "‚ö†Ô∏è Secret validation script not found (scripts/validate_secrets.py)",
    "üìã Index created at: SPEC/learnings/index.xml",
    "üîß Run: python scripts/diagnose_migration_state.py --recover"
  ]
}