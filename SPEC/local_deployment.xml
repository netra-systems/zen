<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Local Deployment Options</name>
        <type>deployment</type>
        <version>1.0</version>
        <last_updated>2025-08-15</last_updated>
        <description>Deployment options from local development machines without GitHub Actions runners</description>
    </metadata>

    <sections>
        <section id="overview" order="1">
            <title>Local Deployment Overview</title>
            <description>
                This specification documents the ability to deploy the Netra platform from local development
                machines directly to remote staging environments, bypassing the need for GitHub Actions runners.
                This provides developers with faster iteration cycles and direct control over deployments.
            </description>
            <benefits>
                <benefit>Faster deployment cycles without waiting for CI/CD runners</benefit>
                <benefit>Direct debugging capability during deployment issues</benefit>
                <benefit>Local testing of deployment scripts before committing</benefit>
                <benefit>Reduced dependency on GitHub Actions availability</benefit>
                <benefit>Cost savings by using local compute resources for builds</benefit>
            </benefits>
        </section>

        <section id="deployment-methods" order="2">
            <title>Available Deployment Methods</title>
            
            <method id="remote-gcp-staging">
                <name>Remote GCP Staging Deployment</name>
                <description>Deploy directly to GCP staging environment from local machine</description>
                <scripts>
                    <script platform="all">deploy_staging_remote.py</script>
                </scripts>
                <capabilities>
                    <capability>Build Docker images locally</capability>
                    <capability>Push images to Google Container Registry</capability>
                    <capability>Deploy infrastructure with Terraform</capability>
                    <capability>Run smoke tests on deployed services</capability>
                    <capability>Manage deployment lifecycle (deploy, destroy, restart, status)</capability>
                </capabilities>
            </method>
            
            <method id="local-docker-staging">
                <name>Local Docker Staging</name>
                <description>Run staging environment locally using Docker Compose</description>
                <scripts>
                    <script platform="all">deploy_staging_local.py</script>
                </scripts>
                <capabilities>
                    <capability>Run full stack locally with Docker Compose</capability>
                    <capability>Use ACT to simulate GitHub Actions locally</capability>
                    <capability>Test changes without cloud resources</capability>
                </capabilities>
            </method>
        </section>

        <section id="prerequisites" order="3">
            <title>Prerequisites</title>
            
            <requirement id="docker">
                <name>Docker Desktop</name>
                <description>Required for building and running containers</description>
                <installation>
                    <windows>Download from https://www.docker.com/products/docker-desktop</windows>
                    <mac>brew install --cask docker</mac>
                    <linux>Follow distribution-specific Docker installation guide</linux>
                </installation>
                <verification>docker --version</verification>
            </requirement>
            
            <requirement id="gcloud">
                <name>Google Cloud SDK</name>
                <description>Required for GCP authentication and resource management</description>
                <installation>
                    <windows>Download installer from https://cloud.google.com/sdk/docs/install</windows>
                    <mac>brew install google-cloud-sdk</mac>
                    <linux>curl https://sdk.cloud.google.com | bash</linux>
                </installation>
                <verification>gcloud --version</verification>
                <authentication>gcloud auth login</authentication>
            </requirement>
            
            <requirement id="terraform">
                <name>Terraform</name>
                <description>Required for infrastructure as code deployment</description>
                <version>1.5.0 or later</version>
                <installation>
                    <windows>choco install terraform</windows>
                    <mac>brew install terraform</mac>
                    <linux>Download from https://www.terraform.io/downloads</linux>
                </installation>
                <verification>terraform --version</verification>
            </requirement>
            
            <requirement id="git">
                <name>Git</name>
                <description>Required for commit SHA and branch information</description>
                <verification>git --version</verification>
            </requirement>
        </section>

        <section id="environment-setup" order="4">
            <title>Environment Setup</title>
            
            <configuration id="gcp-auth">
                <name>GCP Authentication</name>
                <steps>
                    <step>Run: gcloud auth login</step>
                    <step>Select or create a project: gcloud config set project PROJECT_ID</step>
                    <step>Configure Docker: gcloud auth configure-docker gcr.io</step>
                </steps>
            </configuration>
            
            <configuration id="env-variables">
                <name>Environment Variables</name>
                <variables>
                    <variable name="GCP_STAGING_PROJECT_ID" required="true">
                        <description>GCP project ID for staging environment</description>
                    </variable>
                    <variable name="TF_STAGING_STATE_BUCKET" required="false">
                        <description>Terraform state bucket (defaults to netra-staging-terraform-state)</description>
                    </variable>
                    <variable name="POSTGRES_PASSWORD_STAGING" required="false">
                        <description>PostgreSQL password (defaults to staging-password)</description>
                    </variable>
                    <variable name="CLICKHOUSE_PASSWORD_STAGING" required="false">
                        <description>ClickHouse password (defaults to staging-clickhouse)</description>
                    </variable>
                    <variable name="JWT_SECRET_KEY_STAGING" required="false">
                        <description>JWT secret for authentication</description>
                    </variable>
                    <variable name="FERNET_KEY_STAGING" required="false">
                        <description>Fernet encryption key</description>
                    </variable>
                    <variable name="GEMINI_API_KEY_STAGING" required="false">
                        <description>Gemini API key for LLM functionality</description>
                    </variable>
                </variables>
            </configuration>
        </section>

        <section id="usage-examples" order="5">
            <title>Usage Examples</title>
            
            <example id="deploy-new">
                <name>Deploy New PR Environment</name>
                <platform>Windows PowerShell</platform>
                <command>python deploy_staging_remote.py --action deploy --pr-number 123</command>
                <description>Creates a new staging environment for PR 123</description>
            </example>
            
            <example id="deploy-branch">
                <name>Deploy Current Branch</name>
                <platform>Unix/Linux</platform>
                <command>python deploy_staging_remote.py deploy</command>
                <description>Deploys current git branch to staging</description>
            </example>
            
            <example id="check-status">
                <name>Check Deployment Status</name>
                <platform>Windows PowerShell</platform>
                <command>python deploy_staging_remote.py --action status --pr-number 123</command>
                <description>Checks the status of PR 123 deployment</description>
            </example>
            
            <example id="restart-services">
                <name>Restart Services</name>
                <platform>Unix/Linux</platform>
                <command>python deploy_staging_remote.py restart 123</command>
                <description>Restarts services for PR 123 environment</description>
            </example>
            
            <example id="destroy-environment">
                <name>Destroy Environment</name>
                <platform>Windows PowerShell</platform>
                <command>python deploy_staging_remote.py --action destroy --pr-number 123</command>
                <description>Tears down PR 123 staging environment</description>
            </example>
            
            <example id="skip-build">
                <name>Deploy with Existing Images</name>
                <platform>Unix/Linux</platform>
                <command>python deploy_staging_remote.py deploy 123 main --no-build --use-existing</command>
                <description>Deploy PR 123 skipping Docker build (uses existing images)</description>
            </example>
        </section>

        <section id="troubleshooting" order="6">
            <title>Troubleshooting</title>
            
            <issue id="docker-not-running">
                <problem>Docker is not running</problem>
                <symptoms>
                    <symptom>Error: Docker is not running</symptom>
                    <symptom>Cannot connect to Docker daemon</symptom>
                </symptoms>
                <solution>
                    <step>Start Docker Desktop application</step>
                    <step>Wait for Docker to fully initialize</step>
                    <step>Verify with: docker info</step>
                </solution>
            </issue>
            
            <issue id="gcp-auth-failed">
                <problem>GCP authentication failed</problem>
                <symptoms>
                    <symptom>Error: GCP authentication failed</symptom>
                    <symptom>No active account found</symptom>
                </symptoms>
                <solution>
                    <step>Run: gcloud auth login</step>
                    <step>Follow browser authentication flow</step>
                    <step>Set project: gcloud config set project PROJECT_ID</step>
                    <step>Verify: gcloud auth list</step>
                </solution>
            </issue>
            
            <issue id="terraform-state-lock">
                <problem>Terraform state lock error</problem>
                <symptoms>
                    <symptom>Error acquiring the state lock</symptom>
                    <symptom>Lock file exists in GCS bucket</symptom>
                </symptoms>
                <solution>
                    <step>Check for stale locks: gsutil ls gs://BUCKET/PREFIX/</step>
                    <step>If confirmed stale, remove: gsutil rm gs://BUCKET/PREFIX/default.tflock</step>
                    <step>Retry deployment</step>
                </solution>
            </issue>
            
            <issue id="image-push-failed">
                <problem>Docker image push to GCR failed</problem>
                <symptoms>
                    <symptom>unauthorized: authentication required</symptom>
                    <symptom>denied: Token exchange failed</symptom>
                </symptoms>
                <solution>
                    <step>Re-authenticate Docker: gcloud auth configure-docker gcr.io</step>
                    <step>Verify project permissions</step>
                    <step>Check GCR API is enabled in project</step>
                </solution>
            </issue>
        </section>

        <section id="best-practices" order="7">
            <title>Best Practices</title>
            
            <practice id="auth-check">
                <name>Always Verify Authentication First</name>
                <description>Run gcloud auth list before deployment attempts</description>
                <rationale>Prevents failed deployments due to expired credentials</rationale>
            </practice>
            
            <practice id="use-pr-numbers">
                <name>Use Consistent PR Numbers</name>
                <description>Always use the same PR number for related deployments</description>
                <rationale>Ensures proper environment tracking and cleanup</rationale>
            </practice>
            
            <practice id="cleanup-resources">
                <name>Clean Up After Testing</name>
                <description>Always destroy environments when testing is complete</description>
                <rationale>Prevents resource accumulation and reduces costs</rationale>
            </practice>
            
            <practice id="test-locally-first">
                <name>Test with Local Docker First</name>
                <description>Use local Docker deployment for initial testing</description>
                <rationale>Faster iteration without cloud resource usage</rationale>
            </practice>
            
            <practice id="use-image-cache">
                <name>Leverage Image Caching</name>
                <description>Scripts check for existing images before rebuilding</description>
                <rationale>Saves time on repeated deployments</rationale>
            </practice>
        </section>

        <section id="integration-with-cicd" order="8">
            <title>Integration with CI/CD</title>
            
            <integration id="github-actions-parity">
                <name>GitHub Actions Parity</name>
                <description>
                    Local deployment scripts mirror the exact functionality of GitHub Actions workflows,
                    ensuring consistency between local and CI/CD deployments. The same Docker images,
                    Terraform configurations, and deployment processes are used.
                </description>
            </integration>
            
            <integration id="shared-infrastructure">
                <name>Shared Infrastructure</name>
                <description>
                    Local deployments use the same GCP project and Terraform state management as
                    GitHub Actions, allowing seamless transition between local and CI/CD deployments.
                </description>
            </integration>
            
            <integration id="environment-naming">
                <name>Consistent Environment Naming</name>
                <description>
                    Environment names are generated using the same logic as GitHub Actions,
                    ensuring no conflicts between local and CI/CD deployments.
                </description>
            </integration>
        </section>
    </sections>
</specification>