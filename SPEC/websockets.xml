<?xml version='1.0' encoding='utf-8'?>
<specification>
  <metadata>
    <name>Netra WebSockets</name>
    <type>NETRA_WEBSOCKETS</type>
    <version>1.2</version>
    <last_edited>2025-08-27T04:20:00.000000</last_edited>
    <changes>
      <change version="1.1" date="2025-08-27">Added Docker development configuration requirements and troubleshooting</change>
      <change version="1.2" date="2025-08-27">Fixed WebSocket state management and subprotocol negotiation issues</change>
    </changes>
  </metadata>
  <primary-spec>
    <description>Websockets Specification</description>
    <goals>
      <goal priority="high">NETRA_WEBSOCKETS working as a complete end to end system</goal>
      <goal priority="critical">The Coherence of the system working in harmony front and backend together</goal>
    </goals>
  </primary-spec>
  <coherence-requirements>
    <coherence>Validate Coherence with SPEC:chat_ui_ux</coherence>
    <coherence>Validate Coherence with SPEC:netra_user_auth</coherence>
    <coherence>Validate Coherence with SPEC:conventions</coherence>
    <coherence>Validate Coherence with SPEC:websocket_reliability - CRITICAL for preventing silent failures</coherence>
    <coherence>Agent to Frontend communications using NETRA_WEBSOCKETS</coherence>
    <coherence>Frontend to Agent communications using NETRA_WEBSOCKETS</coherence>
    <coherence>Frontend loading into Chat UI/UX concepts using NETRA_WEBSOCKETS</coherence>
    <coherence>With service discovery: backend tells frontend NETRA_WEBSOCKETS config: frontend loads config from service discovery</coherence>
    <coherence>NETRA_WEBSOCKETS Auth uses existing auth concepts like SecurityService (e.g JWT) Keep all security concepts as is, only integrate</coherence>
  </coherence-requirements>
  <technical-requirements>
    <requirement id="docker-development-configuration">
      <title>Docker Development Configuration</title>
      <description>WebSocket configuration requirements for Docker development environments</description>
      <docker-specific-requirements>
        <requirement-item priority="critical">
          <title>WebSocket URLs for Docker vs Localhost</title>
          <description>Frontend must use localhost URLs when connecting from host browser to Docker backend</description>
          <configuration>
            <env-var>NEXT_PUBLIC_WEBSOCKET_URL=ws://localhost:8000/ws</env-var>
            <env-var>NEXT_PUBLIC_WS_URL=ws://localhost:8000</env-var>
            <env-var>NEXT_PUBLIC_API_URL=http://localhost:8000</env-var>
          </configuration>
          <rationale>Docker port mapping exposes backend on localhost:8000 to host system</rationale>
        </requirement-item>
        <requirement-item priority="critical">
          <title>Authentication Bypass in Development</title>
          <description>WebSocket connections must work without authentication in development environment</description>
          <configuration>
            <env-var>ALLOW_DEV_OAUTH_SIMULATION=true</env-var>
            <env-var>WEBSOCKET_AUTH_BYPASS=true</env-var>
            <env-var>ENVIRONMENT=development</env-var>
          </configuration>
          <security-safeguards>
            <safeguard>Only enabled when ENVIRONMENT=development</safeguard>
            <safeguard>Multiple environment checks prevent production activation</safeguard>
            <safeguard>Warning logs when bypass is active</safeguard>
          </security-safeguards>
        </requirement-item>
        <requirement-item priority="high">
          <title>CORS Configuration for Docker</title>
          <description>CORS must allow Docker service names and bridge network IPs</description>
          <allowed-origins>
            <origin-group type="docker-services">
              <origin>http://frontend:3000</origin>
              <origin>http://backend:8000</origin>
              <origin>http://auth:8081</origin>
            </origin-group>
            <origin-group type="docker-containers">
              <origin>http://netra-frontend:3000</origin>
              <origin>http://netra-backend:8000</origin>
              <origin>http://netra-auth:8081</origin>
            </origin-group>
            <origin-group type="bridge-network">
              <origin>http://172.17.0.1:3000</origin>
              <origin>http://172.17.0.1:8000</origin>
              <origin>http://172.18.0.1:3000</origin>
              <origin>http://172.18.0.1:8000</origin>
            </origin-group>
          </allowed-origins>
        </requirement-item>
        <requirement-item priority="medium">
          <title>Docker Networking Considerations</title>
          <description>Handle Docker-specific networking challenges</description>
          <considerations>
            <consideration>Multiple origin headers from Docker proxy chains</consideration>
            <consideration>Service discovery within Docker compose network</consideration>
            <consideration>Port mapping between container and host</consideration>
            <consideration>Bridge network IP allocation variability</consideration>
          </considerations>
        </requirement-item>
      </docker-specific-requirements>
      <testing-requirements>
        <test-script>scripts/test_docker_websocket_fix.py - Validate Docker WebSocket configuration</test-script>
        <test-script>tests/e2e/test_websocket_dev_docker_connection.py - E2E Docker WebSocket testing</test-script>
        <validation-checklist>
          <check>Environment variables properly configured</check>
          <check>OAUTH SIMULATION working in development only</check>
          <check>CORS allowing Docker service connections</check>
          <check>WebSocket URLs resolving correctly</check>
          <check>End-to-end WebSocket communication working</check>
        </validation-checklist>
      </testing-requirements>
      <troubleshooting>
        <common-issue>
          <problem>WebSocket connection refused</problem>
          <solution>Check backend service running on port 8000</solution>
          <solution>Verify docker-compose port mapping</solution>
          <diagnostic>curl http://localhost:8000/health</diagnostic>
        </common-issue>
        <common-issue>
          <problem>Authentication required error</problem>
          <solution>Set ALLOW_DEV_OAUTH_SIMULATION=true</solution>
          <solution>Verify ENVIRONMENT=development</solution>
          <diagnostic>Run test_docker_websocket_fix.py</diagnostic>
        </common-issue>
        <common-issue>
          <problem>CORS origin not allowed</problem>
          <solution>Add Docker service name to CORS origins</solution>
          <solution>Ensure development environment detected</solution>
          <diagnostic>Check WebSocket CORS logs</diagnostic>
        </common-issue>
      </troubleshooting>
      <related-documentation>
        <doc>SPEC/learnings/websocket_docker_fixes.xml - Complete Docker fix documentation</doc>
        <doc>docs/websocket_docker_troubleshooting.md - Troubleshooting guide</doc>
        <doc>shared/cors_config.py - CORS configuration implementation</doc>
      </related-documentation>
    </requirement>
    <requirement id="json-first">
      <title>JSON First</title>
      <description>Always send and receive JSON</description>
      <careful-considerations>
        <consideration>Langchain stream to JSON parsing</consideration>
        <consideration>NETRA_WEBSOCKETS use JSON not string</consideration>
        <consideration>Protect against multiple functions or processing double or triple wrapping JSON badly</consideration>
      </careful-considerations>
    </requirement>
    <requirement id="connection-establishment">
      <title>Connection Establishment</title>
      <description>WebSocket connection is established statefully on application state load (BEFORE the first message is sent.) It is an ERROR if NETRA_WEBSOCKETS can't be established</description>
    </requirement>
    <requirement id="authorization">
      <title>Authorization</title>
      <description>Think carefully dev auth, regular user auth, etc. all well typed</description>
      <critical-implementation-note>
        <warning>Database Session Handling in WebSocket Endpoints</warning>
        <issue>FastAPI's Depends() injection does NOT work properly with WebSocket endpoints for database sessions</issue>
        <incorrect-pattern>
                    async def websocket_endpoint(websocket: WebSocket, db_session = Depends(get_async_db)):
                        # This will FAIL - db_session is the context manager, not a session
                        await db_session.execute(...)  # ERROR: '_AsyncGeneratorContextManager' object has no attribute 'execute'
                </incorrect-pattern>
        <correct-pattern>
                    async def websocket_endpoint(websocket: WebSocket):
                        # Manually create database sessions where needed
                        async with get_async_db() as db_session:
                            user = await security_service.get_user_by_id(db_session, user_id)
                </correct-pattern>
        <best-practices>
          <practice>Create separate database sessions for authentication and message handling</practice>
          <practice>Use short-lived sessions - create new session for each message</practice>
          <practice>Always use async context manager: async with get_async_db() as db_session</practice>
        </best-practices>
      </critical-implementation-note>
    </requirement>
    <requirement id="persistence">
      <title>Persistence</title>
      <items>
        <item>WebSocket connection is persistent</item>
        <item>Important: WebSocket connection resilient to component re-renders and lifecycle changes</item>
        <item>Websockets works with regular JSON etc. when the user sends chat messages or free text or clicking examples etc.</item>
        <item>NETRA_WEBSOCKETS messages are passed properly and use types</item>
      </items>
    </requirement>
    <requirement id="startup-profile">
      <title>Startup Profile</title>
      <description>When application starts up or reloads, NETRA_WEBSOCKETS are available</description>
    </requirement>
    <requirement id="error-handling">
      <title>Error Handling</title>
      <description>If the front end sends a socket but the backend rejects, it must be logged clearly</description>
    </requirement>
    <requirement id="timeout-retry">
      <title>Timeout and Retry Mechanism</title>
      <description>CRITICAL: All WebSocket send operations must have timeout and retry capabilities</description>
      <timeout-configuration>
        <default-timeout>5 seconds - prevents indefinite hanging</default-timeout>
        <max-retries>3 attempts - balances reliability with resource usage</max-retries>
        <backoff-strategy>Exponential backoff: 1s, 2s, 4s - prevents retry storms</backoff-strategy>
      </timeout-configuration>
      <implementation-requirements>
        <requirement priority="critical">Use asyncio.wait_for for deterministic timeout behavior</requirement>
        <requirement priority="critical">Implement exponential backoff to prevent cascade failures</requirement>
        <requirement priority="high">Track metrics: send_timeouts, timeout_retries, timeout_failures</requirement>
        <requirement priority="high">Maintain backward compatibility with existing WebSocket API</requirement>
      </implementation-requirements>
      <business-impact>
        <impact>Affects 90% of value delivery through chat interface</impact>
        <impact>Prevents silent failures that make chat appear unresponsive</impact>
        <impact>Enables recovery from transient network issues</impact>
      </business-impact>
      <related-files>
        <file>netra_backend/app/websocket_core/manager.py - Implementation location</file>
        <file>netra_backend/tests/mission_critical/test_websocket_timeout_retry.py - Test suite</file>
        <file>SPEC/learnings/websocket_timeout_retry_implementation.xml - Detailed learnings</file>
      </related-files>
    </requirement>
    <requirement id="backend-management">
      <title>Backend Management</title>
      <description>Backend sends responses using a single source of truth to manage NETRA_WEBSOCKETS</description>
    </requirement>
    <requirement id="service-discovery">
      <title>Service Discovery</title>
      <items>
        <item>The backend provides discovery of NETRA_WEBSOCKETS config to frontend</item>
        <item>The frontend discovers NETRA_WEBSOCKETS config at earliest reasonable application state</item>
      </items>
    </requirement>
    <requirement id="testing">
      <title>End to End Testing</title>
      <description>NETRA_WEBSOCKETS End to end testing</description>
    </requirement>
  </technical-requirements>
  <related-learnings>
    <learning path="SPEC/learnings/websocket_state_management.xml">
      <description>Critical fix for WebSocket immediate disconnect issue with state management and subprotocol negotiation</description>
      <key-points>
        <point>WebSocket.accept() must include subprotocol parameter if client sends any</point>
        <point>is_websocket_connected() must check client_state before application_state</point>
        <point>All state checks must use centralized function for SSOT</point>
      </key-points>
    </learning>
    <learning path="SPEC/learnings/websocket_docker_fixes.xml">
      <description>Docker-specific WebSocket configuration and authentication bypass</description>
    </learning>
    <learning path="SPEC/learnings/websocket_consolidation.xml">
      <description>WebSocket module consolidation and SSOT patterns</description>
    </learning>
    <learning path="SPEC/learnings/websocket_timeout_retry_implementation.xml">
      <description>CRITICAL: WebSocket timeout and retry mechanism implementation</description>
      <key-points>
        <point>WebSocket sends MUST have 5-second timeout to prevent indefinite hanging</point>
        <point>Exponential backoff retry (1s, 2s, 4s) with max 3 attempts prevents cascade failures</point>
        <point>Affects 90% of value delivery through chat interface</point>
        <point>Track send_timeouts, timeout_retries, timeout_failures metrics for monitoring</point>
      </key-points>
    </learning>
  </related-learnings>
</specification>