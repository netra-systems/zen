<?xml version='1.0' encoding='utf-8'?>
<spec>
  <metadata>
    <last_edited>2025-08-21T08:47:28.428935</last_edited>
  </metadata>
  <meta>
    <title>Directory Structure Specification</title>
    <category>infrastructure</category>
    <created>2025-08-18</created>
    <cross_references>
      <ref>CLAUDE.md#project-overview</ref>
      <ref>LLM_MASTER_INDEX.md</ref>
      <ref>SPEC/root_folder_organization.xml</ref>
      <ref>SPEC/folder_structure_rules.md</ref>
    </cross_references>
  </meta>
  <directory_structure>
    <overview>
      Complete project directory structure for Netra Apex AI Optimization Platform.
      This document serves as the authoritative reference for project organization.
    </overview>
    <structure>
      
root/
├── agent_to_agent/           # Agent communication reports
├── agent_to_agent_status_updates/ # Status update reports
├── app/                      # Main backend application
│   ├── agents/              # AI agent implementations (consolidated modules)
│   ├── agent_to_agent/      # Agent-to-agent communication reports
│   ├── auth/                # Authentication &amp; authorization
│   ├── auth_integration/    # SHARED AUTH SERVICE (MANDATORY USE)
│   ├── core/                # Core utilities &amp; exceptions
│   │   ├── exceptions_*.py         # Categorized exception handlers
│   │   ├── interfaces_*.py         # Interface definitions
│   │   └── system_health_monitor.py # System monitoring
│   ├── db/                  # Database layer
│   │   ├── clickhouse.py           # ClickHouse connection
│   │   ├── postgres.py             # PostgreSQL connection
│   │   └── models_*.py             # Database models
│   ├── llm/                 # LLM integration layer
│   ├── middleware/          # FastAPI middleware
│   ├── routes/              # API route definitions
│   │   ├── admin.py               # Admin endpoints
│   │   ├── corpus.py              # Corpus management
│   │   ├── synthetic_data.py      # Synthetic data endpoints
│   │   └── websockets.py          # WebSocket endpoints
│   ├── schemas/             # Pydantic models &amp; types
│   │   ├── llm_*.py               # LLM-related types
│   │   ├── admin_*.py             # Admin schemas
│   │   └── websocket_*.py         # WebSocket message types
│   ├── services/            # Business logic services
│   │   ├── audit/                 # Audit service modules
│   │   └── metrics/               # Metrics collection
│   ├── startup_checks/      # Startup validation modules
│   ├── tests/               # Backend test suite
│   │   ├── auth_integration/      # Auth integration tests
│   │   ├── config/                # Test configuration
│   │   ├── critical/              # Critical path tests
│   │   ├── e2e/                   # End-to-end tests
│   │   ├── integration/           # Integration tests
│   │   └── unit/                  # Unit tests
│   ├── websocket/           # WebSocket management
│   │   ├── connection.py          # Connection handling
│   │   ├── rate_limiter.py        # Rate limiting
│   │   └── validation.py          # Message validation
│   ├── main.py              # FastAPI app entry point
│   └── config.py            # Application configuration
│
├── frontend/                 # Next.js frontend application
│   ├── app/                 # Next.js app directory
│   ├── components/          # React components
│   │   └── chat/           # Chat UI components
│   │       └── admin/      # Admin UI components
│   ├── hooks/               # Custom React hooks
│   ├── services/            # Frontend services
│   ├── store/               # State management
│   ├── types/               # TypeScript type definitions
│   └── utils/               # Frontend utilities
│
├── scripts/                  # Utility &amp; automation scripts
│   ├── architecture_*.py    # Architecture compliance tools
│   ├── test_runner.py       # Test execution script
│   ├── dev_launcher.py      # Development server launcher
│   └── check_architecture_compliance.py # Compliance checker
│
├── dev_launcher/            # Development launcher module
│   ├── launcher.py          # Main launcher logic
│   ├── process_manager.py   # Process management
│   └── secret_manager.py    # Secret handling
│
├── test_framework/          # Test framework utilities
│   ├── runner.py            # Test runner core
│   ├── test_discovery.py    # Test discovery logic
│   └── comprehensive_reporter.py  # Test reporting (single source of truth)
│
├── SPEC/                    # Specification documents
│   ├── learnings/           # Modular learnings by category
│   │   ├── index.xml              # Master index of learnings
│   │   ├── testing.xml            # Testing-related learnings
│   │   ├── startup.xml            # Startup and initialization
│   │   ├── critical_tests_implementation.xml # Critical test insights
│   │   └── *.xml                  # Category-specific learnings
│   ├── type_safety.xml      # Type safety rules
│   ├── conventions.xml      # Coding conventions
│   └── *.xml                # Other spec files
│
├── docs/                    # Documentation
│   ├── API_DOCUMENTATION.md
│   ├── ARCHITECTURE.md
│   ├── TESTING_GUIDE.md
│   └── USER_GUIDE.md        # User guide documentation
│
├── terraform-gcp/           # GCP infrastructure as code
├── terraform-dev-postgres/  # PostgreSQL dev setup
├── .github/                 # GitHub Actions workflows
├── config/                  # Configuration files
├── alembic/                 # Database migrations
└── requirements.txt         # Python dependencies
      
    </structure>
    <key_purposes>
      <directory name="app/">Core backend application with FastAPI</directory>
      <directory name="frontend/">Next.js-based web interface</directory>
      <directory name="agents/">Multi-agent AI system implementations</directory>
      <directory name="services/">Business logic and external integrations</directory>
      <directory name="schemas/">Type definitions and data models</directory>
      <directory name="scripts/">Development and maintenance utilities</directory>
      <directory name="SPEC/">Living documentation and specifications</directory>
      <directory name="test_framework/">Custom testing infrastructure</directory>
    </key_purposes>
  </directory_structure>
</spec>