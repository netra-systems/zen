<?xml version='1.0' encoding='utf-8'?>
<specification>
  <metadata>
    <name>CORS Configuration Specification</name>
    <type>cors_configuration</type>
    <version>2.0</version>
    <created>2025-08-20</created>
    <description>Unified CORS configuration architecture using shared/cors_config.py</description>
    <priority>CRITICAL</priority>
    <last_edited>2025-08-25T15:30:00.000000</last_edited>
    <status>IMPLEMENTED - Added explicit OPTIONS endpoint support for health endpoints</status>
  </metadata>
  <problem-statement>
    <issue>**RESOLVED:** Previously recurring CORS errors across environments</issue>
    <resolution-summary>
      <implemented>2025-08-25: Unified CORS architecture using shared/cors_config.py</implemented>
      <eliminated-duplications>5 different CORS implementations consolidated into 1 configuration</eliminated-duplications>
      <standardized-approach>All services now use FastAPI's built-in CORSMiddleware with unified config</standardized-approach>
    </resolution-summary>
    <previous-root-causes status="RESOLVED">
      <cause status="RESOLVED">✅ Inconsistent CORS configuration - now unified via shared/cors_config.py</cause>
      <cause status="RESOLVED">✅ Missing CORS headers - standardized FastAPI CORSMiddleware</cause>
      <cause status="RESOLVED">✅ Port mismatches in development - dynamic port support implemented</cause>
      <cause status="RESOLVED">✅ Preflight request handling - FastAPI handles automatically</cause>
      <cause status="RESOLVED">✅ Dynamic origin validation - environment-aware origin detection</cause>
    </previous-root-causes>
  </problem-statement>
  <unified-architecture>
    <implementation-status>✅ IMPLEMENTED - 2025-08-25</implementation-status>
    <single-source-of-truth>shared/cors_config.py</single-source-of-truth>
    <standardized-middleware>FastAPI CORSMiddleware</standardized-middleware>
    <key-features>
      <feature>Environment-aware origin detection</feature>
      <feature>Dynamic port support for development</feature>
      <feature>Service extensibility while maintaining unified origins</feature>
      <feature>Production security with strict origin validation</feature>
      <feature>Staging flexibility with Cloud Run pattern matching</feature>
    </key-features>
  </unified-architecture>
  
  <core-principles>
    <principle id="cors-consistency" status="IMPLEMENTED">
      <name>Configuration Consistency</name>
      <description>All services MUST have consistent CORS configuration for the same environment</description>
      <enforcement>✅ Implemented via shared/cors_config.py unified configuration module</enforcement>
    </principle>
    <principle id="explicit-configuration">
      <name>Explicit Configuration</name>
      <description>CORS settings must be explicitly configured, never implicit or missing</description>
      <enforcement>Every service must configure CORS middleware on startup</enforcement>
    </principle>
    <principle id="environment-aware">
      <name>Environment-Specific Settings</name>
      <description>CORS configuration must adapt to the deployment environment</description>
      <environments>development, testing, staging, production</environments>
    </principle>
    <principle id="dynamic-port-support">
      <name>Dynamic Port Support</name>
      <description>CORS configuration MUST properly handle dynamic ports in development environments</description>
      <enforcement>Use port-agnostic pattern matching or extract port from request origin dynamically</enforcement>
      <critical>True - Root cause of many dev environment CORS failures</critical>
    </principle>
    <principle id="preflight-support">
      <name>Preflight Request Support</name>
      <description>All services MUST properly handle OPTIONS preflight requests</description>
      <enforcement>Return 200 OK with appropriate headers for OPTIONS requests</enforcement>
    </principle>
  </core-principles>
  <environment-configurations>
    <environment name="development">
      <description>Local development configuration with maximum flexibility</description>
      <configuration-strategy>
        <approach>Dynamic CORS with wildcard support</approach>
        <rationale>Development uses dynamic ports requiring flexible CORS handling</rationale>
        <implementation>DynamicCORSMiddleware for both services</implementation>
      </configuration-strategy>
      <main-backend>
        <port>8000</port>
        <cors-mode>dynamic-wildcard</cors-mode>
        <environment-variable>CORS_ORIGINS=*</environment-variable>
        <middleware>CustomCORSMiddleware</middleware>
        <allowed_origins>
          <dynamic>true</dynamic>
          <fallback-origins>
            <origin>http://localhost:3000</origin>
            <origin>http://localhost:3001</origin>
            <origin>http://localhost:8000</origin>
            <origin>http://localhost:8001</origin>
            <origin>http://localhost:8080</origin>
            <origin>http://localhost:8081</origin>
            <origin>http://127.0.0.1:3000</origin>
            <origin>http://127.0.0.1:3001</origin>
            <origin>http://127.0.0.1:8000</origin>
            <origin>http://127.0.0.1:8001</origin>
            <origin>http://127.0.0.1:8080</origin>
            <origin>http://127.0.0.1:8081</origin>
          </fallback-origins>
        </allowed_origins>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer, X-Requested-With</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID, Content-Length, Content-Type</expose_headers>
        <max_age>3600</max_age>
        <preflight-handling>
          <auto-response>true</auto-response>
          <status-code>200</status-code>
        </preflight-handling>
      </main-backend>
      <auth-service>
        <port>8081</port>
        <cors-mode>dynamic-wildcard</cors-mode>
        <environment-variable>CORS_ORIGINS=*</environment-variable>
        <middleware>DynamicCORSMiddleware</middleware>
        <allowed_origins>
          <dynamic>true</dynamic>
          <fallback-origins>
            <origin>http://localhost:3000</origin>
            <origin>http://localhost:3001</origin>
            <origin>http://localhost:8000</origin>
            <origin>http://localhost:8001</origin>
            <origin>http://localhost:8080</origin>
            <origin>http://localhost:8081</origin>
            <origin>http://127.0.0.1:3000</origin>
            <origin>http://127.0.0.1:3001</origin>
            <origin>http://127.0.0.1:8000</origin>
            <origin>http://127.0.0.1:8001</origin>
            <origin>http://127.0.0.1:8080</origin>
            <origin>http://127.0.0.1:8081</origin>
          </fallback-origins>
        </allowed_origins>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer, X-Requested-With</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID, Content-Length, Content-Type, Set-Cookie</expose_headers>
        <max_age>3600</max_age>
        <preflight-handling>
          <auto-response>true</auto-response>
          <status-code>200</status-code>
        </preflight-handling>
      </auth-service>
      <frontend>
        <port>3000</port>
        <alternate-port>3001</alternate-port>
        <api_url>http://localhost:8000</api_url>
        <auth_url>http://localhost:8081</auth_url>
        <ws_url>ws://localhost:8000</ws_url>
        <dev-server-proxy>
          <enabled>false</enabled>
          <comment>Frontend dev server should not proxy, rely on backend CORS</comment>
        </dev-server-proxy>
      </frontend>
    </environment>
    <environment name="staging">
      <description>Staging environment with dynamic PR deployments</description>
      <main-backend>
        <allowed_origins>
          <comment>NOTE: Wildcard subdomains (*.staging) are NOT supported in CORS - must list explicit origins</comment>
          <origin>https://app.staging.netrasystems.ai</origin>
          <origin>https://auth.staging.netrasystems.ai</origin>
          <origin>https://api.staging.netrasystems.ai</origin>
          <origin>https://backend.staging.netrasystems.ai</origin>
          <origin>http://localhost:3000</origin>
          <origin>http://localhost:3001</origin>
          <origin>http://localhost:8000</origin>
          <origin>http://localhost:8080</origin>
        </allowed_origins>
        <cloud_run_patterns>
          <pattern>https://netra-frontend-*.us-central1.run.app</pattern>
          <pattern>https://netra-backend-*.us-central1.run.app</pattern>
          <pattern>https://netra-auth-*.us-central1.run.app</pattern>
        </cloud_run_patterns>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID, Content-Length, Content-Type</expose_headers>
      </main-backend>
      <auth-service>
        <allowed_origins>
          <pattern>https://*.staging.netrasystems.ai</pattern>
          <pattern>https://pr-*.staging.netrasystems.ai</pattern>
          <origin>https://app.staging.netrasystems.ai</origin>
          <origin>https://app.staging.netrasystems.ai</origin>
          <origin>https://auth.staging.netrasystems.ai</origin>
          <origin>https://backend.staging.netrasystems.ai</origin>
          <origin>http://localhost:3000</origin>
          <origin>http://localhost:3001</origin>
        </allowed_origins>
        <cloud_run_patterns>
          <pattern>https://netra-frontend-*.us-central1.run.app</pattern>
          <pattern>https://netra-backend-*.us-central1.run.app</pattern>
          <pattern>https://netra-auth-*.us-central1.run.app</pattern>
        </cloud_run_patterns>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID, Content-Length, Content-Type</expose_headers>
      </auth-service>
    </environment>
    <environment name="production">
      <description>Production environment with strict origin validation</description>
      <main-backend>
        <allowed_origins>
          <origin>https://netrasystems.ai</origin>
          <origin>https://www.netrasystems.ai</origin>
          <origin>https://app.netrasystems.ai</origin>
          <origin>https://api.netrasystems.ai</origin>
          <origin>https://auth.netrasystems.ai</origin>
        </allowed_origins>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID</expose_headers>
      </main-backend>
      <auth-service>
        <allowed_origins>
          <origin>https://netrasystems.ai</origin>
          <origin>https://www.netrasystems.ai</origin>
          <origin>https://app.netrasystems.ai</origin>
          <origin>https://api.netrasystems.ai</origin>
          <origin>https://auth.netrasystems.ai</origin>
        </allowed_origins>
        <allow_credentials>true</allow_credentials>
        <allow_methods>GET, POST, PUT, DELETE, OPTIONS, PATCH</allow_methods>
        <allow_headers>Authorization, Content-Type, X-Request-ID, X-Trace-ID</allow_headers>
        <expose_headers>X-Trace-ID, X-Request-ID</expose_headers>
      </auth-service>
    </environment>
  </environment-configurations>
  <current-implementation>
    <unified-configuration-module>
      <location>shared/cors_config.py</location>
      <primary-functions>
        <function name="get_cors_config()">Returns complete FastAPI CORSMiddleware configuration</function>
        <function name="get_cors_origins()">Gets environment-specific allowed origins</function>
        <function name="is_origin_allowed()">Validates if an origin is allowed</function>
        <function name="get_websocket_cors_origins()">WebSocket-specific CORS origins (future extensibility)</function>
      </primary-functions>
      <environment-detection>
        <auto-detection>Checks multiple env vars: ENVIRONMENT, ENV, NODE_ENV, NETRA_ENV, AUTH_ENV</auto-detection>
        <fallback>Defaults to 'development' if no environment explicitly set</fallback>
        <override>Can be explicitly overridden via function parameter</override>
      </environment-detection>
      <origin-patterns>
        <development>Dynamic localhost support for any port (localhost:*, 127.0.0.1:*)</development>
        <staging>Explicit origins plus Cloud Run pattern matching</staging>
        <production>Strict whitelist of production domains</production>
      </origin-patterns>
    </unified-configuration-module>
    
    <service-integration>
      <pattern>All services import from shared/cors_config and use FastAPI CORSMiddleware</pattern>
      <extensibility>Services can add custom headers while using unified origins</extensibility>
      <websocket-exception>WebSocket CORS handling maintained separately as acceptable exception</websocket-exception>
    </service-integration>
  </current-implementation>

  <implementation-requirements>
    <requirement id="cors-req-001" priority="CRITICAL" status="IMPLEMENTED">
      <description>✅ All services MUST use unified CORS configuration from shared/cors_config.py</description>
      <location>shared/cors_config.py</location>
      <validation>✅ Verified: All services now import and use get_cors_config()</validation>
      <implementation-note>✅ Standardized on FastAPI's built-in CORSMiddleware</implementation-note>
    </requirement>
    <requirement id="cors-req-002" priority="CRITICAL">
      <description>Main backend MUST configure CORS middleware consistently</description>
      <location>app/core/middleware_setup.py</location>
      <validation>Verify CustomCORSMiddleware handles all environments correctly</validation>
      <implementation-note>CustomCORSMiddleware required for wildcard with credentials</implementation-note>
    </requirement>
    <requirement id="cors-req-003" priority="HIGH">
      <description>Environment variables must be consistent across services</description>
      <variables>
        <variable name="CORS_ORIGINS">Comma-separated list of allowed origins or "*"</variable>
        <variable name="ENVIRONMENT">Current environment (development/staging/production)</variable>
      </variables>
      <dev-launcher-requirements>
        <requirement>dev_launcher/launcher.py must set CORS_ORIGINS=*</requirement>
        <requirement>dev_launcher/auth_starter.py must set CORS_ORIGINS=*</requirement>
      </dev-launcher-requirements>
    </requirement>
    <requirement id="cors-req-004" priority="CRITICAL">
      <description>Preflight OPTIONS requests must return proper headers</description>
      <response>
        <status>200 OK</status>
        <headers>
          <header>Access-Control-Allow-Origin: {requesting_origin}</header>
          <header>Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD</header>
          <header>Access-Control-Allow-Headers: Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer, X-Requested-With</header>
          <header>Access-Control-Allow-Credentials: true</header>
          <header>Access-Control-Max-Age: 3600</header>
        </headers>
        <implementation-note>OPTIONS must return immediately without calling next middleware</implementation-note>
      </response>
    </requirement>
    <requirement id="cors-req-005" priority="HIGH">
      <description>Dynamic origin validation for staging PR environments</description>
      <pattern-matching>
        <pattern>https://pr-{number}.staging.netrasystems.ai</pattern>
        <pattern>https://{service}-pr-{number}.staging.netrasystems.ai</pattern>
      </pattern-matching>
    </requirement>
    <requirement id="cors-req-006" priority="CRITICAL">
      <description>Auth service /auth/config endpoint must include CORS headers</description>
      <endpoints>
        <endpoint>/auth/config</endpoint>
        <endpoint>/auth/login</endpoint>
        <endpoint>/auth/callback</endpoint>
        <endpoint>/auth/token</endpoint>
        <endpoint>/auth/logout</endpoint>
        <endpoint>/auth/status</endpoint>
        <endpoint>/health</endpoint>
        <endpoint>/health/ready</endpoint>
      </endpoints>
      <implementation-note>All endpoints must have CORS headers, including health checks</implementation-note>
    </requirement>
    <requirement id="cors-req-007" priority="CRITICAL">
      <description>Middleware ordering must be correct</description>
      <order>
        <position>1</position>
        <middleware>CORS Middleware (first to handle preflight)</middleware>
      </order>
      <order>
        <position>2</position>
        <middleware>Session Middleware</middleware>
      </order>
      <order>
        <position>3+</position>
        <middleware>Other middleware</middleware>
      </order>
    </requirement>
    <requirement id="cors-req-008" priority="CRITICAL">
      <description>Dev launcher must propagate CORS configuration</description>
      <files>
        <file>dev_launcher/launcher.py</file>
        <file>dev_launcher/service_startup.py</file>
        <file>dev_launcher/auth_starter.py</file>
      </files>
      <validation>All services started via dev launcher must receive CORS_ORIGINS=*</validation>
    </requirement>
  </implementation-requirements>
  <common-issues-and-solutions>
    <issue id="issue-001">
      <problem>No 'Access-Control-Allow-Origin' header is present on the requested resource</problem>
      <causes>
        <cause>CORS middleware not configured for the service</cause>
        <cause>Origin not in allowed origins list</cause>
        <cause>Middleware ordering issue (CORS must be early in chain)</cause>
      </causes>
      <solutions>
        <solution>Ensure CORS middleware is configured in service main.py</solution>
        <solution>Add origin to CORS_ORIGINS environment variable</solution>
        <solution>Place CORS middleware before other middleware</solution>
      </solutions>
    </issue>
    <issue id="issue-002">
      <problem>Preflight request fails with 404 or 405</problem>
      <causes>
        <cause>OPTIONS method not handled by middleware</cause>
        <cause>Route does not accept OPTIONS method</cause>
      </causes>
      <solutions>
        <solution>Ensure middleware handles OPTIONS requests explicitly</solution>
        <solution>Return 200 OK for OPTIONS without calling next handler</solution>
      </solutions>
    </issue>
    <issue id="issue-003">
      <problem>Credentials flag causes CORS failure with wildcard origin</problem>
      <causes>
        <cause>Cannot use credentials:true with origin:*</cause>
      </causes>
      <solutions>
        <solution>Use DynamicCORSMiddleware to echo back requesting origin</solution>
        <solution>Explicitly list all allowed origins</solution>
      </solutions>
    </issue>
    <issue id="issue-004">
      <problem>Port mismatch in development causing CORS errors</problem>
      <causes>
        <cause>Auth service running on unexpected port</cause>
        <cause>Frontend configured with wrong auth service URL</cause>
        <cause priority="CRITICAL">Dynamic ports not properly extracted from origin header</cause>
        <cause>CORS configuration hardcoding specific ports instead of pattern matching</cause>
      </causes>
      <solutions>
        <solution>Standardize ports: Backend=8000, Auth=8081, Frontend=3000/3001</solution>
        <solution>Use environment variables for service URLs</solution>
        <solution priority="CRITICAL">Extract port dynamically from request origin header</solution>
        <solution>Implement hostname-based matching ignoring port numbers for localhost/127.0.0.1</solution>
      </solutions>
    </issue>
  </common-issues-and-solutions>
  <implementation-patterns>
    <pattern id="dynamic-cors-middleware">
      <name>DynamicCORSMiddleware Pattern</name>
      <description>Custom middleware for handling wildcard CORS with credentials</description>
      <code-template>
                
class DynamicCORSMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        origin = request.headers.get("origin")
        
        # Handle preflight
        if request.method == "OPTIONS":
            response = Response(status_code=200)
            if origin:
                response.headers["Access-Control-Allow-Origin"] = origin
                response.headers["Access-Control-Allow-Credentials"] = "true"
                response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
                response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer, X-Requested-With"
                response.headers["Access-Control-Max-Age"] = "3600"
            return response
        
        # Process request
        response = await call_next(request)
        
        # Add CORS headers to response
        if origin:
            response.headers["Access-Control-Allow-Origin"] = origin
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
            response.headers["Access-Control-Allow-Headers"] = "Authorization, Content-Type, X-Request-ID, X-Trace-ID, Accept, Origin, Referer, X-Requested-With"
            response.headers["Access-Control-Expose-Headers"] = "X-Trace-ID, X-Request-ID, Content-Length, Content-Type"
        
        return response
                
            </code-template>
    </pattern>
    <pattern id="dynamic-port-handling">
      <name>Dynamic Port Handling Pattern</name>
      <description>Properly handle dynamic ports in development CORS configuration</description>
      <code-template>
                
class DynamicPortCORSMiddleware(BaseHTTPMiddleware):
    """Middleware that handles CORS with dynamic ports in development"""
    
    def is_development_origin(self, origin: str) -&gt; bool:
        """Check if origin is from a development host regardless of port"""
        if not origin:
            return False
        
        # Parse the origin URL
        from urllib.parse import urlparse
        parsed = urlparse(origin)
        
        # Accept any localhost or 127.0.0.1 origin regardless of port
        development_hosts = ['localhost', '127.0.0.1', '0.0.0.0']
        return parsed.hostname in development_hosts
    
    async def dispatch(self, request, call_next):
        origin = request.headers.get("origin")
        
        # In development, accept any localhost origin with any port
        if self.is_development_origin(origin):
            # Handle preflight
            if request.method == "OPTIONS":
                response = Response(status_code=200)
                response.headers["Access-Control-Allow-Origin"] = origin
                response.headers["Access-Control-Allow-Credentials"] = "true"
                response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD"
                response.headers["Access-Control-Allow-Headers"] = "*"
                response.headers["Access-Control-Max-Age"] = "3600"
                return response
            
            # Process request
            response = await call_next(request)
            
            # Add CORS headers to response
            response.headers["Access-Control-Allow-Origin"] = origin
            response.headers["Access-Control-Allow-Credentials"] = "true"
            response.headers["Access-Control-Expose-Headers"] = "*"
            
            return response
        
        # Fallback for non-development origins
        return await call_next(request)
                
            </code-template>
    </pattern>
    <pattern id="env-var-handling">
      <name>Environment Variable Handling</name>
      <description>Proper CORS_ORIGINS environment variable handling</description>
      <code-template>
                
cors_origins_env = os.getenv("CORS_ORIGINS", "")

if cors_origins_env == "*":
    # Use DynamicCORSMiddleware for wildcard
    app.add_middleware(DynamicCORSMiddleware)
elif cors_origins_env:
    # Parse comma-separated origins
    cors_origins = [origin.strip() for origin in cors_origins_env.split(",") if origin.strip()]
    app.add_middleware(
        CORSMiddleware,
        allow_origins=cors_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
        expose_headers=["*"]
    )
else:
    # Default based on environment
    # ... environment-specific defaults
                
            </code-template>
    </pattern>
  </implementation-patterns>
  <testing-strategy>
    <test-category name="unit">
      <test id="test-cors-middleware-config">Verify CORS middleware configuration for each environment</test>
      <test id="test-origin-pattern-matching">Test origin pattern matching for staging</test>
      <test id="test-preflight-headers">Validate preflight response headers</test>
      <test id="test-dynamic-cors">Test DynamicCORSMiddleware with various origins</test>
      <test id="test-env-var-parsing">Test CORS_ORIGINS environment variable parsing</test>
    </test-category>
    <test-category name="integration">
      <test id="test-frontend-backend-cors">Cross-origin requests between frontend (3001) and backend (8000)</test>
      <test id="test-frontend-auth-cors">Cross-origin requests between frontend (3001) and auth service (8081)</test>
      <test id="test-websocket-cors">WebSocket connection with CORS</test>
      <test id="test-auth-config-endpoint">Test /auth/config endpoint CORS headers</test>
      <test id="test-preflight-options">Test OPTIONS preflight for all endpoints</test>
    </test-category>
    <test-category name="e2e">
      <test id="test-complete-auth-flow">Complete authentication flow across services</test>
      <test id="test-pr-environment">PR environment dynamic origin validation</test>
      <test id="test-production-strict">Production strict origin enforcement</test>
      <test id="test-dynamic-port">Test with dynamic localhost ports</test>
      <test id="test-credentials-flow">Test credential-based requests across services</test>
    </test-category>
    <test-commands>
      <command>python -m pytest tests/test_cors_configuration.py -v</command>
      <command>python -m pytest tests/integration/test_cors_integration.py -v</command>
      <command>python -m pytest tests/e2e/test_cors_e2e.py -v</command>
    </test-commands>
  </testing-strategy>
  <monitoring>
    <metrics>
      <metric name="cors_rejection_count">Count of rejected CORS requests by origin</metric>
      <metric name="preflight_request_count">Number of OPTIONS preflight requests</metric>
      <metric name="cors_header_missing_count">Requests missing expected CORS headers</metric>
    </metrics>
    <logging>
      <log level="DEBUG">Log all CORS decisions (allowed/rejected) with origin</log>
      <log level="WARNING">Log CORS rejections with detailed reason</log>
      <log level="ERROR">Log CORS middleware configuration failures</log>
    </logging>
  </monitoring>
  <references>
    <reference>SPEC/code_changes.xml - Contains CORS configuration note</reference>
    <reference>SPEC/system_startup.xml - Service startup procedures</reference>
    <reference>SPEC/auth_subdomain_architecture.xml - Auth service architecture</reference>
    <reference>app/core/middleware_setup.py - Main backend CORS implementation</reference>
    <reference>auth_service/main.py - Auth service CORS implementation</reference>
  </references>
</specification>