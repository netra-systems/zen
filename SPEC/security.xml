<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>NetraPlatform.SecurityProtocol</name>
        <version>3.0</version>
        <updated>2025-08-23</updated>
        <change>Authentication consolidation - auth_service is now SINGLE SOURCE OF TRUTH</change>
    </metadata>
    
    <section title="Authentication (OAuth and JWT) - CONSOLIDATED ARCHITECTURE">
        <protocol id="SEC-AUTH-000">
            <title>CRITICAL: Single Source of Truth Architecture</title>
            <instruction>ALL authentication operations MUST use auth_service as the SINGLE SOURCE OF TRUTH.</instruction>
            <constraints>
                <constraint>MANDATORY: Use auth_service.auth_core.unified_auth_interface for all auth operations.</constraint>
                <constraint>FORBIDDEN: Direct authentication logic in other services (netra_backend, frontend).</constraint>
                <constraint>DEPRECATED: netra_backend.app.services.user_auth_service (use shim for migration).</constraint>
                <constraint>CANONICAL: auth_service handles JWT, sessions, OAuth, API keys.</constraint>
            </constraints>
            <migration>
                <old>from netra_backend.app.clients.auth_client import auth_client</old>
                <new>from auth_service.auth_core.unified_auth_interface import get_unified_auth</new>
            </migration>
        </protocol>
        <protocol id="SEC-AUTH-001">
            <title>Token Management and Storage (Frontend)</title>
            <constraints>
                <constraint>Storage Mechanism: `localStorage`.</constraint>
                <constraint>Storage Key: Must be exactly `jwt_token`. ('auth_token' is forbidden).</constraint>
                <constraint>API Authorization (HTTP): `Authorization: Bearer <token>` header.</constraint>
                <constraint>API Authorization (WebSocket): Query parameter (`token`) ONLY during initial handshake.</constraint>
            </constraints>
        </protocol>

        <protocol id="SEC-AUTH-003">
            <title>Session Architecture</title>
            <instruction>Maintain a stateless backend architecture. Do not use server-side sessions.</instruction>
        </protocol>
    </section>

    <section title="Development Environment Behavior">
        <protocol id="SEC-DEV-001">
            <title>Conditional Auto-Login (Dev Mode Only)</title>
            <instruction>Implement auto-login in development mode, respecting explicit user logout.</instruction>
            <state-machine>
                <state name="Startup">
                    <check>If `jwt_token` exists and is valid -&gt; State: Authenticated.</check>
                    <check>If `jwt_token` missing/invalid:</check>
                    <sub-check>If `dev_logout_flag` (localStorage) is true -&gt; State: Unauthenticated (Respect explicit logout).</sub-check>
                    <sub-check>If `dev_logout_flag` is false/missing -&gt; Action: Auto-login dev user. Set `jwt_token`. -&gt; State: Authenticated.</sub-check>
                </state>
                <state name="LogoutAction">
                    <action>Remove `jwt_token`.</action>
                    <action>Set `dev_logout_flag` to true.</action>
                </state>
                <state name="ManualLoginAction">
                    <action>Set `jwt_token`.</action>
                    <action>Remove `dev_logout_flag`.</action>
                </state>
            </state-machine>
        </protocol>
    </section>

    <section title="General Directives">
        <directive id="GEN-001" priority="MEDIUM">
             <title>Preservation of Existing Code vs Compliance</title>
             <instruction>Prioritize minimal changes. However, compliance with CRITICAL conventions (300/8 rule) and Security Protocols MUST take precedence over preservation. Refactor non-compliant existing code if touched.</instruction>
        </directive>
    </section>
</specification>