<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <title>Development Environment Configuration</title>
    <version>1.0.0</version>
    <created>2025-08-10</created>
    <author>Netra AI Team</author>
    <description>
      Specification for unified development environment with dynamic port allocation,
      service discovery, and simplified startup process.
    </description>
  </metadata>

  <features>
    <feature id="dynamic-ports">
      <name>Dynamic Port Allocation</name>
      <description>
        Backend server can automatically find and use available ports to avoid conflicts
        during development, especially when running multiple instances or tests.
      </description>
      <implementation>
        <file>run_server.py</file>
        <methods>
          <method>get_free_port() - Allocates free port using socket binding</method>
          <method>--dynamic-port flag - Enables automatic port selection</method>
          <method>--port flag - Manually specify port</method>
        </methods>
      </implementation>
    </feature>

    <feature id="hot-reload-control">
      <name>Hot Reload Control</name>
      <description>
        Fine-grained control over hot reload (file watching) for both backend and frontend.
        Allows disabling hot reload for performance or stability when needed.
      </description>
      <implementation>
        <file>dev_launcher.py</file>
        <options>
          <option>--no-backend-reload - Disable backend hot reload</option>
          <option>--no-frontend-reload - Disable frontend hot reload</option>
          <option>--no-reload - Disable all hot reload</option>
        </options>
      </implementation>
    </feature>

    <feature id="secret-management">
      <name>Google Cloud Secret Manager Integration</name>
      <description>
        Automatic loading of secrets from Google Cloud Secret Manager for development.
        Eliminates manual environment variable management and ensures secure credential handling.
      </description>
      <implementation>
        <file>dev_launcher.py</file>
        <methods>
          <method>load_secrets_from_gcp() - Fetches and loads secrets</method>
          <method>--load-secrets flag - Enable secret loading</method>
          <method>--project-id flag - Specify GCP project</method>
        </methods>
        <dependencies>
          <dependency>fetch_secrets_to_env.py - Existing secret fetcher script</dependency>
          <dependency>Google Cloud SDK with authentication</dependency>
        </dependencies>
      </implementation>
    </feature>

    <feature id="service-discovery">
      <name>Service Discovery Mechanism</name>
      <description>
        Allows frontend and backend to discover each other's configuration dynamically,
        enabling flexible port assignment and multi-instance development.
      </description>
      <implementation>
        <file>scripts/service_discovery.py</file>
        <storage>.netra/backend.json and .netra/frontend.json</storage>
        <data>
          <field>host - Service hostname</field>
          <field>port - Service port number</field>
          <field>api_url - Full API URL for HTTP requests</field>
          <field>ws_url - WebSocket connection URL</field>
          <field>pid - Process ID for lifecycle management</field>
        </data>
      </implementation>
    </feature>

    <feature id="unified-launcher">
      <name>Unified Development Launcher</name>
      <description>
        Single command to start both backend and frontend with proper configuration,
        dependency checking, and graceful shutdown.
      </description>
      <implementation>
        <file>dev_launcher.py</file>
        <capabilities>
          <capability>Dependency verification</capability>
          <capability>Sequential service startup</capability>
          <capability>Health check validation</capability>
          <capability>Process lifecycle management</capability>
          <capability>Graceful shutdown on interrupt</capability>
        </capabilities>
      </implementation>
    </feature>
  </features>

  <usage>
    <first-time-setup>
      <title>First-Time Developer Setup (Recommended)</title>
      <description>
        For developers setting up the environment for the first time, use these recommended configurations
        for optimal performance and avoiding common issues.
      </description>
      
      <recommended-command>
        <command>python dev_launcher.py --dynamic --no-backend-reload --load-secrets</command>
        <benefits>
          <benefit>--dynamic: Automatically finds free ports, avoiding "port already in use" errors</benefit>
          <benefit>--no-backend-reload: Disables backend hot reload for 30-50% faster startup and response times</benefit>
          <benefit>--load-secrets: Loads API keys and secrets from Google Cloud (if configured)</benefit>
        </benefits>
      </recommended-command>

      <alternative-configs>
        <config>
          <name>Minimal Setup (No Cloud)</name>
          <command>python dev_launcher.py --dynamic --no-backend-reload</command>
          <description>Best for local development without cloud dependencies</description>
        </config>
        
        <config>
          <name>Full Development Mode</name>
          <command>python dev_launcher.py --dynamic</command>
          <description>Includes hot reload for active development (slower but auto-refreshes on code changes)</description>
        </config>
        
        <config>
          <name>Performance Testing</name>
          <command>python dev_launcher.py --dynamic --no-reload</command>
          <description>Disables all hot reload for maximum performance during testing</description>
        </config>
      </alternative-configs>

      <setup-steps>
        <step>Install backend dependencies: pip install -r requirements.txt</step>
        <step>Install frontend dependencies: cd frontend && npm install</step>
        <step>Set up database: python create_db.py && python run_migrations.py</step>
        <step>Optional: Configure Google Cloud auth for secrets: gcloud auth application-default login</step>
        <step>Run recommended command above</step>
      </setup-steps>
    </first-time-setup>

    <quick-start>
      <title>Quick Start - Unified Development</title>
      <steps>
        <step>
          <command>python dev_launcher.py</command>
          <description>Start both backend and frontend with default configuration</description>
        </step>
      </steps>
    </quick-start>

    <advanced-usage>
      <title>Advanced Usage Options</title>
      
      <option id="dynamic-backend">
        <command>python dev_launcher.py --dynamic</command>
        <description>Use dynamic port allocation for backend (avoids port conflicts)</description>
      </option>

      <option id="custom-ports">
        <command>python dev_launcher.py --backend-port 8080 --frontend-port 3001</command>
        <description>Specify custom ports for services</description>
      </option>

      <option id="backend-only-dynamic">
        <command>python run_server.py --dynamic-port</command>
        <description>Start only backend with dynamic port</description>
      </option>

      <option id="backend-only-custom">
        <command>python run_server.py --port 8080</command>
        <description>Start only backend on specific port</description>
      </option>

      <option id="frontend-with-discovery">
        <command>cd frontend && node scripts/start_with_discovery.js</command>
        <description>Start frontend with automatic backend discovery</description>
      </option>

      <option id="no-reload-options">
        <command>python dev_launcher.py --no-backend-reload</command>
        <description>Start with backend hot reload disabled (improves performance)</description>
      </option>

      <option id="no-frontend-reload">
        <command>python dev_launcher.py --no-frontend-reload</command>
        <description>Start with frontend hot reload disabled</description>
      </option>

      <option id="no-reload-all">
        <command>python dev_launcher.py --no-reload</command>
        <description>Disable all hot reload for maximum performance</description>
      </option>

      <option id="load-secrets">
        <command>python dev_launcher.py --load-secrets</command>
        <description>Load secrets from Google Cloud Secret Manager (requires gcloud auth)</description>
      </option>

      <option id="load-secrets-project">
        <command>python dev_launcher.py --load-secrets --project-id my-gcp-project</command>
        <description>Load secrets from specific GCP project</description>
      </option>

      <option id="check-services">
        <command>python scripts/service_discovery.py status</command>
        <description>Check status of running services</description>
      </option>

      <option id="get-service-info">
        <command>python scripts/service_discovery.py get --service backend</command>
        <description>Get backend service configuration</description>
      </option>

      <option id="clear-discovery">
        <command>python scripts/service_discovery.py clear</command>
        <description>Clear service discovery information</description>
      </option>
    </advanced-usage>

    <environment-variables>
      <title>Environment Variables</title>
      
      <variable>
        <name>BACKEND_PORT</name>
        <description>Default backend port if not specified via command line</description>
        <default>8000</default>
      </variable>

      <variable>
        <name>NEXT_PUBLIC_API_URL</name>
        <description>Backend API URL for frontend (auto-configured via service discovery)</description>
        <example>http://localhost:8000</example>
      </variable>

      <variable>
        <name>NEXT_PUBLIC_WS_URL</name>
        <description>WebSocket URL for frontend (auto-configured via service discovery)</description>
        <example>ws://localhost:8000/ws</example>
      </variable>

      <variable>
        <name>SERVER_PORT</name>
        <description>Set automatically by run_server.py to inform the app of its port</description>
      </variable>

      <variable>
        <name>GOOGLE_CLOUD_PROJECT</name>
        <description>Google Cloud project ID for secret loading (alternative to --project-id flag)</description>
        <example>my-gcp-project</example>
      </variable>
    </environment-variables>
  </usage>

  <architecture>
    <component id="backend-server">
      <name>Backend Server (FastAPI)</name>
      <startup>
        <sequence>
          1. Parse command-line arguments for port configuration
          2. Allocate port (fixed, from env var, or dynamic)
          3. Write service discovery information to .netra/backend.json
          4. Set SERVER_PORT environment variable
          5. Start Uvicorn server with specified configuration
        </sequence>
      </startup>
    </component>

    <component id="frontend-server">
      <name>Frontend Server (Next.js)</name>
      <startup>
        <sequence>
          1. Read backend discovery from .netra/backend.json
          2. Set NEXT_PUBLIC_API_URL and NEXT_PUBLIC_WS_URL environment variables
          3. Start Next.js development server
          4. Write frontend discovery to .netra/frontend.json
        </sequence>
      </startup>
    </component>

    <component id="service-discovery">
      <name>Service Discovery</name>
      <responsibilities>
        <responsibility>Store service configuration in JSON files</responsibility>
        <responsibility>Provide API for reading/writing service information</responsibility>
        <responsibility>Track process IDs for lifecycle management</responsibility>
        <responsibility>Check if services are running</responsibility>
      </responsibilities>
    </component>

    <component id="dev-launcher">
      <name>Development Launcher</name>
      <responsibilities>
        <responsibility>Check all dependencies before startup</responsibility>
        <responsibility>Start backend server with proper configuration</responsibility>
        <responsibility>Wait for backend health check</responsibility>
        <responsibility>Start frontend with backend discovery</responsibility>
        <responsibility>Monitor processes and handle graceful shutdown</responsibility>
        <responsibility>Clean up service discovery on exit</responsibility>
      </responsibilities>
    </component>
  </architecture>

  <benefits>
    <benefit>
      <title>Eliminates Port Conflicts</title>
      <description>
        Dynamic port allocation ensures developers can run multiple instances
        or work alongside running tests without port conflicts.
      </description>
    </benefit>

    <benefit>
      <title>Simplified Startup</title>
      <description>
        Single command starts entire development stack with proper configuration
        and dependency checking.
      </description>
    </benefit>

    <benefit>
      <title>Automatic Configuration</title>
      <description>
        Frontend automatically discovers backend configuration, eliminating
        manual environment variable management.
      </description>
    </benefit>

    <benefit>
      <title>Better Developer Experience</title>
      <description>
        Clear status messages, health checks, and graceful shutdown make
        development more predictable and pleasant.
      </description>
    </benefit>

    <benefit>
      <title>Test Isolation Compatibility</title>
      <description>
        Same port allocation mechanism used in tests, ensuring consistency
        between development and testing environments.
      </description>
    </benefit>

    <benefit>
      <title>Performance Control</title>
      <description>
        Hot reload can be disabled for better performance when working on
        performance-sensitive code or when file watching causes issues.
      </description>
    </benefit>

    <benefit>
      <title>Secure Secret Management</title>
      <description>
        Integration with Google Cloud Secret Manager ensures credentials
        are never stored in code or local files, improving security posture.
      </description>
    </benefit>
  </benefits>

  <troubleshooting>
    <common-first-time-issues>
      <title>Common First-Time Setup Issues</title>
      
      <issue>
        <problem>"Port 8000 already in use" error</problem>
        <solution>
          Always use --dynamic flag for first-time setup:
          python dev_launcher.py --dynamic --no-backend-reload
        </solution>
        <prevention>The --dynamic flag automatically finds free ports</prevention>
      </issue>

      <issue>
        <problem>Slow startup or response times</problem>
        <solution>
          Disable hot reload for 30-50% performance improvement:
          python dev_launcher.py --dynamic --no-backend-reload
        </solution>
        <note>You can re-enable hot reload later when actively developing</note>
      </issue>

      <issue>
        <problem>Missing API keys or configuration</problem>
        <solution>
          1. Create .env file with required keys, OR
          2. Use Google Cloud secrets: python dev_launcher.py --load-secrets --project-id YOUR_PROJECT
        </solution>
      </issue>
    </common-first-time-issues>

    <issue>
      <problem>Port already in use error</problem>
      <solution>
        Use --dynamic flag to automatically find free port:
        python dev_launcher.py --dynamic
      </solution>
    </issue>

    <issue>
      <problem>Frontend cannot connect to backend</problem>
      <solution>
        1. Check service discovery: python scripts/service_discovery.py status
        2. Ensure backend started first if running separately
        3. Clear old discovery data: python scripts/service_discovery.py clear
      </solution>
    </issue>

    <issue>
      <problem>Services don't shut down cleanly</problem>
      <solution>
        1. Use Ctrl+C to trigger graceful shutdown
        2. On Windows, use: taskkill /F /IM python.exe /IM node.exe
        3. Clear discovery: python scripts/service_discovery.py clear
      </solution>
    </issue>

    <issue>
      <problem>Missing dependencies error</problem>
      <solution>
        1. Backend: pip install -r requirements.txt
        2. Frontend: cd frontend && npm install
        3. Re-run launcher after installing dependencies
      </solution>
    </issue>

    <issue>
      <problem>Secret loading fails</problem>
      <solution>
        1. Ensure gcloud is authenticated: gcloud auth application-default login
        2. Verify project ID: gcloud config get-value project
        3. Check IAM permissions for Secret Manager access
        4. Use --project-id flag if GOOGLE_CLOUD_PROJECT is not set
      </solution>
    </issue>

    <issue>
      <problem>Hot reload causing performance issues</problem>
      <solution>
        1. Disable backend reload: --no-backend-reload
        2. Disable frontend reload: --no-frontend-reload
        3. Disable all reload: --no-reload
        4. Use for better performance during intensive development
      </solution>
    </issue>
  </troubleshooting>

  <testing>
    <integration>
      <description>
        The dynamic port allocation system integrates with the existing test
        isolation framework in scripts/test_isolation.py, using the same
        get_free_port() mechanism for consistency.
      </description>
    </integration>

    <commands>
      <command>
        <name>Test with isolation</name>
        <code>python test_runner.py --mode quick</code>
        <description>Uses dynamic ports via TestIsolationManager</description>
      </command>

      <command>
        <name>Test backend with dynamic port</name>
        <code>python scripts/test_backend.py --dynamic-port</code>
        <description>Run backend tests with automatic port allocation</description>
      </command>
    </commands>
  </testing>

  <migration>
    <from-existing>
      <title>Migrating from Fixed Port Setup</title>
      <steps>
        <step>Update any hardcoded localhost:8000 references to use environment variables</step>
        <step>Replace manual startup commands with dev_launcher.py</step>
        <step>Update CI/CD scripts to use --port flag if needed</step>
        <step>Add .netra/ to .gitignore to avoid committing discovery files</step>
      </steps>
    </from-existing>

    <to-secret-manager>
      <title>Migrating to Google Cloud Secret Manager</title>
      <steps>
        <step>Store secrets in Google Cloud Secret Manager via console or gcloud CLI</step>
        <step>Remove local .env files from development machines</step>
        <step>Configure gcloud authentication: gcloud auth application-default login</step>
        <step>Use --load-secrets flag when starting development environment</step>
        <step>Update team documentation with project ID and secret naming conventions</step>
      </steps>
    </to-secret-manager>
  </migration>

  <future-enhancements>
    <enhancement>
      <title>Docker Integration</title>
      <description>
        Extend service discovery to work with Docker containers, allowing
        mixed local/containerized development.
      </description>
    </enhancement>

    <enhancement>
      <title>Multi-Service Support</title>
      <description>
        Support additional services like Redis, PostgreSQL, ClickHouse with
        automatic port allocation and discovery.
      </description>
    </enhancement>

    <enhancement>
      <title>Remote Development</title>
      <description>
        Enable service discovery across network for distributed development
        teams or cloud-based development environments.
      </description>
    </enhancement>

    <enhancement>
      <title>Service Health Dashboard</title>
      <description>
        Web-based dashboard showing all running services, their configuration,
        and health status.
      </description>
    </enhancement>
  </future-enhancements>
</specification>