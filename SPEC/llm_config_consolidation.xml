<?xml version="1.0" encoding="UTF-8"?>
<specification name="LLM Configuration Consolidation" version="1.0">
  <metadata>
    <created>2025-08-29</created>
    <purpose>Single Source of Truth (SSOT) for LLM configuration in test framework</purpose>
    <business_value>
      <segment>Platform/Internal</segment>
      <goal>Development Velocity, Testing Infrastructure Reliability</goal>
      <impact>Eliminates configuration inconsistencies causing test failures</impact>
      <strategic_value>Reduces debugging time by 40-60%, improves developer experience</strategic_value>
    </business_value>
  </metadata>

  <summary>
    <description>Consolidated multiple LLM configuration systems into a single canonical manager</description>
    <problem>
      Three different LLM configuration systems existed, violating SSOT principles:
      1. test_framework/test_config.py:configure_real_llm() - Set both TEST_USE_REAL_LLM and ENABLE_REAL_LLM_TESTING
      2. test_framework/real_llm_config.py:RealLLMConfigManager - Checked both environment variables
      3. test_framework/environment_isolation.py:_configure_real_llm() - Only set ENABLE_REAL_LLM_TESTING
    </problem>
    <solution>
      Created test_framework/llm_config_manager.py as the SINGLE SOURCE OF TRUTH with:
      - Clear mode enum (MOCK, REAL, MIXED)
      - Canonical environment variables
      - Unified configuration interface
      - Backward compatibility for existing systems
    </solution>
  </summary>

  <canonical_system>
    <file>test_framework/llm_config_manager.py</file>
    <description>Single Source of Truth for all LLM test configuration</description>
    
    <modes>
      <mode name="MOCK" value="mock">Use mock responses only</mode>
      <mode name="REAL" value="real">Use real LLM APIs</mode>
      <mode name="MIXED" value="mixed">Allow both real and mock based on availability</mode>
    </modes>

    <canonical_environment_variables>
      <primary>
        <variable name="ENABLE_REAL_LLM_TESTING" type="boolean" default="false">
          <description>Main flag to enable/disable real LLM testing</description>
          <usage>Primary control for real LLM mode</usage>
        </variable>
        <variable name="TEST_LLM_MODE" type="enum" default="mock">
          <description>Explicit LLM test mode setting</description>
          <values>mock, real, mixed</values>
          <usage>Overrides ENABLE_REAL_LLM_TESTING when set</usage>
        </variable>
      </primary>
      
      <configuration>
        <variable name="TEST_LLM_MODEL" type="string" default="gemini-2.5-flash">
          <description>Default LLM model to use for testing</description>
        </variable>
        <variable name="TEST_LLM_TIMEOUT" type="integer" default="30">
          <description>Timeout in seconds for LLM requests</description>
        </variable>
        <variable name="TEST_LLM_PARALLEL" type="integer" default="3">
          <description>Number of parallel LLM requests allowed</description>
        </variable>
        <variable name="TEST_LLM_BUDGET" type="float" default="50.0">
          <description>Maximum cost budget per test run</description>
        </variable>
        <variable name="TEST_LLM_RATE_LIMIT" type="integer" default="60">
          <description>Maximum requests per minute</description>
        </variable>
      </configuration>

      <legacy_compatibility>
        <variable name="TEST_USE_REAL_LLM" type="boolean">
          <description>DEPRECATED: Legacy compatibility variable</description>
          <status>Maintained for backward compatibility, set automatically</status>
        </variable>
      </legacy_compatibility>

      <api_keys>
        <preferred_test_keys>
          <variable name="TEST_OPENAI_API_KEY">Test API key for OpenAI</variable>
          <variable name="TEST_ANTHROPIC_API_KEY">Test API key for Anthropic</variable>
          <variable name="TEST_GOOGLE_API_KEY">Test API key for Google/Gemini</variable>
        </preferred_test_keys>
        <fallback_production_keys>
          <variable name="OPENAI_API_KEY">Production OpenAI API key (with warning)</variable>
          <variable name="ANTHROPIC_API_KEY">Production Anthropic API key (with warning)</variable>
          <variable name="GOOGLE_API_KEY">Production Google API key (with warning)</variable>
          <variable name="GEMINI_API_KEY">Production Gemini API key (with warning)</variable>
        </fallback_production_keys>
      </api_keys>
    </canonical_environment_variables>

    <main_interface>
      <function name="configure_llm_testing">
        <description>Primary function for configuring LLM testing environment</description>
        <parameters>
          <param name="mode" type="LLMTestMode" optional="true">Test mode (auto-detected if None)</param>
          <param name="model" type="str" default="gemini-2.5-flash">Default model to use</param>
          <param name="timeout" type="int" default="60">Timeout in seconds</param>
          <param name="parallel" type="Union[str, int]" default="auto">Parallelism level</param>
          <param name="use_dedicated_env" type="bool" default="true">Use dedicated test environment</param>
        </parameters>
        <returns>Configuration dictionary with applied settings</returns>
      </function>
      
      <function name="is_real_llm_enabled">
        <description>Check if real LLM testing is currently enabled</description>
        <returns>Boolean indicating real LLM mode status</returns>
      </function>
      
      <function name="get_llm_test_mode">
        <description>Get current LLM test mode</description>
        <returns>LLMTestMode enum value</returns>
      </function>
    </main_interface>
  </canonical_system>

  <migration_changes>
    <file path="test_framework/test_config.py">
      <change type="deprecation">
        <description>configure_real_llm function converted to deprecated wrapper</description>
        <action>Calls configure_llm_testing with deprecation warning</action>
        <status>Backward compatible</status>
      </change>
    </file>
    
    <file path="test_framework/environment_isolation.py">
      <change type="deprecation">
        <description>_configure_real_llm method converted to deprecated wrapper</description>
        <action>Calls configure_llm_testing with deprecation warning</action>
        <status>Backward compatible</status>
      </change>
    </file>
    
    <file path="test_framework/real_llm_config.py">
      <change type="integration">
        <description>RealLLMConfigManager updated to use canonical manager internally</description>
        <action>Wraps LLMConfigManager for backward compatibility</action>
        <status>Fully functional, uses canonical system</status>
      </change>
    </file>
    
    <file path="tests/unified_test_runner.py">
      <change type="update">
        <description>Updated import and function call</description>
        <action>
          - Import: from test_framework.llm_config_manager import configure_llm_testing, LLMTestMode
          - Call: configure_llm_testing(mode=LLMTestMode.REAL, ...)
        </action>
        <status>Updated to use canonical system</status>
      </change>
    </file>
  </migration_changes>

  <removed_duplications>
    <duplication>
      <description>Multiple environment variable checking logic</description>
      <files>test_config.py, real_llm_config.py, environment_isolation.py</files>
      <solution>Single _determine_mode() method in LLMConfigManager</solution>
    </duplication>
    
    <duplication>
      <description>API key loading and validation logic</description>
      <files>test_config.py, real_llm_config.py</files>
      <solution>Single _load_api_keys() method in LLMConfigManager</solution>
    </duplication>
    
    <duplication>
      <description>Test environment configuration</description>
      <files>test_config.py, environment_isolation.py</files>
      <solution>Single _configure_dedicated_test_environment() method</solution>
    </duplication>
  </removed_duplications>

  <backward_compatibility>
    <approach>All existing interfaces maintained with deprecation warnings</approach>
    <migration_timeline>
      <phase name="immediate">All systems work with new canonical backend</phase>
      <phase name="short_term">Deprecation warnings guide developers to new interface</phase>
      <phase name="long_term">Remove deprecated wrappers after full migration</phase>
    </migration_timeline>
    
    <existing_imports_supported>
      <import>from test_framework.test_config import configure_real_llm</import>
      <import>from test_framework.real_llm_config import get_real_llm_manager, is_real_llm_enabled</import>
      <import>test_environment_manager._configure_real_llm()</import>
    </existing_imports_supported>
  </backward_compatibility>

  <compliance>
    <ssot_principle>
      <status>ACHIEVED</status>
      <description>Single canonical implementation in llm_config_manager.py</description>
    </ssot_principle>
    
    <architectural_compliance>
      <file_size>~750 lines - within module guidelines</file_size>
      <single_responsibility>LLM test configuration and mode management only</single_responsibility>
      <type_safety>Full type hints with Pydantic models and enums</type_safety>
      <error_handling>Comprehensive validation and clear error messages</error_handling>
    </architectural_compliance>
  </compliance>

  <testing_validation>
    <unit_tests>
      <test>Environment variable detection logic</test>
      <test>Mode determination from various env var combinations</test>
      <test>API key loading with preference for TEST_* variants</test>
      <test>Configuration validation</test>
    </unit_tests>
    
    <integration_tests>
      <test>Backward compatibility with existing test files</test>
      <test>unified_test_runner.py --real-llm flag</test>
      <test>Real LLM execution in various test categories</test>
    </integration_tests>
  </testing_validation>
</specification>