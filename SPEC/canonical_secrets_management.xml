<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <title>Canonical Secrets Management Process</title>
  <version>1.0</version>
  <date>2025-08-29</date>
  <status>MANDATORY</status>
  
  <overview>
    This document defines the SINGLE SOURCE OF TRUTH for secrets management across all environments.
    Every secret must follow this exact flow from creation to runtime usage.
    
    CRITICAL: Violation of this process has caused production outages and data breaches.
    Business Impact: $50K+ per incident in lost revenue and remediation costs.
  </overview>

  <environments>
    <environment name="development">
      <allows_placeholders>true</allows_placeholders>
      <allows_localhost>true</allows_localhost>
      <requires_ssl>false</requires_ssl>
    </environment>
    <environment name="staging">
      <allows_placeholders>false</allows_placeholders>
      <allows_localhost>false</allows_localhost>
      <requires_ssl>true</requires_ssl>
    </environment>
    <environment name="production">
      <allows_placeholders>false</allows_placeholders>
      <allows_localhost>false</allows_localhost>
      <requires_ssl>true</requires_ssl>
    </environment>
  </environments>

  <secret_lifecycle>
    
    <!-- STEP 1: Secret Definition -->
    <phase number="1" name="Definition">
      <description>Define the secret requirement in application code</description>
      
      <locations>
        <location service="backend">
          <file>netra_backend/app/core/configuration/base.py</file>
          <file>netra_backend/app/core/configuration/database.py</file>
          <file>netra_backend/app/core/configuration/secrets.py</file>
        </location>
        <location service="auth">
          <file>auth_service/auth_core/config.py</file>
          <file>auth_service/auth_core/secret_loader.py</file>
        </location>
        <location service="shared">
          <file>shared/database_url_builder.py</file>
          <file>shared/redis_config_builder.py</file>
          <file>shared/secret_manager_builder.py</file>
        </location>
      </locations>
      
      <required_validation>
        <rule>Must check if environment requires non-placeholder values</rule>
        <rule>Must validate format and security requirements</rule>
        <rule>Must provide clear error messages when validation fails</rule>
      </required_validation>
      
      <example>
        <code language="python">
# In configuration builder
def validate(self) -> Tuple[bool, str]:
    if self.is_staging() or self.is_production():
        password = self.get_password()
        if not password:
            return False, f"Password is required for {self.environment} environment"
        if password in PLACEHOLDER_VALUES:
            return False, f"Placeholder password not allowed in {self.environment}"
    return True, ""
        </code>
      </example>
    </phase>

    <!-- STEP 2: Secret Creation in GCP Secret Manager -->
    <phase number="2" name="Secret Manager Creation">
      <description>Create the secret in GCP Secret Manager</description>
      
      <naming_convention>
        <pattern>{SECRET_NAME}-{ENVIRONMENT}</pattern>
        <examples>
          <example>postgres-password-staging</example>
          <example>jwt-secret-key-production</example>
          <example>redis-password-staging</example>
        </examples>
      </naming_convention>
      
      <creation_commands>
        <command purpose="Create new secret">
          echo -n "SECRET_VALUE" | gcloud secrets create SECRET_NAME-staging --data-file=- --project=netra-staging
        </command>
        <command purpose="Update existing secret">
          echo -n "SECRET_VALUE" | gcloud secrets versions add SECRET_NAME-staging --data-file=- --project=netra-staging
        </command>
        <command purpose="Generate secure password">
          python -c "import secrets; print(secrets.token_urlsafe(32))" | gcloud secrets versions add SECRET_NAME-staging --data-file=- --project=netra-staging
        </command>
      </creation_commands>
      
      <required_secrets>
        <!-- Database Secrets -->
        <secret name="postgres-host-staging" service="all" required="true"/>
        <secret name="postgres-port-staging" service="all" required="true"/>
        <secret name="postgres-db-staging" service="all" required="true"/>
        <secret name="postgres-user-staging" service="all" required="true"/>
        <secret name="postgres-password-staging" service="all" required="true"/>
        
        <!-- Redis Secrets -->
        <secret name="redis-url-staging" service="backend,auth" required="true"/>
        <secret name="redis-password-staging" service="backend,auth" required="true"/>
        
        <!-- JWT/Auth Secrets -->
        <secret name="jwt-secret-key-staging" service="all" required="true"/>
        <secret name="jwt-secret-staging" service="auth" required="true"/>
        <secret name="secret-key-staging" service="backend" required="true"/>
        <secret name="session-secret-key-staging" service="backend" required="false"/>
        
        <!-- OAuth Secrets -->
        <secret name="google-oauth-client-id-staging" service="all" required="true"/>
        <secret name="google-oauth-client-secret-staging" service="all" required="true"/>
        <secret name="oauth-hmac-secret-staging" service="auth" required="true"/>
        
        <!-- Service Communication -->
        <secret name="service-secret-staging" service="all" required="true"/>
        <secret name="service-id-staging" service="auth" required="true"/>
        <secret name="fernet-key-staging" service="backend" required="true"/>
        
        <!-- External APIs -->
        <secret name="openai-api-key-staging" service="backend" required="true"/>
        <secret name="anthropic-api-key-staging" service="backend" required="true"/>
        <secret name="gemini-api-key-staging" service="backend" required="true"/>
        
        <!-- ClickHouse -->
        <secret name="clickhouse-host-staging" service="backend" required="true"/>
        <secret name="clickhouse-port-staging" service="backend" required="true"/>
        <secret name="clickhouse-db-staging" service="backend" required="true"/>
        <secret name="clickhouse-user-staging" service="backend" required="true"/>
        <secret name="clickhouse-password-staging" service="backend" required="true"/>
        <secret name="clickhouse-url-staging" service="backend" required="false"/>
      </required_secrets>
    </phase>

    <!-- STEP 3: Deployment Script Mapping -->
    <phase number="3" name="Deployment Script Configuration">
      <description>Map secrets to environment variables in deployment script</description>
      
      <file>scripts/deploy_to_gcp.py</file>
      
      <mapping_rules>
        <rule>Every secret in Secret Manager must have a corresponding environment variable mapping</rule>
        <rule>Environment variable name should match the secret purpose</rule>
        <rule>Use UPPER_SNAKE_CASE for environment variables</rule>
      </mapping_rules>
      
      <backend_mapping>
        <code language="python">
# In deploy_to_gcp.py for backend service
"--set-secrets", ",".join([
    "POSTGRES_HOST=postgres-host-staging:latest",
    "POSTGRES_PORT=postgres-port-staging:latest",
    "POSTGRES_DB=postgres-db-staging:latest",
    "POSTGRES_USER=postgres-user-staging:latest",
    "POSTGRES_PASSWORD=postgres-password-staging:latest",
    "REDIS_URL=redis-url-staging:latest",
    "REDIS_PASSWORD=redis-password-staging:latest",  # CRITICAL: Often missed!
    "JWT_SECRET_KEY=jwt-secret-key-staging:latest",
    # ... all other secrets
])
        </code>
      </backend_mapping>
      
      <auth_mapping>
        <code language="python">
# In deploy_to_gcp.py for auth service
"--set-secrets", ",".join([
    "POSTGRES_HOST=postgres-host-staging:latest",
    "POSTGRES_PORT=postgres-port-staging:latest",
    "POSTGRES_DB=postgres-db-staging:latest",
    "POSTGRES_USER=postgres-user-staging:latest",
    "POSTGRES_PASSWORD=postgres-password-staging:latest",
    "REDIS_URL=redis-url-staging:latest",
    "REDIS_PASSWORD=redis-password-staging:latest",  # CRITICAL: Often missed!
    "JWT_SECRET_KEY=jwt-secret-key-staging:latest",
    "JWT_SECRET=jwt-secret-staging:latest",
    # ... all other secrets
])
        </code>
      </auth_mapping>
    </phase>

    <!-- STEP 4: Application Code Access -->
    <phase number="4" name="Runtime Access">
      <description>Access secrets in application code</description>
      
      <access_patterns>
        <pattern name="Direct Environment Access">
          <code language="python">
# Using IsolatedEnvironment (PREFERRED)
from netra_backend.app.core.isolated_environment import get_env
env = get_env()
password = env.get("REDIS_PASSWORD")
          </code>
        </pattern>
        
        <pattern name="Configuration Builder">
          <code language="python">
# Using configuration builders
from shared.redis_config_builder import RedisConfigurationBuilder
redis_builder = RedisConfigurationBuilder(env_vars)
password = redis_builder.secret_manager.get_redis_password()
          </code>
        </pattern>
        
        <pattern name="Unified Config">
          <code language="python">
# Using unified configuration
from netra_backend.app.core.configuration.base import get_unified_config
config = get_unified_config()
# Secrets are populated in config object
          </code>
        </pattern>
      </access_patterns>
    </phase>

    <!-- STEP 5: Validation and Testing -->
    <phase number="5" name="Validation">
      <description>Validate secrets are properly configured</description>
      
      <validation_points>
        <point when="Pre-deployment">
          <description>Validate secrets exist and have non-placeholder values</description>
          <script>scripts/validate_secrets.py</script>
        </point>
        
        <point when="Post-deployment">
          <description>Validate Cloud Run services have correct secret mappings</description>
          <test>tests/e2e/test_cloud_run_secret_configuration.py</test>
        </point>
        
        <point when="Runtime">
          <description>Application validates secrets during startup</description>
          <location>Configuration builders validate() methods</location>
        </point>
      </validation_points>
    </phase>
  </secret_lifecycle>

  <common_issues>
    <issue id="1">
      <problem>Secret exists in Secret Manager but not mapped in deployment script</problem>
      <symptom>Application fails with "environment variable not found"</symptom>
      <solution>Add mapping to deploy_to_gcp.py --set-secrets parameter</solution>
    </issue>
    
    <issue id="2">
      <problem>Placeholder value in staging/production secret</problem>
      <symptom>"Password is required for staging environment" error</symptom>
      <solution>Update secret with real value using gcloud secrets versions add</solution>
    </issue>
    
    <issue id="3">
      <problem>Mismatched environment variable names</problem>
      <symptom>Application uses REDIS_PASSWORD but deployment maps REDIS_PASS</symptom>
      <solution>Ensure exact match between code expectations and deployment mappings</solution>
    </issue>
    
    <issue id="4">
      <problem>Missing secret name in Cloud Run secretKeyRef</problem>
      <symptom>Secret reference incomplete, missing 'name' field</symptom>
      <solution>Ensure --set-secrets includes SECRET_NAME=secret-name-staging:latest format</solution>
    </issue>
  </common_issues>

  <checklist>
    <item>□ Secret defined in application configuration code</item>
    <item>□ Secret created in GCP Secret Manager with correct naming</item>
    <item>□ Secret has non-placeholder value for staging/production</item>
    <item>□ Secret mapped in deploy_to_gcp.py for relevant services</item>
    <item>□ Environment variable name matches application expectations</item>
    <item>□ Secret validated by configuration builder</item>
    <item>□ Test exists to verify secret configuration</item>
    <item>□ Secret documented in this specification</item>
  </checklist>

  <enforcement>
    <rule>All PRs modifying secrets must include updates to this document</rule>
    <rule>CI/CD must run test_cloud_run_secret_configuration.py</rule>
    <rule>Deployment script must validate secrets before deployment</rule>
    <rule>Configuration builders must validate environment-specific requirements</rule>
  </enforcement>
</specification>