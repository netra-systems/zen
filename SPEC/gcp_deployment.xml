<?xml version='1.0' encoding='utf-8'?>
<spec>
  <name>GCP Deployment Infrastructure</name>
  <version>2.0.0</version>
  <description>
    Comprehensive specification for GCP deployment infrastructure including
    modular architecture, robust error handling, and automated recovery.
  </description>
  <metadata>
    <author>Netra Engineering</author>
    <created>2025-08-21</created>
    <tags>deployment, gcp, cloud-run, monitoring, automation</tags>
    <cross_references>
      <ref>learnings/deployment_staging.xml</ref>
      <ref>testing.xml</ref>
      <ref>monitoring.xml</ref>
      <ref>security.xml</ref>
      <ref>independent_services.xml</ref>
    </cross_references>
    <last_edited>2025-08-21T08:47:28.476616</last_edited>
    <legacy_status is_legacy="true" identified_date="2025-08-21T08:47:28.476616">
      <reasons>
        <reason>Content contains: old</reason>
      </reasons>
    </legacy_status>
  </metadata>
  <architecture>
    <overview>
      The GCP deployment infrastructure uses a modular, Python-based architecture
      with comprehensive error handling, real-time monitoring, and automated rollback
      capabilities. All components follow the Single Responsibility Principle.
    </overview>
    <modules>
      <module name="core">
        <description>Core deployment orchestration modules</description>
        <components>
          <component name="DeploymentOrchestrator">
            <purpose>Main coordinator for deployment pipeline</purpose>
            <responsibilities>
              - Orchestrate deployment phases
              - Coordinate between modules
              - Handle rollback decisions
              - Track deployment history
            </responsibilities>
          </component>
          <component name="DockerImageManager">
            <purpose>Docker image build and registry management</purpose>
            <responsibilities>
              - Build Docker images
              - Push to Artifact Registry
              - Manage image versions
              - Clean up old images
            </responsibilities>
          </component>
          <component name="CloudRunDeployer">
            <purpose>Cloud Run service deployment</purpose>
            <responsibilities>
              - Deploy services to Cloud Run
              - Configure service parameters
              - Manage traffic splitting
              - Handle service rollbacks
            </responsibilities>
          </component>
          <component name="HealthChecker">
            <purpose>Service health validation</purpose>
            <responsibilities>
              - Perform health checks
              - Wait for service readiness
              - Generate health reports
              - Check service dependencies
            </responsibilities>
          </component>
        </components>
      </module>
      <module name="monitoring">
        <description>Real-time monitoring and log analysis</description>
        <components>
          <component name="RealTimeMonitor">
            <purpose>Live deployment tracking</purpose>
            <responsibilities>
              - Stream deployment logs
              - Detect critical errors
              - Track deployment progress
              - Alert on anomalies
            </responsibilities>
          </component>
          <component name="ErrorAnalyzer">
            <purpose>Error categorization and recovery</purpose>
            <responsibilities>
              - Categorize errors by type
              - Determine severity levels
              - Recommend recovery actions
              - Track error patterns
            </responsibilities>
          </component>
          <component name="LogCorrelator">
            <purpose>Cross-service log correlation</purpose>
            <responsibilities>
              - Correlate logs across services
              - Identify cascading failures
              - Track request flows
              - Generate correlation reports
            </responsibilities>
          </component>
        </components>
      </module>
      <module name="auth">
        <description>Authentication and credential management</description>
        <components>
          <component name="ServiceAccountManager">
            <purpose>Service account lifecycle management</purpose>
            <responsibilities>
              - Create service accounts
              - Manage IAM permissions
              - Rotate credentials
              - Handle authentication failures
            </responsibilities>
          </component>
          <component name="CredentialRotator">
            <purpose>Automated credential rotation</purpose>
            <responsibilities>
              - Schedule key rotation
              - Generate new keys
              - Update deployments
              - Clean up old keys
            </responsibilities>
          </component>
        </components>
      </module>
    </modules>
  </architecture>
  <deployment_pipeline>
    <phases>
      <phase name="pre_deployment">
        <description>Validation before deployment</description>
        <steps>
          <step>Run critical path tests</step>
          <step>Validate configuration</step>
          <step>Check service dependencies</step>
          <step>Store current versions for rollback</step>
        </steps>
      </phase>
      <phase name="authentication">
        <description>Setup GCP authentication</description>
        <steps>
          <step>Configure service account</step>
          <step>Setup Docker authentication</step>
          <step>Validate permissions</step>
        </steps>
      </phase>
      <phase name="build">
        <description>Build and push Docker images</description>
        <steps>
          <step>Build Docker images</step>
          <step>Tag with version</step>
          <step>Push to Artifact Registry</step>
          <step>Clean up old images</step>
        </steps>
      </phase>
      <phase name="deploy">
        <description>Deploy services to Cloud Run</description>
        <steps>
          <step>Deploy services with new images</step>
          <step>Configure environment variables</step>
          <step>Set up networking</step>
          <step>Configure auto-scaling</step>
        </steps>
      </phase>
      <phase name="health_check">
        <description>Validate deployed services</description>
        <steps>
          <step>Check service health endpoints</step>
          <step>Verify response times</step>
          <step>Test critical paths</step>
          <step>Wait for service stabilization</step>
        </steps>
      </phase>
      <phase name="post_deployment">
        <description>Monitor and validate</description>
        <steps>
          <step>Monitor error rates</step>
          <step>Check performance metrics</step>
          <step>Validate business logic</step>
          <step>Generate deployment report</step>
        </steps>
      </phase>
    </phases>
  </deployment_pipeline>
  <error_handling>
    <error_categories>
      <category name="authentication">
        <description>Authentication and authorization errors</description>
        <patterns>
          - 401/403 status codes
          - Invalid credentials
          - Service account issues
        </patterns>
        <recovery>
          <action>regenerate_service_account_key</action>
          <action>update_iam_permissions</action>
        </recovery>
      </category>
      <category name="network">
        <description>Network connectivity issues</description>
        <patterns>
          - Connection refused
          - DNS resolution failures
          - Timeouts
        </patterns>
        <recovery>
          <action>retry_with_exponential_backoff</action>
          <action>check_firewall_rules</action>
        </recovery>
      </category>
      <category name="resource">
        <description>Resource exhaustion</description>
        <patterns>
          - Out of memory
          - CPU limits exceeded
          - Disk full
        </patterns>
        <recovery>
          <action>scale_up_resources</action>
          <action>cleanup_old_resources</action>
        </recovery>
      </category>
      <category name="configuration">
        <description>Configuration errors</description>
        <patterns>
          - Missing environment variables
          - Invalid configuration
          - Version mismatches
        </patterns>
        <recovery>
          <action>validate_configuration</action>
          <action>rollback_to_previous</action>
        </recovery>
      </category>
    </error_categories>
    <retry_strategies>
      <strategy name="immediate">
        <description>Retry immediately</description>
        <max_attempts>3</max_attempts>
      </strategy>
      <strategy name="exponential_backoff">
        <description>Exponential backoff with jitter</description>
        <initial_delay_ms>1000</initial_delay_ms>
        <max_delay_ms>60000</max_delay_ms>
        <multiplier>2</multiplier>
      </strategy>
      <strategy name="circuit_breaker">
        <description>Circuit breaker pattern</description>
        <failure_threshold>5</failure_threshold>
        <recovery_timeout_ms>30000</recovery_timeout_ms>
      </strategy>
    </retry_strategies>
  </error_handling>
  <monitoring>
    <log_aggregation>
      <source>GCP Cloud Logging</source>
      <filters>
        - resource.type="cloud_run_revision"
        - severity &gt;= ERROR
      </filters>
      <retention_days>30</retention_days>
    </log_aggregation>
    <metrics>
      <metric name="deployment_success_rate">
        <description>Percentage of successful deployments</description>
        <calculation>successful_deployments / total_deployments</calculation>
        <threshold>0.95</threshold>
      </metric>
      <metric name="mean_time_to_recovery">
        <description>Average time to recover from failures</description>
        <calculation>sum(recovery_times) / failure_count</calculation>
        <threshold_minutes>5</threshold_minutes>
      </metric>
      <metric name="error_rate">
        <description>Errors per minute post-deployment</description>
        <calculation>error_count / time_window_minutes</calculation>
        <threshold>0.05</threshold>
      </metric>
    </metrics>
    <alerting>
      <alert name="deployment_failed">
        <condition>deployment_status == "failed"</condition>
        <severity>critical</severity>
        <action>notify_oncall</action>
      </alert>
      <alert name="high_error_rate">
        <condition>error_rate &gt; 0.1</condition>
        <severity>high</severity>
        <action>trigger_rollback</action>
      </alert>
      <alert name="service_unhealthy">
        <condition>health_check_failed_count &gt; 3</condition>
        <severity>high</severity>
        <action>restart_service</action>
      </alert>
    </alerting>
  </monitoring>
  <rollback>
    <triggers>
      <trigger name="health_check_failure">
        <description>Service fails health checks</description>
        <threshold>3 consecutive failures</threshold>
      </trigger>
      <trigger name="high_error_rate">
        <description>Error rate exceeds threshold</description>
        <threshold>5% error rate</threshold>
      </trigger>
      <trigger name="manual_trigger">
        <description>Manual rollback initiated</description>
      </trigger>
    </triggers>
    <strategy>
      <step>Identify affected services</step>
      <step>Restore previous revision</step>
      <step>Update traffic routing</step>
      <step>Verify rollback health</step>
      <step>Generate rollback report</step>
    </strategy>
  </rollback>
  <configuration>
    <environments>
      <environment name="development">
        <project_id>netra-dev</project_id>
        <region>us-central1</region>
        <min_instances>0</min_instances>
        <max_instances>5</max_instances>
      </environment>
      <environment name="staging">
        <project_id>neuralbridge-poc</project_id>
        <region>us-central1</region>
        <min_instances>1</min_instances>
        <max_instances>10</max_instances>
      </environment>
      <environment name="production">
        <project_id>netra-prod</project_id>
        <region>us-central1</region>
        <min_instances>3</min_instances>
        <max_instances>100</max_instances>
      </environment>
    </environments>
    <services>
      <service name="netra-backend-staging">
        <dockerfile>Dockerfile</dockerfile>
        <port>8000</port>
        <memory>1Gi</memory>
        <cpu>2</cpu>
        <health_endpoint>/health</health_endpoint>
        <environment_variables>
          <var name="ENVIRONMENT">staging</var>
          <var name="LOG_LEVEL">INFO</var>
        </environment_variables>
      </service>
      <service name="netra-auth-service">
        <dockerfile>Dockerfile.auth</dockerfile>
        <port>8001</port>
        <memory>512Mi</memory>
        <cpu>1</cpu>
        <health_endpoint>/health</health_endpoint>
      </service>
      <service name="netra-frontend-staging">
        <dockerfile>Dockerfile.frontend</dockerfile>
        <port>3000</port>
        <memory>512Mi</memory>
        <cpu>1</cpu>
        <health_endpoint>/</health_endpoint>
        <allow_unauthenticated>true</allow_unauthenticated>
      </service>
    </services>
  </configuration>
  <best_practices>
    <practice name="pre_deployment_validation">
      Always run critical path tests before deployment to prevent
      pushing broken code to production environments.
    </practice>
    <practice name="gradual_rollout">
      Use traffic splitting to gradually roll out changes and
      monitor for issues before full deployment.
    </practice>
    <practice name="comprehensive_monitoring">
      Monitor all aspects of deployment including build times,
      deployment duration, error rates, and performance metrics.
    </practice>
    <practice name="automated_rollback">
      Configure automatic rollback triggers based on health checks
      and error rates to minimize downtime.
    </practice>
    <practice name="credential_rotation">
      Regularly rotate service account keys and credentials to
      maintain security posture.
    </practice>
  </best_practices>
  <tools>
    <tool name="deployment_orchestrator">
      <script>organized_root/deployment_configs/core/deployment_orchestrator.py</script>
      <usage>
        from organized_root.deployment_configs.core import DeploymentOrchestrator
        orchestrator = DeploymentOrchestrator(config)
        result = await orchestrator.execute_deployment()
      </usage>
    </tool>
    <tool name="error_analyzer">
      <script>organized_root/deployment_configs/monitoring/error_analyzer.py</script>
      <usage>
        from organized_root.deployment_configs.monitoring import ErrorAnalyzer
        analyzer = ErrorAnalyzer()
        analysis = analyzer.analyze_error_batch(errors)
      </usage>
    </tool>
    <tool name="health_checker">
      <script>organized_root/deployment_configs/core/health_checker.py</script>
      <usage>
        async with HealthChecker() as checker:
            results = await checker.check_multiple_services(services)
      </usage>
    </tool>
  </tools>
</spec>