<?xml version="1.0" encoding="UTF-8"?>
<startup_optimization>
  <metadata>
    <title>Startup Optimization Specification</title>
    <version>1.0.0</version>
    <created>2025-01-19</created>
    <business_value>
      <description>Reduces developer idle time by 50-70% during startup</description>
      <impact>Increases productivity across all customer segments</impact>
      <value_capture>More features shipped = more value for customers</value_capture>
    </business_value>
  </metadata>

  <current_bottlenecks>
    <bottleneck priority="HIGH">
      <name>Sequential Service Startup</name>
      <description>Services start one after another (auth → backend → frontend)</description>
      <impact_seconds>15-20</impact_seconds>
    </bottleneck>
    
    <bottleneck priority="MEDIUM">
      <name>Redundant Environment Checks</name>
      <description>Full environment validation on every startup</description>
      <impact_seconds>3-5</impact_seconds>
    </bottleneck>
    
    <bottleneck priority="MEDIUM">
      <name>Secret Loading</name>
      <description>Loading secrets from Google Cloud on every startup</description>
      <impact_seconds>5-10</impact_seconds>
    </bottleneck>
    
    <bottleneck priority="LOW">
      <name>Configuration Parsing</name>
      <description>Parsing and validating all configs repeatedly</description>
      <impact_seconds>1-2</impact_seconds>
    </bottleneck>
  </current_bottlenecks>

  <optimizations>
    <optimization implemented="true">
      <name>Parallel Service Startup</name>
      <description>Start all services concurrently using ThreadPoolExecutor</description>
      <improvement>60-70% reduction in startup time</improvement>
      <implementation>dev_launcher/optimized_launcher.py</implementation>
    </optimization>
    
    <optimization implemented="true">
      <name>Startup State Caching</name>
      <description>Cache environment state and skip unchanged checks</description>
      <improvement>3-5 seconds saved on subsequent starts</improvement>
      <implementation>StartupCache class in optimized_launcher.py</implementation>
    </optimization>
    
    <optimization implemented="true">
      <name>Lazy Secret Loading</name>
      <description>Skip secret loading in dev mode unless explicitly needed</description>
      <improvement>5-10 seconds saved</improvement>
      <implementation>Disabled by default in fast_dev.py</implementation>
    </optimization>
    
    <optimization implemented="true">
      <name>Port Pre-allocation</name>
      <description>Allocate all ports upfront to avoid sequential allocation</description>
      <improvement>1-2 seconds saved</improvement>
      <implementation>_allocate_ports method</implementation>
    </optimization>
    
    <optimization implemented="false">
      <name>Service Health Prediction</name>
      <description>Predict service readiness based on historical data</description>
      <improvement>2-3 seconds potential improvement</improvement>
      <status>Future enhancement</status>
    </optimization>
  </optimizations>

  <usage>
    <quick_start>
      <command>python scripts/fast_dev.py</command>
      <description>Fastest startup with all optimizations</description>
      <typical_time>5-8 seconds</typical_time>
    </quick_start>
    
    <fresh_start>
      <command>python scripts/fast_dev.py --fresh</command>
      <description>Clear cache and start fresh (when config changes)</description>
      <typical_time>10-12 seconds</typical_time>
    </fresh_start>
    
    <minimal_start>
      <command>python scripts/fast_dev.py --minimal</command>
      <description>Start only backend and frontend (skip auth)</description>
      <typical_time>4-6 seconds</typical_time>
    </minimal_start>
    
    <profile_startup>
      <command>python scripts/fast_dev.py --profile</command>
      <description>Show detailed timing breakdown</description>
      <use_case>Debugging slow startups</use_case>
    </profile_startup>
  </usage>

  <architecture_notes>
    <note priority="HIGH">
      All new files follow 300-line limit and 8-line function requirements
    </note>
    <note priority="HIGH">
      Modular design allows easy extension and testing
    </note>
    <note priority="MEDIUM">
      Cache directory (.dev_cache) is gitignored
    </note>
    <note priority="MEDIUM">
      Backward compatible with existing dev_launcher
    </note>
  </architecture_notes>

  <future_improvements>
    <improvement>
      <name>Service Dependency Graph</name>
      <description>Start services based on dependency order</description>
      <benefit>Further parallelization opportunities</benefit>
    </improvement>
    
    <improvement>
      <name>Incremental Compilation</name>
      <description>Cache TypeScript/Python compilation results</description>
      <benefit>2-5 seconds additional savings</benefit>
    </improvement>
    
    <improvement>
      <name>Docker-based Services</name>
      <description>Pre-built containers for instant startup</description>
      <benefit>Near-instant service availability</benefit>
    </improvement>
  </future_improvements>

  <benchmarks>
    <benchmark>
      <scenario>Cold Start (no cache)</scenario>
      <old_time>25-35 seconds</old_time>
      <new_time>10-12 seconds</new_time>
      <improvement>65% faster</improvement>
    </benchmark>
    
    <benchmark>
      <scenario>Warm Start (with cache)</scenario>
      <old_time>20-25 seconds</old_time>
      <new_time>5-8 seconds</new_time>
      <improvement>72% faster</improvement>
    </benchmark>
    
    <benchmark>
      <scenario>Minimal Mode</scenario>
      <old_time>15-20 seconds</old_time>
      <new_time>4-6 seconds</new_time>
      <improvement>73% faster</improvement>
    </benchmark>
  </benchmarks>
</startup_optimization>