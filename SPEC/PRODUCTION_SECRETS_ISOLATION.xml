<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <name>Production Secrets Isolation Architecture</name>
    <version>2.0.0</version>
    <purpose>Zero-trust isolation of production secrets when running Claude with free permissions model</purpose>
    <created>2025-08-10</created>
    <updated>2025-08-10</updated>
    <classification>SECURITY-CRITICAL</classification>
    <compliance>SOC2 Type II, ISO 27001, GDPR Article 32, NIST 800-53</compliance>
  </metadata>

  <executive_summary>
    <overview>
      Defines a multi-layered security architecture to prevent unauthorized access to production secrets
      when development teams use Claude with --dangerously-skip-permissions flag. Ensures complete 
      isolation between development and production environments through IAM controls, network segregation,
      and cryptographic boundaries.
    </overview>
    <risk_level>HIGH</risk_level>
    <compliance_requirements>
      <requirement>SOC2 Type II</requirement>
      <requirement>ISO 27001</requirement>
      <requirement>GDPR Article 32</requirement>
    </compliance_requirements>
  </executive_summary>

  <architecture>
    <security_zones>
      <zone id="production">
        <name>Production Security Zone</name>
        <classification>RESTRICTED</classification>
        <access_model>ZERO_TRUST</access_model>
        <authentication>
          <method>Service Account with Workload Identity</method>
          <mfa_required>true</mfa_required>
          <session_duration>3600</session_duration>
        </authentication>
      </zone>
      
      <zone id="development">
        <name>Development Security Zone</name>
        <classification>INTERNAL</classification>
        <access_model>DEFAULT_DENY</access_model>
        <authentication>
          <method>Google Cloud Default Application Credentials</method>
          <mfa_required>false</mfa_required>
          <session_duration>28800</session_duration>
        </authentication>
      </zone>
      
      <zone id="staging">
        <name>Staging Security Zone</name>
        <classification>CONTROLLED</classification>
        <access_model>LEAST_PRIVILEGE</access_model>
        <authentication>
          <method>Service Account with Limited Scope</method>
          <mfa_required>true</mfa_required>
          <session_duration>7200</session_duration>
        </authentication>
      </zone>
    </security_zones>

    <isolation_boundaries>
      <boundary type="PROJECT">
        <name>GCP Project Isolation</name>
        <implementation>
          <production_project>netra-prod-{random-suffix}</production_project>
          <staging_project>netra-staging-{random-suffix}</staging_project>
          <development_project>netra-dev-{random-suffix}</development_project>
          <cross_project_access>EXPLICITLY_DENIED</cross_project_access>
        </implementation>
      </boundary>
      
      <boundary type="NETWORK">
        <name>VPC Network Segregation</name>
        <implementation>
          <production_vpc>
            <cidr>10.0.0.0/16</cidr>
            <private_google_access>true</private_google_access>
            <flow_logs>ENABLED</flow_logs>
          </production_vpc>
          <development_vpc>
            <cidr>192.168.0.0/16</cidr>
            <private_google_access>false</private_google_access>
            <flow_logs>OPTIONAL</flow_logs>
          </development_vpc>
          <vpc_peering>PROHIBITED</vpc_peering>
        </implementation>
      </boundary>
      
      <boundary type="CRYPTOGRAPHIC">
        <name>Encryption Key Isolation</name>
        <implementation>
          <kms_keyring>
            <production>projects/netra-prod/locations/global/keyRings/prod-secrets</production>
            <development>projects/netra-dev/locations/global/keyRings/dev-secrets</development>
          </kms_keyring>
          <key_rotation_period>90_DAYS</key_rotation_period>
          <key_algorithm>AES_256_GCM</key_algorithm>
        </implementation>
      </boundary>
    </isolation_boundaries>
  </architecture>

  <google_cloud_default_auth_restrictions>
    <principle>ZERO_TRUST_FOR_DEFAULT_AUTH</principle>
    <description>
      Development accounts using Google Cloud Application Default Credentials (ADC) 
      MUST be completely isolated from production secrets through multiple enforcement layers.
    </description>
    
    <default_auth_detection>
      <method>Credential Type Analysis</method>
      <indicators>
        <indicator>Credential source: gcloud auth application-default</indicator>
        <indicator>Token audience: https://www.googleapis.com/auth/cloud-platform</indicator>
        <indicator>Credential file: ~/.config/gcloud/application_default_credentials.json</indicator>
        <indicator>Environment: GOOGLE_APPLICATION_CREDENTIALS not set to service account</indicator>
      </indicators>
    </default_auth_detection>
    
    <enforcement_layers>
      <layer priority="1">
        <name>Organization Policy Enforcement</name>
        <policies>
          <policy>constraints/iam.allowedPolicyMemberDomains</policy>
          <policy>constraints/iam.disableServiceAccountKeyUpload</policy>
          <policy>constraints/iam.restrictCrossProjectServiceAccountLienRemoval</policy>
        </policies>
        <effect>PREVENT_CROSS_PROJECT_ACCESS</effect>
      </layer>
      
      <layer priority="2">
        <name>IAM Deny Policies</name>
        <deny_rules>
          <rule>
            <name>DenyDevDefaultAuthProdSecrets</name>
            <condition>
              resource.name.startsWith("projects/netra-prod/") AND
              (principal.email.endsWith("@netra.ai") OR 
               principal.subject.contains("application_default_credentials"))
            </condition>
            <denied_permissions>
              <permission>secretmanager.*</permission>
              <permission>cloudkms.*</permission>
            </denied_permissions>
          </rule>
        </deny_rules>
      </layer>
      
      <layer priority="3">
        <name>VPC Service Controls</name>
        <perimeter>
          <name>prod_secrets_perimeter</name>
          <resources>
            <resource>projects/netra-prod</resource>
          </resources>
          <restricted_services>
            <service>secretmanager.googleapis.com</service>
            <service>cloudkms.googleapis.com</service>
          </restricted_services>
          <access_levels>
            <level>
              <name>production_workload_only</name>
              <conditions>
                <condition>device.is_managed AND ip.in_range(10.0.0.0/16)</condition>
              </conditions>
            </level>
          </access_levels>
        </perimeter>
      </layer>
      
      <layer priority="4">
        <name>Conditional Access Policies</name>
        <policies>
          <policy>
            <name>RequireWorkloadIdentityForProdSecrets</name>
            <condition>
              resource.type == "secretmanager.secret" AND
              resource.project == "netra-prod"
            </condition>
            <requirements>
              <requirement>principal.type == "serviceAccount"</requirement>
              <requirement>principal.workloadIdentity.verified == true</requirement>
              <requirement>request.auth.claims.azp != null</requirement>
            </requirements>
          </policy>
        </policies>
      </layer>
    </enforcement_layers>
    
    <monitoring>
      <alert_on_violation>
        <name>DefaultAuthProdAccessAttempt</name>
        <condition>
          protoPayload.authenticationInfo.principalEmail.endsWith("@netra.ai") AND
          resource.labels.project_id == "netra-prod" AND
          protoPayload.authorizationInfo[0].granted == false
        </condition>
        <severity>CRITICAL</severity>
        <actions>
          <action>Send to security team</action>
          <action>Create incident ticket</action>
          <action>Block principal for 24 hours</action>
        </actions>
      </alert_on_violation>
    </monitoring>
  </google_cloud_default_auth_restrictions>

  <claude_permissions_model>
    <free_permissions_mode>
      <description>
        Claude operates in "free permissions" mode using --dangerously-skip-permissions flag,
        bypassing internal permission checks. This design choice enables rapid development
        but requires robust compensating controls at the infrastructure level.
      </description>
      <rationale>
        <point>Simplifies development workflow</point>
        <point>Reduces permission configuration complexity</point>
        <point>Enables faster iteration cycles</point>
        <point>Shifts security enforcement to infrastructure layer</point>
      </rationale>
    </free_permissions_mode>
    
    <compensating_controls>
        <control id="CC-001">
          <name>Infrastructure-Level Access Control</name>
          <implementation>
            Since Claude bypasses internal permissions, ALL access control is enforced at:
            - GCP IAM level (service account permissions)
            - Network level (VPC Service Controls)
            - Secret Manager level (resource-based policies)
            - Runtime level (Workload Identity verification)
          </implementation>
          <verification>
            <step>Service account has no keys downloadable</step>
            <step>Workload Identity binding verified</step>
            <step>VPC Service Controls active</step>
            <step>Audit logs show proper principal</step>
          </verification>
        </control>
        
        <control id="CC-002">
          <name>Zero-Knowledge Secret Injection</name>
          <implementation>
            Secrets injected via secure mechanisms that Claude cannot inspect:
            - Berglas sidecar containers for runtime injection
            - Google Secret Manager CSI driver for volume mounts
            - Init containers with ephemeral volumes
            - Environment variables from sealed secrets
          </implementation>
          <properties>
            <property>Secrets never in container image</property>
            <property>Secrets never in Git repository</property>
            <property>Secrets never in Claude's memory before needed</property>
            <property>Secrets auto-expire after use</property>
          </properties>
        </control>
        
        <control id="CC-003">
          <name>Enhanced Audit Trail</name>
          <implementation>
            Complete audit trail when --dangerously-skip-permissions detected:
            - Log Claude startup flags
            - Log environment classification (dev/prod)
            - Log all secret access attempts with stack traces
            - Log credential type used (default auth vs service account)
            - Create immutable audit records in separate project
          </implementation>
          <retention>
            <production>7_YEARS</production>
            <development>90_DAYS</development>
          </retention>
        </control>
        
        <control id="CC-004">
          <name>Runtime Security Policies</name>
          <implementation>
            Binary Authorization and admission controllers verify:
            - Container image signatures
            - Claude version and configuration
            - Presence of --dangerously-skip-permissions flag
            - Matching environment and secret patterns
          </implementation>
          <enforcement>BLOCK_ON_VIOLATION</enforcement>
        </control>
        
        <control id="CC-005">
          <name>Secret Pattern Enforcement</name>
          <implementation>
            Regex-based validation ensures secrets follow naming conventions:
            - Production: ^prod-[a-z]+-[a-z0-9]{8}$
            - Staging: ^staging-[a-z]+-[a-z0-9]{8}$
            - Development: ^dev-[a-z]+-[a-z0-9]{8}$
            Claude cannot access secrets outside its environment pattern.
          </implementation>
        </control>
      </compensating_controls>

    <execution_contexts>
      <context environment="DEVELOPMENT">
        <claude_flags>
          <flag>--dangerously-skip-permissions</flag>
          <flag>--environment=development</flag>
          <flag>--secret-source=local</flag>
        </claude_flags>
        <allowed_secrets>
          <secret_pattern>dev-*</secret_pattern>
          <secret_pattern>test-*</secret_pattern>
          <secret_pattern>local-*</secret_pattern>
        </allowed_secrets>
        <prohibited_secrets>
          <secret_pattern>prod-*</secret_pattern>
          <secret_pattern>production-*</secret_pattern>
          <secret_pattern>live-*</secret_pattern>
        </prohibited_secrets>
      </context>
      
      <context environment="PRODUCTION">
        <claude_flags>
          <flag>--dangerously-skip-permissions</flag>
          <flag>--environment=production</flag>
          <flag>--secret-source=secret-manager</flag>
          <flag>--audit-mode=enhanced</flag>
        </claude_flags>
        <allowed_secrets>
          <secret_pattern>prod-*</secret_pattern>
          <secret_pattern>production-*</secret_pattern>
        </allowed_secrets>
        <secret_access_validation>
          <require_workload_identity>true</require_workload_identity>
          <require_vpc_service_controls>true</require_vpc_service_controls>
        </secret_access_validation>
      </context>
    </execution_contexts>
  </claude_permissions_model>

  <developer_workflow_with_restrictions>
    <overview>
      Developers can work efficiently while maintaining zero access to production secrets.
      The workflow ensures productivity without compromising security.
    </overview>
    
    <local_development>
      <setup>
        <step>Developer runs: gcloud auth application-default login</step>
        <step>ADC credentials stored in ~/.config/gcloud/</step>
        <step>Claude runs with --dangerously-skip-permissions flag</step>
        <step>Access limited to dev project resources only</step>
      </setup>
      <available_resources>
        <resource>Development secrets (dev-* pattern)</resource>
        <resource>Development databases</resource>
        <resource>Development storage buckets</resource>
        <resource>Development pub/sub topics</resource>
      </available_resources>
      <blocked_resources>
        <resource>ALL production secrets</resource>
        <resource>Production databases</resource>
        <resource>Production KMS keys</resource>
        <resource>Cross-project resources</resource>
      </blocked_resources>
    </local_development>
    
    <testing_with_production_like_data>
      <approach>Synthetic Data Generation</approach>
      <implementation>
        <step>Production data structure replicated in dev</step>
        <step>Synthetic secrets with same format</step>
        <step>Mock external service endpoints</step>
        <step>Identical configuration structure</step>
      </implementation>
      <benefits>
        <benefit>No production data exposure</benefit>
        <benefit>Realistic testing scenarios</benefit>
        <benefit>Same code paths as production</benefit>
      </benefits>
    </testing_with_production_like_data>
    
    <staging_deployment>
      <access_model>LIMITED_ELEVATION</access_model>
      <process>
        <step>Code review and approval required</step>
        <step>CI/CD pipeline with dedicated service account</step>
        <step>Staging secrets accessible via pipeline only</step>
        <step>No direct developer access to staging secrets</step>
      </process>
    </staging_deployment>
    
    <production_deployment>
      <access_model>ZERO_DEVELOPER_ACCESS</access_model>
      <process>
        <step>GitOps-based deployment only</step>
        <step>Production service account with Workload Identity</step>
        <step>Secrets injected at runtime</step>
        <step>No developer can access production environment</step>
      </process>
      <break_glass_procedure>
        <requirement>Security team approval</requirement>
        <requirement>Time-limited access (max 4 hours)</requirement>
        <requirement>Full audit trail</requirement>
        <requirement>Automatic revocation</requirement>
        <requirement>Post-incident review mandatory</requirement>
      </break_glass_procedure>
    </production_deployment>
    
    <tooling_support>
      <tool>
        <name>Secret Mock Generator</name>
        <purpose>Generate development secrets matching production format</purpose>
        <command>netra-dev-secrets generate --format=production</command>
      </tool>
      <tool>
        <name>Environment Validator</name>
        <purpose>Verify correct environment configuration</purpose>
        <command>netra-validate-env --check-isolation</command>
      </tool>
      <tool>
        <name>Access Analyzer</name>
        <purpose>Show what resources are accessible</purpose>
        <command>gcloud projects get-iam-policy --format=json | netra-access-check</command>
      </tool>
    </tooling_support>
  </developer_workflow_with_restrictions>

  <iam_policies>
    <policy id="DEV-001">
      <name>Developer Default Auth Total Restriction</name>
      <description>
        Complete blocking of production resources for any developer using Google Cloud 
        Application Default Credentials. This is the PRIMARY enforcement mechanism.
      </description>
      <implementation>
        <gcp_deny_policy>
          <name>deny-dev-default-auth-prod-access</name>
          <attachment_point>organizations/netra-org-id</attachment_point>
          <rules>
            <rule>
              <deny_rule_id>block_default_auth_prod_secrets</deny_rule_id>
              <denied_principals>
                <principal>principalSet://goog/group/developers@netra.ai</principal>
                <principal>principalSet://goog/domain/netra.ai</principal>
                <principal>principal://goog/subject/*@netra.ai</principal>
              </denied_principals>
              <denied_permissions>
                <permission>secretmanager.secrets.get</permission>
                <permission>secretmanager.secrets.list</permission>
                <permission>secretmanager.secrets.access</permission>
                <permission>secretmanager.versions.get</permission>
                <permission>secretmanager.versions.list</permission>
                <permission>secretmanager.versions.access</permission>
                <permission>cloudkms.cryptoKeys.get</permission>
                <permission>cloudkms.cryptoKeys.list</permission>
                <permission>cloudkms.cryptoKeyVersions.useToDecrypt</permission>
              </denied_permissions>
              <denial_condition>
                <title>Production Resources Only</title>
                <expression>
                  resource.name.startsWith("projects/netra-prod/") ||
                  resource.name.contains("/prod-") ||
                  resource.labels.environment == "production"
                </expression>
              </denial_condition>
              <exception_principals>
                <principal>serviceAccount:netra-prod-claude@netra-prod.iam.gserviceaccount.com</principal>
                <principal>serviceAccount:netra-ci-cd@netra-automation.iam.gserviceaccount.com</principal>
              </exception_principals>
            </rule>
          </rules>
        </gcp_deny_policy>
        
        <organization_constraints>
          <constraint>
            <name>constraints/iam.allowedPolicyMemberDomains</name>
            <list_policy>
              <allowed_values>
                <value>netra-dev.iam.gserviceaccount.com</value>
                <value>netra-staging.iam.gserviceaccount.com</value>
                <value>netra-prod.iam.gserviceaccount.com</value>
              </allowed_values>
              <denied_values>
                <value>gmail.com</value>
                <value>googlemail.com</value>
              </denied_values>
            </list_policy>
          </constraint>
          <constraint>
            <name>constraints/iam.disableServiceAccountKeyCreation</name>
            <boolean_policy enforced="true"/>
          </constraint>
          <constraint>
            <name>constraints/iam.disableServiceAccountKeyUpload</name>
            <boolean_policy enforced="true"/>
          </constraint>
        </organization_constraints>
        
        <conditional_iam_bindings>
          <binding>
            <role>roles/secretmanager.viewer</role>
            <members>
              <member>group:developers@netra.ai</member>
            </members>
            <condition>
              <title>Dev Secrets Only</title>
              <expression>
                resource.name.startsWith("projects/netra-dev/") &amp;&amp;
                (resource.name.contains("/dev-") || 
                 resource.name.contains("/test-") ||
                 resource.name.contains("/local-"))
              </expression>
            </condition>
          </binding>
        </conditional_iam_bindings>
      </implementation>
      <verification_commands>
        <command>
          <description>Test that developer cannot access production secret</description>
          <cli>gcloud secrets versions access latest --secret="prod-api-key" --project="netra-prod"</cli>
          <expected_result>ERROR: Permission denied</expected_result>
        </command>
        <command>
          <description>Verify deny policy is active</description>
          <cli>gcloud iam policies list --attachment-point="organizations/netra-org-id" --kind=denypolicies</cli>
          <expected_result>Shows deny-dev-default-auth-prod-access policy</expected_result>
        </command>
      </verification_commands>
    </policy>

    <policy id="PROD-001">
      <name>Production Secret Access Policy</name>
      <description>
        Production secrets accessible only through dedicated service accounts with workload identity
      </description>
      <implementation>
        <service_account>netra-prod-claude@netra-prod.iam.gserviceaccount.com</service_account>
        <workload_identity_binding>
          serviceAccount:netra-prod.svc.id.goog[claude/claude-sa]
        </workload_identity_binding>
        <required_attributes>
          <attribute>environment=production</attribute>
          <attribute>approved=true</attribute>
          <attribute>audit_enabled=true</attribute>
        </required_attributes>
      </implementation>
    </policy>

    <policy id="AUDIT-001">
      <name>Secret Access Audit Policy</name>
      <description>
        All secret access attempts must be logged and monitored
      </description>
      <implementation>
        <audit_logs>
          <log_sink>
            <name>secret-access-sink</name>
            <destination>pubsub.googleapis.com/projects/netra-security/topics/secret-access</destination>
            <filter>
              resource.type="secretmanager.googleapis.com/Secret"
              AND (protoPayload.methodName="google.cloud.secretmanager.v1.SecretManagerService.AccessSecretVersion"
                   OR protoPayload.methodName="google.cloud.secretmanager.v1.SecretManagerService.GetSecret")
            </filter>
          </log_sink>
          <alerting>
            <alert_on_dev_prod_crossover>true</alert_on_dev_prod_crossover>
            <alert_on_excessive_access>true</alert_on_excessive_access>
            <alert_on_unauthorized_attempt>true</alert_on_unauthorized_attempt>
          </alerting>
        </audit_logs>
      </implementation>
    </policy>
  </iam_policies>

  <secret_management>
    <secret_manager_configuration>
      <production_secrets>
        <project>netra-prod</project>
        <location>global</location>
        <replication_policy>AUTOMATIC</replication_policy>
        <encryption>
          <cmek>projects/netra-prod/locations/global/keyRings/prod-secrets/cryptoKeys/primary</cmek>
        </encryption>
        <access_control>
          <vpc_service_controls>
            <perimeter>accessPolicies/12345/servicePerimeters/prod_perimeter</perimeter>
            <ingress_rules>
              <rule>
                <source>
                  <access_level>accessPolicies/12345/accessLevels/prod_workload_identity</access_level>
                </source>
                <operations>
                  <service>secretmanager.googleapis.com</service>
                  <method>*</method>
                </operations>
              </rule>
            </ingress_rules>
          </vpc_service_controls>
        </access_control>
      </production_secrets>

      <development_secrets>
        <project>netra-dev</project>
        <location>global</location>
        <replication_policy>USER_MANAGED</replication_policy>
        <locations>
          <location>us-central1</location>
        </locations>
        <encryption>DEFAULT</encryption>
      </development_secrets>
    </secret_manager_configuration>

    <secret_rotation>
      <production_rotation_policy>
        <frequency>30_DAYS</frequency>
        <automatic>true</automatic>
        <notification_channels>
          <channel>security-team@netra.ai</channel>
        </notification_channels>
      </production_rotation_policy>
      <development_rotation_policy>
        <frequency>90_DAYS</frequency>
        <automatic>false</automatic>
      </development_rotation_policy>
    </secret_rotation>
  </secret_management>

  <runtime_enforcement>
    <admission_controllers>
      <controller id="SECRET-VALIDATOR">
        <name>Secret Access Validator</name>
        <implementation>
          <webhook>https://admission.netra-prod.internal/validate-secret-access</webhook>
          <validation_rules>
            <rule>
              <name>Validate Service Account</name>
              <condition>request.auth.claims.service_account</condition>
              <action>ALLOW_IF_PRODUCTION_SA</action>
            </rule>
            <rule>
              <name>Block Dev Credentials</name>
              <condition>request.auth.claims.email.endsWith('@netra.ai')</condition>
              <action>DENY</action>
            </rule>
          </validation_rules>
        </implementation>
      </controller>
    </admission_controllers>

    <policy_enforcement_points>
      <pep id="CLAUDE-RUNTIME">
        <name>Claude Runtime PEP</name>
        <location>Container Init</location>
        <checks>
          <check>Verify environment classification</check>
          <check>Validate service account binding</check>
          <check>Confirm VPC Service Controls</check>
          <check>Verify audit logging enabled</check>
        </checks>
        <failure_action>TERMINATE_WITH_ALERT</failure_action>
      </pep>
    </policy_enforcement_points>
  </runtime_enforcement>

  <monitoring_and_alerting>
    <metrics>
      <metric>
        <name>secret_access_attempts</name>
        <labels>
          <label>environment</label>
          <label>service_account</label>
          <label>secret_pattern</label>
          <label>success</label>
        </labels>
      </metric>
      <metric>
        <name>cross_environment_access_attempts</name>
        <labels>
          <label>source_environment</label>
          <label>target_environment</label>
          <label>principal</label>
        </labels>
      </metric>
    </metrics>

    <alerts>
      <alert>
        <name>Production Secret Access from Dev</name>
        <condition>
          metric.type="custom.googleapis.com/security/cross_environment_access"
          AND resource.labels.source_environment="development"
          AND resource.labels.target_environment="production"
        </condition>
        <notification_channels>
          <channel>security-incidents@netra.ai</channel>
          <channel>pagerduty-security</channel>
        </notification_channels>
        <severity>CRITICAL</severity>
      </alert>
    </alerts>
  </monitoring_and_alerting>

  <implementation_checklist>
    <phase name="PREPARATION">
      <task priority="1">Create separate GCP projects for prod/staging/dev</task>
      <task priority="1">Configure VPC Service Controls perimeter for production</task>
      <task priority="2">Set up Cloud KMS keyrings and keys</task>
      <task priority="2">Configure Secret Manager in each project</task>
    </phase>

    <phase name="IAM_CONFIGURATION">
      <task priority="1">Remove all developer IAM bindings from production project</task>
      <task priority="1">Create deny policies for developer groups</task>
      <task priority="2">Set up Workload Identity for production service accounts</task>
      <task priority="3">Configure organization policies</task>
    </phase>

    <phase name="RUNTIME_SETUP">
      <task priority="1">Deploy admission controllers</task>
      <task priority="2">Configure Claude with environment-specific flags</task>
      <task priority="2">Set up secret injection mechanisms</task>
      <task priority="3">Enable enhanced audit logging</task>
    </phase>

    <phase name="MONITORING">
      <task priority="1">Deploy log sinks and aggregation</task>
      <task priority="2">Configure alerting policies</task>
      <task priority="3">Set up security dashboards</task>
      <task priority="3">Schedule regular access reviews</task>
    </phase>
  </implementation_checklist>

  <testing_and_validation>
    <test_scenarios>
      <scenario id="TEST-001">
        <name>Developer Default Auth Denial Test</name>
        <steps>
          <step>Developer authenticates with gcloud auth application-default login</step>
          <step>Attempt to access production secret using Claude --dangerously-skip-permissions</step>
          <step>Verify access is denied at IAM level</step>
          <step>Verify audit log entry is created</step>
          <step>Verify security alert is triggered</step>
        </steps>
        <expected_result>ACCESS_DENIED</expected_result>
      </scenario>

      <scenario id="TEST-002">
        <name>Production Service Account Success Test</name>
        <steps>
          <step>Production Claude pod starts with Workload Identity</step>
          <step>Claude runs with --dangerously-skip-permissions flag</step>
          <step>Attempt to access production secret</step>
          <step>Verify access is granted</step>
          <step>Verify audit log shows successful access</step>
        </steps>
        <expected_result>ACCESS_GRANTED</expected_result>
      </scenario>

      <scenario id="TEST-003">
        <name>Cross-Environment Access Prevention</name>
        <steps>
          <step>Staging service account attempts production secret access</step>
          <step>Verify VPC Service Controls block the request</step>
          <step>Verify deny policy prevents access</step>
          <step>Verify critical alert is triggered</step>
        </steps>
        <expected_result>ACCESS_DENIED_WITH_ALERT</expected_result>
      </scenario>
    </test_scenarios>
  </testing_and_validation>

  <compliance_mappings>
    <mapping framework="SOC2">
      <control>CC6.1 - Logical Access Controls</control>
      <implementation>IAM policies and deny rules</implementation>
    </mapping>
    <mapping framework="ISO27001">
      <control>A.9.1.2 - Access to networks and network services</control>
      <implementation>VPC Service Controls and network isolation</implementation>
    </mapping>
    <mapping framework="NIST">
      <control>AC-3 - Access Enforcement</control>
      <implementation>Multi-layer access controls with explicit denials</implementation>
    </mapping>
  </compliance_mappings>

  <incident_response>
    <playbook id="IR-001">
      <name>Unauthorized Production Secret Access Attempt</name>
      <trigger>Alert on cross-environment access attempt</trigger>
      <steps>
        <step>Immediate notification to security team</step>
        <step>Identify principal and source of attempt</step>
        <step>Review audit logs for pattern analysis</step>
        <step>Rotate affected secrets if compromise suspected</step>
        <step>Update deny policies if needed</step>
        <step>Document incident and lessons learned</step>
      </steps>
      <escalation_time>5_MINUTES</escalation_time>
    </playbook>
  </incident_response>

  <comprehensive_verification>
    <automated_testing>
      <test_suite>
        <name>Production Secrets Isolation Validation</name>
        <frequency>HOURLY</frequency>
        <tests>
          <test id="VERIFY-001">
            <name>Default Auth Production Block</name>
            <description>Verify developers with default auth cannot access production</description>
            <script>
              #!/bin/bash
              # Run as developer with default auth
              gcloud auth application-default login --no-launch-browser
              
              # Attempt production secret access (should fail)
              if gcloud secrets versions access latest \
                --secret="prod-database-password" \
                --project="netra-prod" 2>/dev/null; then
                echo "CRITICAL: Default auth accessed production secret!"
                exit 1
              fi
              
              echo "PASS: Default auth properly blocked"
            </script>
          </test>
          
          <test id="VERIFY-002">
            <name>Service Account Isolation</name>
            <description>Verify dev service accounts cannot access production</description>
            <script>
              # Activate dev service account
              gcloud auth activate-service-account \
                --key-file=/tmp/dev-sa-key.json
              
              # Test cross-project access (should fail)
              if gcloud secrets list --project="netra-prod" 2>/dev/null; then
                echo "CRITICAL: Dev SA accessed production project!"
                exit 1
              fi
            </script>
          </test>
          
          <test id="VERIFY-003">
            <name>VPC Service Controls Active</name>
            <description>Verify perimeter enforcement</description>
            <script>
              # Check perimeter status
              gcloud access-context-manager perimeters describe \
                prod_secrets_perimeter \
                --policy=12345 \
                --format="value(status.resources)"
            </script>
          </test>
        </tests>
      </test_suite>
    </automated_testing>
    
    <continuous_compliance_monitoring>
      <scanner>
        <name>Cloud Security Command Center</name>
        <checks>
          <check>Verify no overly permissive IAM bindings</check>
          <check>Ensure deny policies are active</check>
          <check>Validate organization constraints</check>
          <check>Check for service account key creation</check>
        </checks>
        <alert_threshold>HIGH</alert_threshold>
      </scanner>
      
      <policy_validator>
        <name>Forseti Security</name>
        <rules>
          <rule>No user principals in production project</rule>
          <rule>All service accounts use Workload Identity</rule>
          <rule>VPC Service Controls properly configured</rule>
          <rule>Audit logs enabled for all secret access</rule>
        </rules>
      </policy_validator>
    </continuous_compliance_monitoring>
    
    <manual_verification_checklist>
      <monthly_review>
        <task>Review all production IAM bindings</task>
        <task>Audit service account usage patterns</task>
        <task>Verify deny policies are enforced</task>
        <task>Check for any break-glass access usage</task>
        <task>Review secret access patterns</task>
        <task>Validate VPC Service Control perimeter</task>
      </monthly_review>
      
      <quarterly_review>
        <task>Full security assessment of isolation architecture</task>
        <task>Penetration testing of access controls</task>
        <task>Review and update deny policy rules</task>
        <task>Validate compliance with frameworks</task>
      </quarterly_review>
    </manual_verification_checklist>
  </comprehensive_verification>

  <implementation_commands>
    <comment>Terraform and gcloud commands to implement this architecture</comment>
    
    <create_deny_policy>
      <description>Create the primary deny policy for developer access</description>
      <command>
        gcloud iam policies create deny-dev-default-auth-prod-access \
          --attachment-point="organizations/${ORG_ID}" \
          --kind=denypolicies \
          --policy-file=deny-policy.yaml
      </command>
      <yaml_content>
        displayName: "Block Developer Default Auth Production Access"
        rules:
        - denyRule:
            deniedPrincipals:
            - principalSet://goog/group/developers@netra.ai
            deniedPermissions:
            - secretmanager.secrets.get
            - secretmanager.secrets.access
            - secretmanager.versions.get
            - secretmanager.versions.access
            denialCondition:
              title: "Production Resources"
              expression: |
                resource.name.startsWith("projects/netra-prod/")
      </yaml_content>
    </create_deny_policy>
    
    <create_vpc_service_controls>
      <description>Set up VPC Service Controls perimeter</description>
      <command>
        gcloud access-context-manager perimeters create prod_secrets_perimeter \
          --policy=${POLICY_ID} \
          --title="Production Secrets Perimeter" \
          --resources="projects/${PROD_PROJECT_NUMBER}" \
          --restricted-services="secretmanager.googleapis.com,cloudkms.googleapis.com" \
          --access-levels="production_workload_only"
      </command>
    </create_vpc_service_controls>
    
    <configure_workload_identity>
      <description>Set up Workload Identity for production Claude</description>
      <commands>
        <command>
          kubectl create serviceaccount claude-sa -n claude
        </command>
        <command>
          gcloud iam service-accounts add-iam-policy-binding \
            netra-prod-claude@netra-prod.iam.gserviceaccount.com \
            --role=roles/iam.workloadIdentityUser \
            --member="serviceAccount:netra-prod.svc.id.goog[claude/claude-sa]"
        </command>
        <command>
          kubectl annotate serviceaccount claude-sa \
            iam.gke.io/gcp-service-account=netra-prod-claude@netra-prod.iam.gserviceaccount.com \
            -n claude
        </command>
      </commands>
    </configure_workload_identity>
  </implementation_commands>

  <summary>
    <key_points>
      <point>Claude runs with --dangerously-skip-permissions (free permissions mode)</point>
      <point>ALL security enforcement moved to infrastructure layer</point>
      <point>Developers with Google Cloud default auth have ZERO access to production</point>
      <point>Multiple layers of defense: IAM deny policies, VPC SC, Workload Identity</point>
      <point>Complete audit trail and monitoring of all access attempts</point>
      <point>Production secrets only accessible via approved service accounts</point>
      <point>Break-glass procedures require security team approval</point>
    </key_points>
    
    <risk_mitigation>
      <risk>Developer attempts to access production with default auth</risk>
      <mitigation>Blocked by deny policy, VPC SC, and conditional IAM</mitigation>
      
      <risk>Claude's free permissions mode allows unrestricted access</risk>
      <mitigation>Infrastructure controls prevent access regardless of Claude permissions</mitigation>
      
      <risk>Service account key compromise</risk>
      <mitigation>Key creation disabled, Workload Identity required</mitigation>
      
      <risk>Insider threat with elevated privileges</risk>
      <mitigation>Time-bound access, audit logs, automatic revocation</mitigation>
    </risk_mitigation>
  </summary>
</specification>