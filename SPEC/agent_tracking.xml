<?xml version='1.0' encoding='utf-8'?>
<specification>
  <metadata>
    <last_edited>2025-08-21T08:47:28.346450</last_edited>
  </metadata>
  <title>Agent Code Modification Tracking Specification</title>
  <version>1.0.0</version>
  <purpose>
    Define standards for tracking and documenting all code modifications made by AI coding agents
    to ensure traceability, accountability, and reversibility of automated changes.
  </purpose>
  <metadata_header>
    <description>
      All files modified by AI agents must include a metadata header at the top of the file
      containing tracking information. This header provides a safety net for understanding
      the history and context of automated changes.
    </description>
    <format>
      <language name="Python">
        <template>
# Agent Modification Tracking
# ===========================
# Last Modified: {timestamp}
# Agent: {agent_name} ({model_version})
# Task ID: {task_id}
# Git Branch: {git_branch}
# Git Commit: {git_commit_hash}
# Prompt Summary: {prompt_summary}
# Changes: {change_description}
# ===========================
</template>
      </language>
      <language name="JavaScript/TypeScript">
        <template>
/**
 * Agent Modification Tracking
 * ===========================
 * Last Modified: {timestamp}
 * Agent: {agent_name} ({model_version})
 * Task ID: {task_id}
 * Git Branch: {git_branch}
 * Git Commit: {git_commit_hash}
 * Prompt Summary: {prompt_summary}
 * Changes: {change_description}
 * ===========================
 */
</template>
      </language>
      <language name="HTML/JSX/TSX">
        <template>
{/* 
  Agent Modification Tracking
  ===========================
  Last Modified: {timestamp}
  Agent: {agent_name} ({model_version})
  Task ID: {task_id}
  Git Branch: {git_branch}
  Git Commit: {git_commit_hash}
  Prompt Summary: {prompt_summary}
  Changes: {change_description}
  ===========================
*/}
</template>
      </language>
    </format>
  </metadata_header>
  <required_fields>
    <field name="timestamp">
      <description>ISO 8601 formatted timestamp with timezone</description>
      <format>YYYY-MM-DDTHH:MM:SSÂ±HH:MM</format>
      <example>2025-01-10T15:30:45-08:00</example>
    </field>
    <field name="agent_name">
      <description>Identifier of the AI agent making the modification</description>
      <examples>
        <example>Claude Code</example>
        <example>GitHub Copilot</example>
        <example>Cursor AI</example>
      </examples>
    </field>
    <field name="model_version">
      <description>Specific model version used by the agent</description>
      <examples>
        <example>claude-opus-4-1-20250805</example>
        <example>gpt-4-turbo-2024-04-09</example>
      </examples>
    </field>
    <field name="task_id">
      <description>Unique identifier for the task or conversation</description>
      <format>UUID or conversation ID</format>
    </field>
    <field name="git_branch">
      <description>Current git branch name</description>
    </field>
    <field name="git_commit_hash">
      <description>Latest commit hash before modification</description>
      <format>7-character short hash or full hash</format>
    </field>
    <field name="prompt_summary">
      <description>Brief summary of the user's request or task</description>
      <max_length>200 characters</max_length>
    </field>
    <field name="change_description">
      <description>Brief description of changes made</description>
      <max_length>200 characters</max_length>
    </field>
  </required_fields>
  <optional_fields>
    <field name="conversation_context">
      <description>Link to full conversation or task context</description>
    </field>
    <field name="parent_task">
      <description>Reference to parent task if part of larger workflow</description>
    </field>
    <field name="review_status">
      <description>Human review status of the changes</description>
      <values>
        <value>pending</value>
        <value>approved</value>
        <value>rejected</value>
        <value>modified</value>
      </values>
    </field>
    <field name="test_status">
      <description>Automated test results after modification</description>
      <values>
        <value>passed</value>
        <value>failed</value>
        <value>not_run</value>
      </values>
    </field>
  </optional_fields>
  <history_tracking>
    <description>
      For files with multiple agent modifications, maintain a history section
      that preserves previous modification records.
    </description>
    <format>
# Agent Modification History
# ===========================
# Entry 1: {timestamp} - {agent_name} - {change_summary}
# Entry 2: {timestamp} - {agent_name} - {change_summary}
# ... (keep last 5 entries)
# ===========================
</format>
    <rules>
      <rule>Keep maximum of 5 historical entries</rule>
      <rule>Oldest entries removed when limit exceeded</rule>
      <rule>Each entry includes timestamp, agent, and brief change summary</rule>
    </rules>
  </history_tracking>
  <implementation_guidelines>
    <guideline>
      <title>Automatic Header Injection</title>
      <description>
        AI agents should automatically inject or update headers when modifying files.
        If header exists, update it; if not, add it at the top of the file.
      </description>
    </guideline>
    <guideline>
      <title>Preserve Existing Headers</title>
      <description>
        Do not remove existing copyright notices, license headers, or documentation.
        Place agent tracking header after existing file headers.
      </description>
    </guideline>
    <guideline>
      <title>Git Integration</title>
      <description>
        Automatically fetch git information using git commands before modification.
        Use 'git rev-parse --abbrev-ref HEAD' for branch and 'git rev-parse HEAD' for commit.
      </description>
    </guideline>
    <guideline>
      <title>Minimal Disruption</title>
      <description>
        Headers should be unobtrusive and not interfere with file functionality.
        Use appropriate comment syntax for each language.
      </description>
    </guideline>
  </implementation_guidelines>
  <exclusions>
    <description>Files that should NOT have agent tracking headers</description>
    <exclude>Configuration files (package.json, requirements.txt, etc.)</exclude>
    <exclude>Generated files</exclude>
    <exclude>Binary files</exclude>
    <exclude>Data files (JSON, CSV, etc.)</exclude>
    <exclude>Markdown documentation files (unless specifically editing code blocks)</exclude>
    <exclude>Lock files (package-lock.json, poetry.lock, etc.)</exclude>
    <exclude>Git-ignored files</exclude>
  </exclusions>
  <audit_trail>
    <description>
      Complementary logging mechanism for comprehensive tracking
    </description>
    <log_file>
      <location>.agent_modifications.log</location>
      <format>JSONL (JSON Lines)</format>
      <schema>
{
  "timestamp": "ISO 8601",
  "agent": "string",
  "model": "string",
  "task_id": "string",
  "file_path": "string",
  "git_branch": "string",
  "git_commit": "string",
  "prompt_hash": "string",
  "changes": {
    "lines_added": "number",
    "lines_removed": "number",
    "functions_modified": ["string"]
  }
}
</schema>
    </log_file>
    <retention>
      <duration>30 days</duration>
      <rotation>Daily</rotation>
    </retention>
  </audit_trail>
  <rollback_support>
    <description>
      Enable easy rollback of agent-made changes
    </description>
    <mechanism>
      <step>Create git stash or temporary branch before modifications</step>
      <step>Tag commits made by agents with standardized message format</step>
      <step>Maintain rollback script in project tools directory</step>
    </mechanism>
    <commit_message_format>
      <template>[AGENT: {agent_name}] {change_description} | Task: {task_id}</template>
    </commit_message_format>
  </rollback_support>
  <compliance>
    <requirement>
      All AI coding assistants must implement this tracking specification
      when modifying source code files in the repository.
    </requirement>
    <verification>
      <check>Pre-commit hooks validate presence of headers in modified files</check>
      <check>CI/CD pipeline checks for proper header format</check>
      <check>Weekly audit reports on agent modification patterns</check>
    </verification>
  </compliance>
  <examples>
    <example language="Python">
      <description>Python file with agent tracking header</description>
      <code>
# Agent Modification Tracking
# ===========================
# Last Modified: 2025-01-10T15:30:45-08:00
# Agent: Claude Code (claude-opus-4-1-20250805)
# Task ID: conv_abc123def456
# Git Branch: feature/optimize-performance
# Git Commit: a1b2c3d
# Prompt Summary: Optimize database query performance in user service
# Changes: Added query caching and index hints to improve response time
# ===========================

# Agent Modification History
# ===========================
# Entry 1: 2025-01-09T10:15:00-08:00 - Claude Code - Added error handling
# Entry 2: 2025-01-08T14:22:30-08:00 - GitHub Copilot - Refactored function signatures
# ===========================

import asyncio
from typing import List, Optional

class UserService:
    # ... rest of the code
</code>
    </example>
    <example language="TypeScript">
      <description>TypeScript React component with agent tracking</description>
      <code>
/**
 * Agent Modification Tracking
 * ===========================
 * Last Modified: 2025-01-10T15:30:45-08:00
 * Agent: Claude Code (claude-opus-4-1-20250805)
 * Task ID: conv_xyz789ghi012
 * Git Branch: main
 * Git Commit: e4f5g6h
 * Prompt Summary: Add loading state to user dashboard component
 * Changes: Implemented skeleton loader and error boundary
 * ===========================
 */

import React, { useState, useEffect } from 'react';
import { UserData } from '@/types';

export const UserDashboard: React.FC = () =&gt; {
  // Component implementation
};
</code>
    </example>
  </examples>
</specification>