<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>GitHub Actions Master Orchestrator Learnings</name>
        <type>learnings</type>
        <version>1.0</version>
        <last_updated>2025-08-16</last_updated>
        <description>Learnings from implementing the master orchestrator GitHub Actions architecture</description>
    </metadata>
    
    <implementation-summary>
        <date>2025-08-16</date>
        <title>Master Orchestrator GitHub Actions Architecture Implementation</title>
        <problem>Complex CI/CD pipeline with 20+ separate workflow files causing maintenance issues and duplicated logic</problem>
        <solution>Implemented master orchestrator pattern with reusable workflows and atomic jobs as specified in MASTER_GITHUB_WORKFLOW.xml</solution>
    </implementation-summary>
    
    <key-learnings>
        <learning id="act-compatibility">
            <title>ACT Local Testing Compatibility Issues</title>
            <discovery>The ${{ job.status }} expression is not available in reusable workflow contexts when running with ACT</discovery>
            <impact>Original master-orchestrator.yml failed during ACT testing</impact>
            <solution>Created ACT-compatible version (master-orchestrator-act.yml) with explicit status logic</solution>
            <best-practice>Always test GitHub Actions with ACT before deployment to catch compatibility issues early</best-practice>
        </learning>
        
        <learning id="static-env-vars">
            <title>Environment Variable Self-Referencing</title>
            <discovery>ACT does not support self-referencing environment variables like env: FOO: ${{ env.FOO || 'default' }}</discovery>
            <impact>Workflows fail in local testing environment</impact>
            <solution>Use static defaults without self-referencing: env: FOO: 'default'</solution>
            <best-practice>Define all environment variables with static values for ACT compatibility</best-practice>
        </learning>
        
        <learning id="runner-fallback">
            <title>Custom Runner Fallback Strategy</title>
            <discovery>warp-custom-default runner is not available in ACT or forked repositories</discovery>
            <impact>Workflows fail when run locally or in forks</impact>
            <solution>ACT automatically maps custom runners to ubuntu-latest</solution>
            <best-practice>Design workflows to gracefully handle runner fallback scenarios</best-practice>
        </learning>
        
        <learning id="pr-comment-dedup">
            <title>PR Comment Deduplication Pattern</title>
            <discovery>Multiple workflow runs create duplicate PR comments without proper tracking</discovery>
            <impact>PR threads become cluttered with redundant status updates</impact>
            <solution>Use HTML comment identifiers (<!-- netra-deployment -->) to find and update existing comments</solution>
            <implementation>
                <code language="javascript">
const identifier = '<!-- netra-staging-deployment -->';
const botComment = comments.find(c => 
    c.user.type === 'Bot' && c.body.includes(identifier)
);
if (botComment) {
    // Update existing comment
} else {
    // Create new comment
}
                </code>
            </implementation>
        </learning>
        
        <learning id="config-driven">
            <title>Configuration-Driven Architecture Benefits</title>
            <discovery>JSON configuration files enable workflow customization without code changes</discovery>
            <impact>Non-developers can modify CI/CD behavior through configuration</impact>
            <solution>Implemented centralized config in .github/workflows/config/ with features.json, settings.json</solution>
            <best-practice>Separate configuration from code to improve maintainability and flexibility</best-practice>
        </learning>
        
        <learning id="skip-conditions">
            <title>Intelligent Skip Conditions</title>
            <discovery>Many CI runs waste resources on unnecessary tests for docs-only or frontend-only changes</discovery>
            <impact>Reduced CI time and resource consumption</impact>
            <solution>Implemented determine-strategy.sh to analyze changes and set skip conditions</solution>
            <patterns>
                <pattern>Docs-only: Skip all tests for *.md, docs/**, SPEC/** changes</pattern>
                <pattern>[skip ci]: Honor commit message skip markers</pattern>
                <pattern>Frontend-only: Skip backend tests for frontend/** changes</pattern>
                <pattern>Backend-only: Skip frontend tests for app/** changes</pattern>
            </patterns>
        </learning>
        
        <learning id="reusable-workflows">
            <title>Reusable Workflow Design Patterns</title>
            <discovery>workflow_call trigger enables modular workflow composition</discovery>
            <impact>Eliminated code duplication across 20+ workflow files</impact>
            <solution>Created library of 8 reusable workflows with clear interfaces</solution>
            <best-practice>Define explicit inputs/outputs for reusable workflows to ensure clear contracts</best-practice>
        </learning>
        
        <learning id="atomic-jobs">
            <title>Atomic Job Benefits</title>
            <discovery>Small, focused job definitions improve reusability and testing</discovery>
            <impact>Jobs can be composed in different patterns for various scenarios</impact>
            <solution>Created atomic jobs for terraform, docker, unit tests, e2e tests, PR comments</solution>
            <best-practice>Keep jobs focused on single responsibilities with clear interfaces</best-practice>
        </learning>
    </key-learnings>
    
    <technical-details>
        <architecture>
            <component>Master Orchestrator</component>
            <description>Single entry point (.github/workflows/master-orchestrator.yml) that routes all GitHub Actions</description>
            <features>
                <feature>7 execution phases: strategy, tests, deploy, cleanup, security, notifications, summary</feature>
                <feature>Conditional execution based on file changes and commit messages</feature>
                <feature>Configuration loading from JSON files</feature>
                <feature>Support for multiple triggers: pull_request, push, workflow_dispatch, repository_dispatch, schedule</feature>
            </features>
        </architecture>
        
        <architecture>
            <component>Reusable Workflows</component>
            <location>.github/workflows/reusable/</location>
            <workflows>
                <workflow>test-runner.yml - Configurable test execution (smoke, unit, integration, e2e)</workflow>
                <workflow>deploy-staging.yml - Staging environment deployment with Terraform/GCP</workflow>
                <workflow>deploy-production.yml - Production deployment with approval gates</workflow>
                <workflow>security-scan.yml - Multi-tool security analysis</workflow>
                <workflow>code-quality.yml - Linting, formatting, architecture compliance</workflow>
                <workflow>notification-handler.yml - Multi-channel notifications</workflow>
                <workflow>cleanup-resources.yml - Resource lifecycle management</workflow>
            </workflows>
        </architecture>
        
        <architecture>
            <component>Atomic Jobs</component>
            <location>.github/workflows/jobs/</location>
            <jobs>
                <job>terraform-apply.yml - Terraform operations with workspace support</job>
                <job>docker-build.yml - Docker build and push to GCR</job>
                <job>test-unit.yml - Python unit test execution</job>
                <job>test-e2e.yml - End-to-end test execution with Playwright</job>
                <job>comment-update.yml - PR comment management with deduplication</job>
            </jobs>
        </architecture>
        
        <architecture>
            <component>Configuration Management</component>
            <location>.github/workflows/config/</location>
            <files>
                <file>settings.json - Global workflow settings</file>
                <file>features.json - Feature flags for enabling/disabling capabilities</file>
                <file>environments.json - Environment-specific configurations</file>
                <file>secrets-mapping.json - Secret name mappings</file>
            </files>
        </architecture>
    </technical-details>
    
    <files-impacted>
        <created count="22">
            <file>.github/workflows/master-orchestrator.yml</file>
            <file>.github/workflows/master-orchestrator-act.yml</file>
            <file>.github/workflows/reusable/test-runner.yml</file>
            <file>.github/workflows/reusable/deploy-staging.yml</file>
            <file>.github/workflows/reusable/deploy-production.yml</file>
            <file>.github/workflows/reusable/security-scan.yml</file>
            <file>.github/workflows/reusable/code-quality.yml</file>
            <file>.github/workflows/reusable/notification-handler.yml</file>
            <file>.github/workflows/reusable/cleanup-resources.yml</file>
            <file>.github/workflows/jobs/terraform-apply.yml</file>
            <file>.github/workflows/jobs/docker-build.yml</file>
            <file>.github/workflows/jobs/test-unit.yml</file>
            <file>.github/workflows/jobs/test-e2e.yml</file>
            <file>.github/workflows/jobs/comment-update.yml</file>
            <file>.github/workflows/config/settings.json</file>
            <file>.github/workflows/config/features.json</file>
            <file>.github/workflows/config/environments.json</file>
            <file>.github/workflows/config/secrets-mapping.json</file>
            <file>.github/scripts/determine-strategy.sh</file>
            <file>.github/scripts/parse-config.py</file>
            <file>.github/actions/comment-updater/action.yml</file>
            <file>scripts/verify_workflow_status.py</file>
        </created>
        
        <deleted count="20">
            <file>ai-autofix.yml</file>
            <file>architecture-health.yml</file>
            <file>boundary-enforcement.yml</file>
            <file>ci-enhanced.yml</file>
            <file>gemini-cli.yml</file>
            <file>gemini-issue-automated-triage.yml</file>
            <file>gemini-pr-review.yml</file>
            <file>health-monitoring.yml</file>
            <file>orchestrator.yml</file>
            <file>pipeline-optimization.yml</file>
            <file>staging-cleanup.yml</file>
            <file>staging-environment.yml</file>
            <file>terraform-lock-cleanup.yml</file>
            <file>test-comprehensive.yml</file>
            <file>test-on-demand.yml</file>
            <file>test-smoke.yml</file>
            <file>test-stub-detection.yml</file>
            <file>test-suite.yml</file>
            <file>test-unit.yml</file>
            <file>workflow-health-monitor.yml</file>
        </deleted>
    </files-impacted>
    
    <testing-results>
        <act-testing>
            <result>Successfully tested with ACT version 0.2.80</result>
            <scenarios-tested>
                <scenario>pull_request event</scenario>
                <scenario>push event</scenario>
                <scenario>workflow_dispatch event</scenario>
            </scenarios-tested>
            <issues-found>
                <issue>${{ job.status }} not available in reusable workflow context</issue>
                <issue>Self-referencing environment variables not supported</issue>
            </issues-found>
            <resolution>Created ACT-compatible version with workarounds</resolution>
        </act-testing>
        
        <api-verification>
            <result>verify_workflow_status.py script tested successfully</result>
            <tests-passed>9/9 (100%)</tests-passed>
            <capabilities>
                <capability>GitHub API connectivity verification</capability>
                <capability>Workflow run status checking</capability>
                <capability>Wait for completion with timeout</capability>
                <capability>JSON and table output formats</capability>
            </capabilities>
        </api-verification>
    </testing-results>
    
    <best-practices>
        <practice>Single entry point reduces complexity and improves maintainability</practice>
        <practice>Reusable workflows enforce consistency across the pipeline</practice>
        <practice>JSON configuration enables non-developer workflow customization</practice>
        <practice>Atomic jobs allow flexible composition of workflow patterns</practice>
        <practice>ACT compatibility ensures fast local development iteration</practice>
        <practice>API verification provides programmatic workflow validation</practice>
        <practice>Test GitHub Actions locally before pushing to repository</practice>
        <practice>Use HTML comment identifiers for PR comment deduplication</practice>
        <practice>Implement skip conditions to optimize CI resource usage</practice>
        <practice>Document workflow architecture in specification files</practice>
    </best-practices>
    
    <debugging-commands>
        <command purpose="List available workflows">act --list</command>
        <command purpose="Test pull request event">act pull_request --dryrun</command>
        <command purpose="Test with event file">act workflow_dispatch -e event.json</command>
        <command purpose="Check workflow syntax">actionlint .github/workflows/*.yml</command>
        <command purpose="Verify workflow status">python scripts/verify_workflow_status.py --repo owner/repo --run-id 123</command>
        <command purpose="View ACT logs">docker logs act-container-name</command>
    </debugging-commands>
    
    <future-improvements>
        <improvement>Add workflow performance metrics collection</improvement>
        <improvement>Implement cost tracking for GitHub Actions minutes</improvement>
        <improvement>Create dashboard for workflow execution history</improvement>
        <improvement>Add automated rollback capabilities</improvement>
        <improvement>Implement blue-green deployment patterns</improvement>
        <improvement>Add canary deployment support</improvement>
    </future-improvements>
    
    <compliance-status>
        <spec>MASTER_GITHUB_WORKFLOW.xml - Fully implemented</spec>
        <spec>github_actions.xml - Permissions model followed</spec>
        <architecture-compliance>All workflow files under 300 lines</architecture-compliance>
        <function-compliance>All functions under 8 lines in support scripts</function-compliance>
    </compliance-status>
</specification>