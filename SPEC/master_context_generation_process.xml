<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Master Context Generation Process</name>
        <type>Process.ContextGeneration</type>
        <version>1.0</version>
        <description>Systematic process for generating comprehensive system context documentation</description>
        <created>2025-08-30</created>
        <author>Principal Engineer AI Agent</author>
    </metadata>

    <purpose>
        <description>
            Document the systematic process for generating a master context document that captures
            the essential understanding of a complex multi-service system. This process focuses on
            extracting critical relationships, assumptions, business expectations, and architectural
            decisions that typically require significant time to discover through code exploration.
        </description>
        <business_value>
            Reduces onboarding time for new engineers from weeks to hours by providing a single
            comprehensive document that explains how all system components work together.
        </business_value>
    </purpose>

    <process_overview>
        <phase number="1" name="Initial Navigation">
            <description>Start with existing documentation indexes to understand structure</description>
            <actions>
                <action>Read LLM_MASTER_INDEX.md for navigation guide</action>
                <action>Review MASTER_WIP_STATUS.md for current system state</action>
                <action>List SPEC directory for architectural specifications</action>
            </actions>
            <key_discoveries>
                <discovery>Identify the claimed number of services (6 mentioned)</discovery>
                <discovery>Note critical issues and recent improvements</discovery>
                <discovery>Understand documentation organization patterns</discovery>
            </key_discoveries>
        </phase>

        <phase number="2" name="Architectural Exploration">
            <description>Deep dive into core architectural specifications</description>
            <actions>
                <action>Read learnings/index.xml for historical patterns</action>
                <action>Review core.xml for system architecture</action>
                <action>Examine SYSTEM_INTEGRATION_MAP.xml for service relationships</action>
                <action>Study unified_environment_management.xml for configuration</action>
            </actions>
            <key_discoveries>
                <discovery>Service independence is CRITICAL (100% isolation)</discovery>
                <discovery>Single Source of Truth violations cause 4x maintenance burden</discovery>
                <discovery>IsolatedEnvironment manages ALL environment access</discovery>
            </key_discoveries>
        </phase>

        <phase number="3" name="Service Analysis">
            <description>Identify and understand all services and their relationships</description>
            <actions>
                <action>List root directories to find service folders</action>
                <action>Read README.md for business context</action>
                <action>Map service ports and dependencies</action>
            </actions>
            <key_discoveries>
                <discovery>Actually 6 conceptual services, not all separate folders</discovery>
                <discovery>Services: Backend, Auth, Frontend, Dev Launcher, Shared, Test Framework</discovery>
                <discovery>Each service has specific port allocations and databases</discovery>
            </key_discoveries>
        </phase>

        <phase number="4" name="Critical Flow Analysis">
            <description>Understand business-critical paths through the system</description>
            <actions>
                <action>Read supervisor_adaptive_workflow.xml for AI orchestration</action>
                <action>Review shared_auth_integration.xml for authentication</action>
                <action>Study database_connectivity_architecture.xml for data flows</action>
                <action>Examine 3tier_persistence_architecture.xml for state management</action>
            </actions>
            <key_discoveries>
                <discovery>Adaptive workflow changes based on data sufficiency</discovery>
                <discovery>Auth service MUST NEVER import from backend</discovery>
                <discovery>SSL parameter conflicts between asyncpg and psycopg2</discovery>
                <discovery>3-tier persistence for enterprise reliability</discovery>
            </key_discoveries>
        </phase>

        <phase number="5" name="Testing and Deployment">
            <description>Understand quality assurance and deployment strategies</description>
            <actions>
                <action>Read test_infrastructure_architecture.xml</action>
                <action>Review deployment_architecture.xml</action>
                <action>Note testing philosophy (E2E > Integration > Unit)</action>
            </actions>
            <key_discoveries>
                <discovery>MOCKS FORBIDDEN in production environments</discovery>
                <discovery>Real services required for E2E tests</discovery>
                <discovery>Pre-deployment validation is mandatory</discovery>
            </key_discoveries>
        </phase>

        <phase number="6" name="Context Synthesis">
            <description>Compile discoveries into comprehensive context document</description>
            <structure>
                <section>Executive Summary - Business value and architecture overview</section>
                <section>System Architecture - All services and their purposes</section>
                <section>Critical Principles - SSOT, independence, environment management</section>
                <section>Business Flows - Auth, AI optimization, WebSocket, persistence</section>
                <section>Configuration Management - Environment detection and secrets</section>
                <section>Security Boundaries - Service isolation patterns</section>
                <section>Testing Philosophy - Real services, no mocks</section>
                <section>Deployment Strategy - Validation and commands</section>
                <section>Common Pitfalls - Critical learnings from failures</section>
                <section>Business Metrics - KPIs and monitoring</section>
                <section>Development Workflow - Quick start and rules</section>
                <section>System Health - Current compliance status</section>
                <section>Future Considerations - Scaling and technical debt</section>
            </structure>
        </phase>
    </process_overview>

    <key_learnings>
        <learning priority="CRITICAL">
            <title>Documentation Discovery Pattern</title>
            <description>
                Start with index files (LLM_MASTER_INDEX, MASTER_WIP_STATUS) as they provide
                the navigation structure for everything else. These files reveal what the
                system maintainers consider most important.
            </description>
        </learning>

        <learning priority="CRITICAL">
            <title>Service Count Verification</title>
            <description>
                Don't assume folder structure matches service architecture. The system claims
                6 services but they're conceptual divisions (Backend, Auth, Frontend, Dev Launcher,
                Shared Infrastructure, Test Framework) rather than all being separate folders.
            </description>
        </learning>

        <learning priority="HIGH">
            <title>Critical Violations Focus</title>
            <description>
                Pay special attention to CATASTROPHIC and CRITICAL warnings in learnings.
                These represent actual production failures that cost significant time/money
                to discover and fix (e.g., WebSocket broadcasting, OAuth import violations).
            </description>
        </learning>

        <learning priority="HIGH">
            <title>Business Context Integration</title>
            <description>
                Always connect technical architecture to business value. The system exists
                to deliver 10-40% cost reduction for AI spending, and every architectural
                decision should support this goal.
            </description>
        </learning>

        <learning priority="MEDIUM">
            <title>Pattern Recognition</title>
            <description>
                Look for repeated patterns across specifications (e.g., SSOT violations,
                service independence, environment management). These repetitions indicate
                areas where violations commonly occur and need emphasis.
            </description>
        </learning>
    </key_learnings>

    <time_investment>
        <task name="Initial Navigation" time="10 minutes"/>
        <task name="Architectural Exploration" time="15 minutes"/>
        <task name="Service Analysis" time="10 minutes"/>
        <task name="Critical Flow Analysis" time="20 minutes"/>
        <task name="Testing and Deployment" time="10 minutes"/>
        <task name="Context Synthesis" time="20 minutes"/>
        <total>85 minutes</total>
    </time_investment>

    <deliverables>
        <deliverable name="MASTER_SYSTEM_CONTEXT.md">
            <purpose>Comprehensive system understanding document</purpose>
            <audience>New engineers, architects, AI agents</audience>
            <update_frequency>Major architectural changes</update_frequency>
        </deliverable>
        <deliverable name="master_context_generation_process.xml">
            <purpose>Process documentation for repeatability</purpose>
            <audience>AI agents, documentation maintainers</audience>
            <update_frequency>Process improvements</update_frequency>
        </deliverable>
    </deliverables>

    <success_criteria>
        <criterion>Document answers "how do all the pieces fit together?"</criterion>
        <criterion>New engineer can understand system in < 2 hours</criterion>
        <criterion>Captures non-obvious relationships and gotchas</criterion>
        <criterion>Connects technical decisions to business value</criterion>
        <criterion>Includes current system health and known issues</criterion>
    </success_criteria>

    <maintenance>
        <recommendation>
            Update MASTER_SYSTEM_CONTEXT.md whenever:
            - New services are added
            - Critical architectural changes occur
            - Major learnings are discovered
            - Business model evolves
        </recommendation>
        <recommendation>
            Review quarterly to ensure accuracy and relevance
        </recommendation>
    </maintenance>
</specification>