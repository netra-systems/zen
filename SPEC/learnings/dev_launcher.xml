<?xml version='1.0' encoding='utf-8'?>
<learnings category="dev-launcher" priority="high">
  <metadata>
    <last_edited>2025-08-23T15:30:00.000000</last_edited>
    <legacy_status is_legacy="false">
      <reasons>
        <reason>Updated with latest LLM configuration fixes</reason>
      </reasons>
    </legacy_status>
  </metadata>
  <title>Dev Launcher Comprehensive Guide</title>
  <description>Consolidated learnings for dev launcher setup, configuration, and troubleshooting</description>
  <last_updated>2025-08-23</last_updated>
  <section name="Configuration">
    <learning id="secret-key-configuration">
      <problem>Backend fails with "SECRET_KEY must be at least 32 characters"</problem>
      <solution>
        Generate 64+ character key: python -c "import secrets; print(secrets.token_urlsafe(48))"
        Update in both .env and .env.development.local
        Ensure DevelopmentConfig reads from environment
      </solution>
      <prevention>Always use 64+ character keys, keep .env files synchronized</prevention>
    </learning>
    <learning id="missing-api-keys">
      <problem>Environment loader warns about missing LLM API keys</problem>
      <solution>
        Add placeholder keys for development:
        ANTHROPIC_API_KEY=sk-ant-dev-placeholder-key-for-development
        OPENAI_API_KEY=sk-openai-dev-placeholder-key-for-development
        GEMINI_API_KEY=your-actual-key-if-using-agents
      </solution>
      <note>Placeholders satisfy checks when LLM_MODE=shared (mocked mode)</note>
    </learning>
    <learning id="service-mode-configuration">
      <problem>Services connect to cloud endpoints despite local Docker services</problem>
      <solution>
        Set all service modes to local in .env:
        REDIS_MODE=local
        CLICKHOUSE_MODE=local
        REDIS_HOST=localhost
        CLICKHOUSE_HOST=localhost
        DEV_MODE_*_ENABLED=true
      </solution>
      <files_affected>dev_launcher/service_config.py, .env</files_affected>
    </learning>
    <learning id="llm-shared-mode-not-respected" date="2025-08-23">
      <problem>LLM service configured as "shared" but not respected at runtime</problem>
      <root_cause>
        1. Service availability checker was changing LLM mode from "shared" to "disabled" when no API keys found
        2. Backend had circular dependency in environment loading (_setup_environment_files)
        3. Project root path was incorrect (2 levels instead of 3)
      </root_cause>
      <solution>
        1. Keep LLM in shared mode even without API keys (dev_launcher/service_availability_checker.py)
        2. Fix circular dependency by checking env vars instead of config system (netra_backend/app/main.py)
        3. Correct project root path: Path(__file__).parent.parent.parent
        4. Change display from "Cloud" to "On" for better UX (dev_launcher/config.py)
      </solution>
      <prevention>
        - Avoid circular dependencies in environment initialization
        - Ensure service modes are respected throughout the stack
        - Test both dev launcher and direct run scenarios
      </prevention>
      <files_affected>
        dev_launcher/service_availability_checker.py,
        dev_launcher/config.py,
        netra_backend/app/main.py
      </files_affected>
    </learning>
  </section>
  <section name="Database">
    <learning id="alembic-helper-files">
      <problem>Alembic fails: "Could not determine revision id from filename"</problem>
      <cause>Helper files in alembic/versions directory</cause>
      <solution>
        1. Create netra_backend/app/alembic/migrations_helpers/ directory
        2. Move all helper files (*_tables.py, migration_metadata.py) there
        3. Only keep proper migration files in versions/
      </solution>
      <prevention>Never place non-migration files in alembic/versions/</prevention>
    </learning>
    <learning id="migration-absolute-imports">
      <problem>Migrations fail with import errors when package structure is incorrect</problem>
      <solution>
        Use absolute imports with service namespace:
        FROM: from migrations_helpers.migration_metadata import
        TO: from netra_backend.app.alembic.migrations_helpers.migration_metadata import
      </solution>
    </learning>
    <learning id="database-schema-sync">
      <problem>Schema validation fails with missing tables</problem>
      <solution>
        1. Check status: alembic current
        2. Generate: alembic revision --autogenerate -m "description"
        3. Review migration file
        4. Apply: alembic upgrade head
      </solution>
      <common_missing_tables>
        agent_state_transactions, corpus_audit_logs, 
        agent_state_snapshots, mcp_tool_executions,
        mcp_external_servers, agent_recovery_logs
      </common_missing_tables>
    </learning>
    <learning id="database-metrics-schema">
      <problem>DatabaseMetrics instantiation fails with unexpected arguments</problem>
      <solution>
        Ensure DatabaseMetrics has all fields MetricsCollector passes:
        - Add pool_size and pool_overflow fields
        - Fix parameter mismatches (query_count â†’ total_queries)
        - Add required timestamp parameter
      </solution>
      <files_affected>netra_backend/app/db/observability_metrics.py, netra_backend/app/monitoring/metrics_collector.py</files_affected>
    </learning>
  </section>
  <section name="HealthChecks">
    <learning id="health-check-timeouts">
      <problem>Health checks timeout during database optimization</problem>
      <root_cause>Database optimization takes 10-15 seconds on startup</root_cause>
      <solution>
        Extended timeouts:
        - Auth: 30s
        - Backend: 30s
        - Frontend: 60s
        - Service startup: 30-50s
        - Overall: 120s
      </solution>
    </learning>
    <learning id="dynamic-port-health-checks">
      <problem>Health checks use hardcoded ports instead of dynamic ports</problem>
      <solution>
        Read ports from .service_discovery/*.json files
        Use actual allocated ports for health checks
        Fall back to defaults if files missing
      </solution>
      <files_affected>dev_launcher/startup_validator.py</files_affected>
    </learning>
    <learning id="health-checks-development">
      <problem>Health checks fail when optional services unavailable</problem>
      <solution>
        Make environment-aware:
        - PostgreSQL: critical in all environments
        - Redis/ClickHouse: optional in development
        - Check environment: os.getenv("ENVIRONMENT", "development")
      </solution>
    </learning>
    <learning id="quick-health-check-method">
      <problem>QuickHealthChecker missing quick_health_check method</problem>
      <solution>
        Use correct method name: run_quick_checks()
        Update all references in startup_sequencer.py and launcher_integration.py
      </solution>
    </learning>
  </section>
  <section name="OptionalServices">
    <learning id="clickhouse-optional">
      <insight>ClickHouse is optional for development</insight>
      <behavior>Application continues despite connection failures</behavior>
      <recommendation>Warnings can be safely ignored in development</recommendation>
    </learning>
    <learning id="llm-services-optional">
      <insight>LLM API keys optional for basic development</insight>
      <requirement>Required only for agent functionality</requirement>
      <keys_needed>GEMINI_API_KEY, ANTHROPIC_API_KEY, OPENAI_API_KEY</keys_needed>
    </learning>
  </section>
  <best_practices>
    <practice priority="critical">
      Always check startup logs for critical vs non-critical failures
    </practice>
    <practice priority="high">
      Keep .env.development.local synchronized with .env
    </practice>
    <practice priority="high">
      Use absolute imports in Alembic migrations
    </practice>
    <practice priority="medium">
      Read dynamic ports from service discovery files
    </practice>
    <practice priority="medium">
      Set timeouts based on worst-case startup times
    </practice>
    <practice priority="low">
      Monitor actual startup times to adjust timeouts
    </practice>
  </best_practices>
  <testing_checklist>
    <item>Backend starts without critical errors</item>
    <item>Frontend compiles and serves</item>
    <item>Health endpoint returns 200 OK</item>
    <item>Database migrations apply successfully</item>
    <item>Schema validation passes or shows only warnings</item>
    <item>Dynamic ports allocated correctly</item>
    <item>Auth system configuration loads</item>
    <item>Service discovery files created</item>
  </testing_checklist>
  <troubleshooting>
    <issue symptom="SECRET_KEY error">
      Check .env and .env.development.local for 64+ character key
    </issue>
    <issue symptom="Alembic revision error">
      Move helper files out of alembic/versions/
    </issue>
    <issue symptom="Import errors in migrations">
      Use absolute imports with service namespace
    </issue>
    <issue symptom="Health check timeouts">
      Increase timeouts in startup_validator.py
    </issue>
    <issue symptom="Wrong port in health checks">
      Check .service_discovery/*.json files
    </issue>
    <issue symptom="ClickHouse connection errors">
      Non-critical in development, can ignore
    </issue>
    <issue symptom="LLM shows as Off when should be On">
      Check service_availability_checker.py - ensure LLM stays in shared mode
      Verify backend loads .env correctly without circular dependencies
      Check display mapping in config.py (should show "On" for shared mode)
    </issue>
  </troubleshooting>
</learnings>