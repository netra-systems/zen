<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>KnowledgeBase.LearningsIndex</name>
        <type>KnowledgeRetrievalMap</type>
        <version>2.0</version>
        <description>Index map for retrieving established patterns and critical learnings.</description>
    </metadata>
    
    <retrieval-protocol>
        <title>AI Utilization Strategy</title>
        <ai-directive>AI Agents MUST consult this index before task execution to avoid known regressions.</ai-directive>
        <workflow>
            <step>1. Analyze the task description for relevant keywords/domains.</step>
            <step>2. Query this index for matching categories.</step>
            <step>3. Prioritize and integrate the `<critical-takeaway>` elements into the execution plan.</step>
            <step>4. If necessary, retrieve the detailed learning file using the `path` attribute.</step>
        </workflow>
    </retrieval-protocol>

    <categories>
        <category name="Authentication/OAuth" path="SPEC/learnings/auth.xml" keywords="JWT, Login, Session">
            <critical-takeaway>MANDATORY: All services must integrate with the shared auth service (SPEC/shared_auth_integration.xml).</critical-takeaway>
            <critical-takeaway>Ensure consistent JWT secret configuration across services (jwt-secret-mismatch).</critical-takeaway>
        </category>

        <category name="WebSocket" path="SPEC/learnings/websocket_message_paradox.xml" keywords="Realtime, Coroutine, Async">
            <critical-takeaway context="Error Handling">All failures MUST raise exceptions. Silent failures (e.g., auth hanging) are forbidden.</critical-takeaway>
            <critical-takeaway context="Async">Always await async operations. Verify objects are not coroutines before access.</critical-takeaway>
            <critical-takeaway context="Schema">Ensure strict alignment of message fields (e.g., 'content' vs 'text') between FE/BE.</critical-takeaway>
        </category>

        <category name="Configuration/Secrets" path="SPEC/learnings/configuration_secrets.xml" keywords="Env Vars, .env">
            <critical-takeaway>All configuration MUST utilize the unified config system. Direct `os.environ.get()` is forbidden outside the config module.</critical-takeaway>
        </category>

        <category name="Testing" path="SPEC/learnings/testing.xml" keywords="TDD, Feature Flags, Pytest, Jest">
            <critical-takeaway>Adhere to the Feature Flag TDD workflow (feature-flags-tdd-workflow).</critical-takeaway>
            <critical-takeaway>Tests must validate REAL functionality, not mocks (frontend-test-paradox-report).</critical-takeaway>
        </category>

        <category name="Frontend" path="SPEC/learnings/frontend.xml" keywords="Zustand, React, TypeScript">
            <critical-takeaway context="Zustand">Use individual selectors to prevent infinite loops. See SPEC/conventions.xml#zustand-selectors.</critical-takeaway>
        </category>

        <category name="Microservice Independence" path="SPEC/independent_services.xml" keywords="Microservice, Docker, Service">
            <critical-takeaway>CRITICAL: Microservices MUST be 100% independent. NO imports from the main `app/` module. Do not name internal modules 'app'.</critical-takeaway>
        </category>

        <category name="Health Checks" path="SPEC/learnings/health_checks.xml" keywords="Health, Ready, Readiness, Liveness">
            <critical-takeaway>Health check endpoints must initialize database connections lazily if not already initialized.</critical-takeaway>
            <critical-takeaway>Auth service requires /health/ready endpoint on configured port (8080 default, not 8001).</critical-takeaway>
            <critical-takeaway>Database health checks must handle uninitialized async_engine gracefully by calling initialize_postgres().</critical-takeaway>
        </category>

        <category name="Database/AsyncIO" path="SPEC/learnings/database_asyncio.xml" keywords="AsyncSession, Database, Postgres, ClickHouse">
            <critical-takeaway>Functions marked as async must actually await something (postgres-session-async-function-paradox).</critical-takeaway>
            <critical-takeaway>ClickHouse driver: Use OperationalError instead of NetworkError (which doesn't exist) for network-related exceptions.</critical-takeaway>
        </category>

        <category name="Database/Migration" path="SPEC/learnings/alembic_asyncpg_greenlet.xml" keywords="Alembic, Migration, AsyncPG, Greenlet, SQLAlchemy">
            <critical-takeaway>Alembic requires synchronous database URL - remove asyncpg driver for migrations.</critical-takeaway>
            <critical-takeaway>Separate sync migration URLs from async application URLs to avoid greenlet errors.</critical-takeaway>
        </category>

        <category name="Dev Launcher" path="SPEC/learnings/dev_launcher.xml" keywords="Development, Startup, Local">
            <critical-takeaway>Secret keys must be properly configured. Check health checks and port conflicts.</critical-takeaway>
        </category>

        <category name="Deployment" path="SPEC/learnings/deployment.xml" keywords="GCP, Cloud Run, Docker">
            <critical-takeaway>Use gunicorn with uvicorn workers for Cloud Run (cloud-run-uvicorn-workers).</critical-takeaway>
        </category>

        <category name="GitHub Actions" path="SPEC/learnings/github_actions.xml" keywords="CI/CD, Pipeline, Workflow">
            <critical-takeaway>Test failures must propagate - see test-exit-code-propagation learning.</critical-takeaway>
        </category>

        <category name="Architecture/Compliance" path="SPEC/learnings/compliance_improvements.xml" keywords="300/8, Compliance, Architecture">
            <critical-takeaway>Maintain 300-line file limit and 8-line function limit. Use compliance check script.</critical-takeaway>
        </category>

        <category name="Context Optimization" path="SPEC/learnings/context_optimization.xml" keywords="AI Context, Token Optimization">
            <critical-takeaway>Avoid context bloat from test files and long functions. Monitor context efficiency.</critical-takeaway>
        </category>

        <category name="Type Safety" path="SPEC/learnings/type_safety.xml" keywords="Types, Pydantic, TypeScript">
            <critical-takeaway>Maintain single source of truth for types. Avoid circular imports.</critical-takeaway>
        </category>

        <category name="E2E Testing" path="SPEC/learnings/e2e_testing.xml" keywords="End-to-End, Integration, Circuit Breaker">
            <critical-takeaway>Use circuit breaker patterns. Ensure proper fixture dependencies.</critical-takeaway>
        </category>

        <category name="Startup" path="SPEC/learnings/startup.xml" keywords="Initialization, Boot, Config">
            <critical-takeaway>Startup errors often cascade - fix configuration first, then secrets, then connections.</critical-takeaway>
        </category>

        <category name="State Management/Validation" path="SPEC/learnings/state_validation.xml" keywords="Pydantic, Validation, State">
            <critical-takeaway>Always provide defaults for Pydantic model fields unless absolutely critical.</critical-takeaway>
        </category>

        <category name="Error Prevention" path="SPEC/learnings/execution_context_hashable.xml" keywords="ExecutionContext, Hashable, Errors">
            <critical-takeaway>ExecutionContext is now hashable with __hash__ and __eq__ methods.</critical-takeaway>
        </category>

        <category name="Observability" path="SPEC/learnings/observability.xml" keywords="Logging, Monitoring, Metrics">
            <critical-takeaway>Implement modular observability architecture with correlation ID tracking.</critical-takeaway>
            <critical-takeaway context="Loguru">Use f-strings or {} placeholders for loguru logging, not %s format strings (loguru-format-strings).</critical-takeaway>
        </category>

        <category name="Environment Detection" path="SPEC/learnings/environment_detection.xml" keywords="Environment, Staging, Production">
            <critical-takeaway>Environment defaults must NEVER be "production" - always default to staging for safety.</critical-takeaway>
        </category>

        <category name="Bad Test Detection" path="SPEC/learnings/bad_test_detection.xml" keywords="Test Health, Flaky Tests">
            <critical-takeaway>Track and fix consistently failing tests. Use bad test detection reports.</critical-takeaway>
        </category>

        <category name="Demo Readiness" path="SPEC/learnings/demo_readiness.xml" keywords="Demo, Presentation, Testing">
            <critical-takeaway>Ensure comprehensive demo preparation with all features tested.</critical-takeaway>
        </category>

        <category name="Scripting/Automation" path="SPEC/learnings/scripting_preference.xml" keywords="Script, Shell, PowerShell, Bash, Python, Automation">
            <critical-takeaway>ALWAYS use Python for scripts instead of shell/PowerShell for cross-platform compatibility.</critical-takeaway>
            <critical-takeaway>Convert existing shell scripts to Python during refactoring.</critical-takeaway>
            <critical-takeaway>Use subprocess.run() for external commands and pathlib for file operations.</critical-takeaway>
        </category>
        
        <category name="Database/CloudSQL" path="SPEC/learnings/cloud_sql_url_handling.xml" keywords="Cloud SQL, Database URL, Unix Socket, AsyncPG, PostgreSQL">
            <critical-takeaway>Keep database URL conversion simple - only change scheme from postgresql:// to postgresql+asyncpg://</critical-takeaway>
            <critical-takeaway>Convert sslmode= to ssl= for asyncpg (except for Unix socket connections)</critical-takeaway>
            <critical-takeaway>Cloud SQL Unix socket URLs work with format: postgresql://user:pass@/db?host=/cloudsql/project:region:instance</critical-takeaway>
        </category>
        
        <category name="Database/URLConsistency" path="SPEC/learnings/database_url_consistency.xml" keywords="Database URL, Secret Management, Cloud SQL Proxy, Service Consistency">
            <critical-takeaway>All services MUST use the same DATABASE_URL secret for consistency</critical-takeaway>
            <critical-takeaway>When using Cloud SQL proxy, use Unix socket format not direct IP</critical-takeaway>
            <critical-takeaway>Verify IP addresses in secrets match actual Cloud SQL instances</critical-takeaway>
        </category>
        
        <category name="Frontend URL Configuration" path="SPEC/frontend_base_url_configuration.xml" keywords="Base URL, URL Construction, apiClientWrapper, Invalid URL, Frontend Config">
            <critical-takeaway>NEVER use empty string as base URL - use window.location.origin in browser contexts</critical-takeaway>
            <critical-takeaway>Base URL must always be a valid URL for the JavaScript URL constructor</critical-takeaway>
            <critical-takeaway>Use window.location.origin for browser, full backend URL for SSR contexts</critical-takeaway>
            <critical-takeaway>Validate URL construction to prevent "Failed to construct 'URL': Invalid base URL" errors</critical-takeaway>
        </category>
        
        <category name="GCP Database Connection Failures" path="SPEC/learnings/gcp_database_connection_failures.xml" keywords="GCP, Database, Connection, sslmode, asyncpg, Cloud SQL, Authentication">
            <critical-takeaway>Backend health checks must convert sslmode= to ssl= for asyncpg connections</critical-takeaway>
            <critical-takeaway>Use Unix socket format for Cloud SQL proxy connections: postgresql://user:pass@/db?host=/cloudsql/instance</critical-takeaway>
            <critical-takeaway>Both backend and auth services must have Cloud SQL proxy configured</critical-takeaway>
            <critical-takeaway>Verify database credentials match actual Cloud SQL users and passwords</critical-takeaway>
        </category>
    </categories>
</specification>