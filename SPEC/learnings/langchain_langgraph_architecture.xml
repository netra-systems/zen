<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>LangChain and LangGraph Architecture Learning</name>
        <type>Learning</type>
        <version>1.0</version>
        <created>2025-08-26</created>
        <description>Documentation of current LangChain usage and LangGraph integration status in the deep agent system</description>
        <business_impact>Understanding the current state enables informed decisions about workflow orchestration improvements</business_impact>
    </metadata>

    <current_state>
        <langchain_usage status="ACTIVE">
            <description>LangChain is extensively used throughout the deep agent system for LLM operations</description>
            <components>
                <component name="LLM Providers" location="netra_backend/app/llm/llm_provider_handlers.py">
                    <usage>All LLM providers use LangChain interfaces (ChatOpenAI, ChatGoogleGenerativeAI, ChatAnthropic, ChatCohere, ChatMistralAI)</usage>
                </component>
                <component name="Core Operations" location="netra_backend/app/llm/llm_operations.py">
                    <usage>Uses ainvoke() for async LLM calls (line 100)</usage>
                    <usage>Supports streaming via LangChain's async iteration</usage>
                </component>
                <component name="Structured Output" location="netra_backend/app/llm/llm_structured_operations.py">
                    <usage>Uses with_structured_output() for Pydantic schema enforcement (line 39)</usage>
                    <usage>Structured LLM ainvoke() for typed responses (line 81)</usage>
                </component>
                <component name="Agent Prompts" location="netra_backend/app/agents/prompts/*.py">
                    <usage>PromptTemplate from langchain_core.prompts for prompt management</usage>
                </component>
                <component name="Agent Communication" location="netra_backend/app/agents/agent_communication.py">
                    <usage>SystemMessage from langchain_core.messages for agent messaging</usage>
                </component>
                <component name="Tool Integration" location="netra_backend/app/agents/tool_dispatcher.py">
                    <usage>BaseTool from langchain_core.tools for tool registration and execution</usage>
                </component>
            </components>
        </langchain_usage>

        <langgraph_usage status="NOT_IMPLEMENTED">
            <description>LangGraph is installed as a dependency but NOT actively used in the codebase</description>
            <findings>
                <finding>LangGraph listed in requirements.txt (line 36)</finding>
                <finding>No imports of LangGraph found in any Python files</finding>
                <finding>No StateGraph, MessageGraph, or graph compilation patterns detected</finding>
                <finding>Custom workflow orchestration used instead of LangGraph</finding>
            </findings>
        </langgraph_usage>

        <custom_implementations>
            <implementation name="DeepAgentState" location="netra_backend/app/agents/state.py">
                <description>Custom Pydantic-based state management, not using LangGraph's StateGraph</description>
                <contains>Typed results from various agents (triage, data, optimizations, etc.)</contains>
                <missing>TODO/task list fields for task tracking</missing>
            </implementation>
            <implementation name="SupervisorWorkflowExecutor" location="netra_backend/app/agents/supervisor/workflow_execution.py">
                <description>Custom pipeline-based workflow execution</description>
                <uses>PipelineStep and custom execution context</uses>
            </implementation>
            <implementation name="TodoTracker" location="netra_backend/app/agents/supervisor/observability_todo_tracker.py">
                <description>Separate TODO tracking for observability only</description>
                <limitation>Not integrated with DeepAgentState</limitation>
                <limitation>Not part of core agent workflow state</limitation>
            </implementation>
        </custom_implementations>
    </current_state>

    <integration_opportunities>
        <opportunity priority="HIGH">
            <title>StateGraph for Agent Workflow Orchestration</title>
            <description>Replace custom SupervisorWorkflowExecutor with LangGraph StateGraph for more robust state management</description>
            <benefits>
                <benefit>Built-in state persistence and recovery</benefit>
                <benefit>Visual workflow representation</benefit>
                <benefit>Conditional edges for dynamic routing</benefit>
                <benefit>Checkpointing for long-running workflows</benefit>
            </benefits>
        </opportunity>
        <opportunity priority="MEDIUM">
            <title>TODO State Integration with DeepAgentState</title>
            <description>Integrate TodoTracker functionality into DeepAgentState using LangGraph patterns</description>
            <benefits>
                <benefit>Unified state management</benefit>
                <benefit>Task state transitions as part of workflow</benefit>
                <benefit>Better observability of task progression</benefit>
            </benefits>
        </opportunity>
        <opportunity priority="LOW">
            <title>MessageGraph for Agent Communication</title>
            <description>Use LangGraph's MessageGraph for inter-agent communication patterns</description>
            <benefits>
                <benefit>Structured message passing</benefit>
                <benefit>Message history tracking</benefit>
                <benefit>Built-in retry and error handling</benefit>
            </benefits>
        </opportunity>
    </integration_opportunities>

    <critical_learnings>
        <learning id="L001">
            <statement>The system heavily uses LangChain for LLM operations but does NOT use LangGraph despite it being installed</statement>
            <impact>Potential missed opportunities for better workflow orchestration and state management</impact>
        </learning>
        <learning id="L002">
            <statement>TODO tracking exists separately from agent state management</statement>
            <impact>Lack of unified task state makes it harder to track workflow progression</impact>
        </learning>
        <learning id="L003">
            <statement>Custom workflow execution works but could benefit from LangGraph's proven patterns</statement>
            <impact>More maintenance burden and fewer features compared to using LangGraph</impact>
        </learning>
    </critical_learnings>

    <recommendations>
        <recommendation priority="1">
            <action>Evaluate LangGraph StateGraph for supervisor agent workflow orchestration</action>
            <rationale>Would provide better state management, checkpointing, and visualization</rationale>
        </recommendation>
        <recommendation priority="2">
            <action>Consider integrating TODO tracking into core agent state</action>
            <rationale>Unified state management would improve observability and debugging</rationale>
        </recommendation>
        <recommendation priority="3">
            <action>If not using LangGraph, consider removing it from requirements to reduce dependencies</action>
            <rationale>Unused dependencies increase attack surface and maintenance burden</rationale>
        </recommendation>
    </recommendations>
</specification>