<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <title>Cloud Run Secrets Configuration Issues</title>
  <date>2025-08-29</date>
  <severity>HIGH</severity>
  <affected_services>
    <service>netra-backend-staging</service>
    <service>netra-auth-service</service>
  </affected_services>
  
  <problem>
    <description>
      Backend deployment to Cloud Run staging failed with "Password is required for staging environment" error.
      Investigation revealed multiple secret configuration issues:
    </description>
    
    <root_causes>
      <cause id="1">
        <issue>Redis password secret contained placeholder value</issue>
        <details>
          The redis-password-staging secret contained "REPLACE_WITH_REDIS_PASSWORD" instead of an actual password.
          The Redis configuration builder (shared/redis_config_builder.py) validates that staging/production 
          environments have real passwords, not placeholders.
        </details>
        <error_message>CONFIGURATION_ERROR: Password is required for staging environment</error_message>
      </cause>
      
      <cause id="2">
        <issue>Missing REDIS_PASSWORD environment variable mapping</issue>
        <details>
          The deployment script (scripts/deploy_to_gcp.py) was not mapping the REDIS_PASSWORD secret
          to an environment variable in Cloud Run, even though the secret existed in Secret Manager.
        </details>
      </cause>
    </root_causes>
  </problem>
  
  <solution>
    <step number="1">
      <action>Generate secure Redis password</action>
      <command>python -c "import secrets; print(secrets.token_urlsafe(32))" | gcloud secrets versions add redis-password-staging --data-file=- --project=netra-staging</command>
      <rationale>Replaced placeholder with cryptographically secure password</rationale>
    </step>
    
    <step number="2">
      <action>Update deployment script to map REDIS_PASSWORD</action>
      <file>scripts/deploy_to_gcp.py</file>
      <change>
        Added REDIS_PASSWORD=redis-password-staging:latest to the --set-secrets parameter
        for both backend and auth services
      </change>
    </step>
    
    <step number="3">
      <action>Created automated test for secret validation</action>
      <file>tests/e2e/test_cloud_run_secret_configuration.py</file>
      <purpose>
        Validates that all required secrets are properly configured in Cloud Run services
        and generates fix commands if issues are found
      </purpose>
    </step>
  </solution>
  
  <prevention>
    <measure id="1">
      <title>Secret validation during deployment</title>
      <description>
        The deployment script should validate that all required secrets have non-placeholder values
        before attempting deployment to staging/production
      </description>
    </measure>
    
    <measure id="2">
      <title>Environment-specific validation</title>
      <description>
        The Redis and database configuration builders properly validate credentials based on environment.
        This pattern should be followed for all configuration components.
      </description>
    </measure>
    
    <measure id="3">
      <title>Automated testing</title>
      <description>
        Run test_cloud_run_secret_configuration.py as part of CI/CD to catch secret configuration
        issues before deployment
      </description>
    </measure>
  </prevention>
  
  <impact>
    <metric>Deployment time lost: ~30 minutes</metric>
    <metric>Failed deployment attempts: 3</metric>
    <business_impact>
      Delayed staging environment availability, but no production impact.
      This issue would have caused complete service failure in production.
    </business_impact>
  </impact>
  
  <related_files>
    <file>shared/redis_config_builder.py</file>
    <file>netra_backend/app/core/configuration/database.py</file>
    <file>scripts/deploy_to_gcp.py</file>
    <file>tests/e2e/test_cloud_run_secret_configuration.py</file>
  </related_files>
  
  <key_learnings>
    <learning>
      Always validate secret values are not placeholders before deployment to non-development environments
    </learning>
    <learning>
      Ensure all secrets referenced in configuration code are mapped in deployment scripts
    </learning>
    <learning>
      Create automated tests that validate Cloud Run service configurations match application requirements
    </learning>
    <learning>
      The Redis configuration builder's validation caught a critical misconfiguration that would have
      caused silent failures in production
    </learning>
  </key_learnings>
</learning>