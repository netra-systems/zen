<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <title>Critical Secret Loading and Validation Issue</title>
        <issue_number>1294</issue_number>
        <date>2025-09-16</date>
        <severity>CRITICAL</severity>
        <category>deployment, secrets, validation</category>
        <impact>Services deploy successfully but fail at runtime due to missing secrets</impact>
    </metadata>

    <problem>
        <description>
            Services were deploying "successfully" to Cloud Run but failing at runtime because
            the service account (netra-staging-deploy) lacked access to Secret Manager secrets.
            The deployment script was not validating secret access before deployment.
        </description>

        <symptoms>
            <symptom>Services report missing environment variables (JWT_SECRET, FERNET_KEY, GEMINI_API_KEY, etc.)</symptom>
            <symptom>Deployment completes without errors</symptom>
            <symptom>Secrets are properly referenced in Cloud Run configuration</symptom>
            <symptom>Runtime validation fails with "required variable missing" errors</symptom>
        </symptoms>

        <root_cause>
            Service account mismatch: Cloud Run services use netra-staging-deploy@netra-staging.iam.gserviceaccount.com
            but secrets only granted access to netra-cloudrun@netra-staging.iam.gserviceaccount.com
        </root_cause>
    </problem>

    <confusion_points>
        <point>
            <stage>Deployment Time</stage>
            <what_happens>
                - Deployment script creates secret references in Cloud Run configuration
                - No validation that service account can ACCESS the secrets
                - Deployment succeeds because references are syntactically correct
            </what_happens>
        </point>

        <point>
            <stage>Runtime Initialization</stage>
            <what_happens>
                - Cloud Run attempts to load secrets using service account
                - If service account lacks access, secrets silently fail to load
                - Environment variables remain empty/undefined
                - No error is reported by Cloud Run itself
            </what_happens>
        </point>

        <point>
            <stage>Application Startup</stage>
            <what_happens>
                - Application's central_config_validator checks for required variables
                - Finds them missing (because secret loading failed silently)
                - Application fails to start with validation errors
                - Errors suggest variables aren't configured when they actually are
            </what_happens>
        </point>
    </confusion_points>

    <critical_insight>
        There are THREE separate stages where things can fail:
        1. Secret doesn't exist in Secret Manager
        2. Secret exists but service account lacks access (SILENT FAILURE)
        3. Secret loads but value is empty or invalid

        The deployment script was only checking #1, not #2 or #3.
    </critical_insight>

    <solution>
        <immediate_fix>
            Grant secretmanager.secretAccessor role to correct service account:
            ```bash
            for secret in $(gcloud secrets list --format="value(name)" --project=netra-staging); do
                gcloud secrets add-iam-policy-binding $secret \
                    --member="serviceAccount:netra-staging-deploy@netra-staging.iam.gserviceaccount.com" \
                    --role="roles/secretmanager.secretAccessor" \
                    --project=netra-staging
            done
            ```
        </immediate_fix>

        <long_term_fix>
            Update deployment script to:
            1. Identify which service account Cloud Run will use
            2. For each secret reference, verify the service account has access
            3. Optionally test-read each secret to verify it has a value
            4. FAIL deployment if any secret check fails
        </long_term_fix>
    </solution>

    <validation_hierarchy>
        <level priority="1">
            <name>Secret Existence</name>
            <when>Deployment time</when>
            <check>Does the secret exist in Secret Manager?</check>
        </level>

        <level priority="2">
            <name>Secret Access</name>
            <when>Deployment time</when>
            <check>Does the service account have secretAccessor role?</check>
        </level>

        <level priority="3">
            <name>Secret Value</name>
            <when>Deployment time (optional)</when>
            <check>Does the secret have a non-empty value?</check>
        </level>

        <level priority="4">
            <name>Runtime Loading</name>
            <when>Container startup</when>
            <check>Did Cloud Run successfully inject the secret as env var?</check>
        </level>

        <level priority="5">
            <name>Application Validation</name>
            <when>Application startup</when>
            <check>Does the loaded value meet application requirements?</check>
        </level>
    </validation_hierarchy>

    <related_issues>
        <issue>JWT_SECRET vs JWT_SECRET_KEY confusion (fixed by making validation more lenient)</issue>
        <issue>FERNET_KEY made optional in staging (workaround for missing secret)</issue>
        <issue>Previous secret loading issues in different environments</issue>
    </related_issues>

    <prevention>
        <measure>Deployment script MUST validate secret access before deploying</measure>
        <measure>Use consistent service accounts across environments</measure>
        <measure>Log secret loading attempts at CRITICAL level</measure>
        <measure>Implement health checks that verify critical secrets are loaded</measure>
        <measure>Consider fail-fast approach: if secrets can't load, don't start service</measure>
    </prevention>

    <test_commands>
        <command>
            <description>Check if service account has secret access</description>
            <code>
gcloud secrets get-iam-policy SECRET_NAME --project=PROJECT \
  --format=json | grep SERVICE_ACCOUNT
            </code>
        </command>

        <command>
            <description>Test read a secret as service account</description>
            <code>
gcloud secrets versions access latest --secret=SECRET_NAME \
  --impersonate-service-account=SA@PROJECT.iam.gserviceaccount.com
            </code>
        </command>

        <command>
            <description>List all secrets without proper access</description>
            <code>
for secret in $(gcloud secrets list --format="value(name)"); do
  gcloud secrets get-iam-policy $secret --format=json | \
    grep -q "netra-staging-deploy" || echo "Missing: $secret"
done
            </code>
        </command>
    </test_commands>
</learning>