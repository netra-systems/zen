<?xml version="1.0" encoding="UTF-8"?>
<spec>
    <metadata>
        <title>Database sslmode Regression Prevention</title>
        <description>Critical fix to prevent recurring database connection issues in health checker and other components</description>
        <created>2025-08-22</created>
        <priority>critical</priority>
    </metadata>
    
    <context>
        <business_value>
            <segment>Platform/Internal</segment>
            <business_goal>Database reliability and development velocity</business_goal>
            <value_impact>Eliminates production outages from sslmode errors, reduces debugging time by 80%</value_impact>
            <strategic_impact>Prevents revenue loss from database connection failures</strategic_impact>
        </business_value>
        
        <problem_statement>
            The health checker and other components were experiencing recurring "connect() got an unexpected keyword argument 'sslmode'" errors because asyncpg does not understand the sslmode parameter - it needs ssl instead.
        </problem_statement>
        
        <root_causes>
            <cause type="module_import_timing">Health checker imported async_engine at module load time when it was None, creating stale reference</cause>
            <cause type="bypass_conversion">Some components created engines directly without URL conversion logic</cause>
            <cause type="missing_validation">No validation to catch sslmode URLs before engine creation</cause>
            <cause type="logic_bug">DatabaseManager.get_application_url_async() had incorrect elif logic that prevented sslmode conversion for non-Cloud SQL URLs</cause>
            <cause type="source_of_sslmode">GCP Secret Manager stores #removed-legacywith sslmode=require (standard psycopg2 format) which gets mounted to Cloud Run containers</cause>
        </root_causes>
    </context>
    
    <solution>
        <approach>Three-layer defense strategy</approach>
        
        <layer1 title="Fresh Engine References">
            <description>Health checker and pool metrics now get fresh engine references at runtime instead of stale module-level imports</description>
            <files>
                <file>netra_backend/app/services/database/health_checker.py</file>
                <file>netra_backend/app/services/database/pool_metrics.py</file>
            </files>
            <pattern>
                <before>from netra_backend.app.db.postgres import async_engine</before>
                <after>from netra_backend.app.db.postgres_core import async_engine  # Inside function</after>
            </pattern>
        </layer1>
        
        <layer2 title="Centralized URL Conversion">
            <description>DatabaseManager handles complex URL conversion matrix for all driver/connection combinations</description>
            <files>
                <file>netra_backend/app/db/database_manager.py</file>
                <file>netra_backend/app/db/postgres_core.py</file>
            </files>
            <conversion_matrix>
                <!-- Sync Drivers (psycopg2/pg8000) -->
                <sync_driver>
                    <tcp_connection>Requires sslmode= parameter for SSL</tcp_connection>
                    <unix_socket>Remove all SSL parameters (Cloud SQL proxy handles SSL)</unix_socket>
                </sync_driver>
                <!-- Async Driver (asyncpg) -->
                <async_driver>
                    <tcp_connection>Requires ssl= parameter (MUST convert sslmode= to ssl=)</tcp_connection>
                    <unix_socket>Remove all SSL parameters (Cloud SQL proxy handles SSL)</unix_socket>
                </async_driver>
            </conversion_matrix>
            <critical_fix>
                Fixed logic bug: get_application_url_async() had "elif" that prevented conversion.
                Now uses "else" block to ALWAYS convert sslmode to ssl for non-Cloud SQL async connections.
            </critical_fix>
        </layer2>
        
        <layer3 title="Runtime Validation">
            <description>Added validation in _create_and_setup_engine to catch any URLs that still contain sslmode</description>
            <validation_logic>
                if "sslmode=" in async_db_url:
                    raise RuntimeError("CRITICAL: Database URL contains 'sslmode' parameter...")
            </validation_logic>
        </layer3>
    </solution>
    
    <url_flow>
        <source>GCP Secret Manager stores "database-url-staging" with postgresql://...?sslmode=require</source>
        <mount>Cloud Run mounts secret as #removed-legacyenvironment variable</mount>
        <step1>DatabaseConfigManager._get_postgres_url() reads DATABASE_URL</step1>
        <step2>DatabaseManager.get_base_database_url() strips driver prefixes, keeps sslmode</step2>
        <step3>DatabaseManager.get_migration_url_sync_format() keeps sslmode for Alembic (sync)</step3>
        <step4>DatabaseManager.get_application_url_async() converts sslmode to ssl for asyncpg</step4>
        <result>Each driver gets the correct SSL parameter format it understands</result>
    </url_flow>
    
    <environment_handling>
        <development>
            <tcp>No SSL required - plain postgresql://localhost connections</tcp>
        </development>
        <staging_production>
            <tcp>sslmode=require in secrets, converted to ssl=require for asyncpg</tcp>
            <unix_socket>Cloud SQL via /cloudsql/ - ALL SSL parameters removed</unix_socket>
        </staging_production>
    </environment_handling>
    
    <prevention_checklist>
        <item>✓ Never import async_engine at module level - always get fresh reference</item>
        <item>✓ Use get_converted_async_db_url() for any new engine creation</item>
        <item>✓ Test with staging URLs containing sslmode parameters</item>
        <item>✓ Check logs for "CRITICAL: Database URL contains 'sslmode'" messages</item>
        <item>✓ Verify health checker works in both dev and staging environments</item>
    </prevention_checklist>
    
    <testing>
        <unit_tests>
            <test>URL conversion function works for all database types</test>
            <test>Validation catches sslmode URLs and fails clearly</test>
            <test>Health checker gets fresh engine references</test>
        </unit_tests>
        
        <integration_tests>
            <test>Health checker works with staging database URLs</test>
            <test>No sslmode errors during startup monitoring</test>
            <test>Connection monitoring functions correctly</test>
        </integration_tests>
    </testing>
    
    <monitoring>
        <alerts>
            <alert>Health checker sslmode error detection with detailed logging</alert>
            <alert>Engine creation validation failures</alert>
        </alerts>
        
        <metrics>
            <metric>Health check success rate</metric>
            <metric>Database connection initialization time</metric>
        </metrics>
    </monitoring>
</spec>