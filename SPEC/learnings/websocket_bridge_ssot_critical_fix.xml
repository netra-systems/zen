<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <metadata>
    <title>WebSocket Bridge SSOT Critical Fix</title>
    <date>2025-09-01</date>
    <severity>CRITICAL</severity>
    <categories>
      <category>SSOT</category>
      <category>WebSocket</category>
      <category>Architecture</category>
      <category>Agent Communication</category>
    </categories>
    <business_impact>
      <value>90% of platform value delivery through chat</value>
      <risk>WebSocket failures directly impact user experience</risk>
      <revenue>Critical for all customer tiers</revenue>
    </business_impact>
  </metadata>
  
  <problem_statement>
    <issue>Three different WebSocket communication patterns causing chaos</issue>
    <symptoms>
      <symptom>Duplicate WebSocket event methods in 3+ locations</symptom>
      <symptom>Mixed usage of bridge and manager patterns</symptom>
      <symptom>Inconsistent event routing paths</symptom>
      <symptom>Constructor pollution with websocket_manager parameter</symptom>
    </symptoms>
    <impact>
      <technical>Race conditions, duplicate events, maintenance nightmares</technical>
      <business>Unreliable chat experience, lost user trust</business>
    </impact>
  </problem_statement>
  
  <root_cause>
    <primary>Lack of SSOT enforcement during WebSocket evolution</primary>
    <contributing>
      <factor>Transitional code left in place too long</factor>
      <factor>Backward compatibility overcomplicated architecture</factor>
      <factor>Multiple developers adding different patterns</factor>
    </contributing>
  </root_cause>
  
  <solution>
    <architecture>
      <pattern>Unified WebSocket Bridge Pattern</pattern>
      <flow>Agent → BaseSubAgent → WebSocketBridgeAdapter → AgentWebSocketBridge → WebSocket</flow>
      <principle>All agents inherit from BaseSubAgent which provides emit_* methods</principle>
    </architecture>
    
    <implementation>
      <step number="1">Removed all direct get_agent_websocket_bridge() imports</step>
      <step number="2">Deleted duplicate WebSocket event methods</step>
      <step number="3">Replaced notify_* methods with emit_* methods</step>
      <step number="4">Added deprecation warnings for backward compatibility</step>
      <step number="5">Unified all agents to use WebSocketBridgeAdapter</step>
    </implementation>
    
    <unified_methods>
      <method>emit_agent_started() - Agent initialization</method>
      <method>emit_thinking() - Real-time reasoning visibility</method>
      <method>emit_tool_executing() - Tool execution start</method>
      <method>emit_tool_completed() - Tool execution complete</method>
      <method>emit_progress() - Partial results and progress</method>
      <method>emit_error() - Structured error reporting</method>
      <method>emit_agent_completed() - Agent completion</method>
    </unified_methods>
  </solution>
  
  <files_modified>
    <file path="netra_backend/app/agents/agent_communication.py">
      <change>Removed send_direct_websocket_event and all notify_* methods</change>
    </file>
    <file path="netra_backend/app/agents/agent_lifecycle.py">
      <change>Removed websocket_manager checks, use emit_* methods</change>
    </file>
    <file path="netra_backend/app/agents/base/interface.py">
      <change>Removed bridge import, deprecated duplicate send_* methods</change>
    </file>
  </files_modified>
  
  <validation>
    <test>WebSocket pattern verification script confirms 100% SSOT compliance</test>
    <test>No duplicate WebSocket methods detected</test>
    <test>All critical files follow unified pattern</test>
  </validation>
  
  <key_learnings>
    <learning priority="1">
      NEVER allow multiple patterns for the same functionality. 
      Enforce SSOT from day one or technical debt compounds exponentially.
    </learning>
    <learning priority="2">
      Transitional code must have expiration dates.
      Set hard deadlines for removing backward compatibility layers.
    </learning>
    <learning priority="3">
      WebSocket communication is mission-critical infrastructure.
      It must have a single, clear, documented pattern that all developers follow.
    </learning>
    <learning priority="4">
      The emit_* pattern through WebSocketBridgeAdapter is the ONLY approved 
      method for WebSocket events in agent code.
    </learning>
  </key_learnings>
  
  <prevention>
    <rule>All new agents MUST inherit from BaseSubAgent</rule>
    <rule>Direct bridge imports are FORBIDDEN in agent files</rule>
    <rule>WebSocket events MUST use emit_* methods only</rule>
    <rule>Run WebSocket pattern verification in CI/CD</rule>
    <rule>Document the unified pattern prominently</rule>
  </prevention>
  
  <metrics>
    <before>
      <ssot_compliance>30%</ssot_compliance>
      <duplicate_methods>12+</duplicate_methods>
      <patterns>3 different patterns</patterns>
    </before>
    <after>
      <ssot_compliance>100%</ssot_compliance>
      <duplicate_methods>0</duplicate_methods>
      <patterns>1 unified pattern</patterns>
    </after>
  </metrics>
  
  <references>
    <doc>WEBSOCKET_BRIDGE_UNIFICATION_PLAN.md</doc>
    <test>test_websocket_bridge_consistency.py</test>
    <spec>websocket_agent_integration_critical.xml</spec>
  </references>
</learning>