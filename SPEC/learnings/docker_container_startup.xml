<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <title>Docker Container Startup Critical Fixes - Import and Handler Issues</title>
        <category>infrastructure</category>
        <tags>docker, startup, imports, error-handling, netra-backend, modulenot found, singleton</tags>
        <created>2025-08-29</created>
        <importance>critical</importance>
    </metadata>
    
    <context>
        Three critical issues were preventing the netra_backend Docker container from starting successfully,
        all related to import path errors and object instantiation problems in the application initialization.
        These issues were discovered during container startup diagnostics and required immediate resolution
        to restore basic system functionality.
    </context>
    
    <issues_fixed>
        <issue id="1" severity="critical">
            <title>ModuleNotFoundError for 'netra_backend.app.llm.error_classification'</title>
            <description>
                Container startup failed with ModuleNotFoundError when trying to import from
                'netra_backend.app.llm.error_classification' module that does not exist.
            </description>
            <error_message>ModuleNotFoundError: No module named 'netra_backend.app.llm.error_classification'</error_message>
            <root_cause>
                Incorrect import paths in application code attempting to import from non-existent 
                error_classification module in the llm package.
            </root_cause>
            <solution>
                Changed imports to use 'netra_backend.app.core.interfaces_validation' which contains
                the actual validation and error classification functionality.
            </solution>
            <files_affected>
                <file>Multiple files importing from error_classification module</file>
                <change_type>Import path correction</change_type>
            </files_affected>
        </issue>

        <issue id="2" severity="critical">
            <title>ImportError for 'auth_interface' from auth_integration</title>
            <description>
                Container startup failed when attempting to import 'auth_interface' from auth_integration
                module, but this interface does not exist.
            </description>
            <error_message>ImportError: cannot import name 'auth_interface' from 'netra_backend.app.integrations.auth_integration'</error_message>
            <root_cause>
                Code was trying to import a non-existent auth_interface module/class from auth_integration,
                likely due to refactoring that left stale import statements.
            </root_cause>
            <solution>
                Updated imports to use SecurityService and proper validators that actually exist
                in the current codebase architecture.
            </solution>
            <files_affected>
                <file>Files importing auth_interface</file>
                <change_type>Import replacement with existing SecurityService</change_type>
            </files_affected>
        </issue>

        <issue id="3" severity="critical">
            <title>'AgentErrorHandler' object is not callable error</title>
            <description>
                Runtime error occurred where code attempted to instantiate an already-instantiated singleton
                AgentErrorHandler, treating it as a constructor when it was already an instance.
            </description>
            <error_message>'AgentErrorHandler' object is not callable</error_message>
            <root_cause>
                Code was using ExecutionErrorHandler() (with parentheses) attempting to call it as a constructor,
                but ExecutionErrorHandler was already an instantiated singleton object, not a class.
            </root_cause>
            <solution>
                Changed from ExecutionErrorHandler() to ExecutionErrorHandler (without parentheses) to use
                the existing instance rather than attempting to instantiate it.
            </solution>
            <files_affected>
                <file>Files using ExecutionErrorHandler</file>
                <change_type>Remove constructor call parentheses for singleton usage</change_type>
            </files_affected>
        </issue>
    </issues_fixed>
    
    <critical_takeaways>
        <takeaway>ALWAYS verify import paths exist before using them - stale imports from refactoring can break container startup</takeaway>
        <takeaway>Check if modules/classes still exist in their expected locations after major refactoring operations</takeaway>
        <takeaway>Understand singleton patterns - don't attempt to instantiate already-instantiated objects</takeaway>
        <takeaway>Container startup failures often manifest as import or instantiation errors that prevent the application from initializing</takeaway>
        <takeaway>Test container startup after any significant refactoring or import changes to catch these issues early</takeaway>
        <takeaway>Use absolute imports as per SPEC/import_management_architecture.xml to avoid path resolution issues</takeaway>
    </critical_takeaways>
    
    <error_patterns>
        <pattern>
            <name>Stale Import Paths</name>
            <description>Import statements referencing modules that no longer exist or have been moved</description>
            <detection>ModuleNotFoundError during application initialization</detection>
            <prevention>
                - Use IDE refactoring tools that update imports automatically
                - Run import validation scripts before container builds
                - Maintain import path mapping documentation during refactoring
            </prevention>
        </pattern>
        
        <pattern>
            <name>Non-existent Interface Imports</name>
            <description>Attempting to import specific classes/interfaces that don't exist in target modules</description>
            <detection>ImportError with "cannot import name" message</detection>
            <prevention>
                - Verify interface/class names exist in target modules
                - Use explicit from X import Y validation
                - Check module __all__ exports if defined
            </prevention>
        </pattern>
        
        <pattern>
            <name>Singleton Instantiation Confusion</name>
            <description>Treating singleton instances as constructors and attempting to call them</description>
            <detection>"object is not callable" runtime error</detection>
            <prevention>
                - Document singleton patterns clearly in code
                - Use type hints to distinguish between classes and instances
                - Establish naming conventions for singleton instances vs classes
            </prevention>
        </pattern>
    </error_patterns>

    <debugging_approach>
        <step order="1">
            <action>Check container logs immediately after startup failure</action>
            <command>docker logs netra-backend --tail 50</command>
            <purpose>Identify the exact error message and stack trace</purpose>
        </step>
        
        <step order="2">
            <action>Verify all import paths exist</action>
            <method>Use find/grep to locate referenced modules and classes</method>
            <purpose>Confirm import targets actually exist in the codebase</purpose>
        </step>
        
        <step order="3">
            <action>Check for singleton vs constructor usage</action>
            <method>Look for usage patterns with parentheses on objects that should be instances</method>
            <purpose>Identify instantiation attempts on singleton objects</purpose>
        </step>
        
        <step order="4">
            <action>Test imports in isolation</action>
            <method>Run python -c "from module import class" for each problematic import</method>
            <purpose>Isolate which specific imports are failing</purpose>
        </step>
        
        <step order="5">
            <action>Validate container startup after fixes</action>
            <command>docker-compose up netra-backend</command>
            <purpose>Confirm fixes resolve startup issues</purpose>
        </step>
    </debugging_approach>
    
    <prevention_strategies>
        <strategy>
            <name>Pre-build Import Validation</name>
            <description>
                Create automated scripts to validate all import statements before building containers.
                This catches stale imports before they reach production.
            </description>
            <implementation>
                Add import validation to the build pipeline using AST parsing to verify
                all imported modules and classes exist.
            </implementation>
        </strategy>
        
        <strategy>
            <name>Singleton Pattern Documentation</name>
            <description>
                Clearly document and consistently implement singleton patterns to avoid
                instantiation confusion.
            </description>
            <implementation>
                Use type hints, naming conventions, and code comments to distinguish
                between singleton instances and constructable classes.
            </implementation>
        </strategy>
        
        <strategy>
            <name>Refactoring Import Tracking</name>
            <description>
                During major refactoring, maintain a mapping of old->new import paths
                and systematically update all references.
            </description>
            <implementation>
                Use automated refactoring tools and create migration scripts that
                update imports across the entire codebase atomically.
            </implementation>
        </strategy>
        
        <strategy>
            <name>Container Startup Health Checks</name>
            <description>
                Add health check endpoints that verify critical components can be imported
                and instantiated properly during container startup.
            </description>
            <implementation>
                Create /health/startup endpoint that tests critical import paths and
                object instantiation before declaring the container ready.
            </implementation>
        </strategy>
    </prevention_strategies>
    
    <testing_validation>
        <test_case>
            <name>Container Startup Success</name>
            <description>Verify container starts without import or instantiation errors</description>
            <command>docker-compose up netra-backend &amp;&amp; curl -f http://localhost:8000/health</command>
            <expected_result>Container starts successfully and health check passes</expected_result>
        </test_case>
        
        <test_case>
            <name>Import Path Validation</name>
            <description>Test all critical import paths work correctly</description>
            <method>Run Python import tests for each fixed import path</method>
            <expected_result>All imports resolve without ModuleNotFoundError</expected_result>
        </test_case>
        
        <test_case>
            <name>Singleton Usage Validation</name>
            <description>Verify singleton objects are used as instances, not constructors</description>
            <method>Check all ExecutionErrorHandler usage patterns</method>
            <expected_result>No "object is not callable" errors during runtime</expected_result>
        </test_case>
    </testing_validation>
    
    <related_specs>
        <spec>SPEC/import_management_architecture.xml</spec>
        <spec>SPEC/docker_service_commands.xml</spec>
        <spec>SPEC/learnings/docker_error_fixes_20250828.xml</spec>
        <spec>SPEC/core.xml</spec>
    </related_specs>
</learning>