<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <title>Staging JWT Secrets and GCP Secret Manager Integration Fix</title>
        <date>2025-08-29</date>
        <severity>CRITICAL</severity>
        <category>Security/Deployment</category>
        <affected_services>netra_backend, auth_service</affected_services>
        <business_impact>$12K MRR at risk from staging authentication failures</business_impact>
    </metadata>

    <problem>
        <description>
            Staging environment experiencing JWT authentication failures due to:
            1. GCP Secret Manager import causing deployment failures
            2. Inconsistent JWT secret loading across services
            3. Missing fallback to environment variables when GCP is unavailable
        </description>
        
        <root_cause>
            The database.py module imports SecretManager from secrets.py at line 255,
            which in turn imports google.cloud.secretmanager. This import fails during
            deployment when the GCP SDK is not available, causing the entire module
            to fail to load.
        </root_cause>
        
        <symptoms>
            - JWT token validation failures in staging
            - 401 Unauthorized errors on all authenticated endpoints
            - Deployment failures with ImportError for google.cloud.secretmanager
            - Services unable to start due to configuration module import failures
        </symptoms>
    </problem>

    <solution>
        <approach>
            1. Make GCP Secret Manager import conditional and lazy-loaded
            2. Ensure environment variables are checked first before GCP
            3. Add proper exception handling for GCP unavailability
            4. Create regression test suite to prevent recurrence
        </approach>

        <implementation>
            <step number="1">
                <action>Refactor _get_clickhouse_password in database.py</action>
                <details>
                    Move the SecretManager import inside the try block to make it lazy.
                    This prevents import failures when GCP SDK is not available.
                </details>
                <code><![CDATA[
def _get_clickhouse_password(self) -> str:
    """Get ClickHouse password from environment or GCP Secret Manager."""
    # First try environment variable
    password = self._env.get("CLICKHOUSE_PASSWORD", "")
    
    # If no password from env and in staging/production, try GCP Secret Manager
    if not password and self._environment in ["staging", "production"]:
        try:
            # Lazy import to prevent deployment failures
            from netra_backend.app.core.configuration.secrets import SecretManager
            secret_manager = SecretManager()
            password = secret_manager.get_secret("CLICKHOUSE_PASSWORD") or ""
            if password:
                self._logger.info("Loaded CLICKHOUSE_PASSWORD from GCP Secret Manager")
        except ImportError as e:
            self._logger.warning(f"GCP Secret Manager not available: {e}")
        except Exception as e:
            self._logger.warning(f"Failed to load CLICKHOUSE_PASSWORD from GCP: {e}")
    
    return password
                ]]></code>
            </step>

            <step number="2">
                <action>Update SecretManager to handle GCP unavailability gracefully</action>
                <details>
                    Ensure _fetch_gcp_secrets handles ImportError specifically and
                    returns empty dict instead of raising.
                </details>
            </step>

            <step number="3">
                <action>Environment variable precedence</action>
                <details>
                    Always check environment variables first before attempting
                    GCP Secret Manager access. This provides a fallback mechanism.
                </details>
            </step>
        </implementation>
    </solution>

    <testing>
        <test_suite>netra_backend/tests/regression/test_staging_jwt_secrets.py</test_suite>
        <test_categories>
            - JWT secret consistency validation
            - GCP Secret Manager fallback behavior
            - Environment variable precedence
            - Deployment configuration validation
            - Cross-service integration
        </test_categories>
        <critical_tests>
            - test_gcp_import_failure_does_not_crash
            - test_clickhouse_password_fallback_to_env
            - test_critical_secrets_required_in_staging
            - test_missing_critical_secrets_fails_in_production
        </critical_tests>
    </testing>

    <prevention>
        <guideline number="1">
            <title>Lazy Import Pattern for Optional Dependencies</title>
            <description>
                Always use lazy imports (inside functions) for optional dependencies
                like GCP SDK that may not be available in all environments.
            </description>
        </guideline>

        <guideline number="2">
            <title>Environment Variable First Strategy</title>
            <description>
                Always check environment variables before attempting to use
                external services like GCP Secret Manager. This provides a
                reliable fallback mechanism.
            </description>
        </guideline>

        <guideline number="3">
            <title>Deployment Testing</title>
            <description>
                Test deployment configuration with GCP SDK both present and absent
                to ensure the application can start in both scenarios.
            </description>
        </guideline>
    </prevention>

    <monitoring>
        <metric>JWT validation success rate</metric>
        <metric>Secret loading success/failure logs</metric>
        <metric>Service startup success rate</metric>
        <alert>Critical alert if JWT_SECRET_KEY is missing in staging/production</alert>
    </monitoring>

    <related_specs>
        <spec>unified_environment_management.xml</spec>
        <spec>database_connectivity_architecture.xml</spec>
        <spec>type_safety.xml</spec>
    </related_specs>
</learning>