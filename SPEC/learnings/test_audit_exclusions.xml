<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <title>Test Audit Exclusion Patterns</title>
        <category>testing</category>
        <date>2025-01-21</date>
        <importance>high</importance>
        <tags>testing, audit, dependencies, virtual-environments</tags>
    </metadata>

    <problem>
        <description>
            Test audits and file counting scripts were including dependency files from virtual environments,
            site-packages, and other non-project directories, leading to inflated and misleading metrics.
        </description>
        <example>
            Initial audit reported "3,674 test files" but this included:
            - .venv/Lib/site-packages/ test files from installed packages
            - Virtual environment internal test files
            - Package distribution test files
            
            Actual project test files: ~300-500 (reasonable range)
        </example>
        <impact>
            - Misleading metrics suggesting massive test sprawl
            - Incorrect prioritization of test organization issues
            - Wasted effort analyzing third-party test files
            - False sense of technical debt severity
        </impact>
    </problem>

    <solution>
        <principle>
            Always exclude virtual environment and dependency directories when analyzing project structure.
            Focus analysis on project-owned code only.
        </principle>
        
        <implementation>
            <exclusion_list>
                <!-- Virtual environments -->
                <exclude>.venv</exclude>
                <exclude>venv</exclude>
                <exclude>.env</exclude>
                <exclude>env</exclude>
                
                <!-- Package directories -->
                <exclude>site-packages</exclude>
                <exclude>dist-packages</exclude>
                <exclude>Lib</exclude>
                <exclude>lib</exclude>
                <exclude>lib64</exclude>
                <exclude>Scripts</exclude>
                <exclude>bin</exclude>
                <exclude>include</exclude>
                <exclude>Include</exclude>
                <exclude>share</exclude>
                
                <!-- Build artifacts -->
                <exclude>build</exclude>
                <exclude>dist</exclude>
                <exclude>.tox</exclude>
                
                <!-- Cache directories -->
                <exclude>__pycache__</exclude>
                <exclude>.pytest_cache</exclude>
                <exclude>.mypy_cache</exclude>
                <exclude>.coverage</exclude>
                <exclude>htmlcov</exclude>
                
                <!-- Node modules -->
                <exclude>node_modules</exclude>
                
                <!-- Version control -->
                <exclude>.git</exclude>
            </exclusion_list>
            
            <python_example>
                <![CDATA[
EXCLUDE_DIRS = {
    '.venv', 'venv', '.env', 'env',
    'node_modules', '__pycache__', '.git',
    'site-packages', 'dist-packages',
    'build', 'dist', '.tox', '.pytest_cache',
    '.mypy_cache', '.coverage', 'htmlcov',
    'Lib', 'lib', 'lib64', 'Scripts', 'bin',
    'include', 'Include', 'share'
}

def is_excluded_path(path: Path) -> bool:
    """Check if path should be excluded from analysis"""
    path_parts = set(path.parts)
    return bool(path_parts.intersection(EXCLUDE_DIRS))
                ]]>
            </python_example>
        </implementation>
        
        <validation>
            Check path exclusion is working:
            1. Run: find . -name "*.py" -path "*/test*" | head -20
            2. Verify no .venv/ or site-packages/ paths appear
            3. Confirm count is reasonable (100s not 1000s for most projects)
        </validation>
    </solution>

    <best_practices>
        <practice>
            Always use Path.parts to check all directory components, not just parent directory.
            A file at .venv/deep/nested/test.py should still be excluded.
        </practice>
        
        <practice>
            Include both common variations of directory names (venv, .venv, env, .env).
            Different tools and developers use different conventions.
        </practice>
        
        <practice>
            For cross-platform compatibility, check both case variations where relevant
            (Lib vs lib, Include vs include).
        </practice>
        
        <practice>
            When generating reports, always show the exclusion criteria used
            to make the analysis transparent and reproducible.
        </practice>
    </best_practices>

    <related_issues>
        <issue>Coverage reports including third-party code</issue>
        <issue>Linting tools analyzing virtual environment files</issue>
        <issue>Search results polluted with dependency matches</issue>
        <issue>Git accidentally tracking virtual environment files</issue>
    </related_issues>

    <prevention>
        <step>Add exclusion patterns to all analysis scripts by default</step>
        <step>Document exclusion requirements in script headers</step>
        <step>Create shared utility module for path filtering</step>
        <step>Add pre-commit hook to verify virtual environments aren't tracked</step>
        <step>Include exclusion validation in CI/CD pipeline</step>
    </prevention>
</learning>