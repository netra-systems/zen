<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Startup Optimization Specification</name>
        <type>optimization</type>
        <version>2.0</version>
        <last_updated>2025-08-19</last_updated>
        <description>System startup optimization for clean, fast, and efficient initialization</description>
    </metadata>
    
    <principles>
        <principle>
            <name>Clean Output</name>
            <description>Show only essential information during startup</description>
            <rules>
                <rule>Hide SUCCESS and INFO logs unless --verbose flag is used</rule>
                <rule>Show only ERROR and WARNING logs by default</rule>
                <rule>Display single-line progress indicators for each service</rule>
                <rule>Show final summary with URLs and ports only</rule>
            </rules>
        </principle>
        
        <principle>
            <name>Speed Optimization</name>
            <description>Minimize startup time through parallel operations and caching</description>
            <rules>
                <rule>Parallelize independent service startups</rule>
                <rule>Cache dependency checks (npm, pip, migrations)</rule>
                <rule>Skip unchanged operations (use checksums)</rule>
                <rule>Defer non-critical operations to background</rule>
            </rules>
        </principle>
        
        <principle>
            <name>Progressive Enhancement</name>
            <description>Start minimal services first, enhance progressively</description>
            <rules>
                <rule>Start core services first (auth, backend)</rule>
                <rule>Defer optional services (monitoring, telemetry)</rule>
                <rule>Load heavy operations in background after startup</rule>
                <rule>Show system as ready once core services are up</rule>
            </rules>
        </principle>
    </principles>
    
    <output_modes>
        <mode name="minimal">
            <description>Default mode - cleanest output</description>
            <display>
                <item>Service startup status (single line per service)</item>
                <item>Critical errors only</item>
                <item>Final URLs and ports</item>
                <item>Total startup time</item>
            </display>
            <example>
                âš¡ Starting Netra Apex Development Environment...
                âœ… Auth Service     [Port: 8081]  2.1s
                âœ… Backend Service  [Port: 52869] 3.2s  
                âœ… Frontend Service [Port: 52915] 2.8s
                
                ðŸš€ System Ready (8.1s)
                   Frontend: http://localhost:52915
                   Backend:  http://localhost:52869
                   Auth:     http://localhost:8081
            </example>
        </mode>
        
        <mode name="standard">
            <description>Balanced output with key information</description>
            <display>
                <item>Service startup progress</item>
                <item>Key configuration confirmations</item>
                <item>Warnings and errors</item>
                <item>Service URLs and health endpoints</item>
            </display>
        </mode>
        
        <mode name="verbose">
            <description>Full debug output (current behavior)</description>
            <display>
                <item>All current logging</item>
                <item>Detailed configuration</item>
                <item>All health checks</item>
                <item>Debug information</item>
            </display>
        </mode>
    </output_modes>
    
    <optimizations>
        <optimization>
            <id>parallel-startup</id>
            <name>Parallel Service Initialization</name>
            <description>Start independent services simultaneously</description>
            <implementation>
                <step>Start auth and backend in parallel</step>
                <step>Start frontend once backend is ready</step>
                <step>Use asyncio.gather for parallel operations</step>
            </implementation>
            <expected_gain>30-40% startup time reduction</expected_gain>
        </optimization>
        
        <optimization>
            <id>dependency-caching</id>
            <name>Dependency Check Caching</name>
            <description>Cache dependency states to skip unchanged checks</description>
            <implementation>
                <step>Calculate checksums of package.json, requirements.txt</step>
                <step>Cache installation state with checksums</step>
                <step>Skip npm/pip install if unchanged</step>
                <step>Store cache in .netra_cache directory</step>
            </implementation>
            <expected_gain>2-3 seconds for unchanged dependencies</expected_gain>
        </optimization>
        
        <optimization>
            <id>migration-caching</id>
            <name>Migration State Caching</name>
            <description>Skip migration checks when database is unchanged</description>
            <implementation>
                <step>Store last migration revision in cache</step>
                <step>Quick check current revision</step>
                <step>Skip full migration check if unchanged</step>
            </implementation>
            <expected_gain>1-2 seconds per startup</expected_gain>
        </optimization>
        
        <optimization>
            <id>deferred-operations</id>
            <name>Deferred Non-Critical Operations</name>
            <description>Move non-critical operations to background</description>
            <operations>
                <operation>Database index optimization</operation>
                <operation>Telemetry initialization</operation>
                <operation>Performance monitoring setup</operation>
                <operation>Cache warming</operation>
                <operation>Schema validation (non-blocking)</operation>
            </operations>
            <expected_gain>3-4 seconds immediate gain</expected_gain>
        </optimization>
        
        <optimization>
            <id>log-filtering</id>
            <name>Smart Log Filtering</name>
            <description>Filter logs based on importance and mode</description>
            <filters>
                <filter level="DEBUG">Hide in minimal/standard modes</filter>
                <filter level="INFO">Hide in minimal mode, show summary in standard</filter>
                <filter level="SUCCESS">Show as progress indicator only</filter>
                <filter level="WARNING">Always show but compact format</filter>
                <filter level="ERROR">Always show with full detail</filter>
            </filters>
        </optimization>
    </optimizations>
    
    <startup_sequence>
        <phase name="initialization">
            <duration>0.5s</duration>
            <steps>
                <step>Load environment variables</step>
                <step>Check cache validity</step>
                <step>Determine startup mode</step>
            </steps>
        </phase>
        
        <phase name="parallel_core">
            <duration>3s</duration>
            <parallel>
                <service name="auth">
                    <step>Check dependencies (cached)</step>
                    <step>Start auth service</step>
                    <step>Wait for health check</step>
                </service>
                <service name="backend">
                    <step>Check dependencies (cached)</step>
                    <step>Check migrations (cached)</step>
                    <step>Initialize core services</step>
                    <step>Start backend service</step>
                    <step>Wait for health check</step>
                </service>
            </parallel>
        </phase>
        
        <phase name="frontend">
            <duration>2s</duration>
            <steps>
                <step>Check dependencies (cached)</step>
                <step>Start frontend service</step>
                <step>Wait for compilation</step>
            </steps>
        </phase>
        
        <phase name="background">
            <duration>async</duration>
            <steps>
                <step>Database optimization</step>
                <step>Telemetry setup</step>
                <step>Performance monitoring</step>
                <step>Schema validation</step>
            </steps>
        </phase>
    </startup_sequence>
    
    <configuration>
        <setting name="STARTUP_MODE">
            <default>minimal</default>
            <options>minimal, standard, verbose</options>
            <env_var>NETRA_STARTUP_MODE</env_var>
        </setting>
        
        <setting name="STARTUP_CACHE">
            <default>enabled</default>
            <options>enabled, disabled</options>
            <env_var>NETRA_STARTUP_CACHE</env_var>
        </setting>
        
        <setting name="STARTUP_PARALLEL">
            <default>enabled</default>
            <options>enabled, disabled</options>
            <env_var>NETRA_STARTUP_PARALLEL</env_var>
        </setting>
        
        <setting name="STARTUP_DEFER_NON_CRITICAL">
            <default>enabled</default>
            <options>enabled, disabled</options>
            <env_var>NETRA_STARTUP_DEFER</env_var>
        </setting>
    </configuration>
    
    <implementation_checklist>
        <task status="completed">Update dev_launcher.py with output modes</task>
        <task status="completed">Implement dependency caching system (via CacheManager)</task>
        <task status="completed">Add parallel startup logic (OptimizedStartupOrchestrator)</task>
        <task status="completed">Create log filtering system (LogFilter class)</task>
        <task status="completed">Move non-critical operations to background</task>
        <task status="completed">Add startup mode CLI arguments (--mode, --minimal, --standard)</task>
        <task status="completed">Update logging configuration</task>
        <task status="completed">Create cache management utilities</task>
    </implementation_checklist>
    
    <implementation_details>
        <files_created>
            <file path="dev_launcher/log_filter.py">Smart log filtering system</file>
            <file path="SPEC/learnings/startup_optimization.xml">Optimization specification</file>
        </files_created>
        
        <files_modified>
            <file path="dev_launcher/launcher.py">Added startup mode support</file>
            <file path="dev_launcher/optimized_startup.py">Integrated progress tracker</file>
            <file path="dev_launcher/__main__.py">Added CLI arguments for modes</file>
            <file path="dev_launcher/config.py">Added startup_mode configuration</file>
        </files_modified>
        
        <cli_usage>
            <command>python scripts/dev_launcher.py</command>
            <description>Default minimal mode - cleanest output</description>
            
            <command>python scripts/dev_launcher.py --standard</command>
            <description>Standard mode - balanced output</description>
            
            <command>python scripts/dev_launcher.py --verbose</command>
            <description>Verbose mode - full debug output</description>
            
            <command>python scripts/dev_launcher.py --mode minimal</command>
            <description>Explicit mode selection</description>
        </cli_usage>
    </implementation_details>
    
    <metrics>
        <target name="startup_time_minimal">5 seconds</target>
        <target name="startup_time_standard">7 seconds</target>
        <target name="log_lines_minimal">10 lines</target>
        <target name="log_lines_standard">50 lines</target>
        <target name="parallel_efficiency">70% time reduction</target>
    </metrics>
    
    <references>
        <reference>scripts/dev_launcher.py</reference>
        <reference>app/startup_module.py</reference>
        <reference>app/core/unified_logging.py</reference>
        <reference>SPEC/learnings/startup.xml</reference>
    </references>
</specification>