<?xml version="1.0" encoding="UTF-8"?>
<learnings>
    <metadata>
        <category>Context Optimization</category>
        <created>2025-01-17</created>
        <last_updated>2025-01-17</last_updated>
        <business_impact>$3,500/month cost savings</business_impact>
    </metadata>
    
    <learning id="context-bloat-test-files">
        <issue>Test files averaging 550+ lines causing 60% context waste</issue>
        <root_cause>No modularization in test structure</root_cause>
        <solution>
            <step>Split test files by concern (setup, execution, validation)</step>
            <step>Extract shared test utilities to helpers</step>
            <step>Keep test files under 150 lines</step>
        </solution>
        <prevention>Enforce test file size limits in CI/CD</prevention>
        <impact>Reduces test context usage by 50%</impact>
    </learning>
    
    <learning id="context-bloat-long-functions">
        <issue>Functions with 60+ lines requiring full file context</issue>
        <root_cause>Complex business logic in single functions</root_cause>
        <solution>
            <step>Apply 8-line function rule strictly</step>
            <step>Use function composition pattern</step>
            <step>Extract complex logic to helper modules</step>
        </solution>
        <prevention>Pre-commit hooks blocking functions over 8 lines</prevention>
        <impact>4.4x reduction in function context requirements</impact>
    </learning>
    
    <learning id="context-waste-config-sprawl">
        <issue>Multiple config files with overlapping functionality</issue>
        <root_cause>Unplanned config evolution</root_cause>
        <solution>
            <step>Consolidate to single config.py</step>
            <step>Use environment-specific overrides</step>
            <step>Delete redundant config files</step>
        </solution>
        <prevention>Single source of truth for configuration</prevention>
        <impact>Eliminates 5-10 file loads per request</impact>
    </learning>
    
    <learning id="context-waste-auth-modules">
        <issue>Auth modules scattered across multiple directories</issue>
        <root_cause>Feature-based organization instead of domain-based</root_cause>
        <solution>
            <step>Consolidate all auth to app/auth/</step>
            <step>Create clear auth interfaces</step>
            <step>Remove duplicate auth implementations</step>
        </solution>
        <prevention>Domain-driven module organization</prevention>
        <impact>Reduces auth context by 70%</impact>
    </learning>
    
    <learning id="context-efficiency-monitoring">
        <issue>No visibility into context usage patterns</issue>
        <root_cause>Lack of context-aware tooling</root_cause>
        <solution>
            <step>Implement context efficiency metrics</step>
            <step>Create context usage dashboard</step>
            <step>Add context budgets per module</step>
        </solution>
        <prevention>Weekly context efficiency reports</prevention>
        <impact>Proactive identification of context issues</impact>
    </learning>
    
    <learning id="context-optimization-roi">
        <issue>65% of LLM context wasted on preventable issues</issue>
        <root_cause>No context-aware development practices</root_cause>
        <solution>
            <step>Enforce 300/8 limits absolutely</step>
            <step>Delete all dead code and test stubs</step>
            <step>Implement progressive loading</step>
        </solution>
        <prevention>Context optimization in code review checklist</prevention>
        <impact>$3,500/month API cost reduction</impact>
    </learning>
    
    <learning id="context-heavy-imports">
        <issue>Files with 20+ imports forcing multi-file loads</issue>
        <root_cause>God objects and utility dumps</root_cause>
        <solution>
            <step>Limit imports to 15 per file</step>
            <step>Use lazy imports for optional features</step>
            <step>Split utility modules by domain</step>
        </solution>
        <prevention>Import count warnings in linting</prevention>
        <impact>30% reduction in cascading imports</impact>
    </learning>
    
    <learning id="context-waste-superseded-files">
        <issue>Superseded files still in codebase consuming context</issue>
        <root_cause>Fear of deleting "might be useful" code</root_cause>
        <solution>
            <step>Delete all files with SUPERSEDED in name</step>
            <step>Remove commented-out code blocks</step>
            <step>Trust version control for history</step>
        </solution>
        <prevention>Automated detection of unused code</prevention>
        <impact>Immediate 10% context reduction</impact>
    </learning>
    
    <learning id="context-optimization-emergency">
        <issue>Context efficiency dropped below 25% causing API cost spike</issue>
        <root_cause>Unchecked file growth over time</root_cause>
        <solution>
            <step>Emergency audit of top 20 largest files</step>
            <step>Immediate splitting of critical violations</step>
            <step>Freeze features until 50% efficiency</step>
        </solution>
        <prevention>Daily context efficiency monitoring</prevention>
        <impact>Prevents $500+ daily API cost spikes</impact>
    </learning>
    
    <learning id="context-aware-testing">
        <issue>Test execution loading entire codebase unnecessarily</issue>
        <root_cause>Monolithic test runner configuration</root_cause>
        <solution>
            <step>Implement context-aware test discovery</step>
            <step>Load only required modules per test</step>
            <step>Use test categories for focused runs</step>
        </solution>
        <prevention>Modular test architecture</prevention>
        <impact>80% faster test execution with less context</impact>
    </learning>
</learnings>