<?xml version="1.0" encoding="UTF-8"?>
<spec>
  <title>ExecutionContext Hashable Type Error Prevention</title>
  <category>Error Prevention</category>
  <priority>CRITICAL</priority>
  <last_updated>2025-08-18</last_updated>
  
  <summary>
    ExecutionContext is now hashable after adding __hash__ and __eq__ methods,
    allowing it to be used as dictionary keys or in sets without errors.
  </summary>
  
  <problem>
    <description>
      ExecutionContext was not hashable by default, causing TypeError when
      used as a dictionary key or set member.
    </description>
    
    <error_message>
      [BACKEND] ‚ùå ERROR | app.agents.base.executor:_handle_execution_failure:143 | 
      Execution failed for websocket_connection: unhashable type: 'ExecutionContext'
    </error_message>
    
    <root_cause>
      ExecutionContext lacked __hash__ and __eq__ methods, making it unhashable.
      This prevented its use in dictionaries as keys or in sets.
    </root_cause>
  </problem>
  
  <solution>
    <fix location="app/agents/base/interface.py">
      <description>
        Added __hash__ and __eq__ methods to ExecutionContext dataclass
        to make it properly hashable. This allows ExecutionContext to be
        used as dictionary keys or in sets without errors.
      </description>
      <code>
        def __hash__(self):
            """Make ExecutionContext hashable using run_id and agent_name."""
            return hash((self.run_id, self.agent_name))
        
        def __eq__(self, other):
            """Compare ExecutionContext objects by run_id and agent_name."""
            if not isinstance(other, ExecutionContext):
                return False
            return self.run_id == other.run_id and self.agent_name == other.agent_name
      </code>
    </fix>
  </solution>
  
  <patterns>
    <pattern type="GOOD">
      <description>ExecutionContext can now be used as dictionary key (after fix)</description>
      <code>
        # NOW WORKS - ExecutionContext is hashable
        cache[context] = "value"
        active_contexts = {context: data}
      </code>
    </pattern>
    
    <pattern type="GOOD">
      <description>ExecutionContext can be added to sets</description>
      <code>
        processed_contexts = {context1, context2}
        if context not in processed_contexts:
            processed_contexts.add(context)
      </code>
    </pattern>
    
    <pattern type="GOOD">
      <description>Use context.run_id for simple key needs</description>
      <code>
        self._active_executions[context.run_id] = time.time()
      </code>
    </pattern>
    
    <pattern type="IMPORTANT">
      <description>Hash is based on run_id and agent_name only</description>
      <code>
        # Two contexts with same run_id and agent_name are equal
        # even if other fields differ
        ctx1 = ExecutionContext(run_id="123", agent_name="agent", state=state1)
        ctx2 = ExecutionContext(run_id="123", agent_name="agent", state=state2)
        assert ctx1 == ctx2
        assert hash(ctx1) == hash(ctx2)
      </code>
    </pattern>
  </patterns>
  
  <guidelines>
    <guideline>
      ExecutionContext is now hashable and can be used as dict keys or in sets
    </guideline>
    <guideline>
      Hash is based on (run_id, agent_name) tuple for uniqueness
    </guideline>
    <guideline>
      For other dataclasses that need to be hashable, add __hash__ and __eq__ methods
    </guideline>
    <guideline>
      Consider which fields should be part of the hash for equality comparison
    </guideline>
    <guideline>
      Use frozen=True on dataclasses if they should be immutable and hashable by default
    </guideline>
  </guidelines>
  
  <affected_areas>
    <area>app/agents/base/error_handler.py - cache_fallback_data method</area>
    <area>app/agents/base/monitoring.py - _active_executions tracking</area>
    <area>app/websocket/message_router.py - routing context storage</area>
    <area>app/agents/mcp_integration/context_manager.py - active contexts</area>
  </affected_areas>
  
  <testing>
    <test_file>app/tests/critical/test_execution_context_hashable_regression.py</test_file>
    <test_cases>
      <test>test_error_handler_cache_fallback_no_hashable_context</test>
      <test>test_execution_monitor_doesnt_use_context_as_key</test>
      <test>test_dataclass_serialization_instead_of_direct_storage</test>
      <test>test_websocket_connection_executor_context_handling</test>
      <test>test_mcp_context_manager_storage</test>
      <test>test_fixed_cache_fallback_data_method</test>
    </test_cases>
  </testing>
  
  <business_value>
    Prevents runtime crashes that would cause service interruptions and degrade
    customer experience. Critical for maintaining platform stability.
  </business_value>
  
  <related_specs>
    <spec>type_safety.xml</spec>
    <spec>conventions.xml</spec>
    <spec>anti_regression.xml</spec>
  </related_specs>
</spec>