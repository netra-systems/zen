<?xml version="1.0" encoding="UTF-8"?>
<learnings category="testing" subcategory="imports">
    <metadata>
        <created>2025-08-21</created>
        <impact>high</impact>
        <systems>testing, imports, auth</systems>
    </metadata>

    <learning id="test-imports-no-app-prefix">
        <title>Test imports must not use app. prefix</title>
        <problem>
            Tests failing with ModuleNotFoundError: No module named 'app.core.auth'
            when imports use "from app.module import ..." pattern
        </problem>
        <root_cause>
            When pytest runs from within the app directory, the app package
            is not in the Python path as a parent package. Tests run with
            app as the root directory.
        </root_cause>
        <solution>
            Remove "app." prefix from all test imports:
            - Change: from app.db.models_postgres import User
            - To: from db.models_postgres import User
        </solution>
        <prevention>
            Always run tests from app directory and use absolute imports
            without the app prefix
        </prevention>
    </learning>

    <learning id="auth-service-endpoints">
        <title>Auth service uses /auth prefix not /api/v1/auth</title>
        <problem>
            Tests failing with 404 errors when calling auth service at
            /api/v1/auth/register or /api/v1/auth/login
        </problem>
        <root_cause>
            Auth service router configured with prefix="/auth" not "/api/v1/auth"
            Router definition: router = APIRouter(prefix="/auth", tags=["authentication"])
        </root_cause>
        <solution>
            Update all auth service calls to use correct prefix:
            - Change: http://localhost:8081/api/v1/auth/login
            - To: http://localhost:8081/auth/login
        </solution>
        <prevention>
            Document service endpoints clearly and maintain consistency
            between services
        </prevention>
    </learning>

    <learning id="auth-no-register-endpoint">
        <title>Auth service has no register endpoint</title>
        <problem>
            Tests trying to register users via /auth/register endpoint
            which returns 404
        </problem>
        <root_cause>
            Auth service is OAuth-focused and doesn't handle user registration.
            Registration handled by main app or OAuth providers.
            Available endpoints: login, logout, validate, refresh, dev/login
        </root_cause>
        <solution>
            For testing, use /auth/dev/login endpoint which creates/uses
            a development user automatically without registration
        </solution>
        <prevention>
            Design tests to work with available endpoints, use dev endpoints
            for testing scenarios
        </prevention>
    </learning>


    <learning id="dev-login-database-requirement">
        <title>Dev login requires initialized auth database</title>
        <problem>
            /auth/dev/login returns 500 with error:
            sqlite3.OperationalError: no such table: auth_users
        </problem>
        <root_cause>
            Auth service dev login tries to query/create users in auth_users
            table but database tables not initialized
        </root_cause>
        <solution>
            Ensure auth service database is initialized before running tests:
            - Run migrations for auth service
            - Or mock the database layer for tests
        </solution>
        <prevention>
            Include database setup in test fixtures or use in-memory
            test databases
        </prevention>
    </learning>

    <learning id="test-environment-setup">
        <title>Test environment requires proper PYTHONPATH</title>
        <problem>
            Tests cannot import app modules when PYTHONPATH not set correctly
        </problem>
        <root_cause>
            Windows environment variable %PYTHONPATH% not expanding properly
            in shell commands
        </root_cause>
        <solution>
            Set PYTHONPATH explicitly when running tests:
            set PYTHONPATH=C:\path\to\netra-core-generation-1\app
        </solution>
        <prevention>
            Use pytest.ini or setup.cfg to configure test paths consistently
        </prevention>
    </learning>

    <learning id="pydantic-dll-issues">
        <title>Pydantic DLL loading issues on Windows</title>
        <problem>
            ImportError: DLL load failed while importing _pydantic_core
        </problem>
        <root_cause>
            Pydantic binary compatibility issues or corrupted installation
            on Windows with mixed Python environments
        </root_cause>
        <solution>
            Reinstall pydantic and pydantic-core:
            pip uninstall pydantic pydantic-core -y
            pip install pydantic pydantic-core --force-reinstall
        </solution>
        <prevention>
            Use virtual environments consistently and avoid mixing
            conda and pip packages
        </prevention>
    </learning>

    <learning id="auth-token-validation">
        <title>Token validation uses separate endpoint</title>
        <problem>
            Tests trying to use TokenValidator class that doesn't exist
            in the refactored codebase
        </problem>
        <root_cause>
            Old test code referencing classes that were refactored.
            Token validation now done via /auth/validate endpoint
        </root_cause>
        <solution>
            Use auth service endpoints for validation:
            POST /auth/validate with {"token": access_token}
        </solution>
        <prevention>
            Keep tests updated when refactoring authentication logic
        </prevention>
    </learning>

    <summary>
        Key testing fixes required:
        1. Remove app. prefix from all test imports
        2. Use correct auth service endpoints (/auth not /api/v1/auth)
        3. Use dev login for testing instead of registration
        4. Use absolute imports with service namespace pattern
        5. Ensure database initialization for auth service
        6. Set proper PYTHONPATH for test execution
        7. Handle pydantic installation issues on Windows
        8. Update tests to use current API endpoints
    </summary>
</learnings>