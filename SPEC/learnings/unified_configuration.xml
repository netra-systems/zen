<?xml version="1.0" encoding="UTF-8"?>
<learnings category="configuration" priority="CRITICAL">
    <metadata>
        <title>Unified Configuration System Learnings</title>
        <description>Critical learnings from migrating to unified configuration and eliminating 110+ duplicate configuration files</description>
        <date>2025-08-21</date>
        <impact>$12K MRR protected from configuration inconsistencies</impact>
        <tags>configuration, hot-reload, single-source-of-truth, enterprise</tags>
    </metadata>

    <learning id="config-unification" severity="CRITICAL">
        <title>Configuration Must Have Single Source of Truth</title>
        <problem>
            110+ files had configuration duplications causing:
            - $12K MRR loss from configuration inconsistencies
            - Enterprise customers experiencing data reliability issues
            - Scattered secret management across codebase
            - Impossible to maintain consistency
        </problem>
        <solution>
            Unified configuration system at /netra_backend/app/core/configuration/:
            - Single ConfigurationManager orchestrating all config
            - Priority-based loading (env vars > GCP secrets > local > defaults)
            - Centralized validation ensuring integrity
            - Hot reload capability for zero-downtime updates
        </solution>
        <implementation>
            ```python
            # ALWAYS use this pattern
            from netra_backend.app.config import get_config, reload_config, validate_configuration
            
            config = get_config()  # Single source of truth
            is_valid, issues = validate_configuration()  # Validate integrity
            reload_config()  # Hot reload when needed
            ```
        </implementation>
        <files_removed>
            - netra_backend/app/config_environment.py (DELETED)
            - netra_backend/app/config_loader.py (DELETED)
            - netra_backend/app/config_manager.py (DELETED)
            - netra_backend/app/config_envvars.py (DELETED)
        </files_removed>
        <prevention>
            NEVER create separate configuration files. ALL configuration MUST go through the unified system.
        </prevention>
    </learning>

    <learning id="hot-reload" severity="HIGH">
        <title>Hot Reload Enables Zero-Downtime Updates</title>
        <problem>
            Configuration changes required service restarts causing:
            - Customer-facing downtime
            - Lost transactions during restarts
            - Complex deployment procedures
            - Risk of configuration drift
        </problem>
        <solution>
            Hot reload system enabling configuration updates without restart:
            - Environment variable CONFIG_HOT_RELOAD=true
            - Atomic configuration updates
            - Validation before applying changes
            - Automatic rollback on failure
        </solution>
        <implementation>
            ```python
            # Enable hot reload
            os.environ['CONFIG_HOT_RELOAD'] = 'true'
            
            # Update configuration source (env var, GCP secret, etc.)
            os.environ['DATABASE_URL'] = 'new-database-url'
            
            # Trigger reload
            from netra_backend.app.config import reload_config
            reload_config()
            
            # Configuration updated without restart!
            ```
        </implementation>
        <best_practices>
            - Always validate configuration before reload
            - Monitor reload frequency (max 1 per minute)
            - Test configuration changes in staging first
            - Keep backup of working configuration
        </best_practices>
    </learning>

    <learning id="config-validation" severity="HIGH">
        <title>Configuration Must Be Validated</title>
        <problem>
            Invalid configurations caused runtime failures:
            - Database connection errors
            - Missing required secrets
            - Invalid URLs and endpoints
            - SSL/TLS configuration issues
        </problem>
        <solution>
            Comprehensive validation system:
            - Health score calculation (0-100)
            - Critical validation rules per environment
            - Automatic detection of configuration issues
            - Detailed error reporting
        </solution>
        <implementation>
            ```python
            from netra_backend.app.config import validate_configuration
            
            is_valid, issues = validate_configuration()
            if not is_valid:
                for issue in issues:
                    logger.error(f"Config issue: {issue}")
                raise ValueError("Invalid configuration")
            ```
        </implementation>
        <validation_rules>
            - Database URLs must be valid and accessible
            - Required secrets must be present
            - No localhost URLs in production
            - SSL required in staging/production
            - JWT keys must meet length requirements
        </validation_rules>
    </learning>

    <learning id="secret-management" severity="CRITICAL">
        <title>Secrets Must Use Unified Management</title>
        <problem>
            Scattered secret management caused:
            - Secrets accidentally committed to git
            - Inconsistent secret access patterns
            - No rotation capability
            - Security vulnerabilities
        </problem>
        <solution>
            Centralized SecretManager with:
            - GCP Secret Manager integration (staging/production)
            - Local encrypted files (development only)
            - Automatic secret redaction in logs
            - Hot rotation capability
        </solution>
        <implementation>
            ```python
            from netra_backend.app.core.configuration.secrets import SecretManager
            
            secret_manager = SecretManager()
            
            # Get secret (automatically uses right source)
            api_key = secret_manager.get_secret("gemini-api-key")
            
            # Rotate secret (if supported)
            success = secret_manager.rotate_secret("gemini-api-key")
            ```
        </implementation>
        <required_secrets>
            - gemini-api-key
            - google-client-id
            - google-client-secret
            - jwt-secret-key
            - fernet-key
            - clickhouse-default-password
        </required_secrets>
    </learning>

    <learning id="environment-detection" severity="HIGH">
        <title>Environment Detection Must Be Automatic</title>
        <problem>
            Manual environment configuration caused:
            - Production configs used in development
            - Development configs deployed to production
            - Inconsistent behavior across environments
        </problem>
        <solution>
            Automatic environment detection:
            - GCP metadata service detection
            - K8s namespace detection
            - Environment variable fallback
            - Validation of environment-specific rules
        </solution>
        <implementation>
            ```python
            from netra_backend.app.config import get_config
            
            config = get_config()
            environment = config.environment  # Automatically detected
            
            # Environment-specific behavior
            if config.environment == "production":
                # Production-only logic
                assert config.ssl_required
                assert "localhost" not in config.database_url
            ```
        </implementation>
    </learning>

    <learning id="config-architecture" severity="HIGH">
        <title>Configuration Architecture Must Be Modular</title>
        <problem>
            Monolithic configuration files became unmaintainable:
            - Files exceeding 1000 lines
            - Circular dependencies
            - Difficult to test
            - Poor separation of concerns
        </problem>
        <solution>
            Modular architecture with strict size limits:
            - base.py: Core orchestration (≤300 lines)
            - database.py: Database configs (≤300 lines)
            - services.py: External services (≤300 lines)
            - secrets.py: Secret management (≤300 lines)
            - validator.py: Validation logic (≤300 lines)
        </solution>
        <enforcement>
            All configuration files MUST stay under 300 lines. Functions must be under 8 lines.
        </enforcement>
    </learning>

    <learning id="import-prevention" severity="CRITICAL">
        <title>Never Import Removed Configuration Files</title>
        <problem>
            Attempts to import removed configuration files cause immediate failures
        </problem>
        <removed_files>
            These files have been PERMANENTLY REMOVED:
            - netra_backend.app.config_environment
            - netra_backend.app.config_loader
            - netra_backend.app.config_manager
            - netra_backend.app.config_envvars
        </removed_files>
        <solution>
            ALWAYS use the unified configuration system:
            ```python
            # CORRECT
            from netra_backend.app.config import get_config
            
            # NEVER use these (files don't exist)
            # from netra_backend.app.config_manager import ConfigManager  # ERROR
            # from netra_backend.app.config_environment import ConfigEnvironment  # ERROR
            ```
        </solution>
    </learning>

    <testing>
        <test_import>
            ```python
            # Test configuration imports
            python scripts/test_imports.py
            ```
        </test_import>
        <test_hot_reload>
            ```python
            # Test hot reload functionality
            from netra_backend.app.config import reload_config
            reload_config()  # Should complete without error
            ```
        </test_hot_reload>
        <test_validation>
            ```python
            # Test configuration validation
            from netra_backend.app.config import validate_configuration
            is_valid, issues = validate_configuration()
            assert is_valid, f"Configuration invalid: {issues}"
            ```
        </test_validation>
    </testing>

    <monitoring>
        <metrics>
            - config_reload_total: Number of reloads
            - config_reload_duration_seconds: Reload time
            - config_reload_errors_total: Failed reloads
            - config_validation_score: Health score (0-100)
        </metrics>
        <alerts>
            - Alert on validation score < 70
            - Alert on reload failures
            - Alert on missing required secrets
            - Alert on excessive reload frequency
        </alerts>
    </monitoring>

    <references>
        <doc path="/netra_backend/app/core/configuration/README.md">Unified configuration documentation</doc>
        <doc path="/docs/configuration-migration.md">Migration guide</doc>
        <doc path="/docs/hot-reload-configuration.md">Hot reload documentation</doc>
        <spec path="/SPEC/unified_configuration_management.xml">Architecture specification</spec>
    </references>
</learnings>