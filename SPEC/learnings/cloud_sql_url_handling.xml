<?xml version="1.0" encoding="UTF-8"?>
<learnings>
  <title>Cloud SQL URL Format Handling - Auth Service Fix</title>
  <date>2025-08-20</date>
  <severity>HIGH</severity>
  <summary>
    Auth service failed to handle Cloud SQL Unix socket URLs correctly due to unnecessary URL manipulation.
    Backend service works correctly by simply converting postgresql:// to postgresql+asyncpg:// without further modifications.
  </summary>
  
  <issue_discovery>
    <symptom>Auth service fails to connect when using Cloud SQL Unix socket format</symptom>
    <initial_assumption>SSL mode incompatibility with asyncpg</initial_assumption>
    <actual_problem>Over-engineering URL conversion logic</actual_problem>
    <discovery_method>
      <step>Compared backend service database connection handling</step>
      <step>Found backend uses simple URL replacement</step>
      <step>Auth service had complex logic removing sslmode parameters</step>
    </discovery_method>
  </issue_discovery>
  
  <root_cause_analysis>
    <incorrect_approach>
      <description>Auth service tried to handle Cloud SQL URLs specially</description>
      <code>
        # WRONG: Unnecessary manipulation
        if "/cloudsql/" in database_url or "?host=/cloudsql/" in database_url:
            database_url = database_url.replace("?sslmode=require", "")
            database_url = database_url.replace("&sslmode=require", "")
        else:
            database_url = database_url.replace("sslmode=", "ssl=")
      </code>
      <issues>
        - Breaks asyncpg connection parameters
        - Inconsistent with backend service
        - Unnecessary complexity
      </issues>
    </incorrect_approach>
    
    <correct_approach>
      <description>Centralized DatabaseURLBuilder handles all URL construction</description>
      <code>
        # CORRECT: Use DatabaseURLBuilder for all URL construction
        from shared.database_url_builder import DatabaseURLBuilder
        
        builder = DatabaseURLBuilder(env_vars)
        
        # Cloud SQL Unix socket connection
        if builder.cloud_sql.is_cloud_sql:
            async_url = builder.cloud_sql.async_url  # Async with asyncpg
            sync_url = builder.cloud_sql.sync_url    # Sync for Alembic
        
        # TCP connection with SSL
        elif builder.tcp.has_config:
            async_url = builder.tcp.async_url_with_ssl  # With SSL for staging/prod
            sync_url = builder.tcp.sync_url_with_ssl    # Sync with SSL
        
        # Auto-selection based on environment
        else:
            url = builder.get_url_for_environment(sync=False)  # Auto-select best URL
      </code>
      <benefits>
        - Single source of truth for all URL patterns
        - Handles URL encoding for special characters in passwords
        - Properly manages SSL parameters for different connection types
        - Environment-aware URL selection
      </benefits>
    </correct_approach>
  </root_cause_analysis>
  
  <cloud_sql_formats>
    <format type="unix_socket">
      <example>postgresql://user:pass@/dbname?host=/cloudsql/project:region:instance</example>
      <description>Uses Unix socket for connection via Cloud SQL proxy</description>
      <usage>Cloud Run services with Cloud SQL proxy sidecar</usage>
    </format>
    
    <format type="unix_socket_with_ssl">
      <example>postgresql://user:pass@/dbname?host=/cloudsql/project:region:instance&sslmode=require</example>
      <description>Unix socket with SSL mode parameter (ignored for Unix sockets)</description>
      <usage>Cloud Run with enforced SSL policies</usage>
    </format>
    
    <format type="public_ip">
      <example>postgresql://user:pass@34.132.142.103:5432/dbname?sslmode=require</example>
      <description>Direct connection to Cloud SQL public IP</description>
      <usage>External applications or authorized networks</usage>
    </format>
    
    <format type="private_ip">
      <example>postgresql://user:pass@10.107.1.3:5432/dbname</example>
      <description>Private IP connection within VPC</description>
      <usage>Internal services on same VPC</usage>
    </format>
  </cloud_sql_formats>
  
  <comprehensive_conversion_matrix>
    <title>Complete Driver/Connection Type Matrix</title>
    
    <scenario name="Sync TCP Connection (Alembic/psycopg2)">
      <input>postgresql://user:pass@host:5432/db?sslmode=require</input>
      <output>postgresql://user:pass@host:5432/db?sslmode=require</output>
      <changes>None - psycopg2 understands sslmode</changes>
    </scenario>
    
    <scenario name="Async TCP Connection (FastAPI/asyncpg)">
      <input>postgresql://user:pass@host:5432/db?sslmode=require</input>
      <output>postgresql+asyncpg://user:pass@host:5432/db?ssl=require</output>
      <changes>Add asyncpg driver, convert sslmode to ssl</changes>
    </scenario>
    
    <scenario name="Sync Unix Socket (Alembic with Cloud SQL)">
      <input>postgresql://user:pass@/db?host=/cloudsql/project:region:instance&sslmode=require</input>
      <output>postgresql://user:pass@/db?host=/cloudsql/project:region:instance</output>
      <changes>Remove ALL SSL parameters for Unix socket</changes>
    </scenario>
    
    <scenario name="Async Unix Socket (FastAPI with Cloud SQL)">
      <input>postgresql://user:pass@/db?host=/cloudsql/project:region:instance&sslmode=require</input>
      <output>postgresql+asyncpg://user:pass@/db?host=/cloudsql/project:region:instance</output>
      <changes>Add asyncpg driver, remove ALL SSL parameters</changes>
    </scenario>
  </comprehensive_conversion_matrix>
  
  <asyncpg_considerations>
    <note>asyncpg handles connection parameters differently than psycopg2</note>
    <critical_distinction>
      <psycopg2>Uses 'sslmode' parameter (sslmode=require)</psycopg2>
      <asyncpg>Uses 'ssl' parameter (ssl=require) - DOES NOT understand sslmode</asyncpg>
      <unix_socket>Neither driver needs SSL params for Unix socket connections</unix_socket>
    </critical_distinction>
    <url_flow>
      <step1>GCP Secret Manager stores URL with sslmode=require</step1>
      <step2>DatabaseManager reads and processes based on use case</step2>
      <step3>Each driver gets the correct format it understands</step3>
    </url_flow>
  </asyncpg_considerations>
  
  <best_practices>
    <practice priority="1">
      <title>Keep URL conversion simple</title>
      <description>
        Only change the scheme from postgresql:// to postgresql+asyncpg://.
        Let the driver handle parameter interpretation.
      </description>
    </practice>
    
    <practice priority="2">
      <title>Maintain consistency across services</title>
      <description>
        All services should handle database URLs the same way.
        Backend and auth service should use identical conversion logic.
      </description>
    </practice>
    
    <practice priority="3">
      <title>Test all URL formats</title>
      <description>
        Test Unix socket, public IP, and private IP formats.
        Include tests with and without SSL parameters.
      </description>
    </practice>
    
    <practice priority="4">
      <title>Use Cloud SQL proxy in production</title>
      <description>
        Prefer Unix socket connections via Cloud SQL proxy for security.
        Avoids exposing database to public internet.
      </description>
    </practice>
  </best_practices>
  
  <testing_requirements>
    <test name="cloud_sql_unix_socket">
      <description>Verify Unix socket URLs work correctly</description>
      <url_format>postgresql://user:pass@/db?host=/cloudsql/project:region:instance</url_format>
    </test>
    
    <test name="regular_postgres">
      <description>Verify standard PostgreSQL URLs work</description>
      <url_format>postgresql://user:pass@host:5432/db</url_format>
    </test>
    
    <test name="heroku_style">
      <description>Verify Heroku-style postgres:// URLs work</description>
      <url_format>postgres://user:pass@host:5432/db</url_format>
    </test>
  </testing_requirements>
  
  <deployment_notes>
    <note type="cloud_run">
      Cloud Run services automatically get Cloud SQL proxy sidecar when configured.
      Use Unix socket format for best performance and security.
    </note>
    
    <note type="local_development">
      For local development, use standard PostgreSQL URLs with host and port.
      Cloud SQL proxy can be run locally for testing Cloud SQL connections.
    </note>
    
    <note type="staging">
      Staging uses Cloud SQL with Unix socket connections.
      #removed-legacyshould be in format: postgresql://user:pass@/db?host=/cloudsql/instance
    </note>
  </deployment_notes>
  
  <action_items>
    <action priority="COMPLETED">
      Updated auth service database URL handling with sslmode to ssl conversion
    </action>
    <action priority="COMPLETED">
      Updated backend service database URL handling to match auth service pattern
    </action>
    <action priority="COMPLETED">
      Added comprehensive tests for all URL formats including SSL mode conversion
    </action>
    <action priority="COMPLETED">
      Deployed updated auth service to staging
    </action>
    <action priority="PENDING">
      Fix incorrect database IP in staging secret (34.68.229.240 is wrong)
    </action>
    <action priority="COMPLETED">
      Extracted common database connection logic to shared.database_url_builder.DatabaseURLBuilder
    </action>
  </action_items>
</learnings>