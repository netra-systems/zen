<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <metadata>
    <title>Auth Refresh Token Complete Fix - Frontend and Backend</title>
    <date>2025-08-29</date>
    <category>authentication</category>
    <severity>critical</severity>
    <services>auth_service, frontend</services>
    <version>2.0</version>
    <update_reason>Added comprehensive backend fix with robust error handling</update_reason>
  </metadata>
  
  <problem>
    <description>
      Auth refresh endpoint returning 422 Unprocessable Content error when frontend attempts to refresh tokens.
      This causes authentication to fail after access token expires, requiring users to log in repeatedly.
    </description>
    
    <symptoms>
      <symptom>HTTP 422 error from POST /auth/refresh endpoint</symptom>
      <symptom>Error message: "refresh_token field is required"</symptom>
      <symptom>Frontend sends empty request body to refresh endpoint</symptom>
      <symptom>Users unable to maintain authenticated sessions</symptom>
    </symptoms>
    
    <root_cause>
      Frontend auth-service-client.ts was not sending the refresh token in the request body.
      The refresh endpoint expects a JSON body with refresh_token field, but frontend was sending
      an empty POST request with only credentials: 'include' for cookies.
    </root_cause>
  </problem>
  
  <solution>
    <changes>
      <change>
        <file>frontend/lib/auth-service-client.ts</file>
        <description>
          Modified refreshToken() method to:
          1. Retrieve refresh_token from localStorage
          2. Send it in JSON request body with Content-Type header
          3. Handle new refresh tokens in response
          4. Clear tokens on 401/422 errors
        </description>
      </change>
      
      <change>
        <file>auth_service/auth_core/routes/auth_routes.py</file>
        <description>
          Completely rewrote refresh_tokens endpoint with:
          1. ROBUST error handling for all edge cases
          2. Support for multiple field name formats (refresh_token, refreshToken, token)
          3. Comprehensive validation (empty body, invalid JSON, missing fields)
          4. Security-conscious logging (truncation of sensitive data)
          5. Clear error messages with error codes and examples
          6. Automatic stripping of accidental "Bearer " prefix
          7. Detailed documentation in docstring
        </description>
      </change>
      
      <change>
        <file>auth_service/tests/test_refresh_token_bug_regression.py</file>
        <description>
          Created comprehensive test suite covering:
          1. Standard field name parsing
          2. CamelCase and legacy field support
          3. Edge cases (empty, null, whitespace tokens)
          4. Error conditions (invalid JSON, wrong content type)
          5. Concurrent request handling
          6. Security tests (token reuse, expiration, tampering)
          7. Backward compatibility tests
        </description>
      </change>
    </changes>
    
    <code_before><![CDATA[
async refreshToken(): Promise<{ access_token: string; refresh_token?: string }> {
  logger.debug('Refreshing access token', { environment: this.environment });
  
  const response = await fetch(this.endpoints.authRefresh, {
    method: 'POST',
    credentials: 'include', // Needed for refresh token cookie
  });
  
  if (!response.ok) {
    throw new Error(`Token refresh failed: ${response.status}`);
  }
  
  const tokens = await response.json();
  logger.info('Token refreshed successfully');
  return tokens;
}
    ]]></code_before>
    
    <code_after><![CDATA[
async refreshToken(): Promise<{ access_token: string; refresh_token?: string }> {
  logger.debug('Refreshing access token', { environment: this.environment });
  
  // Get refresh token from localStorage
  const refreshToken = localStorage.getItem('refresh_token');
  
  if (!refreshToken) {
    throw new Error('No refresh token available');
  }
  
  const response = await fetch(this.endpoints.authRefresh, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    credentials: 'include', // Needed for cookies if any
    body: JSON.stringify({ 
      refresh_token: refreshToken 
    }),
  });
  
  if (!response.ok) {
    // If refresh fails, clear tokens
    if (response.status === 401 || response.status === 422) {
      localStorage.removeItem('refresh_token');
      localStorage.removeItem('jwt_token');
    }
    throw new Error(`Token refresh failed: ${response.status}`);
  }
  
  const tokens = await response.json();
  
  // Update stored refresh token if a new one was provided
  if (tokens.refresh_token) {
    localStorage.setItem('refresh_token', tokens.refresh_token);
  }
  
  logger.info('Token refreshed successfully');
  return tokens;
}
    ]]></code_after>
  </solution>
  
  <testing_requirements>
    <requirement>
      <type>e2e</type>
      <description>Test complete refresh flow from frontend to auth service</description>
      <scenarios>
        <scenario>Successful token refresh with valid refresh token</scenario>
        <scenario>Error handling for missing refresh token</scenario>
        <scenario>Error handling for invalid/expired refresh token</scenario>
        <scenario>Race condition protection for concurrent refresh requests</scenario>
      </scenarios>
    </requirement>
    
    <requirement>
      <type>integration</type>
      <description>Test auth service refresh endpoint integration</description>
      <scenarios>
        <scenario>Accepts refresh_token in request body</scenario>
        <scenario>Accepts refreshToken (camelCase) field name</scenario>
        <scenario>Returns 422 when refresh_token field is missing</scenario>
        <scenario>Returns 401 for invalid/expired tokens</scenario>
      </scenarios>
    </requirement>
    
    <requirement>
      <type>unit</type>
      <description>Test frontend and backend components individually</description>
      <scenarios>
        <scenario>Frontend stores refresh token from OAuth callback</scenario>
        <scenario>Frontend retrieves and sends refresh token correctly</scenario>
        <scenario>Backend validates refresh token format and expiry</scenario>
        <scenario>Backend generates new token pair on successful refresh</scenario>
      </scenarios>
    </requirement>
  </testing_requirements>
  
  <prevention>
    <guideline>Always test token refresh flow end-to-end after auth changes</guideline>
    <guideline>Ensure frontend and backend contract alignment for auth endpoints</guideline>
    <guideline>Add request/response logging for auth endpoints in staging</guideline>
    <guideline>Document expected request format in auth service OpenAPI spec</guideline>
    <guideline>Add health checks that validate auth refresh flow</guideline>
    <guideline>Support multiple field name formats for client compatibility</guideline>
    <guideline>Implement comprehensive error handling with clear error codes</guideline>
    <guideline>Never log full tokens or sensitive data - always truncate</guideline>
    <guideline>Test with different client implementations and edge cases</guideline>
    <guideline>Remove ALL legacy code when fixing issues - maintain SSOT</guideline>
  </prevention>
  
  <backend_error_codes>
    <error_code>
      <code>EMPTY_REQUEST</code>
      <status>400</status>
      <description>Request body is empty</description>
    </error_code>
    <error_code>
      <code>INVALID_JSON</code>
      <status>422</status>
      <description>Invalid JSON in request body</description>
    </error_code>
    <error_code>
      <code>MISSING_REFRESH_TOKEN</code>
      <status>422</status>
      <description>refresh_token field is missing</description>
    </error_code>
    <error_code>
      <code>INVALID_TOKEN_TYPE</code>
      <status>422</status>
      <description>refresh_token must be a string</description>
    </error_code>
    <error_code>
      <code>EMPTY_REFRESH_TOKEN</code>
      <status>422</status>
      <description>refresh_token is empty or whitespace-only</description>
    </error_code>
    <error_code>
      <code>INVALID_REFRESH_TOKEN</code>
      <status>401</status>
      <description>Token is invalid, expired, or already used</description>
    </error_code>
    <error_code>
      <code>REFRESH_SERVICE_ERROR</code>
      <status>500</status>
      <description>Internal service error during refresh</description>
    </error_code>
  </backend_error_codes>
  
  <related_issues>
    <issue>Frontend OAuth callback stores refresh token in localStorage</issue>
    <issue>Auth service accepts multiple field name formats for compatibility</issue>
    <issue>Token storage and retrieval must be consistent across frontend</issue>
    <issue>Race condition protection needed for concurrent refresh requests</issue>
    <issue>Previous similar issues were not fully fixed - need complete remediation</issue>
    <issue>Tests must use real services, not mocks, for proper validation</issue>
  </related_issues>
  
  <cross_references>
    <reference>SPEC/learnings/index.xml</reference>
    <reference>SPEC/learnings/authentication_fixes_2025.xml</reference>
    <reference>SPEC/learnings/auth_refresh_endpoint_field_naming.xml</reference>
    <reference>SPEC/security.xml</reference>
    <reference>SPEC/testing.xml</reference>
  </cross_references>
</learning>