<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <title>ClickHouse SSOT Violation - Critical Remediation</title>
  <date>2025-08-28</date>
  <severity>CRITICAL</severity>
  <category>architecture,database,ssot</category>
  
  <problem>
    <description>
      Discovered SEVERE violation of Single Source of Truth (SSOT) principle with FOUR 
      different ClickHouse client implementations in the codebase, directly violating 
      CLAUDE.md Section 2.1. This created 4x maintenance burden, inconsistent behavior,
      and embedded test logic in production code.
    </description>
    <impact>
      - 4 parallel implementations requiring synchronized updates
      - 834+ lines of duplicate code
      - Test logic embedded in production (_simulate_* methods)
      - Confusion about which client to use
      - Bug fixes needed in multiple places
      - Increased cognitive load for developers
    </impact>
    <root_causes>
      - Lack of awareness when adding new features
      - No automated checks preventing duplicates
      - Evolution without refactoring existing code
      - Test mocking requirements led to production pollution
    </root_causes>
  </problem>
  
  <solution>
    <approach>
      Consolidated all ClickHouse functionality into ONE canonical implementation
      at /netra_backend/app/db/clickhouse.py following SSOT principles.
    </approach>
    <actions>
      <action>Enhanced canonical implementation with all enterprise features</action>
      <action>Removed all duplicate client implementations completely</action>
      <action>Migrated all consumers to use get_clickhouse_client()</action>
      <action>Extracted test logic to proper test fixtures</action>
      <action>Created comprehensive SSOT compliance test suite</action>
      <action>Documented architecture in SPEC/clickhouse_client_architecture.xml</action>
    </actions>
    <files_removed>
      - /netra_backend/app/db/clickhouse_client.py (345 lines)
      - /netra_backend/app/db/client_clickhouse.py (327 lines)
      - /netra_backend/app/agents/data_sub_agent/clickhouse_client.py (162 lines)
    </files_removed>
  </solution>
  
  <prevention>
    <measure>
      <type>Compliance Testing</type>
      <implementation>
        Created test_clickhouse_ssot_compliance.py with comprehensive checks:
        - No duplicate client implementations
        - No test logic in production
        - All imports use canonical client
        - Required features present
        - No direct instantiation
      </implementation>
    </measure>
    <measure>
      <type>Architecture Specification</type>
      <implementation>
        Created SPEC/clickhouse_client_architecture.xml defining:
        - Canonical implementation location
        - Required features and patterns
        - Prohibited patterns
        - Usage examples
        - Migration requirements
      </implementation>
    </measure>
    <measure>
      <type>Automated Checks</type>
      <implementation>
        Added to check_architecture_compliance.py:
        - check_clickhouse_ssot() function
        - Pre-commit hooks to prevent new clients
        - CI/CD pipeline validation
      </implementation>
    </measure>
  </prevention>
  
  <key_insights>
    <insight>
      SSOT violations compound quickly - what starts as a "quick parallel implementation"
      becomes a major technical debt burden requiring hours of remediation.
    </insight>
    <insight>
      Test logic in production is a code smell indicating improper separation of concerns.
      Use dependency injection and proper fixtures instead of embedded mocks.
    </insight>
    <insight>
      Always search for existing implementations before creating new ones. The command
      "Search First, Create Second" from CLAUDE.md Section 2.1 is critical.
    </insight>
    <insight>
      When adding features, extend the existing implementation rather than creating
      a parallel one. This maintains SSOT and prevents divergence.
    </insight>
  </key_insights>
  
  <patterns>
    <pattern>
      <name>Canonical Client Pattern</name>
      <code><![CDATA[
# CORRECT - Use the canonical implementation
from netra_backend.app.db.clickhouse import get_clickhouse_client

async def query_data():
    async with get_clickhouse_client() as client:
        return await client.execute("SELECT * FROM table")
      ]]></code>
    </pattern>
    <pattern>
      <name>Service Pattern (Non-Context)</name>
      <code><![CDATA[
# For services that need persistent connection
from netra_backend.app.db.clickhouse import get_clickhouse_service

class MyService:
    def __init__(self):
        self.clickhouse = get_clickhouse_service()
    
    async def health_check(self):
        return await self.clickhouse.check_health()
      ]]></code>
    </pattern>
  </patterns>
  
  <anti_patterns>
    <anti_pattern>
      <name>Creating New Client Classes</name>
      <example>
        # WRONG - Never create new ClickHouse client classes
        class MyClickHouseClient:
            def __init__(self):
                # This violates SSOT
                pass
      </example>
    </anti_pattern>
    <anti_pattern>
      <name>Direct Instantiation</name>
      <example>
        # WRONG - Never directly instantiate clients
        client = ClickHouseClient()  # Use get_clickhouse_client() instead
      </example>
    </anti_pattern>
    <anti_pattern>
      <name>Test Logic in Production</name>
      <example>
        # WRONG - Never embed test logic in production
        def _simulate_connection():  # Should be in test fixtures
            pass
      </example>
    </anti_pattern>
  </anti_patterns>
  
  <references>
    <reference>CLAUDE.md Section 2.1 - Single Source of Truth (SSOT)</reference>
    <reference>SPEC/clickhouse_client_architecture.xml</reference>
    <reference>clickhouse_audit_report_20250828.md</reference>
    <reference>netra_backend/tests/test_clickhouse_ssot_compliance.py</reference>
  </references>
  
  <metrics>
    <metric name="Lines of duplicate code removed">834+</metric>
    <metric name="Number of implementations consolidated">4 â†’ 1</metric>
    <metric name="Test methods removed from production">12</metric>
    <metric name="Files deleted">3</metric>
    <metric name="Consumers migrated">21</metric>
  </metrics>
  
  <validation_commands>
    <command>python netra_backend/tests/test_clickhouse_ssot_compliance.py</command>
    <command>python scripts/check_architecture_compliance.py</command>
    <command>grep -r "class.*ClickHouse.*Client" --include="*.py" netra_backend/app/</command>
  </validation_commands>
</learning>