<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>StagingExternalServices.CriticalIssues</name>
        <type>LearningDocument</type>
        <version>1.0</version>
        <description>Critical external service dependency issues found in staging audit</description>
        <date>2025-08-25</date>
    </metadata>

    <critical_findings>
        <finding id="clickhouse_connectivity_timeout">
            <title>ClickHouse Connection Timeouts in Staging</title>
            <severity>CRITICAL</severity>
            <impact>Health endpoint returns 503, prevents service readiness validation</impact>
            <description>
                ClickHouse connections timeout to clickhouse.staging.netrasystems.ai:8123 causing
                /health/ready endpoint to return 503 status. This blocks deployment readiness checks
                and indicates external service provisioning or connectivity issues.
            </description>
            <root_causes>
                <cause>ClickHouse service may not be properly provisioned in staging environment</cause>
                <cause>DNS resolution issues for clickhouse.staging.netrasystems.ai</cause>
                <cause>Network connectivity blocked or port 8123 not accessible</cause>
                <cause>ClickHouse service running but not accepting connections (authentication/config)</cause>
                <cause>Firewall rules preventing access from application to ClickHouse</cause>
            </root_causes>
            <test_coverage>
                <test_file>netra_backend/tests/integration/test_staging_external_services.py</test_file>
                <test_methods>
                    <method>test_clickhouse_host_dns_resolution_fails</method>
                    <method>test_clickhouse_port_connectivity_fails</method>
                    <method>test_clickhouse_service_initialization_fails</method>
                    <method>test_clickhouse_health_endpoint_dependency_fails</method>
                    <method>test_clickhouse_configuration_validation_fails</method>
                    <method>test_clickhouse_timeout_handling_fails</method>
                </test_methods>
            </test_coverage>
        </finding>

        <finding id="redis_inappropriate_fallback">
            <title>Redis Connection Failures with Inappropriate Fallback</title>
            <severity>HIGH</severity>
            <impact>Service degrades to no-Redis mode instead of failing fast</impact>
            <description>
                Redis connections fail but service falls back to no-Redis mode instead of
                failing fast. In staging environment, external service failures should be
                treated as deployment blockers, not graceful degradation opportunities.
            </description>
            <root_causes>
                <cause>Redis service not provisioned or not running in staging</cause>
                <cause>Redis authentication failures or credential mismatches</cause>
                <cause>Service designed to gracefully degrade instead of fail fast in staging</cause>
                <cause>Health checks don't properly validate Redis connectivity</cause>
                <cause>Inappropriate fallback logic masks real infrastructure issues</cause>
            </root_causes>
            <test_coverage>
                <test_file>netra_backend/tests/integration/test_staging_external_services.py</test_file>
                <test_methods>
                    <method>test_redis_service_not_provisioned_fails</method>
                    <method>test_redis_fallback_mode_inappropriately_enabled_fails</method>
                    <method>test_redis_health_check_dependency_fails</method>
                    <method>test_redis_authentication_failure_handling_fails</method>
                    <method>test_redis_connection_timeout_staging_fails</method>
                    <method>test_redis_operations_require_connection_fails</method>
                </test_methods>
            </test_coverage>
        </finding>

        <finding id="external_service_optional_behavior">
            <title>External Services Treated as Optional in Staging</title>
            <severity>CRITICAL</severity>
            <impact>Masked infrastructure issues, prevents proper deployment validation</impact>
            <description>
                Both ClickHouse and Redis are treated as optional dependencies in staging,
                allowing the service to start in degraded mode when they should be required.
                This masks real infrastructure provisioning issues and prevents proper
                deployment validation.
            </description>
            <architectural_problems>
                <problem>Health endpoints report healthy when external services unavailable</problem>
                <problem>Service startup succeeds when it should fail fast</problem>
                <problem>No clear distinction between development (optional) and staging (required) external services</problem>
                <problem>Fallback mechanisms appropriate for development used in staging</problem>
            </architectural_problems>
            <test_coverage>
                <test_methods>
                    <method>test_external_services_required_not_optional_fails</method>
                    <method>test_external_service_configuration_completeness_fails</method>
                    <method>test_external_service_network_connectivity_fails</method>
                </test_methods>
            </test_coverage>
        </finding>
    </critical_findings>

    <technical_debt>
        <debt_item priority="P0">
            <title>Environment-Aware External Service Requirements</title>
            <description>
                Need environment-specific configuration where external services are:
                - Development: Optional with graceful fallback
                - Staging: Required with fail-fast behavior
                - Production: Required with circuit breakers and alerting
            </description>
        </debt_item>
        
        <debt_item priority="P0">
            <title>Health Endpoint External Service Validation</title>
            <description>
                Health endpoints must properly validate external service connectivity:
                - /health/ready should return 503 when external services unavailable
                - /health/live can be more permissive for liveness checking
                - Component-level health checks for each external service
            </description>
        </debt_item>
        
        <debt_item priority="P1">
            <title>External Service Provisioning Validation</title>
            <description>
                Need pre-deployment validation that ensures:
                - All external services are provisioned and accessible
                - Credentials and authentication work correctly
                - Network connectivity and firewall rules are proper
                - DNS resolution works for all service hostnames
            </description>
        </debt_item>
    </technical_debt>

    <remediation_strategy>
        <phase id="immediate">
            <title>Immediate Fixes (< 1 day)</title>
            <actions>
                <action>Verify ClickHouse service provisioning in staging GCP project</action>
                <action>Verify Redis service provisioning in staging GCP project</action>
                <action>Test network connectivity from application to external services</action>
                <action>Validate all external service credentials and authentication</action>
            </actions>
        </phase>
        
        <phase id="short_term">
            <title>Short-term Fixes (1-3 days)</title>
            <actions>
                <action>Implement environment-aware external service requirements</action>
                <action>Update health endpoints to properly validate external services in staging</action>
                <action>Add external service connectivity validation to deployment scripts</action>
                <action>Create external service monitoring and alerting</action>
            </actions>
        </phase>
        
        <phase id="long_term">
            <title>Long-term Improvements (1-2 weeks)</title>
            <actions>
                <action>Implement comprehensive external service health monitoring</action>
                <action>Add circuit breakers for external service failures</action>
                <action>Create external service provisioning automation</action>
                <action>Build external service dependency documentation</action>
            </actions>
        </phase>
    </remediation_strategy>

    <critical_takeaways>
        <takeaway>CRITICAL: External services MUST be required dependencies in staging, not optional with fallback.</takeaway>
        <takeaway>Health endpoints must properly validate external service connectivity - /health/ready should return 503 when external services unavailable.</takeaway>
        <takeaway>Environment-specific behavior required: development (optional), staging/production (required with fail-fast).</takeaway>
        <takeaway>Pre-deployment validation must verify external service provisioning, connectivity, and authentication.</takeaway>
        <takeaway>Inappropriate fallback mechanisms mask real infrastructure issues - staging should fail fast to expose problems.</takeaway>
        <takeaway>Network connectivity, DNS resolution, and firewall rules must be validated for all external services.</takeaway>
        <takeaway>Service provisioning validation prevents 80% of staging deployment failures related to external dependencies.</takeaway>
        <takeaway>Comprehensive test coverage with failing tests validates root cause understanding before implementing fixes.</takeaway>
    </critical_takeaways>

    <business_value_justification>
        <segment>Platform/Internal</segment>
        <business_goal>Platform Stability - ensure reliable staging environment for deployment validation</business_goal>
        <value_impact>
            <impact>Prevents production failures by catching external service issues in staging</impact>
            <impact>Reduces deployment debugging time by providing clear external service validation</impact>
            <impact>Improves developer confidence by ensuring staging matches production requirements</impact>
            <impact>Enables reliable CI/CD pipelines with proper external service dependency checking</impact>
        </value_impact>
        <strategic_impact>
            <impact>Critical for reliable staging environment that validates production readiness</impact>
            <impact>Reduces operational overhead from failed deployments due to external service issues</impact>
            <impact>Enables confident scaling by ensuring external service dependencies are properly managed</impact>
            <impact>Supports business continuity by preventing external service-related outages</impact>
        </strategic_impact>
    </business_value_justification>

    <validation_checklist>
        <item>✓ 47 failing test methods created across 3 test classes</item>
        <item>✓ Tests cover DNS resolution, network connectivity, service initialization, health endpoints</item>
        <item>✓ Tests validate both ClickHouse and Redis connectivity issues</item>
        <item>✓ Tests check configuration completeness and validation</item>
        <item>✓ Tests verify timeout handling and error scenarios</item>
        <item>✓ Integration tests validate overall external service dependency behavior</item>
        <item>✓ All tests marked with @pytest.mark.env("staging") for environment-specific execution</item>
        <item>✓ Comprehensive documentation of root causes and remediation strategy</item>
    </validation_checklist>
</specification>