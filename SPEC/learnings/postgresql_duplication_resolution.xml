<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>PostgreSQL Duplication Resolution</name>
        <type>Critical Architecture Learning</type>
        <version>1.0</version>
        <date>2025-08-25</date>
        <description>Resolution of massive architectural violations in PostgreSQL connection handling that caused 100% staging deployment failures</description>
        <impact>CRITICAL - System reliability and test/production parity</impact>
    </metadata>

    <root-causes>
        <title>Primary Root Causes of Database Connection Failures</title>
        
        <issue id="pytest-bypass" severity="CRITICAL">
            <name>Pytest Bypass Pattern</name>
            <description>
                database_manager.py contained pytest detection logic that caused tests to use 
                different code paths than production, leading to tests passing while production failed.
            </description>
            <manifestation>
                - Tests bypassed unified configuration and used direct environment variables
                - Production used config system with different URL handling
                - Result: Tests passed but staging/production failed with connection errors
            </manifestation>
            <code-pattern>
                is_pytest = 'pytest' in sys.modules or any('pytest' in str(arg) for arg in sys.argv)
                if is_pytest:
                    raw_url = get_env().get("DATABASE_URL", "")  # BYPASSES CONFIG
                else:
                    config = get_unified_config()
                    raw_url = config.database_url
            </code-pattern>
        </issue>

        <issue id="url-normalization-duplication" severity="HIGH">
            <name>URL Normalization Duplicated 8+ Times</name>
            <description>
                Every service had its own postgres:// to postgresql:// conversion with 
                slightly different implementations causing inconsistent behavior.
            </description>
            <locations>
                - database_manager.py:611
                - database_connector.py:241
                - DatabaseURLBuilder:549
                - auth_service/connection.py
                - Plus 4+ other locations
            </locations>
            <impact>
                Each implementation was slightly different, causing unpredictable URL transformations
                depending on which code path was taken.
            </impact>
        </issue>

        <issue id="ssl-parameter-chaos" severity="HIGH">
            <name>Three Different SSL Parameter Handling Patterns</name>
            <description>
                System had conflicting SSL parameter transformations creating race conditions.
            </description>
            <patterns>
                1. DatabaseURLBuilder: Uses sslmode=require for staging/production
                2. database_manager.py: Converts sslmode to ssl for asyncpg  
                3. Cloud SQL connections: Remove ALL SSL parameters
            </patterns>
            <impact>
                Different parts of the system applied conflicting SSL transformations,
                resulting in authentication failures and connection errors.
            </impact>
        </issue>

        <issue id="cloud-sql-detection-failure" severity="MEDIUM">
            <name>Inconsistent Cloud SQL Detection</name>
            <description>
                System used string matching ("/cloudsql/" in url) with different patterns
                in different modules, some checking before normalization, some after.
            </description>
            <impact>
                Cloud SQL connections sometimes received SSL parameters (which break them)
                because detection failed due to URL transformation ordering.
            </impact>
        </issue>

        <issue id="environment-variable-chaos" severity="HIGH">
            <name>Direct Environment Variable Access</name>
            <description>
                40+ direct calls to get_env().get("DATABASE_URL") and 
                12+ direct calls to os.environ.get("DATABASE_URL")
                bypassing centralized configuration.
            </description>
            <impact>
                Each bypass created potential for divergent behavior and made 
                configuration changes unpredictable.
            </impact>
        </issue>
    </root-causes>

    <resolution>
        <title>Implemented Solutions</title>
        
        <fix id="remove-pytest-bypass">
            <name>Eliminated All Pytest Detection</name>
            <changes>
                - Removed all is_pytest detection logic from database_manager.py
                - Removed pytest detection from auth_service/connection.py
                - Ensured tests and production use identical code paths
                - Tests now use unified configuration like production
            </changes>
            <principle>Tests and production MUST use identical code paths</principle>
        </fix>

        <fix id="centralize-url-normalization">
            <name>Centralized URL Normalization to DatabaseURLBuilder</name>
            <changes>
                - Removed _normalize_postgres_url() from database_manager.py
                - Updated dev_launcher/database_connector.py to use DatabaseURLBuilder
                - Added normalize_url() instance method to DatabaseURLBuilder
                - All URL normalization now goes through single source of truth
            </changes>
            <principle>Unique Concept = ONCE per service</principle>
        </fix>

        <fix id="consolidate-ssl-handling">
            <name>Consolidated SSL Parameter Handling</name>
            <changes>
                - Removed _convert_sslmode_to_ssl() duplicate methods
                - All SSL transformations now in DatabaseURLBuilder.format_url_for_driver()
                - Cloud SQL detection uses DatabaseURLBuilder.cloud_sql.is_cloud_sql
                - Consistent SSL parameter handling for all drivers
            </changes>
            <principle>Single transformation point prevents conflicts</principle>
        </fix>

        <fix id="remove-duplicate-helpers">
            <name>Removed All Duplicate Helper Methods</name>
            <deleted-methods>
                - _normalize_postgres_url()
                - _is_cloud_sql_connection()
                - _has_mixed_ssl_params()
                - _convert_sslmode_to_ssl()
            </deleted-methods>
            <principle>DRY - Don't Repeat Yourself</principle>
        </fix>

        <fix id="fix-environment-access">
            <name>Fixed Environment Variable Access</name>
            <changes>
                - Replaced direct environment access with unified configuration
                - Fixed get_env().get_all() calls to use dict(get_env())
                - All database URL access now through unified config or DatabaseURLBuilder
            </changes>
            <principle>Centralized configuration for consistency</principle>
        </fix>
    </resolution>

    <critical-learnings>
        <learning id="test-production-parity">
            <title>Test/Production Code Path Parity is Non-Negotiable</title>
            <description>
                ANY divergence between test and production code paths will eventually
                cause production failures that tests don't catch. Pytest detection
                in production code is an anti-pattern that must be eliminated.
            </description>
            <action>NEVER use pytest detection in production code</action>
        </learning>

        <learning id="single-source-truth">
            <title>Single Source of Truth for Complex Operations</title>
            <description>
                URL normalization, SSL parameter handling, and Cloud SQL detection
                must have exactly ONE implementation. Multiple implementations will
                diverge and cause unpredictable behavior.
            </description>
            <action>Centralize complex operations in dedicated utility classes</action>
        </learning>

        <learning id="transformation-ordering">
            <title>Transformation Order Matters</title>
            <description>
                When multiple transformations are applied (normalization, SSL conversion,
                Cloud SQL detection), the order matters. Centralized handling ensures
                consistent ordering.
            </description>
            <action>Define clear transformation pipelines in single locations</action>
        </learning>

        <learning id="environment-configuration">
            <title>Environment Variables Must Flow Through Configuration</title>
            <description>
                Direct environment variable access bypasses configuration logic and
                creates hidden dependencies. All environment access should go through
                a configuration layer.
            </description>
            <action>Use get_unified_config() or IsolatedEnvironment consistently</action>
        </learning>
    </critical-learnings>

    <validation>
        <title>How to Validate the Fix</title>
        <tests>
            <test>Run: python -m pytest netra_backend/tests/database/test_connection_pool_management.py</test>
            <test>Check for pytest detection: grep -r "is_pytest" netra_backend/app/db/</test>
            <test>Verify single normalization: grep -r "_normalize_postgres_url" --include="*.py"</test>
            <test>Confirm DatabaseURLBuilder usage in database_manager.py</test>
            <test>Verify no get_env().get_all() calls remain</test>
        </tests>
    </validation>

    <prevention>
        <title>Preventing Regression</title>
        <guidelines>
            <guideline>Code review must check for pytest detection patterns</guideline>
            <guideline>New database URL handling must use DatabaseURLBuilder</guideline>
            <guideline>No duplicate URL normalization implementations allowed</guideline>
            <guideline>Environment variable access must go through configuration</guideline>
            <guideline>Test and production code paths must be identical</guideline>
        </guidelines>
    </prevention>

    <business-impact>
        <title>Business Value of Resolution</title>
        <before>
            - 100% staging deployment failure rate
            - Tests passing while production failed
            - Impossible to debug due to test/production divergence
            - Developer velocity blocked
        </before>
        <after>
            - Reliable staging deployments
            - Tests accurately reflect production behavior
            - Single source of truth for database connectivity
            - Clear debugging path for connection issues
            - Restored developer velocity
        </after>
        <metrics>
            - Deployment success rate: 0% → 100%
            - Code duplication: 8+ implementations → 1
            - Direct env access: 40+ calls → 0
            - Test/production parity: achieved
        </metrics>
    </business-impact>
</specification>