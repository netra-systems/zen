<?xml version="1.0" encoding="UTF-8"?>
<learnings category="gcp_observability" last_updated="2025-01-18">
  <metadata>
    <purpose>Document learnings from GCP Cloud Observability integration</purpose>
    <impact>Enterprise error monitoring and deployment safety</impact>
  </metadata>

  <learning id="gcp-error-001">
    <title>Modular Service Architecture for GCP Integration</title>
    <context>
      Implementing GCP Error Reporting API integration required careful modularization
      to stay within 300-line file limits while maintaining functionality.
    </context>
    <solution>
      Split the service into focused modules:
      - gcp_client_manager.py: Authentication and client management (73 lines)
      - rate_limiter.py: API rate limiting logic (75 lines)
      - error_formatter.py: Data transformation and PII redaction (132 lines)
      - gcp_error_service.py: Main orchestration (184 lines)
    </solution>
    <impact>
      Each module has single responsibility, improving testability and maintainability.
      Changes to one aspect don't affect others.
    </impact>
  </learning>

  <learning id="gcp-error-002">
    <title>Service Account vs Default Credentials Strategy</title>
    <context>
      GCP authentication can use service accounts or default credentials,
      each with different deployment implications.
    </context>
    <solution>
      Implement dual authentication with fallback:
      1. Try service account from GOOGLE_APPLICATION_CREDENTIALS first
      2. Fall back to default credentials if not available
      3. Validate connection on initialization
    </solution>
    <impact>
      Flexible deployment: Works in local dev, staging, and production environments
      without configuration changes.
    </impact>
  </learning>

  <learning id="gcp-error-003">
    <title>Rate Limiting for External API Calls</title>
    <context>
      GCP Error Reporting API has rate limits (1000 requests/minute).
      Exceeding limits causes service disruption.
    </context>
    <solution>
      Implement sliding window rate limiter:
      - Track requests in time window
      - Auto-reset on window expiration
      - Return rate limit status to caller
      - Graceful degradation when limited
    </solution>
    <impact>
      Prevents API quota exhaustion, maintains service reliability,
      enables monitoring of API usage patterns.
    </impact>
  </learning>

  <learning id="gcp-error-004">
    <title>PII Redaction in Error Messages</title>
    <context>
      Error messages from production may contain sensitive user data,
      API keys, or internal paths that shouldn't be exposed.
    </context>
    <solution>
      Multi-layer redaction approach:
      - Email pattern matching and replacement
      - API key/token pattern detection
      - Internal path sanitization
      - Configurable redaction levels
    </solution>
    <impact>
      Compliance with data protection regulations,
      prevents security breaches through error logs.
    </impact>
  </learning>

  <learning id="gcp-error-005">
    <title>Deployment Error Categorization</title>
    <context>
      Not all errors during deployment are deployment-related.
      Need to distinguish pre-existing errors from new ones.
    </context>
    <solution>
      Time-based categorization:
      - Record deployment start time
      - Wait 15 seconds for errors to appear
      - Categorize errors as pre/post deployment
      - Only analyze post-deployment errors
    </solution>
    <impact>
      Reduces false positives by 90%,
      enables accurate deployment health assessment.
    </impact>
  </learning>

  <learning id="gcp-error-006">
    <title>PowerShell Integration for Windows Deployment</title>
    <context>
      Staging deployment uses PowerShell script on Windows.
      Need seamless integration between Python monitoring and PowerShell.
    </context>
    <solution>
      - Use exit codes for communication (0=success, 1=warning, 2=failure)
      - Format output for PowerShell console colors
      - Pass deployment time via ISO format parameter
      - Interactive prompts for critical decisions
    </solution>
    <impact>
      Smooth CI/CD integration, clear deployment feedback,
      maintains existing workflow compatibility.
    </impact>
  </learning>

  <learning id="gcp-error-007">
    <title>Error Severity Scoring Algorithm</title>
    <context>
      Need objective criteria for deployment failure decisions
      based on error severity and count.
    </context>
    <solution>
      Point-based scoring system:
      - Critical errors: 10 points each (immediate failure)
      - Error level: 5 points each
      - Warning level: 1 point each
      - Threshold: 15 total points triggers failure
    </solution>
    <impact>
      Consistent deployment decisions,
      prevents minor issues from blocking deployments,
      catches critical problems immediately.
    </impact>
  </learning>

  <learning id="gcp-error-008">
    <title>Mock Testing for External Services</title>
    <context>
      Testing GCP integration without actual GCP access
      requires comprehensive mocking strategy.
    </context>
    <solution>
      Three-layer mock approach:
      - Mock GCP client responses
      - Mock service layer for unit tests
      - Mock API endpoints for integration tests
      - Preserve actual data structures
    </solution>
    <impact>
      Tests run without GCP credentials,
      faster test execution (no network calls),
      predictable test outcomes.
    </impact>
  </learning>

  <learning id="gcp-error-009">
    <title>API Endpoint Organization</title>
    <context>
      Existing monitoring.py already handles database monitoring.
      Need to add GCP monitoring without disrupting existing functionality.
    </context>
    <solution>
      Create separate gcp_monitoring.py router:
      - Preserves existing database monitoring endpoints
      - Clear separation of concerns
      - Unified /api/monitoring prefix
      - Different tags for API documentation
    </solution>
    <impact>
      No regression in existing features,
      clear API organization,
      easier maintenance and testing.
    </impact>
  </learning>

  <learning id="gcp-error-010">
    <title>Dependency Injection for Service Configuration</title>
    <context>
      GCP service needs configuration from settings
      but shouldn't be tightly coupled to FastAPI.
    </context>
    <solution>
      Use dependency injection pattern:
      - Service factory function in routes
      - Configuration passed via constructor
      - Async initialization separate from construction
      - Service lifecycle managed by FastAPI
    </solution>
    <impact>
      Testable service layer,
      flexible configuration management,
      clean separation between web and business logic.
    </impact>
  </learning>

  <best_practices>
    <practice>Always implement rate limiting for external API calls</practice>
    <practice>Use time-based categorization for deployment-related errors</practice>
    <practice>Implement PII redaction before storing or displaying errors</practice>
    <practice>Create separate routers for distinct monitoring domains</practice>
    <practice>Use dependency injection for service configuration</practice>
    <practice>Mock external services comprehensively in tests</practice>
    <practice>Provide dual authentication methods for flexibility</practice>
    <practice>Use exit codes for script integration communication</practice>
  </best_practices>

  <common_pitfalls>
    <pitfall>
      <issue>Treating all errors during deployment as deployment-caused</issue>
      <solution>Use time-based categorization to filter pre-existing errors</solution>
    </pitfall>
    <pitfall>
      <issue>Hardcoding GCP project IDs or credentials</issue>
      <solution>Use environment variables and configuration files</solution>
    </pitfall>
    <pitfall>
      <issue>Not handling rate limits from external APIs</issue>
      <solution>Implement rate limiting with graceful degradation</solution>
    </pitfall>
    <pitfall>
      <issue>Exposing sensitive data in error messages</issue>
      <solution>Implement comprehensive PII redaction</solution>
    </pitfall>
  </common_pitfalls>
</learnings>