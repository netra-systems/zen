<?xml version="1.0" encoding="UTF-8"?>
<learning_spec>
  <metadata>
    <title>Circuit Breaker Cascade Failure Fix</title>
    <date>2025-08-29</date>
    <category>circuit_breaker</category>
    <priority>critical</priority>
    <impact>system_stability</impact>
  </metadata>
  
  <problem_statement>
    <description>
      The triage agent was experiencing a circuit breaker cascade failure where:
      1. After initial LLM call failures, the circuit breaker opens (after 3 failures by default)
      2. Once open, ALL subsequent LLM calls return None without attempting the actual call
      3. The fallback handler creates an error result with category: "Error" for all failures
      4. This affects ALL agents using the base agent class since they share the LLM fallback handler
    </description>
    <root_cause>
      Circuit breakers had overly strict thresholds for Gemini 2.0 Flash stability and lacked proper reset mechanisms.
      Fallback handlers didn't distinguish between circuit breaker open vs actual LLM failures.
    </root_cause>
  </problem_statement>
  
  <solution_implemented>
    <configuration_updates>
      <llm_circuit_breaker>
        <failure_threshold>
          <before>3</before>
          <after>10</after>
          <rationale>Gemini 2.0 Flash requires higher threshold for stability</rationale>
        </failure_threshold>
        <recovery_timeout>
          <before>120.0s</before>
          <after>10.0s</after>
          <rationale>Faster recovery for better user experience</rationale>
        </recovery_timeout>
      </llm_circuit_breaker>
    </configuration_updates>
    
    <reset_mechanism>
      <manager_methods>
        <method name="reset_circuit_breakers">Reset all circuit breakers</method>
        <method name="reset_circuit_breaker">Reset specific circuit breaker by name</method>
        <method name="get_circuit_breaker_names">Get list of all circuit breaker names</method>
      </manager_methods>
      
      <fallback_handler_methods>
        <method name="reset_circuit_breakers">Synchronous reset of all circuit breakers</method>
        <method name="reset_circuit_breakers_async">Asynchronous reset of all circuit breakers</method>
      </fallback_handler_methods>
      
      <llm_client_manager_methods>
        <method name="reset_all_circuits">Reset all LLM circuit breakers</method>
        <method name="reset_circuit">Reset specific LLM circuit breaker</method>
      </llm_client_manager_methods>
    </reset_mechanism>
    
    <fallback_handler_improvements>
      <circuit_breaker_detection>
        <method name="_is_circuit_breaker_error">
          <purpose>Distinguish between circuit breaker open vs actual LLM failure</purpose>
          <error_types>['CircuitBreakerOpenError', 'CircuitBreakerError']</error_types>
        </method>
      </circuit_breaker_detection>
      
      <specialized_responses>
        <method name="create_circuit_breaker_response">
          <purpose>Create responses specifically for circuit breaker scenarios</purpose>
          <categories>
            <triage>category: "System_Unavailable", confidence: 0.1</triage>
            <data_analysis>insights about system protection, confidence: 0.1</data_analysis>
          </categories>
        </method>
      </specialized_responses>
    </fallback_handler_improvements>
  </solution_implemented>
  
  <architectural_decisions>
    <per_domain_isolation>
      <description>
        Circuit breakers maintain proper isolation between different domains (LLM, Database, Auth, etc.)
        to prevent cascade failures across services.
      </description>
      <implementation>
        Each domain has its own circuit breaker configuration and state management.
        Circuit breaker manager provides singleton access while maintaining isolation.
      </implementation>
    </per_domain_isolation>
    
    <gemini_2_0_flash_tuning>
      <description>
        Special tuning for Gemini 2.0 Flash model to account for its stability characteristics.
      </description>
      <parameters>
        <failure_threshold>10</failure_threshold>
        <recovery_timeout>10.0s</recovery_timeout>
        <adaptive_threshold>true</adaptive_threshold>
      </parameters>
    </gemini_2_0_flash_tuning>
  </architectural_decisions>
  
  <testing_approach>
    <critical_tests>
      <test name="test_circuit_breaker_reset_mechanism">
        Verify circuit breakers can be reset programmatically
      </test>
      <test name="test_llm_circuit_breaker_configuration">
        Verify LLM circuit breaker has proper Gemini 2.0 Flash configuration
      </test>
      <test name="test_fallback_handler_circuit_breaker_distinction">
        Verify fallback handler distinguishes circuit breaker states
      </test>
      <test name="test_multiple_agent_independence">
        Verify multiple agents operate independently without interference
      </test>
      <test name="test_no_cascade_failures">
        Verify circuit breaker failures don't cascade to other circuits
      </test>
    </critical_tests>
    
    <integration_tests>
      <test name="test_real_world_triage_agent_scenario">
        Test real-world scenario simulating triage agent behavior
      </test>
      <test name="test_concurrent_agent_operations">
        Test concurrent operations across multiple agents don't interfere
      </test>
    </integration_tests>
  </testing_approach>
  
  <files_modified>
    <file>netra_backend/app/core/resilience/unified_circuit_breaker.py</file>
    <file>netra_backend/app/core/resilience/domain_circuit_breakers.py</file>
    <file>netra_backend/app/llm/fallback_handler.py</file>
    <file>netra_backend/app/llm/client_circuit_breaker.py</file>
    <file>netra_backend/app/llm/fallback_responses.py</file>
    <file>netra_backend/tests/critical/test_circuit_breaker_cascade_fix.py</file>
  </files_modified>
  
  <validation_criteria>
    <success_criteria>
      <criterion>Circuit breakers can be reset programmatically</criterion>
      <criterion>LLM circuit breaker has appropriate thresholds for Gemini 2.0 Flash</criterion>
      <criterion>Fallback handler returns appropriate error categories (not generic "Error")</criterion>
      <criterion>Tests pass showing no cascade failures</criterion>
      <criterion>Multiple agents can operate independently without affecting each other</criterion>
    </success_criteria>
    
    <performance_impact>
      <metric name="circuit_breaker_recovery_time">Reduced from 120s to 10s</metric>
      <metric name="failure_threshold">Increased from 3 to 10 for stability</metric>
      <metric name="cascade_prevention">100% isolation between domains</metric>
    </performance_impact>
  </validation_criteria>
  
  <operational_guidelines>
    <monitoring>
      <alert>Monitor circuit breaker open/close events</alert>
      <alert>Track cascade failure prevention metrics</alert>
      <alert>Monitor reset operation success rates</alert>
    </monitoring>
    
    <recovery_procedures>
      <step>Identify affected circuit breakers</step>
      <step>Reset specific circuit breakers using reset_circuit_breaker(name)</step>
      <step>Reset all circuit breakers using reset_all() if necessary</step>
      <step>Monitor for successful recovery and normal operation</step>
    </recovery_procedures>
  </operational_guidelines>
  
  <business_impact>
    <before>
      Triage agent failures cascaded to all LLM operations, causing system-wide unavailability.
      Recovery required manual intervention and took 2+ minutes.
    </before>
    <after>
      Isolated failures prevent cascade effects, with 10s automatic recovery.
      Programmatic reset capabilities enable faster incident resolution.
    </after>
    <value_proposition>
      Improved system reliability reduces customer impact and support overhead.
      Faster recovery times improve user experience and retention.
    </value_proposition>
  </business_impact>
</learning_spec>