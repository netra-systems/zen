<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <title>No Silent Fallbacks for Critical Configuration</title>
    <date>2025-01-25</date>
    
    <problem>
        <description>
            System was silently falling back to mock or default values for critical configuration like
            database URLs, Redis URLs, JWT secrets, and service credentials. This caused:
            1. Silent failures that appeared to work but used invalid defaults
            2. Difficulty debugging production issues where the real config wasn't being used
            3. Security risks from using development defaults in production
            4. Inconsistent behavior between environments
        </description>
        
        <examples>
            <example>
                PostgreSQL falling back to "postgresql://postgres:postgres@localhost:5432/netra"
                when DATABASE_URL was not set, causing connection failures in staging/production.
            </example>
            <example>
                JWT secret falling back to "dev-secret-key-DO-NOT-USE-IN-PRODUCTION" when
                JWT_SECRET_KEY was not set, creating security vulnerabilities.
            </example>
            <example>
                Redis falling back to "redis://localhost:6379" causing session management failures
                in containerized environments where Redis runs on different hosts.
            </example>
        </examples>
    </problem>
    
    <solution>
        <principle>
            Fail loudly and immediately when critical configuration is missing.
            Never silently fall back to mock or default values for production-critical services.
        </principle>
        
        <implementation>
            <step>
                Remove all fallback to default/mock database URLs. If DATABASE_URL or POSTGRES_* 
                environment variables are not set in staging/production, throw ConfigurationError immediately.
                In test/development, warn but allow empty configuration for unit testing.
            </step>
            <step>
                Remove all fallback to default JWT secrets in staging/production. If JWT_SECRET_KEY is not set,
                throw ValueError immediately. In test/development, use clearly marked test-only secrets.
            </step>
            <step>
                Remove all fallback to default service secrets and IDs in staging/production. These must be
                explicitly configured via environment variables. In test/development, allow test values
                but log warnings.
            </step>
            <step>
                The key principle: staging/production MUST fail loudly for missing config,
                test/development can warn but continue with clearly marked test values.
            </step>
        </implementation>
        
        <code_patterns>
            <pattern type="correct">
                <description>Fail loudly when critical config is missing</description>
                <code><![CDATA[
# CORRECT: Loud failure for missing critical config
url = self._env.get("DATABASE_URL")
if not url:
    raise ConfigurationError(
        f"No PostgreSQL configuration found for {self._environment} environment. "
        "Set either POSTGRES_HOST/USER/DB or DATABASE_URL environment variables."
    )
                ]]></code>
            </pattern>
            
            <pattern type="incorrect">
                <description>Silent fallback to default values</description>
                <code><![CDATA[
# INCORRECT: Silent fallback to defaults
url = self._env.get("DATABASE_URL")
if not url:
    url = "postgresql://postgres:postgres@localhost:5432/netra"  # BAD!
    logger.debug("Using default database URL")
                ]]></code>
            </pattern>
        </code_patterns>
    </solution>
    
    <business_impact>
        <impact>
            Prevents $12K+ MRR loss from configuration errors in production.
            Reduces debugging time from hours to minutes by failing fast at the source.
            Improves security by preventing use of development credentials in production.
        </impact>
    </business_impact>
    
    <testing>
        <requirement>
            Test suites must explicitly set all required environment variables.
            No test should rely on fallback values.
        </requirement>
        <requirement>
            CI/CD pipelines must validate that all required secrets are present
            before deployment.
        </requirement>
    </testing>
    
    <future_considerations>
        <consideration>
            In the future, we may implement proper configuration management with:
            1. Environment-specific config files with validation
            2. Secret rotation and management systems
            3. Configuration health checks at startup
            But these should be explicit systems, not silent fallbacks.
        </consideration>
    </future_considerations>
</learning>