<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <title>Configuration and Environment Regression Prevention Patterns</title>
        <date>2025-09-05</date>
        <priority>CRITICAL</priority>
        <category>configuration,environment,regression-prevention</category>
        <references>
            <document>OAUTH_REGRESSION_ANALYSIS_20250905.md</document>
            <document>CONFIG_REGRESSION_PREVENTION_PLAN.md</document>
            <commit>8c918c782 - Strict SSOT enforcement without fallbacks</commit>
        </references>
    </metadata>

    <problem_statement>
        <summary>
            Configuration and environment regressions are causing service failures, 
            authentication breakdowns, and cascade failures across the platform.
            The root cause is overzealous SSOT consolidation without understanding 
            cross-service and cross-environment dependencies.
        </summary>
        
        <specific_incidents>
            <incident date="2025-09-05">
                OAuth login returns 503 due to missing GOOGLE_OAUTH_CLIENT_ID_TEST
                in test environment after SSOT refactoring removed "duplicate" configs
            </incident>
            <incident>
                Test environment database connections leak to staging when 
                IsolatedEnvironment cache not properly invalidated
            </incident>
            <incident>
                JWT secret key deletion breaks authentication across all services
                because dependency mapping was not checked before SSOT consolidation
            </incident>
        </specific_incidents>
    </problem_statement>

    <root_causes>
        <cause priority="1">
            <title>Blind SSOT Consolidation</title>
            <description>
                Engineers delete "duplicate" configurations without understanding 
                that environment-specific configs (TEST, STAGING, PROD) are NOT 
                duplicates but necessary isolation boundaries.
            </description>
            <example>
                GOOGLE_OAUTH_CLIENT_ID_TEST vs GOOGLE_OAUTH_CLIENT_ID_STAGING
                appear as duplicates but serve different environments
            </example>
        </cause>
        
        <cause priority="2">
            <title>Missing Dependency Mapping</title>
            <description>
                No system to track which services depend on which configuration 
                keys, leading to deletions that break multiple services.
            </description>
            <example>
                JWT_SECRET_KEY used by auth_service, backend auth middleware, 
                and token validation - deleting it breaks all three
            </example>
        </cause>
        
        <cause priority="3">
            <title>Environment Isolation Failures</title>
            <description>
                IsolatedEnvironment caching and fallback mechanisms can cause 
                test configs to leak into production or vice versa.
            </description>
        </cause>
        
        <cause priority="4">
            <title>No Migration Paths</title>
            <description>
                Configuration structure changes without backward compatibility 
                or migration support, causing immediate breakage on deployment.
            </description>
        </cause>
    </root_causes>

    <prevention_patterns>
        <pattern name="ConfigDependencyMap" priority="CRITICAL">
            <description>
                ALWAYS check dependencies before deleting any configuration key
            </description>
            <implementation>
                <code language="python">
# BEFORE deleting any config:
from netra_backend.app.core.config_dependencies import ConfigDependencyMap

can_delete, reason = ConfigDependencyMap.can_delete_config("JWT_SECRET_KEY")
if not can_delete:
    # DO NOT DELETE - will break services listed in reason
    logger.critical(f"Cannot delete config: {reason}")
                </code>
            </implementation>
            <rule>NEVER delete config without dependency check</rule>
        </pattern>
        
        <pattern name="EnvironmentSpecificConfigs" priority="CRITICAL">
            <description>
                Each environment MUST have independent OAuth and secret configurations
            </description>
            <required_configs>
                <environment name="test">
                    <config>GOOGLE_OAUTH_CLIENT_ID_TEST</config>
                    <config>GOOGLE_OAUTH_CLIENT_SECRET_TEST</config>
                    <config>JWT_SECRET_KEY_TEST</config>
                </environment>
                <environment name="staging">
                    <config>GOOGLE_OAUTH_CLIENT_ID_STAGING</config>
                    <config>GOOGLE_OAUTH_CLIENT_SECRET_STAGING</config>
                    <config>JWT_SECRET_KEY_STAGING</config>
                </environment>
                <environment name="production">
                    <config>GOOGLE_OAUTH_CLIENT_ID_PRODUCTION</config>
                    <config>GOOGLE_OAUTH_CLIENT_SECRET_PRODUCTION</config>
                    <config>JWT_SECRET_KEY_PRODUCTION</config>
                </environment>
            </required_configs>
            <rule>Environment-specific configs are NOT duplicates</rule>
        </pattern>
        
        <pattern name="NoSilentFallbacks" priority="HIGH">
            <description>
                Hard failures are better than silent fallbacks that hide issues
            </description>
            <implementation>
                <code language="python">
# BAD - Silent fallback hides production issues
client_id = env.get("OAUTH_CLIENT_ID") or "default-client-id"

# GOOD - Explicit failure with clear error
client_id = env.get("OAUTH_CLIENT_ID")
if not client_id:
    raise ValueError(f"OAUTH_CLIENT_ID required for {environment}")
                </code>
            </implementation>
            <rule>Fail fast and loud on missing critical configs</rule>
        </pattern>
        
        <pattern name="ConfigurationVersioning" priority="HIGH">
            <description>
                Track configuration schema versions and provide migration paths
            </description>
            <implementation>
                <code language="python">
from netra_backend.app.core.config_versioning import ConfigurationVersion

# Check version and migrate if needed
config = load_config()
if config.version != ConfigurationVersion.CURRENT_VERSION:
    config = ConfigurationVersion.migrate_config(
        config, 
        from_version=config.version
    )
                </code>
            </implementation>
            <rule>Always provide migration paths for config changes</rule>
        </pattern>
        
        <pattern name="PreDeploymentValidation" priority="CRITICAL">
            <description>
                Validate ALL configurations before deployment
            </description>
            <checklist>
                <check>Run python scripts/check_config_before_deploy.py</check>
                <check>Verify all critical configs present</check>
                <check>Test backward compatibility</check>
                <check>Check for breaking changes</check>
                <check>Validate environment isolation</check>
            </checklist>
            <rule>Never deploy without config validation</rule>
        </pattern>
    </prevention_patterns>

    <implementation_guidelines>
        <guideline priority="1">
            <title>SSOT for Config is Different</title>
            <description>
                Unlike code where duplication is bad, configuration REQUIRES 
                environment-specific values. What appears as duplication 
                (OAUTH_CLIENT_ID_TEST vs OAUTH_CLIENT_ID_PROD) is actually 
                necessary isolation.
            </description>
        </guideline>
        
        <guideline priority="2">
            <title>Test with Real Configs</title>
            <description>
                Always provide test environment configurations. Never rely on 
                mocks or fallbacks for configuration in tests.
            </description>
            <example>
                # .env.test
                GOOGLE_OAUTH_CLIENT_ID_TEST=test-client-id-12345
                GOOGLE_OAUTH_CLIENT_SECRET_TEST=test-secret-67890
            </example>
        </guideline>
        
        <guideline priority="3">
            <title>Monitor Configuration Health</title>
            <description>
                Use ConfigurationHealthMonitor to continuously validate configs 
                and alert on issues before they impact users.
            </description>
        </guideline>
        
        <guideline priority="4">
            <title>Document Config Changes</title>
            <description>
                Every configuration change must be documented with:
                - What changed
                - Why it changed  
                - Which services are affected
                - Migration instructions if breaking
            </description>
        </guideline>
    </implementation_guidelines>

    <testing_requirements>
        <test name="regression_tests" location="tests/regression/test_config_regression.py">
            Test for configuration regressions and unintended changes
        </test>
        <test name="isolation_tests" location="tests/integration/test_cross_service_url_alignment.py">
            Verify environment isolation and no config leakage
        </test>
        <test name="backward_compatibility" location="tests/contracts/test_config_contracts.py">
            Ensure old config patterns still work after changes
        </test>
        <test name="oauth_integration" location="tests/integration/test_auth_url_configuration.py">
            Verify OAuth works with environment-specific credentials
        </test>
    </testing_requirements>

    <critical_files_to_monitor>
        <file>auth_service/auth_core/secret_loader.py</file>
        <file>auth_service/auth_core/config.py</file>
        <file>auth_service/auth_core/auth_environment.py</file>
        <file>netra_backend/app/core/configuration/base.py</file>
        <file>shared/configuration/central_config_validator.py</file>
        <file>shared/isolated_environment.py</file>
    </critical_files_to_monitor>

    <commands>
        <command>python scripts/check_config_before_deploy.py</command>
        <command>python scripts/check_architecture_compliance.py</command>
        <command>python tests/regression/test_config_regression.py</command>
    </commands>

    <key_takeaways>
        <takeaway>Configuration SSOT != Code SSOT - environments need isolation</takeaway>
        <takeaway>NEVER delete configs without checking ConfigDependencyMap</takeaway>
        <takeaway>Hard failures > Silent fallbacks for critical configs</takeaway>
        <takeaway>Test environments need real test credentials, not mocks</takeaway>
        <takeaway>Every config change needs migration path and validation</takeaway>
    </key_takeaways>
</learning>