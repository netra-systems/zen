<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <title>Workflow Sequential Execution Fix</title>
    <date>2025-08-28</date>
    <category>agent-orchestration</category>
    <severity>critical</severity>
    
    <problem>
        <description>
            Agent workflow was incorrectly executing all steps in parallel instead of sequentially,
            causing logical dependency violations. The supervisor was attempting to run triage, data,
            optimization, actions, and reporting agents simultaneously.
        </description>
        <symptoms>
            <symptom>Log entries showing "Supervisor parallel execution" with all 5 agents</symptom>
            <symptom>Data agent running before triage completes</symptom>
            <symptom>Optimization running without data insights</symptom>
            <symptom>Race conditions and undefined behavior</symptom>
        </symptoms>
        <root_cause>
            Pipeline steps were created without explicit dependencies or sequential execution flags.
            The execution engine's _can_execute_parallel() method defaulted to allowing parallel 
            execution when no blocking conditions were found.
        </root_cause>
    </problem>
    
    <solution>
        <description>
            Modified workflow orchestrator to explicitly define dependencies and enforce sequential
            execution through multiple mechanisms.
        </description>
        <changes>
            <change file="netra_backend/app/agents/supervisor/workflow_orchestrator.py">
                Added explicit dependencies between workflow steps (each depends on previous).
                Set strategy=AgentExecutionStrategy.SEQUENTIAL on all steps.
                Added requires_sequential=True in metadata for each step.
            </change>
            <change file="netra_backend/app/agents/supervisor/execution_engine.py">
                Made _can_execute_parallel() more defensive - now requires explicit PARALLEL strategy.
                Added checks for strategy, metadata.requires_sequential, and dependencies.
                Changed default behavior to sequential unless explicitly marked for parallel.
            </change>
        </changes>
    </solution>
    
    <technical_details>
        <workflow_dependencies>
            <step name="triage" dependencies="[]" />
            <step name="data" dependencies="['triage']" />
            <step name="optimization" dependencies="['data']" />
            <step name="actions" dependencies="['optimization']" />
            <step name="reporting" dependencies="['actions']" />
        </workflow_dependencies>
        <execution_logic>
            The execution engine now checks multiple conditions before allowing parallel execution:
            1. Step strategy must not be SEQUENTIAL
            2. Metadata must not have requires_sequential=True
            3. Step must have no dependencies
            4. At least one step must explicitly have PARALLEL strategy
        </execution_logic>
    </technical_details>
    
    <best_practices>
        <practice>Always explicitly define dependencies between workflow steps</practice>
        <practice>Default to sequential execution for safety</practice>
        <practice>Require explicit opt-in for parallel execution</practice>
        <practice>Use multiple redundant checks for critical execution paths</practice>
        <practice>Test workflow execution patterns with dedicated unit tests</practice>
    </best_practices>
    
    <prevention>
        <measure>All new workflow steps must define their execution strategy explicitly</measure>
        <measure>Pipeline steps should declare dependencies in their constructor</measure>
        <measure>Execution engine should log warnings when parallel execution is triggered</measure>
        <measure>Add integration tests that verify execution order</measure>
    </prevention>
    
    <impact>
        <business_impact>
            Critical fix for all agent workflows. Incorrect parallel execution could cause:
            - Incomplete or incorrect AI optimization recommendations
            - Race conditions leading to data corruption
            - Unpredictable system behavior affecting all customer segments
        </business_impact>
        <performance_impact>
            Sequential execution may increase total workflow time but ensures correctness.
            Future optimization can identify truly independent steps for safe parallelization.
        </performance_impact>
    </impact>
    
    <related_files>
        <file>netra_backend/app/agents/supervisor/workflow_orchestrator.py</file>
        <file>netra_backend/app/agents/supervisor/execution_engine.py</file>
        <file>netra_backend/app/agents/supervisor/execution_context.py</file>
        <file>netra_backend/app/agents/supervisor_agent_modern.py</file>
    </related_files>
    
    <keywords>
        <keyword>parallel-execution</keyword>
        <keyword>sequential-workflow</keyword>
        <keyword>agent-dependencies</keyword>
        <keyword>execution-strategy</keyword>
        <keyword>workflow-orchestration</keyword>
        <keyword>supervisor-agent</keyword>
    </keywords>
</learning>