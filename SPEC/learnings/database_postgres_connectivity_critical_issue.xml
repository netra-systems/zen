<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Database 'postgres' Connectivity Critical Issue - Iteration 2</name>
        <type>Learning.Critical.Database</type>
        <version>1.0</version>
        <description>Critical learnings about database connectivity failure: "database 'postgres' does not exist"</description>
        <created>2025-08-25</created>
        <priority>CRITICAL</priority>
        <business_impact>HIGH</business_impact>
    </metadata>

    <critical_issue>
        <title>Database 'postgres' Does Not Exist Error</title>
        <description>
            Service attempts to connect to database named 'postgres' which doesn't exist,
            causing connection failures that compromise authentication and user management.
            Service incorrectly falls back to "staging mode" instead of failing properly.
        </description>
        
        <symptoms>
            <symptom>Connection error: "database 'postgres' does not exist"</symptom>
            <symptom>Service falls back to "staging mode" without database connectivity</symptom>
            <symptom>Authentication appears to work but doesn't persist data</symptom>
            <symptom>User creation succeeds but users can't be retrieved</symptom>
            <symptom>Health checks report healthy while database is disconnected</symptom>
            <symptom>Cross-service authentication coordination breaks</symptom>
        </symptoms>

        <root_causes>
            <cause>
                <title>Incorrect Database Name Configuration</title>
                <description>
                    System defaults to 'postgres' database name instead of application-specific
                    database name (e.g., 'netra_auth', 'netra_staging', 'netra_production').
                    The 'postgres' database is a system database that may not exist or be accessible.
                </description>
                <evidence>
                    <item>Database URL construction defaults to 'postgres' when POSTGRES_DB not set</item>
                    <item>Environment-specific database name resolution fails</item>
                    <item>No validation that target database exists before connection attempts</item>
                </evidence>
            </cause>
            
            <cause>
                <title>Problematic Staging Mode Fallback</title>
                <description>
                    Service falls back to "staging mode" when database is unavailable,
                    creating false positives in health checks and allowing broken functionality
                    to appear working.
                </description>
                <evidence>
                    <item>Service reports healthy while database is disconnected</item>
                    <item>Authentication succeeds with fake tokens that aren't persisted</item>
                    <item>User operations appear successful but don't persist data</item>
                    <item>Monitoring systems don't detect the degradation</item>
                </evidence>
            </cause>
            
            <cause>
                <title>Insufficient Database Existence Validation</title>
                <description>
                    Configuration validation checks URL format but doesn't verify that
                    the target database actually exists and is accessible.
                </description>
                <evidence>
                    <item>DatabaseURLBuilder validates format but not database existence</item>
                    <item>Connection pool creation succeeds but all connections fail</item>
                    <item>No pre-deployment validation of database accessibility</item>
                </evidence>
            </cause>
        </root_causes>
    </critical_issue>

    <impact_analysis>
        <business_impact>
            <segment>All Tiers (Free, Early, Mid, Enterprise)</segment>
            <affected_features>
                <feature>User Authentication</feature>
                <feature>User Registration</feature>
                <feature>Session Management</feature>
                <feature>Token Storage and Validation</feature>
                <feature>Cross-Service Authorization</feature>
                <feature>WebSocket Authentication</feature>
            </affected_features>
            <customer_impact>
                <impact>Complete authentication system failure</impact>
                <impact>Users cannot log in or register</impact>
                <impact>Existing sessions become invalid</impact>
                <impact>All database-dependent features break</impact>
            </customer_impact>
        </business_impact>
        
        <technical_impact>
            <system_reliability>CRITICAL - Authentication system compromised</system_reliability>
            <data_integrity>HIGH - User data operations fail silently</data_integrity>
            <monitoring_effectiveness>LOW - False positives hide real issues</monitoring_effectiveness>
            <deployment_reliability>CRITICAL - Services can deploy in broken state</deployment_reliability>
        </technical_impact>
    </impact_analysis>

    <failing_test_coverage>
        <auth_service_tests>
            <file>auth_service/tests/test_database_postgres_does_not_exist_failures.py</file>
            <test_cases>
                <test>test_database_postgres_does_not_exist_error</test>
                <test>test_staging_mode_fallback_behavior</test>
                <test>test_user_creation_fails_without_database_connectivity</test>
                <test>test_token_storage_fails_without_database_connectivity</test>
                <test>test_database_url_construction_defaults_to_postgres_database</test>
                <test>test_cloud_sql_postgres_database_name_error</test>
                <test>test_health_check_fails_with_postgres_database_error</test>
                <test>test_configuration_validation_allows_invalid_postgres_database</test>
            </test_cases>
        </auth_service_tests>
        
        <connection_pool_tests>
            <file>auth_service/tests/test_database_postgres_connection_pool_failures.py</file>
            <test_cases>
                <test>test_connection_pool_initialization_fails_with_postgres_error</test>
                <test>test_connection_pool_exhaustion_during_postgres_retry_attempts</test>
                <test>test_connection_pool_recovery_after_postgres_database_error</test>
                <test>test_table_creation_fails_silently_with_postgres_error</test>
                <test>test_schema_validation_fails_with_missing_postgres_database</test>
                <test>test_alembic_migration_fails_with_postgres_database_error</test>
            </test_cases>
        </connection_pool_tests>
        
        <e2e_tests>
            <file>tests/e2e/test_database_postgres_connectivity_e2e.py</file>
            <test_cases>
                <test>test_auth_service_fails_to_start_with_postgres_database_error</test>
                <test>test_user_authentication_fails_without_database_connectivity</test>
                <test>test_session_management_fails_across_services</test>
                <test>test_websocket_authentication_fails_with_database_error</test>
                <test>test_service_health_checks_detect_database_connectivity_issues</test>
                <test>test_database_migration_fails_with_postgres_database_error</test>
            </test_cases>
        </e2e_tests>
        
        <staging_fallback_tests>
            <file>tests/e2e/test_staging_fallback_database_failures.py</file>
            <test_cases>
                <test>test_staging_mode_allows_service_to_appear_healthy_without_database</test>
                <test>test_authentication_silently_fails_in_staging_mode</test>
                <test>test_user_creation_appears_successful_but_not_persisted_in_staging_mode</test>
                <test>test_cross_service_coordination_breaks_with_staging_mode_auth</test>
                <test>test_session_management_inconsistency_with_staging_mode</test>
            </test_cases>
        </staging_fallback_tests>
    </failing_test_coverage>

    <resolution_requirements>
        <immediate_fixes>
            <fix priority="CRITICAL">
                <title>Correct Database Name Configuration</title>
                <description>
                    Configure services to use application-specific database names instead of
                    defaulting to system 'postgres' database.
                </description>
                <implementation>
                    <step>Set POSTGRES_DB to appropriate application database (e.g., 'netra_auth')</step>
                    <step>Update DatabaseURLBuilder to use environment-appropriate defaults</step>
                    <step>Validate database name configuration in all environments</step>
                </implementation>
            </fix>
            
            <fix priority="HIGH">
                <title>Remove Problematic Staging Mode Fallback</title>
                <description>
                    Services should fail explicitly when database is unavailable instead of
                    operating in degraded "staging mode".
                </description>
                <implementation>
                    <step>Remove staging mode fallback logic from database connection failures</step>
                    <step>Ensure services fail to start when database is unavailable</step>
                    <step>Update health checks to report unhealthy when database is disconnected</step>
                </implementation>
            </fix>
            
            <fix priority="HIGH">
                <title>Add Database Existence Validation</title>
                <description>
                    Validate that target database exists and is accessible before
                    attempting to create connection pools or start services.
                </description>
                <implementation>
                    <step>Add database existence check to pre-deployment validation</step>
                    <step>Enhance DatabaseURLBuilder with database accessibility verification</step>
                    <step>Fail connection pool creation if database doesn't exist</step>
                </implementation>
            </fix>
        </immediate_fixes>
        
        <preventive_measures>
            <measure>
                <title>Environment-Specific Database Naming Standards</title>
                <description>Establish clear database naming conventions for each environment</description>
                <standards>
                    <standard>Development: netra_dev</standard>
                    <standard>Staging: netra_staging</standard>
                    <standard>Production: netra_production</standard>
                    <standard>Test: netra_test</standard>
                </standards>
            </measure>
            
            <measure>
                <title>Enhanced Configuration Validation</title>
                <description>Comprehensive validation of database configuration before service startup</description>
                <validations>
                    <validation>Database name is not 'postgres' system database</validation>
                    <validation>Target database exists and is accessible</validation>
                    <validation>Database user has required permissions</validation>
                    <validation>Database schema is current with expected migrations</validation>
                </validations>
            </measure>
            
            <measure>
                <title>Fail-Fast Database Connectivity</title>
                <description>Services should fail immediately on database connectivity issues</description>
                <principles>
                    <principle>No staging mode fallback for database failures</principle>
                    <principle>Clear error messages for database connectivity issues</principle>
                    <principle>Health checks accurately reflect database status</principle>
                    <principle>Connection pools fail creation if database inaccessible</principle>
                </principles>
            </measure>
        </preventive_measures>
    </resolution_requirements>

    <monitoring_requirements>
        <alerts>
            <alert priority="CRITICAL">
                <name>Database Connection Failure</name>
                <condition>Any service reports database connectivity issues</condition>
                <action>Immediate escalation - authentication system at risk</action>
            </alert>
            
            <alert priority="HIGH">
                <name>Service Staging Mode Activation</name>
                <condition>Service falls back to staging mode due to database issues</condition>
                <action>Investigate database connectivity and fix immediately</action>
            </alert>
            
            <alert priority="MEDIUM">
                <name>Database Name Configuration Warning</name>
                <condition>Service attempts to connect to 'postgres' system database</condition>
                <action>Review and correct database configuration</action>
            </alert>
        </alerts>
        
        <metrics>
            <metric>Database connection success rate by service</metric>
            <metric>Database connection pool health by service</metric>
            <metric>Authentication success rate (to detect staging mode issues)</metric>
            <metric>User operation success rate vs. persistence rate</metric>
            <metric>Cross-service authentication coordination success rate</metric>
        </metrics>
    </monitoring_requirements>

    <deployment_checklist>
        <pre_deployment>
            <check>Verify target database exists and is accessible</check>
            <check>Confirm database name is not 'postgres' system database</check>
            <check>Test connection pool creation with target database</check>
            <check>Validate database schema is current</check>
            <check>Test authentication flow end-to-end</check>
        </pre_deployment>
        
        <post_deployment>
            <check>Verify all services connected to correct database</check>
            <check>Confirm no services operating in staging mode</check>
            <check>Test user creation and retrieval</check>
            <check>Validate cross-service authentication</check>
            <check>Monitor database connection metrics</check>
        </post_deployment>
    </deployment_checklist>

    <business_continuity>
        <risk_mitigation>
            <mitigation>Implement proper database name configuration management</mitigation>
            <mitigation>Remove staging mode fallback that hides critical failures</mitigation>
            <mitigation>Add comprehensive database connectivity validation</mitigation>
            <mitigation>Enhance monitoring to detect database-related degradation</mitigation>
        </risk_mitigation>
        
        <recovery_procedures>
            <procedure>
                <title>Database Connectivity Recovery</title>
                <steps>
                    <step>Identify correct application database name for environment</step>
                    <step>Update POSTGRES_DB configuration to use application database</step>
                    <step>Verify database exists and is accessible</step>
                    <step>Restart services with corrected configuration</step>
                    <step>Validate authentication and user operations work correctly</step>
                </steps>
            </procedure>
        </recovery_procedures>
    </business_continuity>
</specification>