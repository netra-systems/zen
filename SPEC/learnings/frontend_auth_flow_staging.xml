<?xml version="1.0" encoding="UTF-8"?>
<learnings>
  <context>
    Frontend Authentication Flow - Staging Environment Testing
    Date: 2025-01-25
    Component: Frontend Auth Service Integration
    Environment: Staging/Production
  </context>

  <primary_insights>
    <insight category="authentication_architecture">
      <title>Authentication Flow Components</title>
      <description>
        The frontend authentication system consists of multiple integrated components:
        - AuthContext (React context for state management)
        - unifiedAuthService (centralized auth operations)
        - authInterceptor (HTTP request enhancement)
        - authService (combined interface)
        
        This architecture provides redundancy and separation of concerns while maintaining
        a unified interface for components to use.
      </description>
      <implementation_details>
        Components use authService.useAuth() pattern to access authentication state.
        All API calls go through authInterceptor for automatic token handling.
        Token refresh is coordinated to prevent multiple simultaneous refresh attempts.
      </implementation_details>
    </insight>

    <insight category="token_management">
      <title>Token Lifecycle Management</title>
      <description>
        Token management handles multiple scenarios:
        - Automatic refresh before expiration
        - Graceful handling of expired tokens
        - Recovery from malformed or invalid tokens
        - Cross-tab synchronization through localStorage events
        
        The system uses JWT tokens with embedded expiration times for client-side validation.
      </description>
      <implementation_details>
        - Tokens are validated using jwtDecode for client-side expiration checking
        - Refresh occurs automatically every 2 minutes if token needs renewal
        - 401 responses trigger immediate token refresh and request retry
        - Maximum of 1 retry attempt to prevent infinite loops
      </implementation_details>
    </insight>

    <insight category="error_handling">
      <title>Authentication Error Handling Strategy</title>
      <description>
        Robust error handling covers multiple failure modes:
        - Network connectivity issues
        - Server unavailability 
        - Rate limiting (429 responses)
        - CORS policy violations
        - SSL certificate validation failures
        
        The system implements graceful degradation rather than hard failures.
      </description>
      <implementation_details>
        - Network errors are logged and propagated to calling components
        - 401 responses trigger automatic token refresh with retry
        - Rate limiting is handled with exponential backoff
        - CORS failures are caught and reported clearly
        - Malformed tokens are cleared automatically
      </implementation_details>
    </insight>

    <insight category="staging_environment">
      <title>Staging Environment Specific Behaviors</title>
      <description>
        Staging environment requires specific configurations:
        - HTTPS-only URLs (api.staging.netrasystems.ai)
        - Production-like OAuth flow with real Google OAuth
        - Proper CORS headers for cross-origin requests
        - SSL certificate validation
        - No development mode shortcuts
      </description>
      <implementation_details>
        - Environment detection through NEXT_PUBLIC_ENVIRONMENT variable
        - URL construction uses staging-specific domains
        - OAuth redirect URIs point to app.staging.netrasystems.ai
        - Development auto-login is disabled in staging
        - All requests must be authenticated (no dev mode bypasses)
      </implementation_details>
    </insight>
  </primary_insights>

  <test_coverage>
    <scenario name="basic_auth_flow">
      <description>Complete OAuth login and logout cycle</description>
      <coverage>
        - OAuth redirect initiation
        - Authorization code exchange
        - Token storage and retrieval
        - User state management
        - Clean logout with token clearing
      </coverage>
      <expected_behavior>
        User can log in via OAuth, make authenticated requests, and log out cleanly
      </expected_behavior>
    </scenario>

    <scenario name="token_lifecycle">
      <description>Token refresh and expiration handling</description>
      <coverage>
        - Automatic token refresh before expiration
        - Manual token refresh on 401 responses
        - Expired token detection and handling
        - Invalid token rejection
        - Token validation with backend
      </coverage>
      <expected_behavior>
        Tokens are automatically refreshed when needed, invalid tokens are rejected
      </expected_behavior>
    </scenario>

    <scenario name="authenticated_api_requests">
      <description>Making API calls with authentication</description>
      <coverage>
        - GET requests to /api/threads with Authorization header
        - POST requests for thread creation
        - PUT/PATCH requests for updates
        - DELETE requests for resource removal
        - Proper Content-Type headers
      </coverage>
      <expected_behavior>
        All API requests include proper authentication headers and succeed when token is valid
      </expected_behavior>
    </scenario>

    <scenario name="error_recovery">
      <description>Handling various error conditions</description>
      <coverage>
        - Network connectivity failures
        - Server 5xx errors
        - Rate limiting (429) responses
        - CORS policy violations
        - SSL/TLS certificate issues
      </coverage>
      <expected_behavior>
        System handles errors gracefully without crashing, provides clear error messages
      </expected_behavior>
    </scenario>

    <scenario name="concurrent_requests">
      <description>Multiple simultaneous authenticated requests</description>
      <coverage>
        - Concurrent API calls with same token
        - Coordinated token refresh across multiple requests
        - Prevention of duplicate refresh attempts
        - Request queuing during token refresh
      </coverage>
      <expected_behavior>
        Multiple requests work correctly, token refresh is coordinated efficiently
      </expected_behavior>
    </scenario>

    <scenario name="session_persistence">
      <description>Session state across browser interactions</description>
      <coverage>
        - Token persistence in localStorage
        - Session restoration on page refresh
        - Cross-tab synchronization
        - Graceful handling of storage quota exceeded
      </coverage>
      <expected_behavior>
        User sessions persist across page refreshes and tabs synchronize properly
      </expected_behavior>
    </scenario>
  </test_coverage>

  <common_issues_prevented>
    <issue>
      <problem>403 Forbidden errors on /api/threads endpoint</problem>
      <root_cause>Expected behavior for unauthenticated requests in staging</root_cause>
      <solution>Tests verify that authentication works and authenticated requests succeed</solution>
      <prevention>Always test both unauthenticated (should fail) and authenticated (should succeed) scenarios</prevention>
    </issue>

    <issue>
      <problem>Token refresh infinite loops</problem>
      <root_cause>Retry logic not limiting maximum attempts</root_cause>
      <solution>Implement maximum retry count (1) and prevent concurrent refresh attempts</solution>
      <prevention>Test concurrent request scenarios and verify refresh coordination</prevention>
    </issue>

    <issue>
      <problem>CORS violations in staging</problem>
      <root_cause>Frontend trying to access HTTP endpoints from HTTPS context</root_cause>
      <solution>Enforce HTTPS-only URLs in staging environment configuration</solution>
      <prevention>Test mixed-content scenarios and validate all URLs use HTTPS</prevention>
    </issue>

    <issue>
      <problem>Malformed JWT tokens causing crashes</problem>
      <root_cause>No validation of token structure before parsing</root_cause>
      <solution>Implement robust token validation and graceful error handling</solution>
      <prevention>Test various malformed token scenarios including edge cases</prevention>
    </issue>

    <issue>
      <problem>Memory leaks from auth context</problem>
      <root_cause>Event listeners and timers not cleaned up on unmount</root_cause>
      <solution>Proper cleanup in useEffect return functions</solution>
      <prevention>Test component mounting/unmounting and verify cleanup</prevention>
    </issue>
  </common_issues_prevented>

  <staging_specific_validations>
    <validation name="environment_configuration">
      <description>Validate staging environment URLs and settings</description>
      <requirements>
        - API URLs point to api.staging.netrasystems.ai
        - Auth URLs point to auth.staging.netrasystems.ai
        - Frontend URLs point to app.staging.netrasystems.ai
        - All URLs use HTTPS protocol
        - No development mode shortcuts enabled
      </requirements>
    </validation>

    <validation name="oauth_flow">
      <description>Validate OAuth integration with Google</description>
      <requirements>
        - OAuth redirect to accounts.google.com
        - Proper client ID for staging environment
        - Correct redirect URI configuration
        - Authorization code exchange working
        - Token response handling proper
      </requirements>
    </validation>

    <validation name="api_authentication">
      <description>Validate API authentication headers</description>
      <requirements>
        - Authorization: Bearer {token} header present
        - Content-Type: application/json header present
        - Token format validates as proper JWT
        - Backend accepts and validates tokens
        - Refresh mechanism works properly
      </requirements>
    </validation>

    <validation name="security_headers">
      <description>Validate security-related headers and policies</description>
      <requirements>
        - CORS headers properly configured
        - HTTPS-only communication enforced
        - SSL certificate validation working
        - No mixed content warnings
        - CSP policies appropriate for staging
      </requirements>
    </validation>
  </staging_specific_validations>

  <implementation_recommendations>
    <recommendation category="testing">
      <title>Run Auth Tests in Staging Environment</title>
      <description>
        These tests should be run specifically against the staging environment to validate
        that authentication works end-to-end with real services.
      </description>
      <implementation>
        - Mark tests with @environment staging annotation
        - Configure test runner to use staging URLs
        - Run tests as part of staging deployment validation
        - Include in continuous integration pipeline
      </implementation>
    </recommendation>

    <recommendation category="monitoring">
      <title>Add Authentication Metrics</title>
      <description>
        Implement monitoring for authentication success/failure rates, token refresh
        frequency, and error patterns.
      </description>
      <implementation>
        - Track login success/failure rates
        - Monitor token refresh frequency and failures
        - Alert on authentication error spikes
        - Log authentication flow timing metrics
      </implementation>
    </recommendation>

    <recommendation category="error_handling">
      <title>Improve Error User Experience</title>
      <description>
        Provide better user feedback for authentication errors and network issues.
      </description>
      <implementation>
        - Show user-friendly error messages for common scenarios
        - Implement retry buttons for recoverable errors
        - Provide clear guidance when re-authentication needed
        - Add loading states during token refresh
      </implementation>
    </recommendation>

    <recommendation category="security">
      <title>Enhance Token Security</title>
      <description>
        Implement additional security measures for token handling and storage.
      </description>
      <implementation>
        - Consider httpOnly cookies for sensitive tokens
        - Implement token rotation strategy
        - Add client-side token encryption
        - Monitor for suspicious token usage patterns
      </implementation>
    </recommendation>
  </implementation_recommendations>

  <next_steps>
    <step priority="high">
      Run the created tests against staging environment to validate authentication flow
    </step>
    <step priority="high">
      Verify that authenticated requests to /api/threads succeed in staging
    </step>
    <step priority="medium">
      Add authentication flow monitoring and metrics
    </step>
    <step priority="medium">
      Implement user-friendly error messages for authentication failures
    </step>
    <step priority="low">
      Consider implementing additional security enhancements
    </step>
  </next_steps>
</learnings>