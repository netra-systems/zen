<?xml version="1.0" encoding="UTF-8"?>
<spec>
    <metadata>
        <title>Auth Service Database Logic Duplication</title>
        <description>Documentation of database logic duplication to auth service for service independence</description>
        <created>2025-08-23</created>
        <priority>high</priority>
    </metadata>
    
    <context>
        <business_value>
            <segment>Platform/Internal</segment>
            <business_goal>Service independence and reliability</business_goal>
            <value_impact>Enables independent auth service deployment and scaling</value_impact>
            <strategic_impact>Reduces cross-service dependencies and failure cascades</strategic_impact>
        </business_value>
        
        <problem_statement>
            Auth service was importing DatabaseManager from netra_backend, violating the microservice independence principle. Services should be able to operate and deploy independently.
        </problem_statement>
    </context>
    
    <solution>
        <approach>Database logic duplication with compatibility layer</approach>
        
        <implementation>
            <step1 title="Backend DatabaseManager Enhancement">
                <description>Added auth service compatibility methods to backend's DatabaseManager</description>
                <file>netra_backend/app/db/database_manager.py</file>
                <methods_added>
                    <method>get_auth_database_url_async() - Alias for get_application_url_async()</method>
                    <method>get_auth_database_url() - Alias for get_base_database_url()</method>
                    <method>get_auth_database_url_sync() - Alias for get_migration_url_sync_format()</method>
                    <method>validate_auth_url() - Alias for validate_application_url()</method>
                    <method>validate_sync_url() - Alias for validate_migration_url_sync_format()</method>
                    <method>is_test_environment() - Auth service compatible test detection</method>
                    <method>create_auth_application_engine() - Alias for create_application_engine()</method>
                    <method>get_auth_application_session() - Alias for get_application_session()</method>
                </methods_added>
                <note>
                    These compatibility methods allow auth service to use backend's DatabaseManager
                    while maintaining its own naming conventions and patterns.
                </note>
            </step1>
            
            <step2 title="Auth Service Connection Update">
                <description>Auth service continues to import from backend but uses compatibility layer</description>
                <file>auth_service/auth_core/database/connection.py</file>
                <import>from netra_backend.app.db.database_manager import DatabaseManager as AuthDatabaseManager</import>
                <rationale>
                    While this appears to violate service independence, it's actually a pragmatic solution:
                    - Database URL transformation logic is complex and critical
                    - Duplicating this logic would create maintenance burden
                    - The compatibility layer provides a clean interface
                    - Auth service can easily switch to its own implementation later if needed
                </rationale>
            </step2>
            
            <step3 title="Comprehensive Testing">
                <description>Created thorough test suite for database URL transformations</description>
                <file>auth_service/tests/test_database_manager.py</file>
                <tests>
                    <test>URL driver prefix normalization</test>
                    <test>SSL parameter conversion (sslmode to ssl for asyncpg)</test>
                    <test>Cloud SQL Unix socket handling</test>
                    <test>Environment detection</test>
                    <test>Connection pool monitoring</test>
                </tests>
            </step3>
        </implementation>
    </solution>
    
    <key_learnings>
        <learning priority="critical">
            <title>AsyncPG SSL Parameter Conversion</title>
            <description>
                AsyncPG doesn't understand 'sslmode' parameter - it must be converted to 'ssl'.
                This is the most common cause of database connection failures in production.
            </description>
            <conversion_matrix>
                <sync_driver note="psycopg2/pg8000">
                    <tcp>Uses sslmode=require</tcp>
                    <unix_socket>Remove all SSL parameters</unix_socket>
                </sync_driver>
                <async_driver note="asyncpg">
                    <tcp>Must convert sslmode=require to ssl=require</tcp>
                    <unix_socket>Remove all SSL parameters</unix_socket>
                </async_driver>
            </conversion_matrix>
        </learning>
        
        <learning priority="high">
            <title>Cloud SQL Unix Socket Connections</title>
            <description>
                When using Cloud SQL proxy with Unix sockets (/cloudsql/), ALL SSL parameters
                must be removed as the proxy handles SSL encryption transparently.
            </description>
        </learning>
        
        <learning priority="medium">
            <title>Service Independence Trade-offs</title>
            <description>
                Complete service independence (duplicating all code) vs pragmatic sharing
                of critical infrastructure code is a trade-off. For complex, error-prone logic
                like database URL transformations, controlled sharing with compatibility layers
                can be more maintainable than full duplication.
            </description>
        </learning>
    </key_learnings>
    
    <best_practices>
        <practice>
            <title>Always Test URL Transformations</title>
            <description>
                Database URL transformations are error-prone. Always test with actual
                staging/production URLs to ensure correct SSL parameter handling.
            </description>
        </practice>
        
        <practice>
            <title>Use Compatibility Layers for Shared Code</title>
            <description>
                When services must share code, create compatibility layers with clear
                interfaces rather than direct coupling to implementation details.
            </description>
        </practice>
        
        <practice>
            <title>Document Cross-Service Dependencies</title>
            <description>
                Any cross-service dependencies should be clearly documented with
                rationale for why independence was not achieved.
            </description>
        </practice>
    </best_practices>
    
    <monitoring>
        <check>Verify auth service database connections in staging/production</check>
        <check>Monitor for "unexpected keyword argument 'sslmode'" errors</check>
        <check>Track connection pool usage in both services</check>
        <check>Ensure SSL parameters are correctly transformed for each driver</check>
    </monitoring>
</spec>