<?xml version='1.0' encoding='utf-8'?>
<spec>
  <metadata>
    <last_edited>2025-08-21T08:47:29.658482</last_edited>
  </metadata>
  <title>Pydantic Forward Reference Resolution</title>
  <description>
    Documentation of issues and solutions related to Pydantic forward references
    and model rebuilding, particularly for complex nested models with circular dependencies.
  </description>
  <date>2025-08-16</date>
  <critical_findings>
    <finding severity="CRITICAL">
      <title>AgentCompleted Model Not Fully Defined</title>
      <error_message>
        `AgentCompleted` is not fully defined; you should define `TriageResult`, 
        then call `AgentCompleted.model_rebuild()`
      </error_message>
      <impact>
        Pipeline executor failing to send completion messages, breaking agent workflows
      </impact>
      <root_cause>
        Forward references in Pydantic models not properly resolved due to circular
        import dependencies and TYPE_CHECKING conditional imports
      </root_cause>
    </finding>
  </critical_findings>
  <issue_category name="Forward_Reference_Chain">
    <problem>
      Complex chain of forward references causing model definition failures:
      1. AgentCompleted uses AgentResult
      2. AgentResult is imported from agent_models
      3. DeepAgentState (in agent_models) has Optional[TriageResult]
      4. TriageResult was imported only under TYPE_CHECKING
      5. SyntheticDataResult referenced WorkloadProfile as string
      6. WorkloadProfile was also only imported under TYPE_CHECKING
    </problem>
    <symptoms>
      - PydanticUserError when trying to instantiate AgentCompleted
      - Error cascade mentioning undefined types (TriageResult, WorkloadProfile)
      - Model rebuild failures due to missing type definitions
    </symptoms>
    <solution>
      1. Import all forward-referenced types directly, not just for TYPE_CHECKING
      2. Remove string quotes from type annotations where possible
      3. Use try/except blocks for imports to handle missing modules gracefully
      4. Avoid automatic model_rebuild() calls that may execute too early
    </solution>
    <files_modified>
      - netra_backend/app/schemas/agent_models.py (removed TYPE_CHECKING imports)
      - netra_backend/app/schemas/Generation.py (direct import of WorkloadProfile)
      - netra_backend/app/schemas/Agent.py (removed automatic rebuild)
    </files_modified>
  </issue_category>
  <patterns_established>
    <pattern name="Direct_Import_Pattern">
      <description>
        Import forward-referenced types directly with fallback handling
      </description>
      <example>
        # Instead of TYPE_CHECKING conditional imports:
        try:
            from netra_backend.app.agents.triage_sub_agent.models import TriageResult
        except ImportError:
            TriageResult = None  # type: ignore
      </example>
      <benefits>
        - Types are available at runtime for Pydantic validation
        - No need for manual model_rebuild() calls
        - Graceful handling of missing modules
      </benefits>
    </pattern>
    <pattern name="No_String_Annotations">
      <description>
        Use direct type references instead of string annotations when possible
      </description>
      <example>
        # Instead of:
        triage_result: Optional["TriageResult"] = None
        
        # Use:
        triage_result: Optional[TriageResult] = None
      </example>
      <benefits>
        - Immediate type resolution
        - Better IDE support and type checking
        - Avoids forward reference issues
      </benefits>
    </pattern>
  </patterns_established>
  <architectural_improvements>
    <improvement name="Type_Import_Strategy">
      Changed from conditional TYPE_CHECKING imports to direct imports with
      error handling, ensuring types are available at runtime for Pydantic
    </improvement>
    <improvement name="Removed_Manual_Rebuild">
      Eliminated manual model_rebuild() calls by ensuring all types are
      properly imported when models are defined
    </improvement>
    <improvement name="Simplified_Dependencies">
      Reduced complexity of type dependencies by importing all required
      types upfront rather than relying on deferred resolution
    </improvement>
  </architectural_improvements>
  <test_coverage>
    <test_file>netra_backend/tests/unit/test_agent_forward_references.py</test_file>
    <test_cases>
      - test_agent_completed_model_rebuild: Verifies AgentCompleted can be instantiated
      - test_deep_agent_state_with_triage_result: Tests DeepAgentState with TriageResult
      - test_agent_completed_with_final_state: Tests complex nested state objects
      - test_model_handles_circular_dependencies: Ensures circular deps are handled
    </test_cases>
    <coverage>
      All critical forward reference scenarios tested and passing
    </coverage>
  </test_coverage>
  <best_practices>
    <practice>Import all Pydantic model dependencies directly at module level</practice>
    <practice>Use try/except for imports that might have circular dependencies</practice>
    <practice>Avoid string type annotations unless absolutely necessary</practice>
    <practice>Don't rely on model_rebuild() - structure imports to avoid it</practice>
    <practice>Test model instantiation with all optional fields populated</practice>
    <practice>Document forward reference chains in complex model hierarchies</practice>
  </best_practices>
  <prevention_strategies>
    <strategy>
      Always test model instantiation after adding new type references
    </strategy>
    <strategy>
      Use direct imports for all Pydantic field types, not TYPE_CHECKING
    </strategy>
    <strategy>
      When adding optional typed fields, ensure the type is importable
    </strategy>
    <strategy>
      Avoid deeply nested forward references by flattening model hierarchies
    </strategy>
  </prevention_strategies>
  <related_issues>
    <issue>Circular import prevention strategies</issue>
    <issue>Pydantic v2 migration and type handling changes</issue>
    <issue>Performance impact of complex type resolution</issue>
  </related_issues>
</spec>