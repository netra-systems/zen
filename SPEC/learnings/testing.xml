<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Testing Learnings</name>
        <type>learnings</type>
        <category>Testing</category>
        <version>1.0</version>
        <last_updated>2025-08-16</last_updated>
        <description>Critical learnings and fixes for testing infrastructure</description>
    </metadata>
    
    <learnings>
        <learning id="clickhouse-regex-deep-nested-fields">
            <title>ClickHouse Array Syntax Regex for Deep Nested Fields</title>
            <problem>
                Regex pattern (\w+)\.(\w+)\[([^\]]+)\] only captured 2 field levels
                Failed to handle nested.very.deep.field[complex_expr]
                Incorrectly produced nested.very.arrayElement(deep.field, complex_expr)
            </problem>
            <solution>
                Changed regex to ([\w\.]+)\[([^\]]+)\] to capture entire field path
                Now correctly handles arbitrary depth nested fields
                Produces arrayElement(nested.very.deep.field, expr)
            </solution>
            <files_affected>
                <file>app/db/clickhouse_query_fixer.py</file>
                <file>app/tests/services/test_clickhouse_regex_patterns.py</file>
            </files_affected>
            <verification>All ClickHouse array syntax tests passing</verification>
        </learning>
        
        <learning id="clickhouse-function-wrapper-preservation">
            <title>ClickHouse toFloat64OrZero Wrapper Preservation</title>
            <problem>
                Function wrapper logic only added toFloat64OrZero for metrics.value fields
                Tests expected wrapper for ALL metrics.* and data.* fields
                Missing wrapper on fields like metrics.incorrect, data.field
            </problem>
            <solution>
                Enhanced logic to check field_path.startswith(('metrics.', 'data.'))
                All numeric field types now get toFloat64OrZero wrapper
                Maintains type safety for ClickHouse queries
            </solution>
            <files_affected>
                <file>app/db/clickhouse_query_fixer.py</file>
                <file>app/tests/services/test_clickhouse_array_syntax.py</file>
            </files_affected>
            <verification>Mixed syntax tests now pass with correct wrappers</verification>
        </learning>
        
        <learning id="frontend-test-bash-glob-pattern">
            <title>Frontend Test Bash Extended Glob Pattern Issue</title>
            <problem>
                Exit code 255 when running frontend tests
                Command used bash-specific extended glob pattern @(components|hooks|store|services|lib|utils)
                Pattern incompatible with Windows environments
                Required extglob to be enabled but not portable
            </problem>
            <solution>
                Replace with Jest-compatible --testPathPatterns regex
                Use ./node_modules/.bin/jest --testPathPatterns="__tests__/(lib|utils)/.*\.test\.[jt]sx?$"
                Works consistently across all environments
            </solution>
            <files_affected>
                <file>test_runner.py</file>
                <file>frontend/jest.setup.ts</file>
            </files_affected>
            <verification>Frontend tests execute successfully with 0 exit code</verification>
        </learning>
        
        <learning id="test-runner-easy-commands">
            <title>Easy Test Runner Commands</title>
            <problem>
                Tests need to be easy to run for developers
                Multiple test levels and categories can be confusing
                Need clear documentation of common test commands
            </problem>
            <solution>
                Primary commands:
                - python test_runner.py --level unit (DEFAULT, 1-2 min)
                - python test_runner.py --discover (see all test categories)
                - python test_runner.py --level smoke (quick pre-commit, 30s)
                - python test_runner.py --level real_e2e (real LLM tests, 15-20 min)
            </solution>
            <best_practice>
                Always run unit tests before and after code changes
                Use smoke tests for quick validation
                Run real_e2e for agent changes
            </best_practice>
        </learning>
        
        <learning id="test-isolation-interceptor-reset">
            <title>Test Isolation for Singleton Interceptors</title>
            <problem>
                ClickHouseQueryInterceptor singleton not resetting between tests
                test_interceptor_statistics_reset failing due to state persistence
                Interceptor.total_queries retaining count from previous tests
            </problem>
            <solution>
                Ensure proper test isolation with fixture teardown
                Reset singleton state in test setup/teardown
                Use mock.patch for interceptor in tests to avoid state pollution
            </solution>
            <files_affected>
                <file>app/tests/services/test_clickhouse_query_interceptor.py</file>
            </files_affected>
            <note>Test isolation critical for singleton patterns</note>
        </learning>
        
        <learning id="frontend-component-test-setup">
            <title>Frontend Component Test Configuration</title>
            <problem>
                ChatSidebar tests failing due to missing data-testid attributes
                WebSocket error messages polluting test output
                Complex ThreadService mocking preventing proper testing
            </problem>
            <solution>
                Added data-testid attributes to all interactive elements
                Enhanced jest.setup.ts to suppress expected WebSocket errors
                Streamlined mock setup with proper Jest module mocking
            </solution>
            <files_affected>
                <file>frontend/components/chat/ChatSidebar.tsx</file>
                <file>frontend/jest.setup.ts</file>
                <file>frontend/__tests__/components/ChatSidebar/setup.tsx</file>
            </files_affected>
            <verification>Component tests pass with proper mocking</verification>
        </learning>
        
        <learning id="windows-jest-bus-error-fix">
            <title>Windows Jest Bus Error - NPM Wrapper Issue</title>
            <problem>
                Bus error when running npm test on Windows
                NPM/NPX wrappers failing to execute Jest properly
                Node.js line 65: Bus error "$NODE_EXE" "$NPM_CLI_JS" "$@"
                Jest binary wrappers incompatible with Windows environment
            </problem>
            <solution>
                Created Windows-compatible Jest runner (run-jest.js)
                Updated package.json scripts to use direct Node.js execution
                Bypassed npm/npx wrappers by calling Jest directly through Node.js
                Used path: node_modules/jest/bin/jest.js for direct execution
            </solution>
            <files_affected>
                <file>frontend/run-jest.js</file>
                <file>frontend/package.json</file>
            </files_affected>
            <technical_details>
                Root cause: Windows incompatibility with Unix shell scripts in npm binary wrappers
                Solution: Direct Node.js execution bypasses shell script wrapper layer
                Command: node run-jest.js (instead of jest or npx jest)
            </technical_details>
            <verification>All Jest commands work without Bus error on Windows</verification>
        </learning>
        
        <learning id="websocket-mock-server-conflicts">
            <title>WebSocket Mock Server URL Conflicts and Cleanup Issues</title>
            <problem>
                "A mock server is already listening on this url" error in jest-websocket-mock
                Multiple test files creating mock servers on same URL 'ws://localhost:8000/ws'
                "Cannot read properties of undefined (reading 'close')" in WS.clean()
                WS.clean() called when mockWs undefined, causing test failures
                No test isolation between WebSocket mock servers
            </problem>
            <solution>
                Created centralized WebSocketTestManager with unique URLs per test
                Implemented safe cleanup with try-catch blocks for WS.clean()
                Generated unique URLs using timestamp + random suffix pattern
                Added proper beforeEach/afterEach hooks with existence checks
                Created websocket-test-manager.ts module for test isolation
            </solution>
            <files_affected>
                <file>frontend/__tests__/helpers/websocket-test-manager.ts</file>
                <file>frontend/__tests__/shared/test-utilities.tsx</file>
                <file>frontend/__tests__/helpers/test-setup-helpers.ts</file>
                <file>frontend/__tests__/integration/advanced-features.test.tsx</file>
                <file>frontend/__tests__/integration/collaboration-state.test.tsx</file>
                <file>frontend/__tests__/integration/corpus-management.test.tsx</file>
            </files_affected>
            <technical_details>
                Root cause: jest-websocket-mock doesn't allow multiple servers on same URL
                Pattern: Generate unique URLs: ws://localhost:8000/ws-${timestamp}-${random}
                Safe cleanup: Wrap WS.clean() in try-catch blocks
                Manager pattern: Centralize WebSocket mock server lifecycle
            </technical_details>
            <best_practice>
                Use WebSocketTestManager instead of direct WS instantiation
                Always call wsManager.cleanup() in afterEach hooks
                Use unique URLs to prevent server conflicts
                Handle undefined mock servers gracefully
            </best_practice>
            <verification>WebSocket tests run without URL conflicts or cleanup errors</verification>
        </learning>
    </learnings>
    
    <best_practices>
        <practice>
            <title>Test Before and After Changes</title>
            <description>Always run python test_runner.py --level unit before and after making code changes</description>
        </practice>
        <practice>
            <title>Use Test Discovery</title>
            <description>Run python test_runner.py --discover to see all available test categories and levels</description>
        </practice>
        <practice>
            <title>Fix Test Failures Immediately</title>
            <description>Never commit code with failing tests - fix them immediately</description>
        </practice>
        <practice>
            <title>Maintain Test Isolation</title>
            <description>Ensure tests do not affect each other through proper setup/teardown</description>
        </practice>
    </best_practices>
    
    <quick_reference>
        <command purpose="Run default unit tests">python test_runner.py --level unit</command>
        <command purpose="Discover all test categories">python test_runner.py --discover</command>
        <command purpose="Quick smoke tests">python test_runner.py --level smoke</command>
        <command purpose="Real E2E with LLM">python test_runner.py --level real_e2e</command>
        <command purpose="Run specific test file">python -m pytest path/to/test_file.py -xvs</command>
    </quick_reference>
</specification>