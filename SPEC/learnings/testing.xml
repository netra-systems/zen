<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Testing Learnings</name>
        <type>learnings</type>
        <category>Testing</category>
        <version>1.0</version>
        <last_updated>2025-08-16</last_updated>
        <description>Critical learnings and fixes for testing infrastructure</description>
    </metadata>
    
    <learnings>
        <learning id="clickhouse-regex-deep-nested-fields">
            <title>ClickHouse Array Syntax Regex for Deep Nested Fields</title>
            <problem>
                Regex pattern (\w+)\.(\w+)\[([^\]]+)\] only captured 2 field levels
                Failed to handle nested.very.deep.field[complex_expr]
                Incorrectly produced nested.very.arrayElement(deep.field, complex_expr)
            </problem>
            <solution>
                Changed regex to ([\w\.]+)\[([^\]]+)\] to capture entire field path
                Now correctly handles arbitrary depth nested fields
                Produces arrayElement(nested.very.deep.field, expr)
            </solution>
            <files_affected>
                <file>app/db/clickhouse_query_fixer.py</file>
                <file>app/tests/services/test_clickhouse_regex_patterns.py</file>
            </files_affected>
            <verification>All ClickHouse array syntax tests passing</verification>
        </learning>
        
        <learning id="clickhouse-function-wrapper-preservation">
            <title>ClickHouse toFloat64OrZero Wrapper Preservation</title>
            <problem>
                Function wrapper logic only added toFloat64OrZero for metrics.value fields
                Tests expected wrapper for ALL metrics.* and data.* fields
                Missing wrapper on fields like metrics.incorrect, data.field
            </problem>
            <solution>
                Enhanced logic to check field_path.startswith(('metrics.', 'data.'))
                All numeric field types now get toFloat64OrZero wrapper
                Maintains type safety for ClickHouse queries
            </solution>
            <files_affected>
                <file>app/db/clickhouse_query_fixer.py</file>
                <file>app/tests/services/test_clickhouse_array_syntax.py</file>
            </files_affected>
            <verification>Mixed syntax tests now pass with correct wrappers</verification>
        </learning>
        
        <learning id="frontend-test-bash-glob-pattern">
            <title>Frontend Test Bash Extended Glob Pattern Issue</title>
            <problem>
                Exit code 255 when running frontend tests
                Command used bash-specific extended glob pattern @(components|hooks|store|services|lib|utils)
                Pattern incompatible with Windows environments
                Required extglob to be enabled but not portable
            </problem>
            <solution>
                Replace with Jest-compatible --testPathPatterns regex
                Use ./node_modules/.bin/jest --testPathPatterns="__tests__/(lib|utils)/.*\.test\.[jt]sx?$"
                Works consistently across all environments
            </solution>
            <files_affected>
                <file>test_runner.py</file>
                <file>frontend/jest.setup.ts</file>
            </files_affected>
            <verification>Frontend tests execute successfully with 0 exit code</verification>
        </learning>
        
        <learning id="test-runner-easy-commands">
            <title>Easy Test Runner Commands</title>
            <problem>
                Tests need to be easy to run for developers
                Multiple test levels and categories can be confusing
                Need clear documentation of common test commands
            </problem>
            <solution>
                Primary commands:
                - python test_runner.py --level unit (DEFAULT, 1-2 min)
                - python test_runner.py --discover (see all test categories)
                - python test_runner.py --level smoke (quick pre-commit, 30s)
                - python test_runner.py --level real_e2e (real LLM tests, 15-20 min)
            </solution>
            <best_practice>
                Always run unit tests before and after code changes
                Use smoke tests for quick validation
                Run real_e2e for agent changes
            </best_practice>
        </learning>
        
        <learning id="test-isolation-interceptor-reset">
            <title>Test Isolation for Singleton Interceptors</title>
            <problem>
                ClickHouseQueryInterceptor singleton not resetting between tests
                test_interceptor_statistics_reset failing due to state persistence
                Interceptor.total_queries retaining count from previous tests
            </problem>
            <solution>
                Ensure proper test isolation with fixture teardown
                Reset singleton state in test setup/teardown
                Use mock.patch for interceptor in tests to avoid state pollution
            </solution>
            <files_affected>
                <file>app/tests/services/test_clickhouse_query_interceptor.py</file>
            </files_affected>
            <note>Test isolation critical for singleton patterns</note>
        </learning>
        
        <learning id="frontend-component-test-setup">
            <title>Frontend Component Test Configuration</title>
            <problem>
                ChatSidebar tests failing due to missing data-testid attributes
                WebSocket error messages polluting test output
                Complex ThreadService mocking preventing proper testing
            </problem>
            <solution>
                Added data-testid attributes to all interactive elements
                Enhanced jest.setup.ts to suppress expected WebSocket errors
                Streamlined mock setup with proper Jest module mocking
            </solution>
            <files_affected>
                <file>frontend/components/chat/ChatSidebar.tsx</file>
                <file>frontend/jest.setup.ts</file>
                <file>frontend/__tests__/components/ChatSidebar/setup.tsx</file>
            </files_affected>
            <verification>Component tests pass with proper mocking</verification>
        </learning>
    </learnings>
    
    <best_practices>
        <practice>
            <title>Test Before and After Changes</title>
            <description>Always run python test_runner.py --level unit before and after making code changes</description>
        </practice>
        <practice>
            <title>Use Test Discovery</title>
            <description>Run python test_runner.py --discover to see all available test categories and levels</description>
        </practice>
        <practice>
            <title>Fix Test Failures Immediately</title>
            <description>Never commit code with failing tests - fix them immediately</description>
        </practice>
        <practice>
            <title>Maintain Test Isolation</title>
            <description>Ensure tests do not affect each other through proper setup/teardown</description>
        </practice>
    </best_practices>
    
    <quick_reference>
        <command purpose="Run default unit tests">python test_runner.py --level unit</command>
        <command purpose="Discover all test categories">python test_runner.py --discover</command>
        <command purpose="Quick smoke tests">python test_runner.py --level smoke</command>
        <command purpose="Real E2E with LLM">python test_runner.py --level real_e2e</command>
        <command purpose="Run specific test file">python -m pytest path/to/test_file.py -xvs</command>
    </quick_reference>
</specification>