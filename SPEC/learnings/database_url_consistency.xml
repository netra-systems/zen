<?xml version="1.0" encoding="UTF-8"?>
<learnings>
  <title>Database URL Consistency Between Services</title>
  <date>2025-08-20</date>
  <severity>CRITICAL</severity>
  <summary>
    Both backend and auth services must use the same DATABASE_URL secret.
    When using Cloud SQL proxy, the URL must use Unix socket format, not direct IP.
    Invalid IP addresses in secrets cause connection timeouts.
  </summary>
  
  <issue_discovery>
    <symptom>Auth service fails with database connection timeout</symptom>
    <initial_assumption>Auth service was getting different DATABASE_URL than backend</initial_assumption>
    <actual_problem>Both services use same secret but IP address is invalid</actual_problem>
    <discovery_method>
      <step>Checked how both services load DATABASE_URL - both use os.getenv("DATABASE_URL")</step>
      <step>Checked Cloud Build configs - both use database-url-staging secret</step>
      <step>Checked secret value - contains IP 34.68.229.240</step>
      <step>Listed Cloud SQL instances - IP doesn't match any instance</step>
    </discovery_method>
  </issue_discovery>
  
  <root_cause_analysis>
    <database_secret_issue>
      <secret_name>database-url-staging</secret_name>
      <incorrect_value>postgresql://netra:test-password@34.68.229.240:5432/netra_staging?sslmode=require</incorrect_value>
      <problem>IP address 34.68.229.240 doesn't belong to any Cloud SQL instance</problem>
    </database_secret_issue>
    
    <actual_instances>
      <instance>
        <name>netra-postgres-2db4ccab</name>
        <ip>34.132.142.103</ip>
        <connection_name>netra-staging:us-central1:netra-postgres-2db4ccab</connection_name>
      </instance>
      <instance>
        <name>staging-shared-postgres</name>
        <ip>34.171.226.17</ip>
        <connection_name>netra-staging:us-central1:staging-shared-postgres</connection_name>
      </instance>
    </actual_instances>
    
    <cloud_sql_proxy_configuration>
      <service>netra-auth-service</service>
      <cloudsql_instances>netra-staging:us-central1:staging-shared-postgres</cloudsql_instances>
      <required_url_format>Unix socket format for Cloud SQL proxy</required_url_format>
    </cloud_sql_proxy_configuration>
  </root_cause_analysis>
  
  <correct_configuration>
    <unix_socket_format>
      <description>When using Cloud SQL proxy, use Unix socket format</description>
      <format>postgresql://user:password@/database?host=/cloudsql/project:region:instance</format>
      <example>postgresql://netra:password@/netra_staging?host=/cloudsql/netra-staging:us-central1:staging-shared-postgres</example>
      <benefits>
        - Secure connection via Cloud SQL proxy
        - No need to manage SSL certificates
        - Automatic authentication via service account
      </benefits>
    </unix_socket_format>
    
    <direct_ip_format>
      <description>For direct connections without Cloud SQL proxy</description>
      <format>postgresql://user:password@ip:port/database?sslmode=require</format>
      <example>postgresql://netra:password@34.171.226.17:5432/netra_staging?sslmode=require</example>
      <requirements>
        - Valid IP address from actual Cloud SQL instance
        - SSL mode configuration
        - Network access configured (authorized networks)
      </requirements>
    </direct_ip_format>
  </correct_configuration>
  
  <service_configuration_consistency>
    <principle>All services must use the same database configuration approach</principle>
    <backend_service>
      <uses_secret>database-url-staging</uses_secret>
      <should_use>Unix socket format if Cloud SQL proxy is configured</should_use>
    </backend_service>
    <auth_service>
      <uses_secret>database-url-staging</uses_secret>
      <has_cloud_sql_proxy>Yes, via --set-cloudsql-instances</has_cloud_sql_proxy>
      <must_use>Unix socket format</must_use>
    </auth_service>
  </service_configuration_consistency>
  
  <best_practices>
    <practice priority="1">
      <title>Use Cloud SQL proxy for all services</title>
      <description>
        Configure all Cloud Run services with --set-cloudsql-instances.
        Use Unix socket format in DATABASE_URL for consistency.
      </description>
    </practice>
    
    <practice priority="2">
      <title>Validate database URLs before deployment</title>
      <description>
        Check that IP addresses match actual Cloud SQL instances.
        Verify Unix socket paths match configured Cloud SQL instances.
      </description>
    </practice>
    
    <practice priority="3">
      <title>Single source of truth for database configuration</title>
      <description>
        All services should use the same secret for DATABASE_URL.
        Update all services when changing database configuration.
      </description>
    </practice>
    
    <practice priority="4">
      <title>Document database instances</title>
      <description>
        Maintain clear documentation of all Cloud SQL instances.
        Include IP addresses, connection names, and purpose.
      </description>
    </practice>
  </best_practices>
  
  <troubleshooting_guide>
    <issue type="timeout">
      <symptom>Database connection timeout</symptom>
      <check>Verify IP address matches an actual Cloud SQL instance</check>
      <check>Confirm Cloud SQL proxy is running if using Unix socket</check>
      <check>Check network connectivity and firewall rules</check>
    </issue>
    
    <issue type="authentication">
      <symptom>Authentication failed</symptom>
      <check>Verify username and password are correct</check>
      <check>Check user exists in Cloud SQL instance</check>
      <check>Confirm database name is correct</check>
    </issue>
    
    <issue type="ssl">
      <symptom>SSL/TLS errors</symptom>
      <check>For asyncpg, use ssl= instead of sslmode=</check>
      <check>Unix socket connections don't need SSL parameters</check>
      <check>Direct IP connections require sslmode=require</check>
    </issue>
  </troubleshooting_guide>
  
  <commands>
    <command purpose="List Cloud SQL instances">
      gcloud sql instances list --project=netra-staging
    </command>
    
    <command purpose="Get instance details">
      gcloud sql instances describe INSTANCE_NAME --project=netra-staging
    </command>
    
    <command purpose="Check secret value">
      gcloud secrets versions access latest --secret=database-url-staging --project=netra-staging
    </command>
    
    <command purpose="Update secret">
      echo -n "NEW_URL" | gcloud secrets versions add database-url-staging --data-file=- --project=netra-staging
    </command>
    
    <command purpose="Check service configuration">
      gcloud run services describe SERVICE_NAME --region=us-central1 --project=netra-staging --format=yaml
    </command>
    
    <command purpose="Force service restart">
      gcloud run services update SERVICE_NAME --region=us-central1 --project=netra-staging --no-traffic
    </command>
  </commands>
  
  <action_items>
    <action priority="COMPLETED">
      Updated database-url-staging secret to use Unix socket format
    </action>
    <action priority="COMPLETED">
      Fixed backend service SSL parameter handling to match auth service pattern
    </action>
    <action priority="PENDING">
      Verify database credentials (password might be incorrect)
    </action>
    <action priority="PENDING">
      Redeploy backend service to use updated secret
    </action>
    <action priority="PENDING">
      Add Cloud SQL proxy configuration to backend service if missing
    </action>
    <action priority="LOW">
      Create automated validation of database URLs in CI/CD
    </action>
  </action_items>
</learnings>