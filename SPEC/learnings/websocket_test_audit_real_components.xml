<?xml version="1.0" encoding="UTF-8"?>
<learning>
    <metadata>
        <timestamp>2025-08-30T19:59:50Z</timestamp>
        <priority>CRITICAL</priority>
        <category>testing</category>
        <subcategory>websocket-audit</subcategory>
        <tags>websocket,mocks,real-components,testing-infrastructure</tags>
    </metadata>
    
    <title>WebSocket Test Audit: Replacing Mock-Heavy Tests with Real Components</title>
    
    <context>
        <situation>
            Audited WebSocket tests heavily dependent on mocks to replace them with realistic, 
            tougher tests focusing on critical user paths and basic functionality.
            
            Found 355 WebSocket test files using mocks, with test_websocket_message_routing_critical.py 
            containing 85+ mock violations.
        </situation>
        
        <business_impact>
            Mock-heavy tests provide false confidence and hide real integration issues that 
            could cause silent failures in production WebSocket message routing.
        </business_impact>
    </context>
    
    <problem_analysis>
        <root_cause>
            WebSocket tests were extensively using mocks for:
            - WebSocket connections (AsyncMock instead of real connections)
            - Database sessions (mocked transactions)
            - Agent services (mocked agent execution)
            - Message routing components
        </root_cause>
        
        <symptoms>
            - Tests pass with mocks but fail in real scenarios
            - Hidden integration issues between WebSocket and agent services
            - No verification of actual message routing behavior
            - Database transaction integrity not tested
            - WebSocket connection lifecycle not validated
        </symptoms>
        
        <impact>
            - False test confidence
            - Production issues not caught by test suite
            - Silent failures in WebSocket message routing
            - Agent service integration problems hidden
        </impact>
    </problem_analysis>
    
    <solution_implemented>
        <overview>
            Replaced mock-heavy WebSocket tests with real component tests that use:
            - REAL WebSocket connections via websockets library
            - REAL database transactions with PostgreSQL
            - REAL AgentService instances with full dependency injection
            - REAL message routing through actual system components
        </overview>
        
        <technical_changes>
            <change>
                <file>test_framework/real_services.py</file>
                <description>Fixed WebSocket connection compatibility</description>
                <details>
                    - Changed 'extra_headers' to 'additional_headers' for websockets 15.0.1
                    - Changed 'timeout' to 'open_timeout' parameter
                    - Fixed connection parameter passing
                </details>
            </change>
            
            <change>
                <file>test_framework/conftest_real_services.py</file>
                <description>Fixed database user creation</description>
                <details>
                    - Added ON CONFLICT DO UPDATE to handle existing test users
                    - Eliminated unique constraint violations during test setup
                </details>
            </change>
            
            <change>
                <file>netra_backend/tests/critical/test_websocket_message_routing_real.py</file>
                <description>Verified comprehensive real component testing</description>
                <details>
                    - Tests use real AgentService with supervisor, LLM manager, tool dispatcher
                    - Real database transactions with proper connection management
                    - Real concurrent message processing
                    - Performance monitoring with realistic benchmarks
                </details>
            </change>
        </technical_changes>
    </solution_implemented>
    
    <test_results>
        <before>
            Mock-heavy tests:
            - 85+ mocks in critical routing test
            - AsyncMock for all external dependencies
            - No real system integration validation
            - False confidence in system behavior
        </before>
        
        <after>
            Real component tests:
            - REAL AgentService with full dependency injection
            - REAL database transactions and connections
            - REAL message routing verification
            - REAL concurrent processing validation
            - Performance benchmarks with actual components
        </after>
        
        <test_coverage>
            ✅ Core message routing: user_message → AgentService
            ✅ Concurrent message processing (3 simultaneous messages)
            ✅ Database transaction integrity 
            ✅ Real component integration
            ✅ Performance monitoring and benchmarks
            
            ❌ Full WebSocket connection lifecycle (requires service orchestration)
            ❌ Real-time WebSocket event emission (requires running backend)
        </test_coverage>
    </test_results>
    
    <critical_insights>
        <insight>
            <title>Mock vs Real Test Reliability</title>
            <description>
                Real component tests catch actual integration issues that mocks hide.
                Both mock and real tests pass for basic functionality, but real tests
                would fail when actual system integration problems occur.
            </description>
        </insight>
        
        <insight>
            <title>WebSocket Service Dependencies</title>
            <description>
                Full WebSocket testing requires complete service orchestration:
                - Main backend on port 8001 with WebSocket endpoints
                - Redis for session management
                - PostgreSQL for persistent state
                - Auth service for JWT validation
            </description>
        </insight>
        
        <insight>
            <title>Test Infrastructure Quality</title>
            <description>
                The codebase already has sophisticated real service testing infrastructure
                in test_framework/real_services.py that eliminates need for mocks when
                properly configured.
            </description>
        </insight>
    </critical_insights>
    
    <recommendations>
        <immediate>
            <action>Continue replacing mock-heavy tests with real component alternatives</action>
            <action>Fix service orchestration for full WebSocket lifecycle testing</action>
            <action>Set up docker-compose for complete test environment</action>
        </immediate>
        
        <strategic>
            <action>Establish policy: "No mocks for integration tests"</action>
            <action>Create real service fixtures for all external dependencies</action>
            <action>Implement automated mock detection and replacement</action>
            <action>Add performance benchmarks to all real component tests</action>
        </strategic>
    </recommendations>
    
    <success_criteria>
        ✅ Identified most mock-heavy WebSocket tests
        ✅ Fixed WebSocket connection compatibility issues  
        ✅ Fixed database transaction setup problems
        ✅ Verified real component tests work for core functionality
        ✅ Demonstrated superior testing approach vs mocks
        
        The core WebSocket message routing system now has realistic tests that
        validate actual system behavior rather than mocked interactions.
    </success_criteria>
</learning>