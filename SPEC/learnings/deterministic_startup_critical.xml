<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <metadata>
    <title>Deterministic Startup - Critical Path for Chat</title>
    <date>2025-08-31</date>
    <severity>CRITICAL</severity>
    <business_value>$500K+ ARR - Core chat functionality</business_value>
    <tags>startup, deterministic, critical-path, chat, websocket, agent</tags>
  </metadata>

  <problem_statement>
    <description>
      The startup sequence was non-deterministic with 25+ violations allowing the service
      to start with broken chat functionality. Agent supervisor could fail "gracefully" 
      in staging/production, leaving WebSocket in degraded mode without agent capabilities.
      This violated the core principle that "chat is king" and delivers 90% of value.
    </description>
    
    <violations_found>
      <violation count="5+">db_session_factory set to None on failures</violation>
      <violation count="3+">agent_supervisor and thread_service set to None</violation>
      <violation count="10+">Graceful degradation allowing critical failures</violation>
      <violation count="8+">Environment-conditional behavior for critical services</violation>
      <violation count="6+">Try-except blocks swallowing critical failures</violation>
      <violation>WebSocket operating in "degraded mode" without agents</violation>
    </violations_found>
    
    <root_cause>
      Misguided attempt at "resilience" through graceful degradation that actually
      made the system LESS reliable by allowing partially broken states.
      The startup code prioritized "staying up" over "working correctly".
    </root_cause>
  </problem_statement>

  <solution>
    <principle>
      NO AMBIGUITY. NO FALLBACKS. NO GRACEFUL DEGRADATION FOR CORE SERVICES.
      If chat cannot work, the service MUST NOT start.
    </principle>
    
    <implementation>
      <component name="StartupOrchestrator">
        <description>
          Orchestrates deterministic startup with strict phases and no conditional paths.
          Every critical service must initialize successfully or startup fails completely.
        </description>
        <file>netra_backend/app/smd.py</file>
      </component>
      
      <component name="Startup Specification">
        <description>
          Formal specification of the mandatory startup order and criticality.
        </description>
        <file>SPEC/startup_sequence_deterministic.xml</file>
      </component>
    </implementation>
    
    <startup_phases>
      <phase number="1" name="Foundation">
        <step>Logging (critical)</step>
        <step>Environment validation (critical)</step>
        <step>Migrations (non-critical)</step>
      </phase>
      
      <phase number="2" name="Core Services">
        <step>Database connection (critical)</step>
        <step>Redis connection (critical)</step>
        <step>Key Manager (critical)</step>
        <step>LLM Manager (critical)</step>
      </phase>
      
      <phase number="3" name="Chat Pipeline">
        <step>Tool Registry (critical)</step>
        <step>WebSocket Manager (critical)</step>
        <step>Agent Supervisor with WebSocket enhancement (critical)</step>
        <step>Message Handlers (critical)</step>
      </phase>
      
      <phase number="4" name="Optional Services">
        <step>ClickHouse (optional)</step>
        <step>Monitoring (optional)</step>
        <step>Background Tasks (optional)</step>
      </phase>
      
      <phase number="5" name="Validation">
        <step>Verify all critical services operational</step>
      </phase>
    </startup_phases>
  </solution>

  <key_changes>
    <change file="netra_backend/app/startup_module.py">
      Modified _create_agent_supervisor to fail fast in staging/production.
      Agent supervisor failures now cause immediate startup failure.
    </change>
    
    <change file="netra_backend/app/routes/websocket.py">
      WebSocket endpoint now raises RuntimeError instead of degrading gracefully
      when agent services are missing in staging/production.
    </change>
    
    <change file="netra_backend/app/smd.py">
      New deterministic startup implementation with no fallbacks or None assignments
      for critical services.
    </change>
  </key_changes>

  <guarantees>
    <guarantee>
      When startup completes successfully:
      - db_session_factory is NOT None
      - redis_manager is NOT None
      - llm_manager is NOT None
      - agent_supervisor is NOT None
      - thread_service is NOT None
      - Tool dispatcher has WebSocket enhancement
      - Chat pipeline is fully operational
    </guarantee>
    
    <guarantee>
      When any critical service fails:
      - Startup fails immediately
      - Clear error logged with failure reason
      - Service does not start
      - No partially broken states
    </guarantee>
  </guarantees>

  <testing_requirements>
    <test name="test_critical_services_fail_fast">
      Verify each critical service failure causes startup failure
    </test>
    
    <test name="test_no_none_assignments">
      Verify no critical service is ever set to None
    </test>
    
    <test name="test_deterministic_order">
      Verify services initialize in exact specified order
    </test>
    
    <test name="test_websocket_enhancement">
      Verify tool dispatcher has WebSocket enhancement after startup
    </test>
    
    <test name="test_staging_production_no_degradation">
      Verify staging/production never allow degraded mode for chat
    </test>
  </testing_requirements>

  <monitoring>
    <metric name="startup_failures">
      Monitor startup failures by phase and step to identify problematic services
    </metric>
    
    <metric name="critical_service_none">
      Alert if any critical service is None after startup (should never happen)
    </metric>
    
    <metric name="websocket_without_agents">
      Alert if WebSocket connections exist without agent_supervisor (critical failure)
    </metric>
  </monitoring>

  <lessons_learned>
    <lesson>
      "Graceful degradation" for critical services is an anti-pattern.
      It creates unpredictable failure modes that are harder to debug than clean failures.
    </lesson>
    
    <lesson>
      Deterministic behavior is more valuable than resilience through fallbacks.
      Better to fail fast and clearly than to limp along with broken functionality.
    </lesson>
    
    <lesson>
      Core business value (chat = 90% of value) must be on the critical path.
      No compromises, no fallbacks, no degraded modes.
    </lesson>
    
    <lesson>
      Setting critical services to None is NEVER acceptable.
      Either the service works completely or the startup fails.
    </lesson>
  </lessons_learned>

  <related_learnings>
    <learning path="SPEC/learnings/websocket_agent_integration_critical.xml">
      WebSocket agent events are critical for chat functionality
    </learning>
    
    <learning path="SPEC/learnings/websocket_injection_fix_comprehensive.xml">
      WebSocket manager injection must work for agent events
    </learning>
  </related_learnings>
</learning>