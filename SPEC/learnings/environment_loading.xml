<?xml version='1.0' encoding='utf-8'?>
<learnings category="environment-loading">
  <metadata>
    <last_edited>2025-08-24T00:00:00.000000</last_edited>
  </metadata>
  <meta>
    <title>Environment Loading and Isolation Patterns</title>
    <created>2025-08-24</created>
    <criticality>HIGH</criticality>
    <tags>environment, secrets, isolation, development, testing, security</tags>
  </meta>
  
  <critical_issue id="ENV-LOAD-001">
    <title>Development Environment Isolation for Predictable Testing</title>
    <problem>
      Dev launcher loaded OS environment variables with highest priority, causing conflicts
      and unpredictable behavior in development and testing. Tests could not properly
      isolate their environment, leading to race conditions and cross-test pollution.
    </problem>
    <root_causes>
      <cause>LocalSecretManager._build_fallback_chain() loaded OS environment with highest priority always</cause>
      <cause>No isolation mode to skip OS environment loading in development</cause>
      <cause>Tests and development scenarios shared same environment loading logic as production</cause>
      <cause>No way for tests to prevent OS environment pollution from previous runs</cause>
    </root_causes>
    <solution>
      <summary>Implemented isolation_mode parameter with environment-based auto-detection</summary>
      <implementation>
        <step>Added isolation_mode parameter to LocalSecretManager constructor</step>
        <step>Modified _build_fallback_chain to conditionally skip OS environment loading</step>
        <step>Added isolation_mode parameter to SecretLoader with auto-detection</step>
        <step>Updated launcher to detect development mode and enable isolation by default</step>
        <step>Created comprehensive test suite test_environment_isolation.py</step>
      </implementation>
      <priority_orders>
        <production>OS env → .env.local → .env → .secrets → GSM → defaults</production>
        <development_isolation>.env.local → .env → .secrets → GSM → defaults (NO OS env)</development_isolation>
      </priority_orders>
    </solution>
    <files_modified>
      <file>dev_launcher/local_secrets.py:28-100</file>
      <file>dev_launcher/secret_loader.py:36-75</file>
      <file>dev_launcher/launcher.py:126-142</file>
      <file>dev_launcher/tests/test_environment_isolation.py (new)</file>
      <file>dev_launcher/tests/test_env_loading_regression.py:79-325 (updated)</file>
    </files_modified>
  </critical_issue>
  
  <critical_issue id="ENV-LOAD-002">
    <title>Auto-Detection Logic for Environment Isolation</title>
    <problem>
      Need automatic detection of when to enable isolation mode without requiring
      explicit configuration in every development scenario.
    </problem>
    <solution>
      <summary>Auto-detect development mode based on ENVIRONMENT variable</summary>
      <logic>
        <condition>ENVIRONMENT=development → isolation_mode=True</condition>
        <condition>ENVIRONMENT=production → isolation_mode=False</condition>
        <condition>ENVIRONMENT=staging → isolation_mode=False</condition>
        <condition>Missing/unknown ENVIRONMENT → default to development (isolation_mode=True)</condition>
      </logic>
      <override>Allow explicit isolation_mode parameter to override auto-detection</override>
    </solution>
  </critical_issue>
  
  <critical_issue id="ENV-LOAD-003">
    <title>Clear Logging for Environment Isolation Status</title>
    <problem>
      Users and developers need clear visibility into whether isolation mode is active
      and what environment loading priority is being used.
    </problem>
    <solution>
      <summary>Enhanced logging to clearly indicate isolation mode status</summary>
      <log_examples>
        <isolation_enabled>[LOCAL SECRETS] Loading with fallback chain... (Isolation mode: ENABLED (development/testing))</isolation_enabled>
        <isolation_disabled>[LOCAL SECRETS] Loading with fallback chain... (Isolation mode: DISABLED (production))</isolation_disabled>
        <skipped_os>[ISOLATION] Skipping system environment variables (isolation mode enabled)</skipped_os>
        <priority_summary>Priority: .env.local > .env > Google Secrets > Defaults (ISOLATION MODE)</priority_summary>
      </log_examples>
    </solution>
  </critical_issue>
  
  <best_practices>
    <practice id="BP-ENV-001">
      <title>Environment Loading Priority Design</title>
      <description>
        Design environment loading with different priorities for different contexts:
        - Production: System security priority (OS env wins)
        - Development: Predictability priority (files win, no OS env pollution)
        - Testing: Isolation priority (only controlled sources)
      </description>
      <implementation>
        <production>OS env → .env.local → .env → remote secrets → defaults</production>
        <development>.env.local → .env → remote secrets → defaults (isolated)</development>
      </implementation>
    </practice>
    
    <practice id="BP-ENV-002">
      <title>Test Environment Isolation</title>
      <description>
        Tests should run in isolation mode by default to prevent:
        - Cross-test environment pollution
        - Dependency on developer's local OS environment
        - Race conditions from previous test runs
        - Unpredictable behavior due to system state
      </description>
      <implementation>
        <rule>All test environments should default to isolation_mode=True</rule>
        <rule>Tests should only depend on .env files they create</rule>
        <rule>Tests should not assume OS environment variables are available</rule>
      </implementation>
    </practice>
    
    <practice id="BP-ENV-003">
      <title>Development Mode Security</title>
      <description>
        Isolation mode in development prevents accidental security issues:
        - No production secrets leaking from OS environment
        - Clear separation between development and production config
        - Predictable behavior for all developers regardless of their system setup
      </description>
    </practice>
  </best_practices>
  
  <implementation_patterns>
    <pattern id="PAT-001">
      <title>Conditional Environment Loading</title>
      <code_example>
        <python>
# LocalSecretManager pattern
def _build_fallback_chain(self) -> Dict[str, Tuple[str, str]]:
    secrets = {}
    
    # Load .env files first (always)
    secrets.update(self._load_env_files())
    
    # Only load OS environment in non-isolation mode
    if not self.isolation_mode:
        os_secrets = self._capture_os_environment()
        secrets.update(os_secrets)  # OS env wins
        logger.info(f"[OS] Found {len(os_secrets)} in OS environment")
    else:
        logger.info("[ISOLATION] Skipping system environment variables")
    
    return secrets
        </python>
      </code_example>
    </pattern>
    
    <pattern id="PAT-002">
      <title>Auto-Detection with Override</title>
      <code_example>
        <python>
# SecretLoader pattern  
def __init__(self, isolation_mode: Optional[bool] = None):
    # Auto-detect if not explicitly set
    if isolation_mode is None:
        environment = os.environ.get('ENVIRONMENT', 'development').lower()
        self.isolation_mode = environment == 'development'
    else:
        self.isolation_mode = isolation_mode
        </python>
      </code_example>
    </pattern>
  </implementation_patterns>
  
  <test_patterns>
    <pattern id="TEST-001">
      <title>Isolation Mode Testing</title>
      <description>Test that isolation mode properly prevents OS environment loading</description>
      <code_example>
        <python>
def test_isolation_mode_skips_os_environment():
    # Set OS environment that should be ignored
    os.environ['TEST_VAR'] = 'from_os_should_be_ignored'
    
    # Create .env file with different value
    env_file = test_path / '.env'
    env_file.write_text('TEST_VAR=from_env_file')
    
    # Load with isolation mode
    manager = LocalSecretManager(test_path, isolation_mode=True)
    secrets, _ = manager.load_secrets_with_fallback(set(['TEST_VAR']))
    
    # Should get env file value, not OS value
    assert secrets['TEST_VAR'] == 'from_env_file'
        </python>
      </code_example>
    </pattern>
    
    <pattern id="TEST-002">
      <title>Production Mode Testing</title>
      <description>Test that production mode preserves OS environment priority</description>
      <code_example>
        <python>
def test_production_mode_preserves_os_priority():
    # Set environment to production
    os.environ['ENVIRONMENT'] = 'production'
    os.environ['TEST_VAR'] = 'from_os_should_win'
    
    # Create .env file
    env_file = test_path / '.env'
    env_file.write_text('TEST_VAR=from_env_file')
    
    # Load without explicit isolation mode (auto-detects production)
    loader = SecretLoader(project_root=test_path)
    loader.load_all_secrets()
    
    # OS environment should win
    assert os.environ['TEST_VAR'] == 'from_os_should_win'
        </python>
      </code_example>
    </pattern>
  </test_patterns>
  
  <regression_prevention>
    <test id="REGTEST-001">
      <name>Environment Isolation Comprehensive Test Suite</name>
      <file>dev_launcher/tests/test_environment_isolation.py</file>
      <coverage>
        <item>OS environment skipping in isolation mode</item>
        <item>OS environment loading in production mode</item>
        <item>Auto-detection based on ENVIRONMENT variable</item>
        <item>Priority order correctness in both modes</item>
        <item>Logging clarity for isolation status</item>
        <item>Backwards compatibility</item>
        <item>Test environment pollution prevention</item>
      </coverage>
    </test>
    
    <test id="REGTEST-002">
      <name>Updated Regression Tests</name>
      <file>dev_launcher/tests/test_env_loading_regression.py</file>
      <updates>
        <item>Updated to test production mode explicitly</item>
        <item>Added ENVIRONMENT=production to critical tests</item>
        <item>Verified system environment priority in production</item>
      </updates>
    </test>
  </regression_prevention>
  
  <monitoring>
    <metric id="METRIC-001">
      <name>Environment Mode Usage</name>
      <description>Track usage of isolation vs production mode</description>
      <implementation>Log isolation_mode status at startup</implementation>
    </metric>
    
    <alert id="ALERT-001">
      <name>Unexpected Environment Loading Mode</name>
      <description>Alert if production services are running in isolation mode</description>
      <trigger>isolation_mode=True when ENVIRONMENT=production</trigger>
    </alert>
  </monitoring>
  
  <common_pitfalls>
    <pitfall id="PIT-001">
      <description>Assuming OS environment is always loaded</description>
      <reason>Isolation mode skips OS environment for predictability</reason>
      <solution>Check isolation_mode status or use explicit production environment</solution>
    </pitfall>
    
    <pitfall id="PIT-002">
      <description>Tests depending on developer's OS environment</description>
      <reason>Tests should be reproducible across all development environments</reason>
      <solution>Tests should only depend on .env files they create</solution>
    </pitfall>
    
    <pitfall id="PIT-003">
      <description>Not logging isolation mode status clearly</description>
      <reason>Developers need to understand which loading mode is active</reason>
      <solution>Always log isolation mode status and priority order</solution>
    </pitfall>
  </common_pitfalls>
  
  <security_considerations>
    <consideration id="SEC-001">
      <title>Production Secrets Isolation</title>
      <description>
        Isolation mode prevents production secrets from accidentally being loaded
        from developer's OS environment during development and testing.
      </description>
      <implementation>Development mode only loads from controlled .env files</implementation>
    </consideration>
    
    <consideration id="SEC-002">
      <title>System Environment Priority in Production</title>
      <description>
        Production mode preserves OS environment highest priority for security,
        allowing system administrators to override any file-based configuration.
      </description>
      <implementation>Production mode loads OS env → .env.local → .env → defaults</implementation>
    </consideration>
  </security_considerations>
  
  <action_items>
    <item priority="HIGH">
      <description>Verify all test suites use isolation mode appropriately</description>
      <command>grep -r "isolation_mode" --include="*.py" tests/</command>
    </item>
    
    <item priority="MEDIUM">
      <description>Add environment loading documentation for developers</description>
      <location>docs/development/environment-loading.md</location>
    </item>
    
    <item priority="LOW">
      <description>Consider adding config validation for isolation mode</description>
      <description>Warn if production environment is using isolation mode</description>
    </item>
  </action_items>
</learnings>