<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>KnowledgeBase.DatabaseMigrationRecoveryTesting</name>
        <type>LearningsCapture</type>
        <version>1.0</version>
        <description>Critical learnings about database migration idempotency, recovery patterns, and Test-Driven Correction implementation</description>
        <business_impact>$500K-$2M annual revenue protection through database integrity assurance</business_impact>
        <risk_level>EXISTENTIAL</risk_level>
        <date_captured>2025-08-26</date_captured>
    </metadata>

    <pattern_discovered>
        <title>Missing Database Migration Idempotency and Recovery Testing</title>
        <context>
            Analysis of migration 66e0e5d9662d_add_missing_tables_and_columns_complete.py revealed systemic gaps in database migration safety patterns. This creates existential risks to database integrity across all environments.
        </context>
        
        <root_causes>
            <cause>Migration operations lack idempotency checks (if_exists=True parameters)</cause>
            <cause>No partial migration state detection or recovery mechanisms</cause>
            <cause>Missing concurrent execution protection (advisory locks)</cause>
            <cause>Cross-database consistency validation absent</cause>
            <cause>Non-idempotent rollback operations</cause>
            <cause>Index dependency validation missing</cause>
            <cause>Insufficient database state documentation</cause>
            <cause>Lack of explicit transaction management</cause>
            <cause>No automated database recovery patterns</cause>
            <cause>Missing migration state tracking beyond alembic version</cause>
        </root_causes>
    </pattern_discovered>

    <test_implementation>
        <title>Test-Driven Correction (TDC) Test Suite</title>
        <file_created>netra_backend/tests/critical/test_dev_launcher_database_recovery_patterns.py</file_created>
        
        <test_results>
            <summary>Successfully exposed 34 critical database integrity violations with 0 recovery patterns found</summary>
            <failing_tests>9</failing_tests>
            <categories_tested>
                <category name="Migration Idempotency" failures="8"/>
                <category name="Recovery Patterns" failures="2"/>
            </categories_tested>
        </test_results>

        <critical_violations_exposed>
            <violation>Non-idempotent index drop operations in migration 66e0e5d9662d</violation>
            <violation>Missing partial migration state detection and recovery</violation>
            <violation>No concurrent execution protection mechanisms</violation>
            <violation>Absent cross-database consistency validation</violation>
            <violation>Non-idempotent rollback operations in downgrade functions</violation>
            <violation>Index creation without dependency validation</violation>
            <violation>Inadequate database state documentation</violation>
            <violation>Missing explicit transaction management</violation>
            <violation>No automated database recovery patterns</violation>
            <violation>Insufficient migration state tracking</violation>
        </critical_violations_exposed>
    </test_implementation>

    <business_value_justification>
        <segment>Platform/Internal</segment>
        <business_goal>Database Integrity and Development Velocity</business_goal>
        <value_impact>Prevents database corruption, ensures reliable deployments, maintains system availability</value_impact>
        <strategic_impact>Protects $500K-$2M annual revenue by preventing data loss and system downtime</strategic_impact>
        <customer_impact>Zero-downtime deployments, consistent data integrity across environments</customer_impact>
    </business_value_justification>

    <required_fixes>
        <title>Database Migration Safety Implementation</title>
        
        <fix priority="CRITICAL">
            <description>Add if_exists=True to all drop_index operations</description>
            <files_affected>netra_backend/app/alembic/versions/66e0e5d9662d_add_missing_tables_and_columns_complete.py</files_affected>
            <pattern>op.drop_index('idx_name', if_exists=True)</pattern>
        </fix>
        
        <fix priority="CRITICAL">
            <description>Implement partial migration state detection</description>
            <pattern>Use connection.execute(text("SELECT table_name FROM information_schema.tables WHERE table_name = 'target_table'")) before operations</pattern>
        </fix>
        
        <fix priority="HIGH">
            <description>Add advisory locks for concurrent execution protection</description>
            <pattern>connection.execute(text("SELECT pg_advisory_lock(12345)")) at migration start</pattern>
        </fix>
        
        <fix priority="HIGH">
            <description>Implement cross-database consistency validation</description>
            <pattern>Validate foreign key target tables exist before creating constraints</pattern>
        </fix>
        
        <fix priority="HIGH">
            <description>Make rollback operations idempotent</description>
            <pattern>Add if_exists checks in downgrade() functions</pattern>
        </fix>
        
        <fix priority="MEDIUM">
            <description>Add index dependency validation</description>
            <pattern>Validate table and column existence before index creation</pattern>
        </fix>
        
        <fix priority="MEDIUM">
            <description>Enhance migration documentation</description>
            <pattern>Include Prerequisites, State Assumptions, Recovery Procedures in migration comments</pattern>
        </fix>
        
        <fix priority="LOW">
            <description>Implement explicit transaction management</description>
            <pattern>Use explicit transaction boundaries for related operations</pattern>
        </fix>
    </required_fixes>

    <recovery_patterns_to_implement>
        <pattern name="Database State Validation">
            <description>Implement automated database state validation and corruption detection</description>
            <implementation>Add validate_database_state() functions to database managers</implementation>
            <trigger>Before every deployment and periodically in production</trigger>
        </pattern>
        
        <pattern name="Migration State Tracking">
            <description>Track migration progress beyond alembic version table</description>
            <implementation>Create migration_state table with checkpoint tracking</implementation>
            <benefits>Enables recovery from partial migration failures</benefits>
        </pattern>
        
        <pattern name="Automated Recovery Procedures">
            <description>Implement auto-recovery from common database corruption scenarios</description>
            <implementation>Add recovery scripts triggered by health checks</implementation>
            <scope>Index corruption, constraint violations, orphaned data</scope>
        </pattern>
    </recovery_patterns_to_implement>

    <critical_takeaways>
        <takeaway>MANDATORY: All migration operations must be idempotent with proper if_exists checks</takeaway>
        <takeaway>CRITICAL: Implement Test-Driven Correction (TDC) for all database migration issues</takeaway>
        <takeaway>ESSENTIAL: Database migrations require partial state detection and recovery mechanisms</takeaway>
        <takeaway>REQUIRED: Use advisory locks to prevent concurrent migration execution</takeaway>
        <takeaway>IMPORTANT: Validate cross-database consistency before creating foreign key constraints</takeaway>
        <takeaway>NECESSARY: Rollback operations must be idempotent with proper existence checks</takeaway>
        <takeaway>VALUABLE: Index creation requires dependency validation of tables and columns</takeaway>
        <takeaway>BENEFICIAL: Document migration state assumptions and recovery procedures comprehensively</takeaway>
        <takeaway>USEFUL: Implement explicit transaction management for related migration operations</takeaway>
        <takeaway>STRATEGIC: Build automated database recovery patterns for production resilience</takeaway>
    </critical_takeaways>

    <development_guidelines>
        <guideline>
            <title>Migration Safety Checklist</title>
            <requirements>
                <requirement>Every drop operation must include if_exists=True</requirement>
                <requirement>Every create operation must check for existence first</requirement>
                <requirement>Include partial state detection logic</requirement>
                <requirement>Add advisory lock for concurrent protection</requirement>
                <requirement>Validate foreign key targets exist</requirement>
                <requirement>Make downgrade operations idempotent</requirement>
                <requirement>Document state assumptions and recovery procedures</requirement>
            </requirements>
        </guideline>
        
        <guideline>
            <title>TDC Test Implementation</title>
            <approach>Create failing tests that expose specific database integrity issues</approach>
            <scope>Test idempotency, recovery, consistency, and state management</scope>
            <validation>Tests must demonstrate current failures and validate fixes</validation>
        </guideline>
        
        <guideline>
            <title>Database Recovery Architecture</title>
            <components>State validation, corruption detection, automated repair procedures</components>
            <triggers>Deployment pipeline, health checks, monitoring alerts</triggers>
            <documentation>Recovery procedures must be documented and tested</documentation>
        </guideline>
    </development_guidelines>

    <prevention_measures>
        <measure>Implement pre-commit hooks to validate migration safety patterns</measure>
        <measure>Create migration template with safety patterns built-in</measure>
        <measure>Add automated tests for every new migration</measure>
        <measure>Establish database integrity monitoring in production</measure>
        <measure>Document and test recovery procedures for all migration patterns</measure>
        <measure>Create migration safety checklist for code review process</measure>
    </prevention_measures>

    <monitoring_and_alerting>
        <metric name="Migration Success Rate">Track percentage of successful migrations across environments</metric>
        <metric name="Database Integrity Score">Monitor database consistency and constraint compliance</metric>
        <metric name="Recovery Pattern Coverage">Track implementation of automated recovery procedures</metric>
        <alert name="Migration Failure">Immediate alert on migration execution failure</alert>
        <alert name="Database Inconsistency">Alert on foreign key or constraint violations</alert>
        <alert name="Partial Migration State">Alert when migration state tracking detects incomplete operations</alert>
    </monitoring_and_alerting>

    <long_term_architecture>
        <goal>Zero-downtime database migrations with automated recovery</goal>
        <components>
            <component>Migration safety framework with built-in idempotency</component>
            <component>Database state management and recovery system</component>
            <component>Automated integrity monitoring and repair</component>
            <component>Migration performance optimization and rollback capabilities</component>
        </components>
        <success_criteria>100% migration success rate, zero data corruption incidents, sub-minute recovery times</success_criteria>
    </long_term_architecture>
</specification>