<?xml version="1.0" encoding="UTF-8"?>
<learnings>
  <title>Critical Database Connection Configuration Mismatch</title>
  <date>2025-08-19</date>
  <severity>CRITICAL</severity>
  <summary>
    Database connection string points to wrong IP address (34.68.229.240) which doesn't match any staging Cloud SQL instances.
    This causes complete service failure as the IP is unreachable from Cloud Run.
  </summary>
  
  <issue_discovery>
    <symptom>Auth service fails with TimeoutError during database initialization</symptom>
    <initial_assumption>Incorrect password ("test-password")</initial_assumption>
    <actual_problem>Wrong database server IP address entirely</actual_problem>
    <discovery_method>
      <step>Tested connection locally - timeout</step>
      <step>Pinged IP address - reachable from local but likely not from Cloud Run</step>
      <step>Listed Cloud SQL instances - IP doesn't match any staging instance</step>
    </discovery_method>
  </issue_discovery>
  
  <root_cause_analysis>
    <incorrect_configuration>
      <database_url>postgresql://netra:test-password@34.68.229.240:5432/netra_staging?sslmode=require</database_url>
      <ip_address>34.68.229.240</ip_address>
      <issue>This IP doesn't belong to any staging Cloud SQL instance</issue>
    </incorrect_configuration>
    
    <actual_staging_instances>
      <instance name="netra-postgres-2db4ccab">
        <ip>34.132.142.103</ip>
        <databases>postgres, netra</databases>
        <users>netra_user, postgres</users>
        <tier>db-f1-micro</tier>
      </instance>
      <instance name="staging-shared-postgres">
        <ip>34.171.226.17</ip>
        <private_ip>10.107.1.3</private_ip>
        <databases>Multiple PR databases</databases>
        <tier>db-g1-small</tier>
      </instance>
    </actual_staging_instances>
    
    <likely_correct_connection>
      <database_url>postgresql://netra_user:[PASSWORD]@34.132.142.103:5432/netra?sslmode=require</database_url>
      <reasoning>
        - Instance "netra-postgres-2db4ccab" has a "netra" database
        - Has a "netra_user" user configured
        - Is a staging-appropriate tier (db-f1-micro)
      </reasoning>
    </likely_correct_connection>
  </root_cause_analysis>
  
  <impact>
    <severity>CRITICAL</severity>
    <services_affected>
      <service>netra-auth-service</service>
      <service>Any service using database-url-staging secret</service>
    </services_affected>
    <symptoms>
      <symptom>Service returns 503 Service Unavailable</symptom>
      <symptom>Continuous restart loop</symptom>
      <symptom>Worker process exits with code 3</symptom>
      <symptom>Complete authentication system failure</symptom>
    </symptoms>
  </impact>
  
  <immediate_fix>
    <steps>
      <step order="1">
        <description>Identify correct database instance and credentials</description>
        <command>gcloud sql instances list --project=netra-staging</command>
      </step>
      <step order="2">
        <description>Get or reset the password for netra_user</description>
        <command>gcloud sql users set-password netra_user --instance=netra-postgres-2db4ccab --project=netra-staging</command>
      </step>
      <step order="3">
        <description>Update the secret with correct connection string</description>
        <command>echo -n "postgresql://netra_user:[NEW_PASSWORD]@34.132.142.103:5432/netra?sslmode=require" | gcloud secrets versions add database-url-staging --data-file=- --project=netra-staging</command>
      </step>
      <step order="4">
        <description>Force service to reload with new secret</description>
        <command>gcloud run services update netra-auth-service --region=us-central1 --project=netra-staging</command>
      </step>
    </steps>
  </immediate_fix>
  
  <prevention_measures>
    <measure priority="1">
      <title>Centralized Configuration Management</title>
      <description>
        Store all environment-specific configurations in a single source of truth.
        Use Terraform outputs to automatically generate connection strings.
      </description>
      <implementation>
        Create terraform output for database URL:
        output "database_url" {
          value = "postgresql://${var.db_user}:${random_password.db.result}@${google_sql_database_instance.main.public_ip_address}:5432/${var.db_name}?sslmode=require"
          sensitive = true
        }
      </implementation>
    </measure>
    
    <measure priority="2">
      <title>Connection Validation in CI/CD</title>
      <description>
        Add pre-deployment validation that tests database connectivity before deploying services.
      </description>
      <implementation>
        Add validation step in deployment script:
        - Test database connection
        - Verify tables exist
        - Check user permissions
      </implementation>
    </measure>
    
    <measure priority="3">
      <title>Environment Documentation</title>
      <description>
        Maintain clear documentation of all environment resources and their connection details.
      </description>
      <implementation>
        Create ENVIRONMENTS.md with:
        - Database instances and IPs
        - Service accounts and permissions
        - Secret names and purposes
        - Network configurations
      </implementation>
    </measure>
    
    <measure priority="4">
      <title>Secret Naming Convention</title>
      <description>
        Use descriptive secret names that indicate the target resource.
      </description>
      <example>
        Instead of: database-url-staging
        Use: netra-postgres-2db4ccab-url-staging
      </example>
    </measure>
    
    <measure priority="5">
      <title>Automated Secret Rotation</title>
      <description>
        Implement automated secret rotation with proper validation.
      </description>
      <implementation>
        - Use Cloud SQL IAM authentication where possible
        - Implement secret rotation workflow
        - Test connections after rotation
      </implementation>
    </measure>
  </prevention_measures>
  
  <monitoring_recommendations>
    <alert name="database_connection_failure">
      <description>Alert when database connection failures exceed threshold</description>
      <metric>database.connection.errors</metric>
      <threshold>5 errors in 1 minute</threshold>
    </alert>
    
    <alert name="service_restart_loop">
      <description>Alert when service restarts repeatedly</description>
      <metric>cloud_run.revision.restart_count</metric>
      <threshold>3 restarts in 5 minutes</threshold>
    </alert>
    
    <dashboard>
      <widget>Database connection success rate</widget>
      <widget>Service health status</widget>
      <widget>Secret access failures</widget>
      <widget>Network connectivity to Cloud SQL</widget>
    </dashboard>
  </monitoring_recommendations>
  
  <technical_debt>
    <item>
      <description>Hardcoded IP addresses in secrets instead of using instance connection names</description>
      <impact>Brittle configuration that breaks when instances are recreated</impact>
      <solution>Use Cloud SQL instance connection names</solution>
    </item>
    
    <item>
      <description>No automated validation of database connectivity in deployment pipeline</description>
      <impact>Services deploy successfully but fail at runtime</impact>
      <solution>Add pre-deployment and post-deployment validation</solution>
    </item>
    
    <item>
      <description>Multiple database instances in staging causing confusion</description>
      <impact>Unclear which instance to use for which purpose</impact>
      <solution>Consolidate or clearly label instances by purpose</solution>
    </item>
  </technical_debt>
  
  <action_items>
    <action priority="IMMEDIATE" assigned_to="DevOps">
      Update database-url-staging secret with correct connection string
    </action>
    <action priority="HIGH" assigned_to="DevOps">
      Document all staging environment resources and connections
    </action>
    <action priority="HIGH" assigned_to="Engineering">
      Add connection validation to deployment scripts
    </action>
    <action priority="MEDIUM" assigned_to="DevOps">
      Implement Terraform-managed secrets
    </action>
    <action priority="LOW" assigned_to="Engineering">
      Migrate to Cloud SQL Auth Proxy for better security
    </action>
  </action_items>
</learnings>