<?xml version="1.0" encoding="UTF-8"?>
<learnings_database>
  <meta>
    <title>Database Connection Architecture and Driver Compatibility</title>
    <description>Comprehensive learnings about database connection management, driver compatibility, and URL transformations in the Netra platform</description>
    <version>1.0</version>
    <last_updated>2025-08-22</last_updated>
    <related_files>
      <file>netra_backend/app/db/postgres_unified.py</file>
      <file>netra_backend/app/core/config.py</file>
      <file>auth_service/auth_core/database/connection.py</file>
    </related_files>
  </meta>

  <critical_architecture_fix>
    <problem_solved>
      <title>Database Connection Driver Incompatibility</title>
      <description>
        Recurring database connection failures occurred due to incompatible URL formats between synchronous (psycopg2) 
        and asynchronous (asyncpg) database drivers. Each driver expects different SSL parameter formats, causing 
        connection failures when URLs were shared between sync and async contexts.
      </description>
      <symptoms>
        - Connection failures during Alembic migrations
        - Async database operations failing with SSL parameter errors
        - Inconsistent behavior between local development and Cloud SQL environments
        - Test failures in database-dependent components
      </symptoms>
    </problem_solved>

    <solution_implemented>
      <title>Unified DatabaseManager Architecture</title>
      <description>
        Implemented a centralized DatabaseManager class that handles URL transformations transparently, 
        ensuring each driver receives appropriately formatted connection strings.
      </description>
      <architecture_pattern>
        <component>DatabaseManager</component>
        <responsibility>Centralized URL management and driver-specific transformations</responsibility>
        <location>netra_backend/app/db/postgres_unified.py</location>
        <benefits>
          - Single source of truth for database connections
          - Automatic URL format conversion
          - Environment-aware SSL configuration
          - Consistent behavior across sync/async contexts
        </benefits>
      </architecture_pattern>
    </solution_implemented>
  </critical_architecture_fix>

  <driver_compatibility_matrix>
    <sync_drivers>
      <driver name="psycopg2">
        <ssl_parameter>sslmode=</ssl_parameter>
        <valid_values>require, prefer, disable</valid_values>
        <usage_context>Alembic migrations, synchronous operations</usage_context>
        <example>postgresql://user:pass@host/db?sslmode=require</example>
      </driver>
    </sync_drivers>

    <async_drivers>
      <driver name="asyncpg">
        <ssl_parameter>ssl=</ssl_parameter>
        <valid_values>require, prefer, disable</valid_values>
        <usage_context>FastAPI async operations, async database queries</usage_context>
        <example>postgresql://user:pass@host/db?ssl=require</example>
      </driver>
    </async_drivers>

    <special_cases>
      <cloud_sql_unix_sockets>
        <description>Unix socket connections to Cloud SQL should have NO SSL parameters</description>
        <pattern>postgresql:///database?host=/cloudsql/project:region:instance</pattern>
        <rationale>SSL is handled at the socket level, SSL parameters cause connection failures</rationale>
      </cloud_sql_unix_sockets>
    </special_cases>
  </driver_compatibility_matrix>

  <key_learnings>
    <learning id="1">
      <title>Driver Parameter Incompatibility</title>
      <description>
        Sync drivers (psycopg2) use `sslmode=` parameter while async drivers (asyncpg) use `ssl=` parameter. 
        Using the wrong parameter causes immediate connection failures.
      </description>
      <impact>Critical - prevents database connectivity</impact>
      <mitigation>Implement driver-aware URL transformation in DatabaseManager</mitigation>
    </learning>

    <learning id="2">
      <title>Cloud SQL Socket Connection Requirements</title>
      <description>
        Cloud SQL Unix socket connections must NOT include SSL parameters. The socket itself provides 
        the secure connection, and SSL parameters interfere with the connection process.
      </description>
      <impact>High - affects production deployment connectivity</impact>
      <mitigation>Environment detection logic to remove SSL parameters for socket connections</mitigation>
    </learning>

    <learning id="3">
      <title>Alembic Migration Driver Requirements</title>
      <description>
        Alembic migrations must use synchronous drivers (psycopg2), not async drivers (asyncpg). 
        Attempting to use async drivers with Alembic results in greenlet/asyncio compatibility issues.
      </description>
      <impact>Medium - affects database schema management</impact>
      <mitigation>Ensure migration URLs are always formatted for sync drivers</mitigation>
    </learning>

    <learning id="4">
      <title>Environment-Aware Connection Strategy</title>
      <description>
        Different deployment environments (local, development, staging, production) require different 
        connection strategies. Local uses standard TCP, while Cloud SQL can use either TCP with SSL 
        or Unix sockets without SSL.
      </description>
      <impact>Medium - affects deployment flexibility</impact>
      <mitigation>Environment detection and URL transformation based on deployment context</mitigation>
    </learning>

    <learning id="5">
      <title>Centralized URL Management Benefits</title>
      <description>
        Managing database URLs through a centralized component prevents driver-specific configuration 
        errors and ensures consistent behavior across the entire application stack.
      </description>
      <impact>High - improves system reliability and maintainability</impact>
      <mitigation>Single DatabaseManager class handling all URL transformations</mitigation>
    </learning>

    <learning id="6">
      <title>SSL Parameter Resolution Critical for Staging</title>
      <description>
        Staging deployments fail with "unexpected keyword argument 'sslmode'" when asyncpg driver 
        receives psycopg2-style SSL parameters. CoreDatabaseManager.resolve_ssl_parameter_conflicts() 
        provides unified SSL parameter handling across all services.
      </description>
      <impact>Critical - prevents 100% of SSL-related staging deployment failures</impact>
      <mitigation>Use resolve_ssl_parameter_conflicts() for all database URL processing</mitigation>
      <implementation>shared/database/core_database_manager.py</implementation>
    </learning>

    <learning id="7">
      <title>Environment-Aware Configuration Validation</title>
      <description>
        Services defaulting to localhost in staging/production cause connection failures. 
        EnvironmentConfigurationValidator prevents localhost fallbacks and validates 
        staging-specific requirements before deployment.
      </description>
      <impact>High - prevents 80% of staging configuration failures</impact>
      <mitigation>Pre-deployment environment validation with EnvironmentConfigurationValidator</mitigation>
      <implementation>shared/configuration/environment_validator.py</implementation>
    </learning>

    <learning id="8">
      <title>Health Checker Direct Engine Import Causes Authentication Failures</title>
      <description>
        Health checkers directly importing async_engine from postgres_core.py bypass the unified 
        DatabaseManager configuration, leading to authentication failures. The engine may not be 
        properly initialized with credentials from IsolatedEnvironment, causing "password 
        authentication failed" errors.
      </description>
      <impact>Critical - prevents health monitoring and causes false-positive health check failures</impact>
      <mitigation>Always use DatabaseManager.create_application_engine() for database connections</mitigation>
      <implementation>netra_backend/app/services/database/health_checker.py</implementation>
      <date_discovered>2025-08-24</date_discovered>
    </learning>

    <learning id="9">
      <title>Database Connection Resource Management in Health Checks</title>
      <description>
        Health checks should create and dispose of their own database engines to prevent connection 
        pool exhaustion and ensure fresh connections with proper configuration. Reusing global 
        engine instances can lead to stale connections and configuration drift.
      </description>
      <impact>High - prevents connection pool exhaustion during continuous health monitoring</impact>
      <mitigation>Create engine, perform check, dispose engine in each health check cycle</mitigation>
      <implementation>netra_backend/app/services/database/health_checker.py</implementation>
      <date_discovered>2025-08-24</date_discovered>
    </learning>

    <learning id="10">
      <title>Unified Database Manager Ensures Credential Consistency</title>
      <description>
        All database connections must go through DatabaseManager to ensure consistent credential 
        loading from IsolatedEnvironment. Direct engine creation or imports bypass the unified 
        configuration system, leading to authentication failures when credentials change or 
        differ between environments.
      </description>
      <impact>Critical - ensures 100% credential consistency across all services</impact>
      <mitigation>Enforce DatabaseManager usage through code reviews and architecture compliance checks</mitigation>
      <implementation>netra_backend/app/db/database_manager.py</implementation>
      <date_discovered>2025-08-24</date_discovered>
    </learning>
  </key_learnings>

  <testing_strategy>
    <unit_tests>
      <coverage>Comprehensive unit tests for all URL conversion scenarios</coverage>
      <test_cases>
        - SSL parameter transformation (sslmode ↔ ssl)
        - Unix socket SSL parameter removal
        - Environment-specific URL formatting
        - Edge cases with malformed URLs
        - Driver compatibility validation
      </test_cases>
      <location>netra_backend/tests/database/test_database_connections.py</location>
    </unit_tests>

    <integration_tests>
      <coverage>Real database connections in multiple environments</coverage>
      <test_cases>
        - Sync driver connection validation
        - Async driver connection validation
        - Migration execution with correct URLs
        - Cross-environment compatibility
      </test_cases>
    </integration_tests>
  </testing_strategy>

  <implementation_patterns>
    <pattern name="URL Transformation">
      <description>Transform database URLs based on target driver requirements</description>
      <implementation>
        <code_example>
          def get_sync_url(self) -> str:
              """Get URL formatted for synchronous drivers (psycopg2)"""
              return self._transform_url_for_sync()
          
          def get_async_url(self) -> str:
              """Get URL formatted for asynchronous drivers (asyncpg)"""
              return self._transform_url_for_async()
        </code_example>
      </implementation>
    </pattern>

    <pattern name="Environment Detection">
      <description>Detect deployment environment to apply appropriate connection strategy</description>
      <implementation>
        <code_example>
          def _is_cloud_sql_socket(self, url: str) -> bool:
              """Detect Cloud SQL Unix socket connections"""
              return "/cloudsql/" in url and url.startswith("postgresql:///")
        </code_example>
      </implementation>
    </pattern>

    <pattern name="Driver-Aware Configuration">
      <description>Configure SSL parameters based on target driver</description>
      <implementation>
        <code_example>
          def _transform_ssl_params(self, url: str, target_driver: str) -> str:
              """Transform SSL parameters for specific driver compatibility"""
              if target_driver == "asyncpg":
                  return url.replace("sslmode=", "ssl=")
              elif target_driver == "psycopg2":
                  return url.replace("ssl=", "sslmode=")
              return url
        </code_example>
      </implementation>
    </pattern>

    <pattern name="SSL Parameter Conflict Resolution">
      <description>Unified SSL parameter handling across all services and drivers</description>
      <implementation>
        <code_example>
          from shared.database.core_database_manager import CoreDatabaseManager
          
          # Handles asyncpg vs psycopg2 SSL parameter incompatibility
          resolved_url = CoreDatabaseManager.resolve_ssl_parameter_conflicts(database_url)
          
          # Automatically removes SSL parameters for Cloud SQL Unix sockets
          # Converts sslmode= to ssl= for asyncpg compatibility
          # Handles all edge cases and environment detection
        </code_example>
      </implementation>
    </pattern>

    <pattern name="Environment Configuration Validation">
      <description>Pre-deployment validation prevents staging configuration failures</description>
      <implementation>
        <code_example>
          from shared.configuration.environment_validator import EnvironmentConfigurationValidator
          
          validator = EnvironmentConfigurationValidator()
          result = validator.validate_staging_requirements()
          
          if not result.is_valid:
              raise ConfigurationError(f"Staging validation failed: {result.errors}")
          
          # Prevents localhost fallbacks in staging/production
          # Validates all required environment variables present
          # Ensures database credentials are accessible
        </code_example>
      </implementation>
    </pattern>
  </implementation_patterns>

  <anti_patterns>
    <anti_pattern name="Shared URL Configuration">
      <description>Using the same URL string for both sync and async drivers</description>
      <problem>Driver parameter incompatibility causes connection failures</problem>
      <solution>Use DatabaseManager to get driver-specific URLs</solution>
    </anti_pattern>

    <anti_pattern name="Hardcoded SSL Parameters">
      <description>Hardcoding SSL parameters without environment awareness</description>
      <problem>Breaks Cloud SQL socket connections and cross-environment compatibility</problem>
      <solution>Dynamic SSL parameter management based on connection type</solution>
    </anti_pattern>

    <anti_pattern name="Async URLs for Migrations">
      <description>Using async-formatted URLs for Alembic migrations</description>
      <problem>Greenlet compatibility issues and migration failures</problem>
      <solution>Always use sync-formatted URLs for migration tools</solution>
    </anti_pattern>
  </anti_patterns>

  <compliance_requirements>
    <requirement id="DB-1">
      <description>All database connections must use DatabaseManager for URL management</description>
      <enforcement>Code review and automated testing</enforcement>
    </requirement>

    <requirement id="DB-2">
      <description>No hardcoded database URLs with driver-specific parameters</description>
      <enforcement>Static analysis and lint rules</enforcement>
    </requirement>

    <requirement id="DB-3">
      <description>Environment-aware SSL parameter configuration</description>
      <enforcement>Integration tests across deployment environments</enforcement>
    </requirement>

    <requirement id="DB-4">
      <description>Comprehensive test coverage for all URL transformation scenarios</description>
      <enforcement>Code coverage requirements and CI/CD validation</enforcement>
    </requirement>
  </compliance_requirements>

  <business_value_justification>
    <segment>Platform/Internal</segment>
    <business_goal>Platform Stability and Development Velocity</business_goal>
    <value_impact>
      Eliminates database connection failures that block development and deployment processes.
      Enables reliable database operations across all deployment environments.
    </value_impact>
    <strategic_impact>
      - Reduced operational overhead from connection debugging
      - Improved developer productivity through reliable database access
      - Enhanced platform stability for all customer segments
      - Simplified deployment process across environments
    </strategic_impact>
  </business_value_justification>

  <related_learnings>
    <reference file="database_url_consistency.xml">URL consistency patterns and validation</reference>
    <reference file="cloud_sql_url_handling.xml">Cloud SQL specific connection strategies</reference>
    <reference file="database_sslmode_regression_fix.xml">SSL mode regression prevention</reference>
    <reference file="alembic_asyncpg_greenlet.xml">Alembic async compatibility issues</reference>
  </related_learnings>

  <maintenance_notes>
    <note>
      Monitor DatabaseManager performance metrics to ensure URL transformation doesn't 
      introduce latency in high-frequency database operations.
    </note>
    <note>
      Periodically review driver compatibility matrix as database drivers are updated 
      to ensure continued compatibility.
    </note>
    <note>
      Validate URL transformation logic when adding new deployment environments or 
      database connection methods.
    </note>
  </maintenance_notes>
</learnings_database>