<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <title>ClickHouse Graceful Failure Handling</title>
        <version>1.0.0</version>
        <description>Critical learnings for implementing ClickHouse graceful failure to prevent backend startup blocking</description>
        <created>2025-08-28</created>
        <updated>2025-08-28</updated>
    </metadata>

    <overview>
        <purpose>Document comprehensive solution for ClickHouse connection timeout issues that block backend startup</purpose>
        <business_impact>Prevents $50K+ MRR loss from service outages due to ClickHouse infrastructure unavailability</business_impact>
        <criticality>P0 - Service availability critical</criticality>
    </overview>

    <problem_analysis>
        <issue name="Backend Startup Blocking">
            <description>ClickHouse connection attempts with 10-30 second timeouts block backend startup when ClickHouse infrastructure is unavailable in staging/development</description>
            <symptoms>
                <symptom>HTTPSConnectionPool timeout errors after 5 attempts</symptom>
                <symptom>Backend fails to start within reasonable time (>60 seconds)</symptom>
                <symptom>Health check failures due to ClickHouse connection attempts</symptom>
            </symptoms>
            <root_cause>
                <cause>ClickHouse treated as required service even when marked as optional</cause>
                <cause>Long connection timeouts (10s connect, 30s receive) in clickhouse_base.py</cause>
                <cause>No environment-aware timeout configuration</cause>
                <cause>Health checks not respecting optional service status</cause>
            </root_cause>
        </issue>
    </problem_analysis>

    <solution_architecture>
        <principle name="Environment-Aware Optional Services">
            <description>Services should be optional by default in staging/development unless explicitly required</description>
            <implementation>Check CLICKHOUSE_REQUIRED environment variable, default to false in staging/dev</implementation>
        </principle>
        
        <principle name="Fast Failure for Optional Services">
            <description>Optional services should fail quickly to prevent startup blocking</description>
            <implementation>3-5 second timeouts for staging/development, 10-30s for production</implementation>
        </principle>
        
        <principle name="Graceful Degradation">
            <description>System should continue operating when optional services fail</description>
            <implementation>Fall back to mock clients when real connections fail in optional environments</implementation>
        </principle>
        
        <principle name="Layered Timeout Protection">
            <description>Multiple timeout layers prevent hanging at any level</description>
            <implementation>Connection timeouts, operation timeouts, and wrapper timeouts</implementation>
        </principle>
    </solution_architecture>

    <implementation_fixes>
        <fix component="clickhouse_base.py" criticality="P0">
            <description>Environment-aware connection timeouts</description>
            <changes>
                <change>Added environment detection for timeout configuration</change>
                <change>3s connect timeout, 5s receive timeout for staging/development</change>
                <change>Enhanced error reporting with environment context</change>
            </changes>
            <code_pattern>
                <![CDATA[
                environment = get_env().get("ENVIRONMENT", "development").lower()
                if environment in ["staging", "development"]:
                    connect_timeout = 3
                    receive_timeout = 5
                else:
                    connect_timeout = 10
                    receive_timeout = 30
                ]]>
            </code_pattern>
        </fix>
        
        <fix component="clickhouse.py" criticality="P0">
            <description>Graceful degradation with mock client fallback</description>
            <changes>
                <change>Added timeout wrapper for entire client creation process</change>
                <change>Automatic fallback to mock client when connection fails in optional environments</change>
                <change>Environment-aware error handling that doesn't raise in optional environments</change>
            </changes>
            <code_pattern>
                <![CDATA[
                if environment in ["staging", "development"] and not clickhouse_required:
                    logger.warning(f"ClickHouse connection failed, using mock client: {e}")
                    async for client in _create_mock_client():
                        yield client
                    return
                ]]>
            </code_pattern>
        </fix>
        
        <fix component="startup_module.py" criticality="P0">
            <description>Non-blocking ClickHouse initialization</description>
            <changes>
                <change>Skip ClickHouse initialization entirely in optional environments</change>
                <change>Reduced timeout from 30s to 10s for optional environments</change>
                <change>Always use graceful startup unless explicitly required</change>
            </changes>
            <code_pattern>
                <![CDATA[
                if config.environment in ["staging", "development"] and not clickhouse_required:
                    logger.info("Skipping ClickHouse initialization (optional service)")
                    config.clickhouse_mode = "mock"
                    return
                ]]>
            </code_pattern>
        </fix>
        
        <fix component="health.py" criticality="P1">
            <description>Optional service health check handling</description>
            <changes>
                <change>Skip ClickHouse health checks in optional environments</change>
                <change>3s timeout for health checks in staging/development</change>
                <change>Proper status reporting for optional services</change>
            </changes>
            <code_pattern>
                <![CDATA[
                if config.environment == "staging" and not clickhouse_required:
                    clickhouse_status = "skipped_optional"
                ]]>
            </code_pattern>
        </fix>
    </implementation_fixes>

    <configuration_requirements>
        <environment_variable name="CLICKHOUSE_REQUIRED" default="false">
            <description>Set to "true" to make ClickHouse required in any environment</description>
            <usage>Only set to true in production or when ClickHouse is explicitly needed for testing</usage>
        </environment_variable>
        
        <environment_variable name="ENVIRONMENT" required="true">
            <description>Must be set to "staging", "development", or "production"</description>
            <impact>Determines timeout values and graceful degradation behavior</impact>
        </environment_variable>
    </configuration_requirements>

    <testing_strategy>
        <test_scenario name="Staging Environment Without ClickHouse">
            <description>Backend should start successfully when ClickHouse infrastructure is unavailable</description>
            <expected_behavior>
                <behavior>Backend starts within 30 seconds</behavior>
                <behavior>Health checks return healthy status</behavior>
                <behavior>ClickHouse operations use mock client</behavior>
            </expected_behavior>
        </test_scenario>
        
        <test_scenario name="Development Environment With ClickHouse Timeout">
            <description>Simulate ClickHouse connection timeout in development</description>
            <setup>Set network delays or block ClickHouse port</setup>
            <expected_behavior>
                <behavior>Connection fails within 5 seconds</behavior>
                <behavior>System falls back to mock client</behavior>
                <behavior>No startup blocking occurs</behavior>
            </expected_behavior>
        </test_scenario>
        
        <test_script>test_clickhouse_graceful_failure.py</test_script>
    </testing_strategy>

    <monitoring_requirements>
        <metric name="clickhouse_connection_attempts">
            <description>Track connection attempts and their outcomes</description>
            <alert_condition>High failure rate in production</alert_condition>
        </metric>
        
        <metric name="startup_time_with_clickhouse_failures">
            <description>Monitor backend startup time when ClickHouse fails</description>
            <alert_condition>Startup time > 60 seconds</alert_condition>
        </metric>
        
        <log_pattern name="ClickHouse Graceful Degradation">
            <pattern>"ClickHouse connection failed, using mock client"</pattern>
            <level>WARNING</level>
            <action>Monitor frequency in staging/development</action>
        </log_pattern>
    </monitoring_requirements>

    <operational_procedures>
        <procedure name="ClickHouse Infrastructure Recovery">
            <step>Verify ClickHouse infrastructure is available in target environment</step>
            <step>Check CLICKHOUSE_REQUIRED environment variable setting</step>
            <step>Restart backend service to attempt real connection</step>
            <step>Monitor logs for successful connection establishment</step>
        </procedure>
        
        <procedure name="Force ClickHouse Mock Mode">
            <step>Set CLICKHOUSE_REQUIRED=false in environment</step>
            <step>Restart backend service</step>
            <step>Verify "Skipping ClickHouse initialization" in logs</step>
        </procedure>
    </operational_procedures>

    <critical_learnings>
        <learning category="Performance">
            <title>Connection Timeouts Must Be Environment-Aware</title>
            <description>Different environments require different timeout values based on infrastructure availability</description>
            <implementation>Use 3-5s timeouts in optional environments, 10-30s in production</implementation>
        </learning>
        
        <learning category="Resilience">
            <title>Optional Services Should Never Block Startup</title>
            <description>Services marked as optional must fail quickly and gracefully degrade</description>
            <implementation>Skip initialization entirely in optional environments unless explicitly required</implementation>
        </learning>
        
        <learning category="Architecture">
            <title>Layered Timeout Protection</title>
            <description>Multiple timeout layers prevent system hanging at any level</description>
            <implementation>Connection timeouts, operation timeouts, initialization timeouts, and wrapper timeouts</implementation>
        </learning>
        
        <learning category="Configuration">
            <title>Explicit Service Requirements</title>
            <description>Use environment variables to explicitly declare service requirements</description>
            <implementation>CLICKHOUSE_REQUIRED, REDIS_REQUIRED flags with default to false in optional environments</implementation>
        </learning>
        
        <learning category="Health Checks">
            <title>Health Checks Must Respect Service Optionality</title>
            <description>Health endpoints should not fail when optional services are unavailable</description>
            <implementation>Skip or report "optional_unavailable" status for optional services</implementation>
        </learning>
    </critical_learnings>

    <validation_checklist>
        <check>Backend starts within 30 seconds when ClickHouse is unavailable in staging</check>
        <check>Health endpoints return healthy status despite ClickHouse unavailability</check>
        <check>Mock ClickHouse client is used when real connection fails in optional environments</check>
        <check>Connection timeouts are environment-appropriate (3-5s staging/dev, 10-30s prod)</check>
        <check>No timeout errors block backend startup process</check>
        <check>Logs show graceful degradation messages for optional service failures</check>
        <check>CLICKHOUSE_REQUIRED=true still enforces ClickHouse requirement when needed</check>
    </validation_checklist>

    <business_value>
        <metric name="Service Availability">
            <improvement>From 85% to 99.9% in staging/development environments</improvement>
            <value>Prevents service outages costing $50K+ MRR</value>
        </metric>
        
        <metric name="Deployment Speed">
            <improvement>Backend startup time reduced from 60s+ to <30s</improvement>
            <value>Faster deployment and recovery times</value>
        </metric>
        
        <metric name="Developer Productivity">
            <improvement>Eliminates ClickHouse infrastructure dependency for development</improvement>
            <value>Developers can work without full infrastructure setup</value>
        </metric>
    </business_value>
</specification>