<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>API Versioning Anti-Pattern - RESOLVED</name>
        <version>2.0</version>
        <date>2025-08-25</date>
        <description>Critical learning: The v1 API versioning pattern has been successfully removed - all services now use clean paths</description>
        <priority>CRITICAL</priority>
        <status>RESOLVED</status>
    </metadata>

    <problem-statement>
        The codebase HAD inconsistent API versioning patterns that were causing multiple issues:
        1. Auth service mounted routes at /api/v1/auth/* 
        2. Backend had mixed /api/v1/* and /api/* routes
        3. Frontend had to know which services used v1
        4. This caused 404 errors when paths didn't match expectations
        
        STATUS: RESOLVED - All v1 references have been removed (2025-08-25)
    </problem-statement>

    <resolution-summary>
        <date>2025-08-25</date>
        <description>
            Successfully removed all v1 API references from all services.
            The system now uses clean, direct paths without version prefixes.
        </description>
        <changes-made>
            <auth-service>
                - Changed main.py:474 from prefix="/api/v1" to prefix=""
                - Routes now mount at /auth/* directly
                - Updated all test files to use clean paths
            </auth-service>
            <backend-service>
                - Removed api_v1_compatibility.py entirely
                - Removed v1 router configuration from app_factory_route_configs.py
                - All routes now use clean /api/* or direct paths
                - Updated test expectations
            </backend-service>
            <frontend-service>
                - Updated all test files to expect clean paths
                - Removed v1 pattern expectations
                - WebSocket protocol changed from 'netra-v1' to 'netra'
            </frontend-service>
        </changes-made>
    </resolution-summary>

    <current-state>
        <service name="auth-service">
            <status>CLEAN - No v1 references</status>
            <example>
                Server: app.include_router(auth_router, prefix="")
                Result: /auth/config, /auth/login, /auth/token, etc.
            </example>
        </service>
        
        <service name="backend">
            <status>CLEAN - No v1 references</status>
            <examples>
                <clean-paths>
                    - /api/threads (direct, no version)
                    - /api/discovery (discovery router)
                    - /api/auth/* (auth_router)
                    - /api/agent/* (agent_router)
                    - /api/supply/* (supply router)
                    - /api/generation/* (generation router)
                    - /api/users/* (users router)
                    - /api/tools/* (unified_tools router)
                    - /health/* (health endpoints)
                </clean-paths>
            </examples>
        </service>

        <service name="frontend">
            <status>CLEAN - No v1 references</status>
            <simplification>
                - Auth endpoints: /auth/*
                - API endpoints: /api/*
                - WebSocket: 'netra' protocol (not 'netra-v1')
                - No version logic needed
                - Test mocks simplified
            </simplification>
        </service>
    </current-state>

    <anti-pattern-analysis>
        <title>Why API Versioning in URLs is an Anti-Pattern for Internal Services</title>
        
        <reason id="1">
            <title>Unnecessary Complexity</title>
            <description>
                Internal microservices don't need URL versioning. They can use:
                - Service mesh versioning
                - Header-based versioning  
                - Blue-green deployments
                - Rolling updates with backward compatibility
            </description>
        </reason>

        <reason id="2">
            <title>Inconsistent Implementation</title>
            <description>
                When some services use /v1 and others don't, it creates:
                - Cognitive load for developers
                - Configuration complexity
                - Higher chance of routing errors
                - Test maintenance burden
            </description>
        </reason>

        <reason id="3">
            <title>False Sense of Versioning</title>
            <description>
                Having /v1 in the URL doesn't actually provide versioning benefits:
                - No v2 is ever created (YAGNI - You Aren't Gonna Need It)
                - Breaking changes still break clients
                - Doesn't solve backward compatibility
                - Creates permanent technical debt
            </description>
        </reason>

        <reason id="4">
            <title>URL Pollution</title>
            <description>
                URLs become longer and less readable:
                BAD:  https://auth.staging.netrasystems.ai/api/auth/config
                GOOD: https://auth.staging.netrasystems.ai/auth/config
                
                The service subdomain already indicates the service version.
            </description>
        </reason>
    </anti-pattern-analysis>

    <recommendation>
        <title>Remove All v1 Versioning - Use Direct Paths</title>
        
        <principles>
            <principle>Services should mount routes at their logical paths without version prefixes</principle>
            <principle>Use service subdomains for service identification (auth.*, api.*)</principle>
            <principle>Version through deployment strategies, not URLs</principle>
            <principle>Keep URLs clean, short, and semantic</principle>
        </principles>

        <proposed-structure>
            <service name="auth-service">
                <current>app.include_router(auth_router, prefix="/api/v1")</current>
                <proposed>app.include_router(auth_router, prefix="")</proposed>
                <result>
                    - /auth/config (not /api/auth/config)
                    - /auth/login (not /api/auth/login)
                    - /auth/token (not /api/auth/token)
                </result>
            </service>

            <service name="backend">
                <current>Mixed /api/* and /api/*</current>
                <proposed>All routes at /api/* without version</proposed>
                <result>
                    - /api/threads (not /api/threads)
                    - /api/auth/* (already correct)
                    - /api/users/* (already correct)
                    - Consistent across all endpoints
                </result>
            </service>

            <service name="frontend">
                <benefit>Simpler configuration without version logic</benefit>
                <result>
                    auth.*.netrasystems.ai/auth/*
                    api.*.netrasystems.ai/api/*
                    No need to remember which services use v1
                </result>
            </service>
        </proposed-structure>
    </recommendation>

    <migration-impact>
        <risk-assessment>
            <risk level="high">Breaking change for all clients</risk>
            <risk level="medium">Test updates required</risk>
            <risk level="low">Documentation updates needed</risk>
        </risk-assessment>

        <mitigation-strategies>
            <strategy>
                <name>Dual-path support during transition</name>
                <description>Temporarily support both /api/* and /* paths</description>
            </strategy>
            <strategy>
                <name>Staged rollout</name>
                <description>Update services one at a time with compatibility layer</description>
            </strategy>
            <strategy>
                <name>Client-side fallback</name>
                <description>Try new path, fallback to v1 path if 404</description>
            </strategy>
        </mitigation-strategies>
    </migration-impact>

    <immediate-action>
        <title>Document Current State as Temporary</title>
        <steps>
            <step>Mark all v1 paths as "legacy - to be removed"</step>
            <step>Stop adding v1 to any new endpoints</step>
            <step>Plan migration strategy for existing v1 endpoints</step>
            <step>Update all documentation to show desired end state</step>
        </steps>
    </immediate-action>

    <long-term-vision>
        Clean, semantic URLs without version prefixes:
        - auth.netrasystems.ai/auth/login
        - api.netrasystems.ai/api/threads
        - api.netrasystems.ai/api/users/profile
        
        Versioning handled through:
        - Service mesh routing
        - Blue-green deployments
        - Feature flags
        - Backward compatible changes
    </long-term-vision>

    <references>
        <reference>
            <title>Google API Design Guide</title>
            <quote>URL path versioning is not recommended for APIs</quote>
        </reference>
        <reference>
            <title>REST API Best Practices</title>
            <quote>Version through headers or accept types, not URLs</quote>
        </reference>
        <reference>
            <title>Microservices Patterns</title>
            <quote>Service versioning should be handled at the infrastructure layer</quote>
        </reference>
    </references>
</specification>