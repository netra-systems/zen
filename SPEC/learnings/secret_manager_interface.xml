<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>SecretManagerInterface</name>
        <type>Learning</type>
        <version>1.0</version>
        <description>Learnings about SecretManager interface requirements and unified secret management patterns</description>
        <created>2025-08-21</created>
    </metadata>

    <learning-context>
        <problem>UnifiedSecretManager tried to call SecretManager.load_all_secrets() method which didn't exist</problem>
        <symptoms>
            <symptom>Warning in logs: "'SecretManager' object has no attribute 'load_all_secrets'"</symptom>
            <symptom>Failed GCP secret loading despite correct configuration</symptom>
        </symptoms>
        <root-cause>Interface mismatch between UnifiedSecretManager expectations and SecretManager implementation</root-cause>
    </learning-context>

    <learnings>
        <learning id="secret-manager-public-interface">
            <title>SecretManager Must Provide Public Interface for Loading</title>
            <description>
                The SecretManager class must provide a public method load_all_secrets() for external consumers.
                This ensures UnifiedSecretManager and other components can retrieve secrets without accessing private methods.
            </description>
            <pattern>
                <good>
                    public method: load_all_secrets() -> Dict[str, Any]
                    - Calls internal _load_secrets_from_sources()
                    - Returns copy of _secret_cache dictionary
                </good>
                <bad>
                    Only private methods like _load_from_gcp_secret_manager()
                    External components accessing _secret_cache directly
                </bad>
            </pattern>
        </learning>

        <learning id="interface-contract-validation">
            <title>Validate Interface Contracts Between Components</title>
            <description>
                When one component depends on another, ensure the expected interface exists.
                Add tests that verify method existence and behavior.
            </description>
            <implementation>
                def test_secret_manager_has_required_interface():
                    assert hasattr(SecretManager, 'load_all_secrets')
                    assert callable(SecretManager.load_all_secrets)
            </implementation>
        </learning>

        <learning id="unified-secret-loading-pattern">
            <title>Unified Secret Loading Pattern</title>
            <description>
                The unified secret management pattern should:
                1. Load from multiple sources (env vars, GCP, AWS, local files)
                2. Merge with proper precedence
                3. Return consolidated dictionary
                4. Handle errors gracefully without breaking startup
            </description>
            <flow>
                1. UnifiedSecretManager.load_all_secrets()
                2. -> Load env secrets
                3. -> Load GCP secrets via SecretManager.load_all_secrets()
                4. -> Load AWS secrets (when implemented)
                5. -> Merge and return consolidated dict
            </flow>
        </learning>

        <learning id="graceful-error-handling">
            <title>Secret Loading Must Handle Errors Gracefully</title>
            <description>
                Secret loading failures should log warnings but not crash the application.
                Return empty dict on failure to allow the app to start with available secrets.
            </description>
            <pattern>
                try:
                    return self._secret_manager.load_all_secrets()
                except Exception as e:
                    self._logger.warning(f"Failed to load GCP secrets: {e}")
                    return {}
            </pattern>
        </learning>
    </learnings>

    <corrective-actions>
        <action>Added load_all_secrets() public method to SecretManager class</action>
        <action>Created tests to verify interface contract</action>
        <action>Updated UnifiedSecretManager to use public interface</action>
        <action>Added graceful error handling for secret loading failures</action>
    </corrective-actions>

    <prevention>
        <guideline>Always define public interfaces for cross-component communication</guideline>
        <guideline>Write interface contract tests when creating dependencies</guideline>
        <guideline>Avoid accessing private methods (_method) from external components</guideline>
        <guideline>Document expected interfaces in class docstrings</guideline>
    </prevention>
</specification>