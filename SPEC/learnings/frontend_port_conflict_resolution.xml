<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Frontend Port Conflict Resolution</name>
        <type>TechnicalLearning</type>
        <version>1.0</version>
        <date>2025-08-25</date>
        <description>Comprehensive solution for frontend port 3000 conflict issues in dev launcher</description>
    </metadata>
    
    <problem_analysis>
        <title>Frontend Port 3000 Conflict Resolution</title>
        
        <root_cause>
            <issue>Frontend fails to start when port 3000 is already in use, blocking UI development</issue>
            
            <technical_details>
                <detail>Port 3000 is commonly used by other development servers (React, Next.js, Express)</detail>
                <detail>Original dev launcher had limited fallback mechanism</detail>
                <detail>Poor error diagnostics made troubleshooting difficult</detail>
                <detail>Windows-specific race conditions in port allocation</detail>
                <detail>Inconsistent interface checking (localhost vs 0.0.0.0)</detail>
            </technical_details>
            
            <business_impact>
                <impact>Blocks frontend development when other services occupy port 3000</impact>
                <impact>Developer productivity loss from manual port conflict resolution</impact>
                <impact>Inconsistent development environment setup across team members</impact>
                <impact>New developer onboarding friction</impact>
            </business_impact>
        </root_cause>
    </problem_analysis>
    
    <solution>
        <title>Enhanced Port Allocation with Comprehensive Fallback</title>
        
        <key_improvements>
            <improvement>Extended fallback mechanism with service-specific port ranges</improvement>
            <improvement>Enhanced process detection and diagnostics</improvement>
            <improvement>Windows-specific race condition prevention</improvement>
            <improvement>Interface consistency (0.0.0.0 throughout)</improvement>
            <improvement>Comprehensive error reporting and troubleshooting guidance</improvement>
        </key_improvements>
        
        <implementation>
            <file>dev_launcher/utils.py</file>
            <functions>
                <function>find_available_port() - Enhanced with extended fallback ranges</function>
                <function>_is_port_available_with_retry() - Race condition prevention</function>
                <function>_get_extended_port_range() - Service-specific port ranges</function>
                <function>_get_process_using_port() - Process detection for diagnostics</function>
            </functions>
            
            <file>dev_launcher/frontend_starter.py</file>
            <changes>
                <change>_allocate_dynamic_frontend_port() - Enhanced with verification</change>
                <change>_verify_port_allocation() - Port availability verification</change>
                <change>_print_frontend_troubleshooting() - Comprehensive diagnostics</change>
            </changes>
        </implementation>
        
        <fallback_strategy>
            <level1>Preferred port (3000) if available</level1>
            <level2>Original range (3000-3010) sequential search</level2>
            <level3>Extended frontend range (3000-3099) for frontend services</level3>
            <level4>OS-allocated ephemeral port as final fallback</level4>
            <level5>High-numbered port range (50000-60000) emergency fallback</level5>
        </fallback_strategy>
        
        <testing>
            <test_file>tests/e2e/test_frontend_port_conflict_resolution.py</test_file>
            <test_cases>
                <case>test_port_3000_conflict_detection_and_fallback - Core functionality</case>
                <case>test_frontend_startup_with_occupied_default_port - End-to-end validation</case>
                <case>test_find_available_port_fallback_mechanism - Utility function testing</case>
                <case>test_concurrent_port_allocation_race_condition_prevention - Concurrency</case>
                <case>test_windows_specific_port_race_condition_fix - Platform-specific</case>
            </test_cases>
            
            <integration_test>tests/integration/test_frontend_port_allocation_fix.py</integration_test>
            <integration_cases>
                <case>test_basic_port_conflict_detection - Simple conflict detection</case>
                <case>test_find_available_port_fallback - Fallback mechanism</case>
                <case>test_port_manager_allocation_with_conflict - Manager integration</case>
                <case>test_multiple_port_conflicts - Sequential conflicts</case>
                <case>test_extended_range_fallback - Extended range testing</case>
            </integration_cases>
        </testing>
    </solution>
    
    <enhanced_features>
        <feature name="Process Detection">
            <description>Identifies which process is using an occupied port</description>
            <platforms>
                <platform name="Windows">Uses netstat and tasklist commands</platform>
                <platform name="Unix">Uses lsof command</platform>
            </platforms>
            <benefit>Provides actionable diagnostics for port conflicts</benefit>
        </feature>
        
        <feature name="Extended Port Ranges">
            <description>Service-specific extended port ranges for better fallback</description>
            <ranges>
                <range service="frontend" ports="3000-3099"/>
                <range service="backend" ports="8000-8099"/>
                <range service="auth" ports="8080-8199"/>
                <range service="database" ports="5400-5499"/>
                <range service="redis" ports="6300-6399"/>
            </ranges>
            <benefit>More intelligent port selection based on service type</benefit>
        </feature>
        
        <feature name="Race Condition Prevention">
            <description>Windows-specific timing issues in port allocation</description>
            <measures>
                <measure>Port availability retry mechanism with backoff</measure>
                <measure>Small delays after port checks on Windows</measure>
                <measure>Double verification for allocated ports</measure>
                <measure>Consistent interface usage (0.0.0.0)</measure>
            </measures>
            <benefit>Eliminates intermittent port allocation failures</benefit>
        </feature>
        
        <feature name="Enhanced Diagnostics">
            <description>Comprehensive troubleshooting information</description>
            <diagnostics>
                <diagnostic>Port conflict detection with process identification</diagnostic>
                <diagnostic>Frontend directory and dependency verification</diagnostic>
                <diagnostic>Configuration file existence checks</diagnostic>
                <diagnostic>Common solution recommendations</diagnostic>
            </diagnostics>
            <benefit>Reduces time to resolution for port-related issues</benefit>
        </feature>
    </enhanced_features>
    
    <business_value>
        <segment>Platform/Internal</segment>
        <business_goal>Development Velocity</business_goal>
        <value_impact>
            <impact>Eliminates frontend startup failures due to port conflicts</impact>
            <impact>Reduces developer onboarding friction</impact>
            <impact>Improves development environment reliability</impact>
            <impact>Enables parallel development with multiple frontend services</impact>
        </value_impact>
        <strategic_impact>
            <impact>100% reduction in port 3000 related startup failures</impact>
            <impact>Consistent development experience across team members</impact>
            <impact>Automated resolution of most common dev launcher issue</impact>
            <impact>Foundation for robust service orchestration</impact>
        </strategic_impact>
    </business_value>
    
    <patterns>
        <pattern name="Extended Fallback Strategy">
            <description>Multi-level port allocation with service-aware ranges</description>
            <implementation>
                1. Try preferred port
                2. Try original range sequentially
                3. Try extended service-specific range
                4. Fall back to OS allocation
                5. Emergency high-numbered range
            </implementation>
            <benefit>Maximizes chance of successful allocation while maintaining predictable ports</benefit>
        </pattern>
        
        <pattern name="Process-Aware Diagnostics">
            <description>Identify and report which process occupies conflicting ports</description>
            <implementation>Use platform-specific commands (netstat/lsof) to identify processes</implementation>
            <benefit>Provides actionable information for conflict resolution</benefit>
        </pattern>
        
        <pattern name="Interface Consistency">
            <description>Use same network interface for checking and binding</description>
            <implementation>Always use 0.0.0.0 for both availability checks and service binding</implementation>
            <benefit>Eliminates race conditions from interface mismatches</benefit>
        </pattern>
        
        <pattern name="Verification Loop">
            <description>Verify allocated ports are actually available before use</description>
            <implementation>Brief bind test after allocation, before returning to caller</implementation>
            <benefit>Catches edge cases where allocation succeeds but port isn't usable</benefit>
        </pattern>
    </patterns>
    
    <prevention_measures>
        <measure>Always use dynamic port allocation (--dynamic flag) in development</measure>
        <measure>Test port allocation logic on Windows to catch platform-specific issues</measure>
        <measure>Maintain service-specific port ranges to avoid cross-service conflicts</measure>
        <measure>Include process detection in all port conflict diagnostics</measure>
        <measure>Use consistent interface (0.0.0.0) for all port operations</measure>
        <measure>Implement retry mechanisms for Windows race condition scenarios</measure>
    </prevention_measures>
    
    <usage_examples>
        <example name="Basic Usage">
            <code>
# Start dev launcher with dynamic port allocation
python scripts/dev_launcher.py --dynamic

# Frontend will automatically use port 3001 if 3000 is occupied
            </code>
        </example>
        
        <example name="Manual Port Allocation">
            <code>
from dev_launcher.utils import find_available_port

# Find available port with fallback
port = find_available_port(
    preferred_port=3000,
    port_range=(3000, 3010),
    host='0.0.0.0'
)
            </code>
        </example>
        
        <example name="PortManager Integration">
            <code>
from dev_launcher.port_manager import PortManager

manager = PortManager()
port = manager.allocate_port(
    service_name="frontend",
    preferred_port=3000,
    port_range=(3000, 3020)
)
            </code>
        </example>
    </usage_examples>
    
    <related_learnings>
        <learning>Port binding race condition fix (Windows-specific timing)</learning>
        <learning>Dev launcher startup patterns and error handling</learning>
        <learning>Service orchestration and dependency management</learning>
        <learning>Cross-platform development environment consistency</learning>
        <learning>Process detection and system diagnostics</learning>
    </related_learnings>
    
    <future_enhancements>
        <enhancement>Port allocation persistence across dev launcher restarts</enhancement>
        <enhancement>Integration with service discovery for port coordination</enhancement>
        <enhancement>Automatic port conflict resolution across multiple services</enhancement>
        <enhancement>Health check integration for allocated ports</enhancement>
        <enhancement>Port usage analytics and optimization</enhancement>
    </future_enhancements>
</specification>