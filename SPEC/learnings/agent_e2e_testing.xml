<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <title>Agent E2E Testing Learnings</title>
    <category>Testing</category>
    <created>2025-08-16</created>
    <status>Active</status>
    <priority>Critical</priority>
  </metadata>

  <overview>
    Comprehensive learnings from E2E agent workflow testing with real LLMs.
    These patterns prevent common failures and ensure robust agent operations.
  </overview>

  <critical_fixes>
    <fix id="AF-001">
      <issue>Missing execution_time_ms in AgentExecutionMetrics</issue>
      <root_cause>
        DataSubAgent not calculating execution time in milliseconds.
        TypedAgentResult requires execution_time_ms but receives execution_time in seconds.
      </root_cause>
      <solution>
        1. Calculate execution time: (time.time() - start_time) * 1000.0
        2. Create AgentExecutionMetrics with execution_time_ms
        3. Pass metrics object to TypedAgentResult
        4. Use correct field names: result_data, error_message
      </solution>
      <files_affected>
        - app/agents/data_sub_agent/agent_execution.py
        - app/agents/triage_sub_agent/executor.py
      </files_affected>
      <prevention>
        ALWAYS use TypedAgentResult with proper AgentExecutionMetrics.
        ALWAYS convert time to milliseconds for execution_time_ms.
      </prevention>
    </fix>

    <fix id="AF-002">
      <issue>ClickHouse array syntax errors with toFloat64OrZero</issue>
      <root_cause>
        Incorrect wrapping of arrayElement with toFloat64OrZero.
        ClickHouse Nested structure metrics.value is already Float64.
        toFloat64OrZero expects String input, not Float64.
      </root_cause>
      <solution>
        1. Use arrayElement(metrics.value, idx) directly
        2. Remove toFloat64OrZero wrapper for Float64 arrays
        3. Fix query generation to use proper syntax from start
        4. Update query fixers to handle this pattern
      </solution>
      <files_affected>
        - app/agents/data_sub_agent/query_builder.py
        - app/db/clickhouse_query_fixer.py
        - app/agents/data_sub_agent/llm_query_detector.py
      </files_affected>
      <prevention>
        NEVER wrap Float64 array elements with toFloat64OrZero.
        ALWAYS check ClickHouse column types before applying conversions.
      </prevention>
    </fix>

    <fix id="AF-003">
      <issue>JSON parsing failures with non-JSON agent responses</issue>
      <root_cause>
        Agents returning command-line arguments or plain text instead of JSON.
        JSON parser expecting dict but receiving strings.
        No fallback for non-JSON responses.
      </root_cause>
      <solution>
        1. Detect command-line style arguments (starting with --)
        2. Wrap non-JSON responses in structured objects
        3. Add ensure_agent_response_is_json() utility
        4. Categorize response types: command, text, malformed, valid
      </solution>
      <files_affected>
        - app/core/json_parsing_utils.py
        - app/agents/data_sub_agent/agent_execution.py
        - app/agents/triage_sub_agent/result_processor.py
        - app/llm/llm_structured_operations.py
      </files_affected>
      <prevention>
        ALWAYS ensure agent responses are JSON objects.
        ALWAYS use ensure_agent_response_is_json() for LLM outputs.
      </prevention>
    </fix>
  </critical_fixes>

  <testing_patterns>
    <pattern id="TP-001">
      <name>Real LLM Testing Setup</name>
      <description>
        Configure environment for real LLM testing with proper fallbacks.
      </description>
      <implementation>
        1. Set ENABLE_REAL_LLM_TESTING=true
        2. Provide API keys: ANTHROPIC_API_KEY, OPENAI_API_KEY, GEMINI_API_KEY
        3. Use intelligent fallbacks when APIs unavailable
        4. Cache responses for faster re-runs
      </implementation>
    </pattern>

    <pattern id="TP-002">
      <name>Agent State Validation</name>
      <description>
        Validate agent state transitions throughout pipeline execution.
      </description>
      <implementation>
        1. Check state before agent execution
        2. Validate state transitions during execution
        3. Verify final state matches expected outcome
        4. Test error states and recovery mechanisms
      </implementation>
    </pattern>

    <pattern id="TP-003">
      <name>Artifact Validation Between Agents</name>
      <description>
        Ensure proper data handoff between agent stages.
      </description>
      <implementation>
        1. Validate output format from each agent
        2. Check input requirements for next agent
        3. Verify data integrity across handoffs
        4. Test validation reporting mechanisms
      </implementation>
    </pattern>
  </testing_patterns>

  <common_failures>
    <failure id="CF-001">
      <symptom>pydantic_core._pydantic_core.ValidationError: execution_time_ms Field required</symptom>
      <cause>Missing or incorrectly named field in AgentExecutionMetrics</cause>
      <fix>Ensure execution_time_ms is calculated and passed in milliseconds</fix>
    </failure>

    <failure id="CF-002">
      <symptom>Illegal type Array(Float64) of first argument of function toFloat64OrZero</symptom>
      <cause>Applying string conversion to Float64 array elements</cause>
      <fix>Use arrayElement directly without toFloat64OrZero wrapper</fix>
    </failure>

    <failure id="CF-003">
      <symptom>Parsed JSON is not a dict: class 'str'</symptom>
      <cause>Agent returning plain text or command arguments instead of JSON</cause>
      <fix>Wrap non-JSON responses in structured JSON objects</fix>
    </failure>

    <failure id="CF-004">
      <symptom>Replacement index 0 out of range for positional args tuple</symptom>
      <cause>String formatting error in error messages</cause>
      <fix>Check format string placeholders match provided arguments</fix>
    </failure>
  </common_failures>

  <architecture_compliance>
    <rule id="AC-001">
      <requirement>All functions must be 8 lines or less</requirement>
      <enforcement>
        Split complex functions into smaller helper functions.
        Use composition over monolithic implementations.
      </enforcement>
    </rule>

    <rule id="AC-002">
      <requirement>All files must be 300 lines or less</requirement>
      <enforcement>
        Split large files into focused modules.
        Each module should have single responsibility.
      </enforcement>
    </rule>

    <rule id="AC-003">
      <requirement>No duplicate type definitions</requirement>
      <enforcement>
        Use single source of truth for types.
        Import from schemas module instead of redefining.
      </enforcement>
    </rule>
  </architecture_compliance>

  <best_practices>
    <practice id="BP-001">
      <name>Always Calculate Execution Time in Milliseconds</name>
      <implementation>
        execution_time_ms = (time.time() - start_time) * 1000.0
      </implementation>
    </practice>

    <practice id="BP-002">
      <name>Validate ClickHouse Column Types</name>
      <implementation>
        Check column types before applying conversion functions.
        Use appropriate functions for each type.
      </implementation>
    </practice>

    <practice id="BP-003">
      <name>Handle Non-JSON Agent Responses</name>
      <implementation>
        Always wrap agent responses with ensure_agent_response_is_json().
        Categorize and handle different response types.
      </implementation>
    </practice>

    <practice id="BP-004">
      <name>Test with Real LLMs Regularly</name>
      <implementation>
        Run E2E tests with real LLMs before deployment.
        Verify agent orchestration with actual API calls.
      </implementation>
    </practice>
  </best_practices>

  <test_coverage>
    <coverage_area>
      <name>Agent Orchestration</name>
      <files>
        - test_real_agent_orchestration_e2e.py
        - test_complete_real_pipeline_e2e.py
        - test_llm_agent_e2e_real.py
      </files>
      <status>PASSING (7/7, 4/5, 14/14)</status>
    </coverage_area>

    <coverage_area>
      <name>Error Handling</name>
      <files>
        - test_thread_error_handling.py
        - TestRealAgentErrorHandling
        - TestRealPipelineErrorHandling
      </files>
      <status>PASSING</status>
    </coverage_area>

    <coverage_area>
      <name>Concurrency</name>
      <files>
        - TestRealAgentConcurrency
        - TestRealPipelineConcurrencyAndStability
      </files>
      <status>PASSING</status>
    </coverage_area>
  </test_coverage>

  <monitoring>
    <metric id="M-001">
      <name>Test Success Rate</name>
      <target>95%</target>
      <current>92.3% (24/26 passing)</current>
    </metric>

    <metric id="M-002">
      <name>Average Execution Time</name>
      <target>Under 5 minutes per suite</target>
      <current>3:53 for real_agent_orchestration</current>
    </metric>

    <metric id="M-003">
      <name>Architecture Compliance</name>
      <target>100%</target>
      <current>39.1% (needs improvement)</current>
    </metric>
  </monitoring>

  <future_improvements>
    <improvement>
      <description>Add more comprehensive artifact validation</description>
      <priority>High</priority>
    </improvement>

    <improvement>
      <description>Implement automatic retry mechanisms for transient failures</description>
      <priority>Medium</priority>
    </improvement>

    <improvement>
      <description>Add performance benchmarking for agent pipelines</description>
      <priority>Low</priority>
    </improvement>

    <improvement>
      <description>Improve architecture compliance to reach 100%</description>
      <priority>Critical</priority>
    </improvement>
  </future_improvements>
</specification>