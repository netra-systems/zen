<learning>
  <title>GCP Log Gardener Process - Automated Log Monitoring and Issue Creation</title>
  <date>2025-09-13</date>
  <context>Claude Code /gcploggardener command - Production log monitoring to GitHub issue workflow</context>
  <business_impact>$500K+ ARR protection through automated production issue detection</business_impact>

  <process_overview>
    <description>Systematic collection of GCP production logs, clustering by error patterns, and automatic GitHub issue creation/updates</description>
    <value_proposition>Proactive detection of production issues before customer impact, with automated tracking and prioritization</value_proposition>
  </process_overview>

  <key_learnings>
    <learning_item priority="high">
      <title>GCP Log Query Methodology</title>
      <content>
        - Use resource.type="cloud_run_revision" for service-specific logs
        - Include severity>=WARNING and specific error patterns
        - Timestamp filtering prevents overwhelming data volume
        - JSON format provides structured error analysis
        - Error Group IDs enable correlation across instances
      </content>
      <command_example>gcloud logging read 'resource.type="cloud_run_revision" AND resource.labels.service_name="netra-backend-staging" AND (severity>=WARNING OR jsonPayload.message:"Error") AND timestamp>="2025-09-12T00:00:00Z"' --limit=100 --format=json</command_example>
    </learning_item>

    <learning_item priority="high">
      <title>Log Clustering Strategy</title>
      <content>
        1. P0 Critical: Service startup failures, import errors, complete outages
        2. P1 High: HTTP 5xx errors, endpoint failures, user-facing issues
        3. P2 Medium: Architecture violations, SSOT warnings, technical debt
        4. P3 Low: Configuration warnings, operational noise, sanitization alerts

        Cluster by error patterns, not just timestamps - related errors should be grouped even if occurring at different times.
      </content>
    </learning_item>

    <learning_item priority="critical">
      <title>Business Impact Assessment Framework</title>
      <content>
        Every cluster MUST include:
        - Revenue impact assessment ($500K+ ARR for chat functionality)
        - Customer experience impact (zero chat functionality = complete failure)
        - Golden Path status (user login to AI response flow)
        - Service recovery timeline and urgency

        This drives proper prioritization and resource allocation.
      </content>
    </learning_item>

    <learning_item priority="medium">
      <title>GitHub Issue Strategy</title>
      <content>
        Search First: Always check for existing issues before creating new ones
        Update vs Create: Prefer updating existing issues with new log context
        Naming Convention: GCP-{category} | P{0-3} | {concise-description}
        Labels: Always include "claude-code-generated-issue" + severity + functional area
        Cross-Linking: Link to related architecture docs, other issues, and worklog
      </content>
    </learning_item>
  </key_learnings>

  <process_steps>
    <step number="1">
      <title>Log Collection</title>
      <description>Use gcloud logging read with structured queries for recent production errors</description>
      <automation>Can be fully automated with time-based scheduling</automation>
    </step>

    <step number="2">
      <title>Worklog Creation</title>
      <description>Create dated worklog in gcp/log-gardener/ with clustered analysis</description>
      <template>GCP-LOG-GARDENER-WORKLOG-{scope}-{date}.md</template>
    </step>

    <step number="3">
      <title>Error Clustering</title>
      <description>Group related errors by pattern, impact, and technical root cause</description>
      <priority_assignment>P0=service down, P1=user impact, P2=architecture, P3=operational</priority_assignment>
    </step>

    <step number="4">
      <title>Issue Processing</title>
      <description>For each cluster, search existing issues, update or create, link appropriately</description>
      <safety_check>Verify GitHub operations won't damage repository health</safety_check>
    </step>

    <step number="5">
      <title>Cross-Referencing</title>
      <description>Link to architecture docs, related issues, SSOT documentation, and Golden Path</description>
      <value>Provides complete context for developers to understand and fix issues</value>
    </step>
  </process_steps>

  <success_metrics>
    <metric name="critical_issues_resolved">2 P0 issues identified and fixed within 30 minutes</metric>
    <metric name="business_value_protected">$500K+ ARR chat functionality restored</metric>
    <metric name="issue_quality">All issues properly categorized, linked, and actionable</metric>
    <metric name="automation_efficiency">Complete log to issue workflow under 10 minutes</metric>
  </success_metrics>

  <technical_findings>
    <finding category="import_errors">
      <description>UnifiedWebSocketManager import failures causing complete service outage</description>
      <resolution>Fixed websocket_bridge_factory.py imports to use correct class names</resolution>
      <prevention>Validate all imports during SSOT migrations</prevention>
    </finding>

    <finding category="syntax_errors">
      <description>F-string nested quote issues in websocket_ssot.py causing Python parsing failures</description>
      <resolution>Changed inner quotes from double to single quotes in 8 locations</resolution>
      <prevention>Automated syntax validation in pre-commit hooks</prevention>
    </finding>

    <finding category="503_errors">
      <description>HTTP 503 Service Unavailable errors were symptoms of underlying import/syntax issues</description>
      <resolution>Root cause fixes resolved the symptoms automatically</resolution>
      <lesson>Focus on root causes rather than treating symptoms as separate issues</lesson>
    </finding>

    <finding category="ssot_violations">
      <description>Multiple duplicate WebSocket manager classes detected in production logs</description>
      <status>Tracked in existing issue #824, production evidence added</status>
      <impact>Architecture debt surfacing in production monitoring</impact>
    </finding>
  </technical_findings>

  <cross_references>
    <reference type="architecture">SSOT_IMPORT_REGISTRY.md - Import validation and management</reference>
    <reference type="business">docs/GOLDEN_PATH_USER_FLOW_COMPLETE.md - Business value validation</reference>
    <reference type="monitoring">reports/MASTER_WIP_STATUS.md - System health tracking</reference>
    <reference type="process">CLAUDE.md - Development standards and compliance</reference>
    <reference type="worklog">gcp/log-gardener/GCP-LOG-GARDENER-WORKLOG-latest-2025-09-13.md</reference>
  </cross_references>

  <recommendations>
    <recommendation priority="high">
      <title>Automated Log Monitoring</title>
      <description>Implement scheduled GCP log gardener runs to catch issues before manual discovery</description>
      <frequency>Every 30 minutes for P0/P1 issues, daily for P2/P3</frequency>
    </recommendation>

    <recommendation priority="medium">
      <title>Issue Template Enhancement</title>
      <description>Create GitHub issue templates for common log-derived issue patterns</description>
      <templates>Syntax errors, Import failures, Service outages, Architecture violations</templates>
    </recommendation>

    <recommendation priority="medium">
      <title>Alert Integration</title>
      <description>Connect high-priority log patterns to immediate Slack/email alerts</description>
      <criteria>P0 errors, service startup failures, complete outages</criteria>
    </recommendation>
  </recommendations>

  <lessons_learned>
    <lesson>Production log patterns reveal issues before they become customer-visible problems</lesson>
    <lesson>Clustering errors by technical cause (not just timestamp) provides better root cause analysis</lesson>
    <lesson>Business impact assessment drives appropriate urgency and resource allocation</lesson>
    <lesson>Cross-linking creates comprehensive issue context for faster resolution</lesson>
    <lesson>Fixing root causes resolves multiple symptom patterns simultaneously</lesson>
  </lessons_learned>
</learning>