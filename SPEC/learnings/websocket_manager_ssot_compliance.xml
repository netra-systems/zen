<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <metadata>
    <title>WebSocket Manager SSOT Compliance Pattern</title>
    <date>2025-08-28</date>
    <category>architecture</category>
    <tags>websocket, ssot, single-source-of-truth, audit</tags>
    <priority>high</priority>
  </metadata>

  <problem>
    <description>
      Audit reports incorrectly flagged WebSocket implementation as having "many versions" 
      and violating SSOT principles, when in reality the system is fully compliant.
    </description>
    <symptoms>
      <symptom>Audit reports showing 30+ WebSocket manager "variants"</symptom>
      <symptom>False positives for SSOT violations</symptom>
      <symptom>Confusion about aliasing vs duplication</symptom>
    </symptoms>
    <impact>
      <item>Misleading compliance reports</item>
      <item>Unnecessary refactoring attempts</item>
      <item>Wasted engineering time on non-issues</item>
    </impact>
  </problem>

  <root_cause>
    <analysis>
      Audit tools were counting ALL classes with "WebSocket" and "Manager" in name, including:
      1. Aliases pointing to same implementation
      2. Test mocks (28 different mocks for test isolation)
      3. Specialized managers for different concerns (heartbeat, quality)
      4. Compatibility wrappers for legacy imports
    </analysis>
    <evidence>
      <item>Only ONE canonical WebSocketManager at websocket_core/manager.py:48</item>
      <item>All aliases trace back to single implementation</item>
      <item>Specialized managers handle distinct single responsibilities</item>
    </evidence>
  </root_cause>

  <solution>
    <approach>Accurate Classification of Manager Types</approach>
    <implementation>
      <step>Distinguish between implementation, alias, mock, and specialized manager</step>
      <step>Count only actual duplicate implementations as SSOT violations</step>
      <step>Recognize that test mocks are required and expected</step>
      <step>Understand specialized managers serve different purposes</step>
    </implementation>
    <verification>
      Verified complete SSOT compliance:
      - ONE WebSocketManager for connection management
      - ONE WebSocketHeartbeatManager for heartbeat concern
      - ONE WebSocketQualityManager for quality coordination
      - Zero duplicate implementations of same concept
    </verification>
  </solution>

  <correct_patterns>
    <pattern name="single_implementation">
      <description>One canonical implementation per concept</description>
      <example>
        # Single WebSocketManager at websocket_core/manager.py
        class WebSocketManager:  # The ONLY implementation
            _instance = None  # Singleton
      </example>
    </pattern>
    
    <pattern name="aliasing_for_compatibility">
      <description>Multiple aliases pointing to same implementation</description>
      <example>
        # All these are the SAME object:
        from websocket_core.manager import WebSocketManager as RecoveryManager
        from websocket_core.manager import WebSocketManager as StateManager
        UnifiedWebSocketManager = WebSocketManager  # Alias
      </example>
    </pattern>
    
    <pattern name="specialized_single_purpose">
      <description>Specialized managers for distinct concerns</description>
      <example>
        # Different concerns, not duplicates:
        WebSocketManager         # Connection management
        WebSocketHeartbeatManager # Heartbeat/keepalive only
        WebSocketQualityManager   # Quality monitoring coordination
      </example>
    </pattern>
    
    <pattern name="test_mocks_expected">
      <description>Multiple test mocks are correct and necessary</description>
      <example>
        # Each test needs specific mock behavior:
        class MockWebSocketManager  # Basic mock
        class MockWebSocketManagerWithRedis  # Redis-aware mock
        class OAuthJWTWebSocketTestManager  # OAuth testing mock
      </example>
    </pattern>
  </correct_patterns>

  <audit_counting_rules>
    <rule>
      <name>Count Canonical Implementations Only</name>
      <description>Only count distinct implementations of the same concept</description>
      <correct_count>
        Production WebSocket Managers: 3 (connection, heartbeat, quality)
        SSOT Violations: 0
      </correct_count>
    </rule>
    
    <rule>
      <name>Exclude Aliases from Violation Count</name>
      <description>Aliases are intentional and point to single source</description>
      <examples>
        ConnectionManager extends WebSocketManager # NOT a violation
        RecoveryManager = WebSocketManager # NOT a violation
      </examples>
    </rule>
    
    <rule>
      <name>Exclude Test Mocks from Production Count</name>
      <description>Test mocks don't violate production SSOT</description>
      <rationale>Tests require isolation and specific behaviors</rationale>
    </rule>
    
    <rule>
      <name>Recognize Separation of Concerns</name>
      <description>Different managers for different responsibilities is correct</description>
      <example>
        WebSocketManager handles connections
        WebSocketHeartbeatManager handles keepalive
        These are NOT duplicates of each other
      </example>
    </rule>
  </audit_counting_rules>

  <key_insights>
    <insight>
      SSOT means one implementation per CONCEPT, not one class with "Manager" in the name
    </insight>
    <insight>
      Aliasing for backward compatibility is a best practice, not a violation
    </insight>
    <insight>
      Test mock proliferation is expected and healthy for proper test isolation
    </insight>
    <insight>
      Specialized managers with single responsibilities follow SRP and support SSOT
    </insight>
  </key_insights>

  <prevention>
    <measure>Update audit tools to distinguish implementation vs alias vs mock</measure>
    <measure>Document the aliasing strategy clearly in code</measure>
    <measure>Consider renaming specialized managers to avoid confusion</measure>
    <measure>Add SSOT compliance checker that understands these patterns</measure>
  </prevention>

  <references>
    <reference>websocket_manager_ssot_audit_20250828.md</reference>
    <reference>SPEC/import_management_architecture.xml</reference>
    <reference>netra_backend/app/websocket_core/manager.py</reference>
  </references>
</learning>