<?xml version="1.0" encoding="UTF-8"?>
<learnings_state_persistence>
  <meta>
    <title>State Persistence Foreign Key Violation Resolution</title>
    <description>Critical fix for foreign key constraint violations when saving agent state snapshots with non-existent user IDs</description>
    <version>1.0</version>
    <created>2025-08-27</created>
    <severity>CRITICAL</severity>
    <related_files>
      <file>netra_backend/app/services/state_persistence.py</file>
      <file>netra_backend/app/services/user_service.py</file>
      <file>netra_backend/app/db/models_agent_state.py</file>
      <file>netra_backend/tests/unit/test_state_persistence_user_fk_fix.py</file>
    </related_files>
  </meta>

  <critical_issue_resolved>
    <problem>
      <title>Foreign Key Constraint Violation in Agent State Persistence</title>
      <error_message>
        insert or update on table "agent_state_snapshots" violates foreign key constraint "agent_state_snapshots_user_id_fkey"
        DETAIL: Key (user_id)=(dev-temp-df9fae96) is not present in table "userbase".
      </error_message>
      <description>
        The state persistence service attempted to save agent state snapshots with user_ids that didn't exist 
        in the userbase table, causing foreign key constraint violations. This primarily affected development 
        and test environments using temporary user IDs like 'dev-temp-*' or 'test-*'.
      </description>
      <impact>
        - Agent state snapshots failed to save, breaking state recovery
        - Development and testing workflows were disrupted
        - Error occurred at runtime without early detection
        - Could potentially affect production if temporary users were used
      </impact>
    </problem>

    <root_cause_analysis>
      <cause>Missing User Validation Before State Persistence</cause>
      <description>
        The _create_state_snapshot method in StatePersistenceService directly created snapshots without 
        verifying that the referenced user_id existed in the database. Development environments often use 
        temporary user IDs that aren't pre-created in the database.
      </description>
      <flow>
        1. Agent creates StatePersistenceRequest with user_id (e.g., 'dev-temp-df9fae96')
        2. state_persistence_service.save_agent_state() is called
        3. _create_state_snapshot() attempts to insert snapshot with user_id
        4. Database foreign key constraint fails because user doesn't exist
        5. State save fails with IntegrityError
      </flow>
    </root_cause_analysis>

    <solution_implemented>
      <approach>Proactive User Creation for Development/Test Users</approach>
      <method_added>_ensure_user_exists_for_snapshot</method_added>
      <logic>
        1. Check if user_id is provided (skip if None)
        2. Query database to check if user exists
        3. If user exists, proceed normally
        4. If user doesn't exist AND user_id matches dev/test pattern:
           - Auto-create minimal development user
           - Use safe defaults (dev role, local email domain)
           - Set default password for dev users
        5. If user doesn't exist AND is production user:
           - Log warning but don't create (security boundary)
           - Let foreign key error occur (expected behavior)
      </logic>
      <code_location>
        File: netra_backend/app/services/state_persistence.py
        Method: _ensure_user_exists_for_snapshot (lines 391-426)
        Integration: Called from _create_state_snapshot before snapshot creation
      </code_location>
    </solution_implemented>

    <patterns_detected>
      <pattern name="dev-temp-*">Development temporary users</pattern>
      <pattern name="test-*">Test environment users</pattern>
      <pattern name="thread_dev-temp-*">Development thread identifiers</pattern>
    </patterns_detected>

    <security_considerations>
      <consideration>
        Only auto-create users matching specific dev/test patterns.
        Never auto-create production users to prevent security vulnerabilities.
      </consideration>
      <consideration>
        Use minimal permissions for auto-created dev users.
        Set is_developer=True flag for audit trail.
      </consideration>
      <consideration>
        Log all auto-creation attempts for security monitoring.
      </consideration>
    </security_considerations>
  </critical_issue_resolved>

  <key_learnings>
    <learning priority="CRITICAL">
      Always validate foreign key references exist before database operations.
      Proactive validation prevents runtime IntegrityErrors.
    </learning>
    <learning priority="HIGH">
      Development environments need special handling for temporary entities.
      Auto-creation of dev/test users improves developer experience without compromising security.
    </learning>
    <learning priority="HIGH">
      Pattern matching on user IDs can distinguish environment types.
      Use patterns like 'dev-temp-*' and 'test-*' to identify non-production users.
    </learning>
    <learning priority="MEDIUM">
      Graceful degradation is better than hard failures.
      Log warnings for issues but attempt to continue operation when safe.
    </learning>
  </key_learnings>

  <testing_approach>
    <test_file>netra_backend/tests/unit/test_state_persistence_user_fk_fix.py</test_file>
    <test_scenarios>
      <scenario>Verify missing dev users are auto-created</scenario>
      <scenario>Ensure existing users aren't recreated</scenario>
      <scenario>Test handling of test-prefixed users</scenario>
      <scenario>Verify regular users aren't auto-created (security)</scenario>
      <scenario>Handle empty/None user_id gracefully</scenario>
    </test_scenarios>
  </testing_approach>

  <prevention_measures>
    <measure>
      Add user existence validation to all foreign key operations
    </measure>
    <measure>
      Create database fixtures for common dev/test users
    </measure>
    <measure>
      Add pre-commit hooks to detect potential FK violations
    </measure>
    <measure>
      Include FK validation in integration test suites
    </measure>
  </prevention_measures>

  <monitoring>
    <metric>Count of auto-created dev users per environment</metric>
    <metric>Foreign key violation errors in state persistence</metric>
    <metric>Success rate of state snapshot saves</metric>
    <alert>Alert on FK violations in production environments</alert>
  </monitoring>
</learnings_state_persistence>