<?xml version="1.0" encoding="UTF-8"?>
<learning>
  <metadata>
    <title>CRITICAL: Auth Startup Validation Must Never Be Removed</title>
    <date>2025-09-07</date>
    <category>authentication,startup,security,critical</category>
    <impact>system-wide</impact>
    <regression_risk>EXTREME</regression_risk>
  </metadata>

  <problem>
    <description>
      Auth startup validation was previously regressed, allowing the system to start
      with invalid or missing authentication configuration. This creates critical
      security vulnerabilities and causes cascade failures in production.
    </description>
    <business_impact>
      - Users cannot authenticate, blocking all platform access
      - WebSocket connections fail with HTTP 403 errors
      - OAuth flows break with 503 errors
      - Complete platform outage for all users
      - Enterprise customers lose trust in security
    </business_impact>
    <technical_details>
      Missing or invalid auth configuration causes:
      - JWT validation failures
      - Service-to-service authentication failures
      - OAuth provider misconfigurations
      - CORS policy violations
      - Token expiry issues
    </technical_details>
  </problem>

  <solution>
    <description>
      SSOT auth validation MUST be performed early in startup sequence
      (Phase 2, Step 4) to prevent system from starting with bad auth config.
    </description>
    <implementation>
      <file>netra_backend/app/smd.py</file>
      <method>_validate_auth_configuration</method>
      <location>Phase 2: DEPENDENCIES, Step 4</location>
      <critical_requirement>
        This validation MUST happen BEFORE:
        - Key manager initialization
        - LLM manager initialization  
        - Database connections
        - WebSocket setup
        - Any user-facing endpoints
      </critical_requirement>
    </implementation>
    <validator_module>
      <file>netra_backend/app/core/auth_startup_validator.py</file>
      <class>AuthStartupValidator</class>
      <validates>
        - JWT_SECRET presence and strength
        - SERVICE_ID and SERVICE_SECRET for inter-service auth
        - AUTH_SERVICE_URL configuration
        - OAuth provider credentials (GOOGLE_CLIENT_ID, etc)
        - CORS_ALLOWED_ORIGINS matches FRONTEND_URL
        - Token expiry settings are reasonable
        - Circuit breaker configuration
        - Cache TTL settings
        - Production-specific requirements (HTTPS only)
      </validates>
    </validator_module>
  </solution>

  <testing>
    <test_file>netra_backend/tests/unit/test_auth_startup_validation.py</test_file>
    <critical_tests>
      - test_auth_startup_validator_with_missing_jwt_secret
      - test_auth_startup_validator_production_requirements
      - test_validate_auth_at_startup_raises_on_failure
    </critical_tests>
    <manual_verification>
      # Test that system fails to start with missing JWT secret
      unset JWT_SECRET
      python -m netra_backend.app.main
      # Should see: "Critical auth validation failures: jwt_secret: No JWT secret configured"
      
      # Test that production requires HTTPS
      export ENVIRONMENT=production
      export AUTH_SERVICE_URL=http://localhost:8001
      python -m netra_backend.app.main  
      # Should see: "AUTH_SERVICE_URL must use HTTPS in production"
    </manual_verification>
  </testing>

  <critical_warnings>
    <warning priority="EXTREME">
      NEVER remove or bypass auth validation in startup sequence!
      This has been regressed before and caused production outages.
    </warning>
    <warning priority="HIGH">
      Auth validation MUST be synchronous and blocking.
      The system MUST NOT start if auth validation fails.
    </warning>
    <warning priority="HIGH">
      Do not add "fallback" or "default" auth configurations.
      Hard failures are better than insecure defaults.
    </warning>
  </critical_warnings>

  <cross_references>
    <related_learning>auth_circuit_breaker_bug_fix.xml</related_learning>
    <related_learning>oauth_regression_analysis.xml</related_learning>
    <related_learning>websocket_jwt_authentication.xml</related_learning>
    <related_spec>MISSION_CRITICAL_NAMED_VALUES_INDEX.xml</related_spec>
    <related_report>reports/auth/OAUTH_REGRESSION_ANALYSIS_20250905.md</related_report>
    <related_report>reports/config/CONFIG_REGRESSION_PREVENTION_PLAN.md</related_report>
  </cross_references>

  <prevention>
    <checklist>
      - [ ] Auth validation is called in Phase 2, Step 4
      - [ ] Auth validation raises DeterministicStartupError on failure
      - [ ] No try/except blocks that swallow auth validation errors
      - [ ] Tests verify system won't start with bad auth config
      - [ ] Production deployments test auth validation first
    </checklist>
    <monitoring>
      - Alert on any startup without auth validation logs
      - Monitor for HTTP 403 errors (indicates auth misconfiguration)
      - Track OAuth 503 errors (indicates missing credentials)
      - Watch for "auth service disabled" errors
    </monitoring>
  </prevention>

  <code_examples>
    <example type="correct">
      <description>Correct auth validation in startup</description>
      <code><![CDATA[
async def _phase2_core_services(self) -> None:
    """Phase 2: DEPENDENCIES - Core service managers and keys."""
    self.logger.info("PHASE 2: DEPENDENCIES - Core Services")
    
    # Step 4: SSOT Auth Validation (CRITICAL - Must be first)
    await self._validate_auth_configuration()
    self.logger.info("  âœ“ Step 4: Auth configuration validated")
    
    # Only proceed if auth validation passed
    # ... rest of initialization
      ]]></code>
    </example>
    <example type="incorrect">
      <description>WRONG: Skipping or catching auth validation errors</description>
      <code><![CDATA[
# NEVER DO THIS!
try:
    await self._validate_auth_configuration()
except Exception as e:
    self.logger.warning(f"Auth validation failed, continuing anyway: {e}")
    # This allows system to start with broken auth!
      ]]></code>
    </example>
  </code_examples>
</learning>