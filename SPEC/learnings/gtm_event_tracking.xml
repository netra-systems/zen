<?xml version="1.0" encoding="UTF-8"?>
<learnings>
  <metadata>
    <title>GTM Event Tracking Implementation Learnings</title>
    <category>analytics</category>
    <created>2025-08-28</created>
    <tags>gtm, analytics, tracking, events, dataLayer</tags>
    <priority>high</priority>
    <business_value>conversion_optimization</business_value>
  </metadata>

  <summary>
    Learnings from implementing Google Tag Manager (GTM) event tracking across the Netra application,
    focusing on user behavior analytics for authentication, chat interactions, agent usage, and errors.
  </summary>

  <key_learnings>
    <learning id="gtm-hooks-architecture">
      <title>GTM Hooks Architecture Works Well</title>
      <description>
        The three-tier hook architecture (useGTM, useGTMEvent, useGTMDebug) provides excellent
        separation of concerns and makes tracking implementation straightforward.
      </description>
      <positive>
        - useGTM provides low-level dataLayer access
        - useGTMEvent provides business-focused tracking methods
        - useGTMDebug helps with development and testing
        - Type safety throughout with TypeScript interfaces
      </positive>
    </learning>

    <learning id="event-tracking-locations">
      <title>Strategic Event Tracking Placement</title>
      <description>
        Events should be tracked at the source of truth for each action, not in multiple places.
      </description>
      <implementation_locations>
        <!-- Authentication Events -->
        <location component="auth/context.tsx" events="login, logout, oauth_complete">
          Track auth events in the AuthContext where authentication state changes occur.
          This ensures events are fired exactly once when auth state actually changes.
        </location>
        
        <!-- Auth Guard Events -->
        <location component="components/AuthGuard.tsx" events="auth_required, protected_page_access">
          Track access control events in AuthGuard for protected route attempts.
        </location>
        
        <!-- Chat Interaction Events -->
        <location component="hooks/useMessageSending.ts" events="chat_started, message_sent, thread_created, agent_activated">
          Track all chat events in the message sending hook where the actual WebSocket
          messages are sent. This provides a single source of truth for chat interactions.
        </location>
        
        <!-- Error Events -->
        <location component="components/ErrorBoundary.tsx" events="error_boundary_catch">
          Track fatal errors in ErrorBoundary using direct dataLayer.push since hooks
          cannot be used in class components.
        </location>
      </implementation_locations>
    </learning>

    <learning id="tracking-implementation-pattern">
      <title>Consistent Implementation Pattern</title>
      <description>
        Follow a consistent pattern for implementing tracking in components.
      </description>
      <pattern>
        1. Import useGTMEvent hook at the top of the component/hook
        2. Destructure only the tracking methods you need
        3. Call tracking methods at the point where the action occurs
        4. Include relevant context (threadId, message length, error details)
        5. Handle both success and failure cases
      </pattern>
      <example>
        ```typescript
        import { useGTMEvent } from '@/hooks/useGTMEvent';
        
        const MyComponent = () => {
          const { trackMessageSent, trackError } = useGTMEvent();
          
          const handleSend = async (message: string) => {
            try {
              await sendMessage(message);
              trackMessageSent(threadId, message.length);
            } catch (error) {
              trackError('message_send_failed', error.message, 'MyComponent');
            }
          };
        };
        ```
      </example>
    </learning>

    <learning id="error-boundary-tracking">
      <title>Error Boundary Requires Direct DataLayer Access</title>
      <description>
        Class components like ErrorBoundary cannot use hooks, so they need to push
        to dataLayer directly. Ensure window and dataLayer exist before pushing.
      </description>
      <implementation>
        ```typescript
        componentDidCatch(error: Error, errorInfo: ErrorInfo) {
          if (typeof window !== 'undefined' && window.dataLayer) {
            window.dataLayer.push({
              event: 'exception',
              event_category: 'error',
              event_action: 'error_boundary_catch',
              event_label: error.message,
              custom_parameters: { /* context */ }
            });
          }
        }
        ```
      </implementation>
    </learning>

    <learning id="event-categories">
      <title>Event Category Structure</title>
      <description>
        Events are organized into clear categories that align with business metrics.
      </description>
      <categories>
        <category name="authentication" events="user_login, user_signup, user_logout, oauth_complete">
          Track user authentication lifecycle for conversion funnel analysis
        </category>
        <category name="engagement" events="chat_started, message_sent, agent_activated, thread_created, feature_used">
          Track user engagement with core platform features
        </category>
        <category name="conversion" events="trial_started, plan_upgraded, payment_completed, demo_requested">
          Track conversion events for revenue attribution
        </category>
        <category name="error" events="exception, auth_required, message_send_failed">
          Track errors for quality monitoring and user experience optimization
        </category>
      </categories>
    </learning>

    <learning id="testing-approach">
      <title>Testing GTM Implementation</title>
      <description>
        Created automated testing script (test_gtm_tracking.py) using Selenium to verify
        events are properly pushed to dataLayer. This enables CI/CD validation.
      </description>
      <testing_strategy>
        - Use GTM Preview mode for manual testing
        - Automated Selenium tests for CI/CD
        - Check dataLayer contents programmatically
        - Verify event structure and parameters
      </testing_strategy>
    </learning>

    <learning id="context-preservation">
      <title>Preserve Context in Events</title>
      <description>
        Always include relevant context with events to enable meaningful analysis.
      </description>
      <context_examples>
        - threadId for chat events
        - message length for engagement metrics
        - error stack traces for debugging
        - user tier for segmentation
        - auth method for conversion analysis
      </context_examples>
    </learning>
  </key_learnings>

  <best_practices>
    <practice>Track events at the source of truth, not in UI components</practice>
    <practice>Use typed event interfaces to prevent typos and ensure consistency</practice>
    <practice>Include relevant context with all events for analysis</practice>
    <practice>Test tracking in development before deploying to production</practice>
    <practice>Use the useGTMEvent hook for all tracking in functional components</practice>
    <practice>Document which events are tracked where for maintainability</practice>
  </best_practices>

  <gotchas>
    <gotcha>
      <issue>Hooks cannot be used in class components</issue>
      <solution>Use direct dataLayer.push with proper checks for window and dataLayer existence</solution>
    </gotcha>
    <gotcha>
      <issue>Multiple event fires for the same action</issue>
      <solution>Track events only at the source of truth, not in multiple components</solution>
    </gotcha>
    <gotcha>
      <issue>Missing context makes events hard to analyze</issue>
      <solution>Always include relevant IDs, states, and metadata with events</solution>
    </gotcha>
  </gotchas>

  <implementation_checklist>
    <item completed="true">Audit existing GTM implementation</item>
    <item completed="true">Implement authentication flow tracking</item>
    <item completed="true">Implement chat interaction tracking</item>
    <item completed="true">Implement agent usage tracking</item>
    <item completed="true">Implement error event tracking</item>
    <item completed="true">Create automated testing script</item>
    <item completed="true">Document implementation patterns</item>
  </implementation_checklist>

  <future_improvements>
    <improvement priority="medium">
      Add e-commerce enhanced tracking for payment flows
    </improvement>
    <improvement priority="low">
      Implement scroll depth tracking for content engagement
    </improvement>
    <improvement priority="medium">
      Add custom dimensions for user segments (tier, role, company size)
    </improvement>
    <improvement priority="high">
      Implement server-side GTM for sensitive events
    </improvement>
  </future_improvements>
</learnings>