<?xml version="1.0" encoding="UTF-8"?>
<specification>
    <metadata>
        <name>Learnings - Database/AsyncIO</name>
        <type>learnings</type>
        <category>Database/AsyncIO</category>
        <version>1.0</version>
        <last_updated>2025-08-16</last_updated>
        <description>Learnings and fixes for Database/AsyncIO</description>
    </metadata>
    
    <learnings>
        <learning id="async-context-manager-dependency-injection">
                    <title>AsyncSession Context Manager Dependency Injection Issue</title>
                    <date>2025-08-15</date>
                    <category>Database/AsyncIO</category>
                    <description>
                        FastAPI dependency injection was passing AsyncGeneratorContextManager instead of AsyncSession
                        to repository methods, causing "_AsyncGeneratorContextManager' object has no attribute 'execute'" errors.
                    </description>
                    <symptoms>
                        <symptom>Error: '_AsyncGeneratorContextManager' object has no attribute 'execute'</symptom>
                        <symptom>Log: "Async connection checked out from pool: None"</symptom>
                        <symptom>Repository methods receiving context manager instead of session</symptom>
                    </symptoms>
                    <root-causes>
                        <cause>Direct use of async context manager in FastAPI Depends without proper wrapper</cause>
                        <cause>FastAPI dependency injection not properly entering async context manager</cause>
                        <cause>Missing validation of session type in dependency injection</cause>
                    </root-causes>
                    <solution>
                        <step>Create wrapper function get_db_dependency() that explicitly enters context manager</step>
                        <step>Add validation to ensure AsyncSession type is returned</step>
                        <step>Add debug logging to track session creation and type</step>
                        <step>Update DbDep to use the wrapper function instead of direct context manager</step>
                    </solution>
                    <files-modified>
                        <file>app/dependencies.py - Added get_db_dependency wrapper with validation</file>
                        <file>app/db/postgres.py - Added debug logging for session tracking</file>
                    </files-modified>
                    <prevention>
                        <item>Always wrap async context managers in explicit functions for FastAPI dependencies</item>
                        <item>Add type validation when passing database sessions</item>
                        <item>Use debug logging to track session lifecycle</item>
                        <item>Test dependency injection separately from business logic</item>
                    </prevention>
                    <test-case>test_database_connection_pooling.py</test-case>
                </learning>

        <learning id="trial-period-type-mismatch">
            <title>Database Column Type Mismatch - trial_period semantic change</title>
            <date>2025-08-16</date>
            <category>Database/AsyncIO</category>
            <description>
                Initial design had trial_period as Boolean (is in trial), but was changed to Integer (trial days).
                Migration, model, and schema needed alignment to use Integer type consistently.
            </description>
            <symptoms>
                <symptom>Error: asyncpg.exceptions.DatatypeMismatchError: column "trial_period" is of type integer but expression is of type boolean</symptom>
                <symptom>Semantic mismatch: Boolean (is in trial) vs Integer (trial days)</symptom>
                <symptom>Inconsistent types across migration, model, and schema</symptom>
            </symptoms>
            <root-causes>
                <cause>Design change from Boolean flag to Integer days</cause>
                <cause>Migration updated to use sa.Integer() for trial days</cause>
                <cause>Model updated to use Integer() with default=0</cause>
                <cause>Schema needed update from bool to int</cause>
            </root-causes>
            <solution>
                <step>Ensure migration uses sa.Integer() with server_default='0'</step>
                <step>Update model to use Integer() with default=0</step>
                <step>Update Pydantic schema to use int with default=0</step>
                <step>Change semantics: 0 = no trial, positive = trial days remaining</step>
            </solution>
            <files-modified>
                <file>app/alembic/versions/bb39e1c49e2d_add_missing_tables_and_columns.py - Uses Integer for trial days</file>
                <file>app/db/models_user.py - Uses Integer() with default=0</file>
                <file>app/schemas/UserPlan.py - Uses int with default=0</file>
            </files-modified>
            <prevention>
                <item>Document semantic changes clearly when changing field meanings</item>
                <item>Create schema consistency tests to verify type alignment</item>
                <item>Test both model creation and database operations</item>
                <item>Use consistent type definitions across migrations, models, and schemas</item>
            </prevention>
            <test-case>tests/database/test_schema_consistency.py</test-case>
            <test-case>tests/unit/test_user_plan_schema.py</test-case>
        </learning>

        <learning id="state-checkpoint-manager-session-factory">
            <title>StateCheckpointManager AsyncSession Factory Context Manager Issue</title>
            <date>2025-08-16</date>
            <category>Database/AsyncIO</category>
            <description>
                StateCheckpointManager expected an async context manager factory but was receiving
                an AsyncSession directly, causing "'async_sessionmaker' object has no attribute 'execute'" error
                when the factory was called incorrectly.
            </description>
            <symptoms>
                <symptom>Error: 'async_sessionmaker' object has no attribute 'execute'</symptom>
                <symptom>Failed to save agent state for run in state_persistence_service</symptom>
                <symptom>StateCheckpointManager using async with db_session_factory() as session</symptom>
                <symptom>SupervisorAgent passing lambda that returns session directly</symptom>
            </symptoms>
            <root-causes>
                <cause>StateCheckpointManager expects db_session_factory to be an async context manager factory</cause>
                <cause>SupervisorAgent was passing lambda: self.db_session which doesn't work as context manager</cause>
                <cause>Mismatch between expected factory pattern and actual session object</cause>
            </root-causes>
            <solution>
                <step>Import asynccontextmanager from contextlib in supervisor_consolidated.py</step>
                <step>Create proper async context manager factory that yields the session</step>
                <step>Wrap existing db_session in asynccontextmanager decorator function</step>
                <step>Pass the wrapped factory to StateManager instead of raw lambda</step>
            </solution>
            <files-modified>
                <file>app/agents/supervisor_consolidated.py - Added asynccontextmanager wrapper for db_session</file>
                <file>app/tests/unit/test_state_checkpoint_session_fix.py - Added comprehensive test coverage</file>
            </files-modified>
            <prevention>
                <item>Always use asynccontextmanager when wrapping existing sessions for factory pattern</item>
                <item>Ensure consistency between expected factory pattern and actual implementation</item>
                <item>Test async context manager factories separately from business logic</item>
                <item>Document whether parameters expect sessions or session factories</item>
            </prevention>
            <test-case>app/tests/unit/test_state_checkpoint_session_fix.py</test-case>
        </learning>

        <learning id="postgres-session-async-function-paradox">
            <title>PostgreSQL Session Factory Async Function Paradox</title>
            <date>2025-08-19</date>
            <category>Database/AsyncIO</category>
            <description>
                Health check endpoints were failing with 503 errors despite valid database credentials and running
                PostgreSQL container. The issue was _setup_session_for_transaction() being marked as async but not
                actually awaiting anything, causing type mismatch when get_async_db() tried to await it.
            </description>
            <symptoms>
                <symptom>Error: Database readiness check failed: 503: Service Unavailable</symptom>
                <symptom>Direct database connection tests succeed with same credentials</symptom>
                <symptom>PostgreSQL container running and accessible on port 5433</symptom>
                <symptom>Health check endpoints failing despite valid .env configuration</symptom>
            </symptoms>
            <root-causes>
                <cause>_setup_session_for_transaction() marked as async but returns sync object directly</cause>
                <cause>Function returns async_session_factory() without awaiting (not a coroutine)</cause>
                <cause>get_async_db() tries to await the result, expecting coroutine but gets session factory</cause>
                <cause>Type mismatch between async function declaration and sync return value</cause>
            </root-causes>
            <solution>
                <step>Remove async keyword from _setup_session_for_transaction() function</step>
                <step>Remove await when calling _setup_session_for_transaction() in get_async_db()</step>
                <step>Function now correctly returns session factory synchronously</step>
                <step>Verified health endpoints return successful status after fix</step>
            </solution>
            <files-modified>
                <file>app/db/postgres_session.py:104 - Removed async from _setup_session_for_transaction</file>
                <file>app/db/postgres_session.py:128 - Removed await when calling _setup_session_for_transaction</file>
            </files-modified>
            <prevention>
                <item>Only mark functions as async if they actually await something</item>
                <item>Validate that async functions return coroutines, not sync objects</item>
                <item>Test database connectivity separately from application startup</item>
                <item>Add explicit type hints for session factory returns</item>
            </prevention>
            <test-case>Verified with curl http://localhost:8000/health/ready</test-case>
        </learning>

    </learnings>
    
    <references>
        <reference>SPEC/learnings/alembic_asyncpg_greenlet.xml</reference>
        <reference>app/alembic/env.py</reference>
        <reference>app/db/postgres_core.py</reference>
        <reference>app/core/configuration/database.py</reference>
    </references>
</specification>