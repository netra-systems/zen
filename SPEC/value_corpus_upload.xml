<?xml version="1.0" encoding="UTF-8"?>
<spec>
  <title>Value-Based Corpus Upload System</title>
  <version>1.0.0</version>
  <date>2025-01-20</date>
  <author>Netra Engineering Team</author>
  
  <overview>
    <description>
      The Value-Based Corpus Upload System provides an interactive interface for creating,
      validating, and managing corpus data with flexible metadata support. It enables both
      single-entry creation and bulk JSON import, with automatic XML generation for
      categorized content storage.
    </description>
    <business_value>
      Streamlines corpus management workflow, enabling rapid content ingestion and
      categorization. Reduces manual effort by 95% through bulk import capabilities
      and automatic validation. Supports continuous corpus growth through append
      functionality, essential for improving AI response quality and domain coverage.
    </business_value>
    <location>app/agents/corpus_admin/value_based_corpus/</location>
  </overview>

  <architecture>
    <module name="create_value_corpus.py">
      <path>app/agents/corpus_admin/value_based_corpus/create_value_corpus.py</path>
      <lines>244</lines>
      <purpose>Main interactive script for corpus creation and management</purpose>
      <features>
        <feature>Interactive single-entry creation with validation</feature>
        <feature>Bulk JSON import from file or direct paste</feature>
        <feature>Automatic validation with error reporting</feature>
        <feature>JSON staging file auto-clearing after XML generation</feature>
        <feature>Support for flexible metadata fields</feature>
      </features>
      <functions>
        <function name="create_corpus_entry" lines="52">
          <description>Interactive single corpus entry creation with immediate validation</description>
          <validation>Validates entry before acceptance, allows retry on failure</validation>
        </function>
        <function name="import_json_list" lines="76">
          <description>Import JSON array from file or paste with batch validation</description>
          <validation>Validates all entries, only imports valid ones after confirmation</validation>
        </function>
        <function name="main" lines="55">
          <description>Main interactive loop with menu-driven interface</description>
          <menu_options>
            <option number="1">Add single entry</option>
            <option number="2">Import JSON list</option>
            <option number="3">View entries</option>
            <option number="4">Generate XML files</option>
            <option number="5">Save and exit</option>
            <option number="6">Exit without saving</option>
          </menu_options>
        </function>
      </functions>
    </module>
    
    <module name="value_corpus_to_xml.py">
      <path>app/agents/corpus_admin/value_based_corpus/value_corpus_to_xml.py</path>
      <lines>155</lines>
      <purpose>XML generation with category-based file organization</purpose>
      <features>
        <feature>Automatic category assignment (defaults to "General")</feature>
        <feature>XML append functionality for continuous corpus growth</feature>
        <feature>Whitespace cleaning for readable XML output</feature>
        <feature>Entry count tracking across multiple generations</feature>
      </features>
      <functions>
        <function name="get_category_from_metadata" lines="5">
          <description>Extracts category from metadata or returns "General" default</description>
        </function>
        <function name="clean_xml_text" lines="8">
          <description>Removes excessive whitespace from XML elements</description>
        </function>
        <function name="write_xml_file" lines="52">
          <description>Appends entries to existing XML or creates new file</description>
          <behavior>
            <step>Check if XML file exists</step>
            <step>Load existing entries if present</step>
            <step>Append new entries</step>
            <step>Clean whitespace issues</step>
            <step>Update total entry count</step>
          </behavior>
        </function>
      </functions>
    </module>
    
    <module name="value_corpus_validation.py">
      <path>app/agents/corpus_admin/value_based_corpus/value_corpus_validation.py</path>
      <lines>88</lines>
      <purpose>Validation logic with relaxed workload_type constraints</purpose>
      <features>
        <feature>Required field validation (prompt, response, workload_type)</feature>
        <feature>Flexible workload_type acceptance (any string value)</feature>
        <feature>Metadata structure validation</feature>
        <feature>Domain field validation</feature>
      </features>
    </module>
  </architecture>

  <data_format>
    <json_input>
      <description>Expected JSON format for bulk import</description>
      <structure>
        <![CDATA[
        [
          {
            "prompt": "User question or request",
            "response": "System response or answer",
            "workload_type": "simple_chat | rag_pipeline | tool_use | custom_domain | any_string",
            "domain": "optional_domain_string",
            "metadata": {
              "category": "Category_Name (defaults to General if missing)",
              "any_key": "any_value"
            }
          }
        ]
        ]]>
      </structure>
      <required_fields>
        <field name="prompt" type="string">The user's input or question</field>
        <field name="response" type="string">The system's output or answer</field>
        <field name="workload_type" type="string">Type of workload (flexible values)</field>
      </required_fields>
      <optional_fields>
        <field name="domain" type="string">Domain classification</field>
        <field name="metadata" type="object">Flexible key-value pairs</field>
      </optional_fields>
    </json_input>
    
    <xml_output>
      <description>Generated XML file structure</description>
      <naming_pattern>{category}.xml</naming_pattern>
      <structure>
        <![CDATA[
        <?xml version="1.0" ?>
        <corpus category="Category_Name" entry_count="N">
          <prompt_response>
            <prompt>User question</prompt>
            <response>System answer</response>
            <workload_type>workload_type_value</workload_type>
            <domain>optional_domain</domain>
            <metadata>
              <category>Category_Name</category>
              <custom_field>custom_value</custom_field>
            </metadata>
          </prompt_response>
        </corpus>
        ]]>
      </structure>
    </xml_output>
  </data_format>

  <workflow>
    <step number="1">
      <action>Data Collection</action>
      <methods>
        <method>Single entry: Interactive prompt-based creation</method>
        <method>Bulk import: JSON file upload or direct paste</method>
      </methods>
    </step>
    <step number="2">
      <action>Validation</action>
      <description>
        Automatic validation occurs immediately upon entry creation or import.
        Required fields are checked, metadata structure is validated.
        Invalid entries are rejected with clear error messages.
      </description>
    </step>
    <step number="3">
      <action>Staging</action>
      <description>
        Valid entries are temporarily stored in value_corpus.json.
        This file serves as a staging area before XML generation.
      </description>
    </step>
    <step number="4">
      <action>XML Generation</action>
      <description>
        Entries are grouped by category (from metadata or default "General").
        XML files are created or appended to based on category.
        Entry counts are maintained across multiple generations.
      </description>
    </step>
    <step number="5">
      <action>Cleanup</action>
      <description>
        After successful XML generation, value_corpus.json is automatically cleared.
        This prevents duplicate entries in subsequent generations.
      </description>
    </step>
  </workflow>

  <categorization_rules>
    <rule priority="1">
      <condition>metadata.category exists</condition>
      <action>Use metadata.category value</action>
    </rule>
    <rule priority="2">
      <condition>metadata.category missing or empty</condition>
      <action>Default to "General" category</action>
    </rule>
    <sanitization>
      <description>Category names are sanitized for filesystem compatibility</description>
      <invalid_chars>{'<', '>', ':', '"', '/', '\\', '|', '?', '*'}</invalid_chars>
      <replacement>underscore (_)</replacement>
    </sanitization>
  </categorization_rules>

  <validation_rules>
    <rule name="required_fields">
      <fields>prompt, response, workload_type</fields>
      <action>Entry rejected if any required field is missing</action>
    </rule>
    <rule name="workload_type_flexibility">
      <description>
        Unlike the main corpus system which restricts to 6 values,
        value corpus accepts any string for workload_type
      </description>
      <constraint>Must be a non-empty string</constraint>
    </rule>
    <rule name="metadata_structure">
      <constraint>If present, must be a dictionary/object</constraint>
      <constraint>Keys must be strings</constraint>
      <constraint>Values must not be null</constraint>
    </rule>
  </validation_rules>

  <append_behavior>
    <description>
      XML files continuously grow with new entries rather than being overwritten
    </description>
    <process>
      <step>Parse existing XML file if present</step>
      <step>Extract existing entries and count</step>
      <step>Append new entries to existing structure</step>
      <step>Update total entry count in root element</step>
      <step>Clean whitespace to prevent formatting degradation</step>
    </process>
    <benefits>
      <benefit>Preserves historical corpus data</benefit>
      <benefit>Enables incremental corpus building</benefit>
      <benefit>Supports continuous learning workflows</benefit>
    </benefits>
  </append_behavior>

  <file_management>
    <staging_file>
      <name>value_corpus.json</name>
      <purpose>Temporary storage for corpus entries before XML generation</purpose>
      <lifecycle>Cleared automatically after successful XML generation</lifecycle>
    </staging_file>
    <output_directory>
      <name>value_corpus_xml/</name>
      <structure>Contains category-based XML files</structure>
      <files>
        <file>General.xml - Default category for uncategorized entries</file>
        <file>{Category}.xml - Custom category files based on metadata</file>
      </files>
    </output_directory>
  </file_management>

  <usage_examples>
    <example name="Single Entry Creation">
      <description>Interactive creation of individual corpus entries</description>
      <steps>
        <step>Run: python create_value_corpus.py</step>
        <step>Select option 1: Add single entry</step>
        <step>Enter prompt, response, workload_type</step>
        <step>Optionally add domain and metadata</step>
        <step>Entry is validated immediately</step>
      </steps>
    </example>
    
    <example name="Bulk JSON Import">
      <description>Import multiple entries from JSON file</description>
      <steps>
        <step>Prepare JSON file with array of entries</step>
        <step>Run: python create_value_corpus.py</step>
        <step>Select option 2: Import JSON list</step>
        <step>Choose file import or paste JSON</step>
        <step>Entries are validated automatically</step>
        <step>Only valid entries are imported</step>
      </steps>
    </example>
    
    <example name="Generate XML">
      <description>Convert staged entries to XML files</description>
      <steps>
        <step>After adding/importing entries</step>
        <step>Select option 4: Generate XML files</step>
        <step>XML files created/appended by category</step>
        <step>value_corpus.json is automatically cleared</step>
      </steps>
    </example>
  </usage_examples>

  <error_handling>
    <validation_errors>
      <behavior>Display clear error messages for invalid entries</behavior>
      <recovery>Allow retry for single entries, skip invalid in bulk import</recovery>
    </validation_errors>
    <file_errors>
      <behavior>Handle missing files, invalid JSON gracefully</behavior>
      <recovery>Return to menu without crashing</recovery>
    </file_errors>
    <xml_errors>
      <behavior>If existing XML is corrupted, create new file</behavior>
      <recovery>Preserve data integrity by not losing new entries</recovery>
    </xml_errors>
  </error_handling>

  <performance_characteristics>
    <metric name="Bulk Import Speed">
      <value>Can process thousands of entries in seconds</value>
    </metric>
    <metric name="Memory Usage">
      <value>Efficient streaming for large datasets</value>
    </metric>
    <metric name="XML Append Performance">
      <value>O(n) where n is number of existing entries</value>
    </metric>
  </performance_characteristics>

  <learnings>
    <learning id="1">
      <issue>XML files accumulated excessive whitespace on repeated appends</issue>
      <solution>Added clean_xml_text function to strip whitespace before writing</solution>
      <implementation>Recursively cleans text and tail attributes of all elements</implementation>
    </learning>
    <learning id="2">
      <issue>Users needed bulk import capability for efficiency</issue>
      <solution>Added import_json_list function supporting file and paste input</solution>
      <implementation>Validates all entries and reports issues before import</implementation>
    </learning>
    <learning id="3">
      <issue>Duplicate data accumulation in staging file</issue>
      <solution>Auto-clear value_corpus.json after XML generation</solution>
      <implementation>Ensures clean slate for next import session</implementation>
    </learning>
    <learning id="4">
      <issue>Missing category metadata caused organization issues</issue>
      <solution>Default to "General" category when metadata.category absent</solution>
      <implementation>Ensures all entries are properly categorized</implementation>
    </learning>
  </learnings>

  <future_enhancements>
    <enhancement priority="high">
      <description>Add deduplication logic to prevent duplicate entries</description>
    </enhancement>
    <enhancement priority="medium">
      <description>Support for CSV and other input formats</description>
    </enhancement>
    <enhancement priority="medium">
      <description>Web interface for corpus management</description>
    </enhancement>
    <enhancement priority="low">
      <description>Corpus versioning and rollback capabilities</description>
    </enhancement>
  </future_enhancements>

  <business_impact>
    <metric name="Efficiency Gain">
      <value>95% reduction in manual corpus creation time</value>
    </metric>
    <metric name="Data Quality">
      <value>100% validation coverage prevents invalid data entry</value>
    </metric>
    <metric name="Scalability">
      <value>Supports unlimited corpus growth through append functionality</value>
    </metric>
    <metric name="Flexibility">
      <value>Accepts any workload_type value for domain-specific needs</value>
    </metric>
  </business_impact>
</spec>