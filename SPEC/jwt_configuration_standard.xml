<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <name>JWT Configuration Standard</name>
    <version>1.0</version>
    <date>2025-08-29</date>
    <status>ACTIVE</status>
    <priority>CRITICAL</priority>
  </metadata>
  
  <summary>
    Defines the canonical JWT secret configuration standard across all Netra services.
    JWT_SECRET_KEY is the single source of truth for JWT token signing and validation.
  </summary>
  
  <standard>
    <rule id="JWT-001">
      <statement>ALL services MUST use JWT_SECRET_KEY as the environment variable name</statement>
      <rationale>Consistency prevents configuration errors and token validation failures</rationale>
      <enforcement>MANDATORY</enforcement>
    </rule>
    
    <rule id="JWT-002">
      <statement>JWT_SECRET is DEPRECATED and MUST NOT be used</statement>
      <rationale>Legacy variable causes confusion and inconsistency between services</rationale>
      <enforcement>PROHIBITED</enforcement>
    </rule>
    
    <rule id="JWT-003">
      <statement>Both auth_service and netra_backend MUST use the same JWT_SECRET_KEY value</statement>
      <rationale>Token validation requires identical secrets across services</rationale>
      <enforcement>MANDATORY</enforcement>
    </rule>
    
    <rule id="JWT-004">
      <statement>Environment-specific secrets take precedence over JWT_SECRET_KEY</statement>
      <rationale>Allows different secrets per environment while maintaining consistency</rationale>
      <priority>
        <item>JWT_SECRET_STAGING (staging environment)</item>
        <item>JWT_SECRET_PRODUCTION (production environment)</item>
        <item>JWT_SECRET_KEY (fallback for all environments)</item>
      </priority>
    </rule>
    
    <rule id="JWT-005">
      <statement>JWT_SECRET_KEY MUST be at least 32 characters in staging/production</statement>
      <rationale>Security requirement for cryptographic strength</rationale>
      <enforcement>VALIDATED_AT_STARTUP</enforcement>
    </rule>
  </standard>
  
  <implementation>
    <service name="auth_service">
      <file>auth_service/auth_core/secret_loader.py</file>
      <method>AuthSecretLoader.get_jwt_secret()</method>
      <priority>
        <step>Check JWT_SECRET_STAGING (staging only)</step>
        <step>Check JWT_SECRET_PRODUCTION (production only)</step>
        <step>Check Google Secret Manager (staging/production)</step>
        <step>Check JWT_SECRET_KEY (required fallback)</step>
        <step>Raise ValueError if not found</step>
      </priority>
    </service>
    
    <service name="netra_backend">
      <file>netra_backend/app/core/configuration/secrets.py</file>
      <method>SecretManager._get_jwt_secret_mapping()</method>
      <mapping>
        <env_var>JWT_SECRET_KEY</env_var>
        <target_field>jwt_secret_key</target_field>
        <required>true</required>
        <rotation_enabled>true</rotation_enabled>
      </mapping>
    </service>
  </implementation>
  
  <configuration_examples>
    <environment name="development">
      <example>
        JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production-must-be-at-least-32-chars
      </example>
    </environment>
    
    <environment name="staging">
      <example>
        # Loaded from Google Secret Manager: jwt-secret-key-staging
        # Or set via environment:
        JWT_SECRET_KEY=staging-jwt-secret-key-at-least-32-characters-long
        # Optional override:
        JWT_SECRET_STAGING=staging-specific-jwt-secret-at-least-32-characters
      </example>
    </environment>
    
    <environment name="production">
      <example>
        # Loaded from Google Secret Manager: jwt-secret-key
        # Never commit production secrets to version control
        JWT_SECRET_KEY=[REDACTED]
        JWT_SECRET_PRODUCTION=[REDACTED]
      </example>
    </environment>
  </configuration_examples>
  
  <validation>
    <check>Both services use JWT_SECRET_KEY environment variable</check>
    <check>No JWT_SECRET references in active code (deprecated)</check>
    <check>Secrets are at least 32 characters in staging/production</check>
    <check>Token generated by auth_service can be validated by backend</check>
    <check>Token generated by backend can be validated by auth_service</check>
  </validation>
  
  <migration>
    <completed date="2025-08-29">
      <action>Removed JWT_SECRET fallback from auth_service/auth_core/secret_loader.py</action>
      <action>Updated all test files to use JWT_SECRET_KEY</action>
      <action>Cleaned all environment files and templates</action>
      <action>Updated all documentation references</action>
      <action>Deployed to staging with new configuration</action>
    </completed>
  </migration>
  
  <references>
    <crosslink>SPEC/learnings/jwt_secret_standardization.xml</crosslink>
    <crosslink>SPEC/unified_environment_management.xml</crosslink>
    <crosslink>SPEC/independent_services.xml</crosslink>
    <crosslink>SPEC/shared_auth_integration.xml</crosslink>
    <report>JWT_SECRET_STANDARDIZATION_REPORT.md</report>
  </references>
  
  <monitoring>
    <alert>
      <condition>JWT_SECRET_KEY not set in staging/production</condition>
      <action>Service fails to start with clear error message</action>
    </alert>
    <alert>
      <condition>JWT_SECRET_KEY less than 32 characters</condition>
      <action>Validation error at startup in staging/production</action>
    </alert>
    <alert>
      <condition>Token validation failure between services</condition>
      <action>Check JWT_SECRET_KEY consistency in both services</action>
    </alert>
  </monitoring>
</specification>