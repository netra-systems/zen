<?xml version="1.0" encoding="UTF-8"?>
<specification>
  <metadata>
    <name>Microservice.IndependenceProtocol</name>
    <version>2.0.0</version>
    <priority>CRITICAL</priority>
    <description>
      MANDATORY protocol for designing and validating independent microservices. 
      Ensures zero coupling with the main application monolith.
    </description>
  </metadata>
  
  <critical-principle id="MS-P1">
    <title>Absolute Independence</title>
    <instruction>Ensure each microservice is 100% self-contained. ZERO direct code dependencies (imports) on the main application (`app/`) or other services.</instruction>
  </critical-principle>

  <section title="Architectural Constraints">
    <constraint id="MS-ARC-001" priority="CRITICAL">
      <title>Unique Module Namespace (NO 'app')</title>
      <instruction>Do not use 'app' as the root module name within a microservice. Use `{service_name}_core/`.</instruction>
      <code-example language="directory-structure">
        <before description="VIOLATION: Namespace collision">
auth_service/
├── app/
└── main.py
        </before>
        <after description="CORRECT: Unique namespace">
auth_service/
├── auth_core/
└── main.py
        </after>
      </code-example>
    </constraint>

    <constraint id="MS-ARC-002" priority="CRITICAL">
      <title>Forbidden Cross-Service Imports</title>
      <instruction>Services must not import code from the main `app/` directory.</instruction>
      <forbidden-import-pattern>from app\.</forbidden-import-pattern>
    </constraint>
  </section>

  <section title="Dockerfile Standardization">
    <guideline id="MS-DOCKER-001">
      <title>Optimized Multi-Stage Build Template</title>
      <instruction>Use the following multi-stage build pattern optimized for Cloud Run deployment.</instruction>
      <code-block language="dockerfile">
<![CDATA[
# Stage 1: Builder
FROM python:3.11-slim AS builder
WORKDIR /app
# Install build dependencies (gcc, g++, etc.)
RUN apt-get update && apt-get install -y --no-install-recommends gcc g++ && rm -rf /var/lib/apt/lists/*
# Build wheels
COPY service_name/requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim
WORKDIR /app
# Install from wheels
COPY --from=builder /app/wheels /wheels
RUN pip install --no-cache-dir /wheels/* && rm -rf /wheels

# Copy service code - CRITICAL STEP
COPY service_name/ ./

# Security: Non-root user
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# Cloud Run Optimization
ENV PYTHONUNBUFFERED=1 PYTHONDONTWRITEBYTECODE=1 PORT=8080 WORKERS=1

# Execution Command
CMD exec gunicorn main:app --bind 0.0.0.0:$PORT --workers $WORKERS --worker-class uvicorn.workers.UvicornWorker
]]>
      </code-block>
    </guideline>
  </section>

  <section title="Validation and Regression Prevention">
    <protocol id="MS-VAL-001">
      <title>Automated Independence Validation (AI Workflow)</title>
      <instruction>AI Agents must execute this validation protocol when creating or modifying a microservice before finalizing the task.</instruction>
      <validation-steps language="bash">
<![CDATA[
SERVICE_DIR=$1
cd $SERVICE_DIR

# 1. Check for forbidden 'app' directory (MS-ARC-001)
if [ -d "app" ]; then echo "ERROR: 'app' directory found."; exit 1; fi

# 2. Check for imports from main app (MS-ARC-002)
if grep -r "from app\." . --exclude-dir=venv; then echo "ERROR: Imports from main app found."; exit 1; fi

# 3. Test isolation import
python -c "from main import app" || (echo "ERROR: Isolated startup failed."; exit 1)
]]>
      </validation-steps>
    </protocol>
  </section>
</specification>