# Netra AI Development Environment Variables
# Copy this file to .env and fill in your actual values
# DO NOT commit .env with real credentials to version control

# ===== GOOGLE OAUTH CONFIGURATION =====
# Required for authentication - Get from Google Cloud Console
GOOGLE_CLIENT_ID=your_google_client_id_here
GOOGLE_CLIENT_SECRET=your_google_client_secret_here

# ===== LLM API KEYS =====
# Gemini API Key - Get from Google AI Studio
GEMINI_API_KEY=your_gemini_api_key_here

# LLM Configuration Mode
LLM_MODE=shared

# ===== DATABASE CONNECTIONS =====

# PostgreSQL Database URL
# Format: postgresql+asyncpg://username:password@host:port/database
DATABASE_URL=postgresql+asyncpg://postgres:password@localhost:5433/netra_dev

# ClickHouse Configuration
CLICKHOUSE_HOST=localhost
CLICKHOUSE_PORT=8123
CLICKHOUSE_USER=default
CLICKHOUSE_DEFAULT_PASSWORD=your_clickhouse_password
CLICKHOUSE_DEVELOPMENT_PASSWORD=your_dev_clickhouse_password
CLICKHOUSE_DB=default

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_redis_password

# ===== SECURITY KEYS =====
# JWT Secret Key - Generate a secure random string (32+ characters)
JWT_SECRET_KEY=your_jwt_secret_key_at_least_32_characters_long

# Fernet Encryption Key - Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
FERNET_KEY=your_fernet_encryption_key_here

# General Secret Key for application security
SECRET_KEY=your_application_secret_key_at_least_32_characters

# ===== OBSERVABILITY =====
# Langfuse for LLM observability (optional)
LANGFUSE_PUBLIC_KEY=pk-lf-your-public-key
LANGFUSE_SECRET_KEY=sk-lf-your-secret-key

# ===== APPLICATION SETTINGS =====
# Environment: development, staging, production
ENVIRONMENT=development

# ===== COMMON TROUBLESHOOTING =====
# If you encounter startup issues:
# 1. Port conflicts: Use --dynamic flag with dev_launcher.py
# 2. Database connection: Ensure PostgreSQL/ClickHouse are running
# 3. Missing dependencies: Run pip install -r requirements.txt
# 4. Node.js dependencies: Run cd frontend && npm install
# 5. Permission issues: Check database user permissions

# ===== OPTIONAL CONFIGURATIONS =====
# Override default ports (if needed)
# BACKEND_PORT=8000
# FRONTEND_PORT=3000

# Debug settings
# DEBUG=true
# LOG_LEVEL=DEBUG

# ===== QUICK SETUP COMMANDS =====
# 1. Install Python dependencies: pip install -r requirements.txt
# 2. Install frontend dependencies: cd frontend && npm install  
# 3. Setup databases: cd terraform-dev-postgres && terraform apply
# 4. Start development: python dev_launcher.py
# 5. Run tests: python test_runner.py --level unit