# Netra Docker Compose Configuration - Optimized for Stability
# Following SPEC/docker_volume_optimization.xml
#
# CRITICAL: Maximum 10 named volumes to prevent Docker Desktop crashes
# Code is baked into images - no code volumes needed
#
# Use profiles to run dev or test environments independently:
# - docker-compose --profile dev up     # Start development environment
# - docker-compose --profile test up    # Start test environment
# - docker-compose down                 # Stop all services

version: '3.8'

services:
  # ============================================
  # DEVELOPMENT ENVIRONMENT
  # ============================================

  # Dev PostgreSQL Database
  dev-postgres:
    image: postgres:15-alpine
    container_name: netra-dev-postgres
    profiles: ["dev"]
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}
      # Removed POSTGRES_HOST_AUTH_METHOD: trust for better security practice
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "${DEV_POSTGRES_PORT:-5433}:5432"
    volumes:
      # Data persistence only
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      # Escaped variable ($$) to ensure the container's shell evaluates it
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Dev Redis Cache
  dev-redis:
    image: redis:7-alpine
    container_name: netra-dev-redis
    profiles: ["dev"]
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    ports:
      - "${DEV_REDIS_PORT:-6380}:6379"
    volumes:
      # Data persistence only
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Dev ClickHouse Analytics (Optional - can be ephemeral)
  dev-clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-dev-clickhouse
    profiles: ["dev"]
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${DEV_CLICKHOUSE_HTTP_PORT:-8124}:8123"
      - "${DEV_CLICKHOUSE_TCP_PORT:-9001}:9000"
    volumes:
      # Data persistence only (optional for dev)
      - clickhouse_data:/var/lib/clickhouse
    healthcheck:
      # Using clickhouse-client for a more reliable health check than wget
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # Dev Auth Service
  dev-auth:
    build:
      context: .
      dockerfile: ./docker/auth.Dockerfile
      args:
        BUILD_ENV: development
    container_name: netra-dev-auth
    profiles: ["dev"]
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG

      # Database
      POSTGRES_HOST: dev-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}

      # Redis
      REDIS_HOST: dev-redis
      REDIS_PORT: 6379

      # Server Config
      PORT: 8081
      HOST: 0.0.0.0

      # Auth Config
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key-must-be-at-least-32-characters}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    ports:
      - "${DEV_AUTH_PORT:-8081}:8081"
    volumes:
      # FIX: Dedicated volume for auth service data (was previously sharing backend_data)
      - auth_data:/app/data
    depends_on:
      dev-postgres:
        condition: service_healthy
      dev-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Dev Backend Service
  dev-backend:
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      args:
        BUILD_ENV: development
    container_name: netra-dev-backend
    profiles: ["dev"]
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG

      # Database
      POSTGRES_HOST: dev-postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-netra123}
      POSTGRES_DB: ${POSTGRES_DB:-netra_dev}

      # Redis
      REDIS_HOST: dev-redis
      REDIS_PORT: 6379

      # ClickHouse
      CLICKHOUSE_HOST: dev-clickhouse
      # FIX: Use the TCP port (9000) for standard ClickHouse connections, not the HTTP port (8123)
      CLICKHOUSE_PORT: 9000
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-netra123}
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}

      # Auth Service
      AUTH_SERVICE_URL: http://dev-auth:8081

      # Server Config
      PORT: 8000
      HOST: 0.0.0.0

      # Secrets
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key-must-be-at-least-32-characters}
      SERVICE_SECRET: ${SERVICE_SECRET:-dev-service-secret-for-cross-service-auth}
      FERNET_KEY: ${FERNET_KEY:-iZAG-Kz661gRuJXEGzxgghUFnFRamgDrjDXZE6HdJkw=}
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-for-development}
    ports:
      - "${DEV_BACKEND_PORT:-8000}:8000"
    volumes:
      # Optional: single data volume for persistent storage if needed
      - backend_data:/app/data
    depends_on:
      dev-postgres:
        condition: service_healthy
      dev-redis:
        condition: service_healthy
      dev-auth:
        condition: service_healthy
      # FIX: Added missing dependency on ClickHouse
      dev-clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.4'

  # Dev Frontend Service
  dev-frontend:
    build:
      context: .
      dockerfile: ./docker/frontend.Dockerfile
      args:
        BUILD_ENV: development
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
        NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL:-http://localhost:8081}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
        NEXT_PUBLIC_ENVIRONMENT: development
    container_name: netra-dev-frontend
    profiles: ["dev"]
    environment:
      NODE_ENV: development
      PORT: 3000
      # NEXT_PUBLIC_* variables are embedded at build time (via args), removed from runtime environment.
    ports:
      - "${DEV_FRONTEND_PORT:-3000}:3000"
    depends_on:
      dev-backend:
        condition: service_healthy
      dev-auth:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - netra-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # ============================================
  # TEST ENVIRONMENT
  # ============================================

  # Test PostgreSQL Database
  test-postgres:
    image: postgres:15-alpine
    container_name: netra-test-postgres
    profiles: ["test"]
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: netra_test
      # Removed POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${TEST_POSTGRES_PORT:-5434}:5432"
    # Test environment - ephemeral data is acceptable
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - netra-network
    restart: no
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Test Redis Cache
  test-redis:
    image: redis:7-alpine
    container_name: netra-test-redis
    profiles: ["test"]
    command: redis-server --maxmemory 64mb --maxmemory-policy allkeys-lru
    ports:
      - "${TEST_REDIS_PORT:-6381}:6379"
    # Test environment - ephemeral data is acceptable
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    restart: no
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # Test ClickHouse Analytics
  test-clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-test-clickhouse
    profiles: ["test"]
    environment:
      CLICKHOUSE_DB: netra_test_analytics
      CLICKHOUSE_USER: test
      CLICKHOUSE_PASSWORD: test
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "${TEST_CLICKHOUSE_HTTP_PORT:-8125}:8123"
    # Test environment - ephemeral data is acceptable
    healthcheck:
      # Using clickhouse-client for a more reliable health check
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    restart: no
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

# ============================================
# VOLUMES - MAXIMUM 10 (Currently 5)
# ============================================
volumes:
  # Infrastructure data only (required for persistence)
  postgres_data:
    name: netra-postgres-data

  redis_data:
    name: netra-redis-data

  clickhouse_data:
    name: netra-clickhouse-data

  # Application data (for file uploads, caches, etc.)
  backend_data:
    name: netra-backend-data

  # FIX: Added dedicated volume for auth service
  auth_data:
    name: netra-auth-data

# ============================================
# NETWORKS
# ============================================
networks:
  netra-network:
    driver: bridge
    name: netra-network

# ============================================
# TOTAL RESOURCE LIMITS (Approx for Dev profile):
# - Memory: ~2.2GB
# - CPUs: ~1.875 cores
# - Volumes: 5 (vs previous 33 mentioned in comments)
# ============================================