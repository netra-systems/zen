version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: netra-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-netra}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-netra}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-netra} -d ${POSTGRES_DB:-netra}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    stop_signal: SIGTERM
    stop_grace_period: 30s
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: netra-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # ClickHouse Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23-alpine
    container_name: netra-clickhouse
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-netra_analytics}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_MAX_MEMORY_USAGE: 2000000000
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_TCP_PORT:-9000}:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - clickhouse_logs:/var/log/clickhouse-server
      - ./scripts/init_clickhouse.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Backend Service (Main Netra Application)
  backend:
    image: netra-backend:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
      args:
        BUILD_ENV: production
    container_name: netra-backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-netra}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-netra}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # ClickHouse
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-netra}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      
      # Auth Service
      AUTH_SERVICE_URL: http://auth:8081
      
      # Server Config
      PORT: 8000
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      WORKERS: ${BACKEND_WORKERS:-4}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      FERNET_KEY: ${FERNET_KEY}
      SERVICE_SECRET: ${SERVICE_SECRET}
      
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      NETRA_API_KEY: ${NETRA_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-https://app.netra.io}
      
      # Monitoring
      ENABLE_METRICS: true
      ENABLE_TRACING: ${ENABLE_TRACING:-false}
      
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./logs:/app/logs
      - ./SPEC:/app/SPEC:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Auth Service
  auth:
    image: netra-auth:${VERSION:-latest}
    build:
      context: .
      dockerfile: ./docker/auth.Dockerfile
      args:
        BUILD_ENV: production
    container_name: netra-auth
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-netra}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-netra}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      
      # Server Config
      PORT: 8081
      HOST: 0.0.0.0
      ENVIRONMENT: ${ENVIRONMENT:-production}
      WORKERS: ${AUTH_WORKERS:-2}
      
      # Auth Config
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-30}
      SERVICE_SECRET: ${SERVICE_SECRET}
      SERVICE_ID: auth
      
      # OAuth Configuration
      GOOGLE_OAUTH_CLIENT_ID: ${GOOGLE_OAUTH_CLIENT_ID}
      GOOGLE_OAUTH_CLIENT_SECRET: ${GOOGLE_OAUTH_CLIENT_SECRET}
      GITHUB_OAUTH_CLIENT_ID: ${GITHUB_OAUTH_CLIENT_ID}
      GITHUB_OAUTH_CLIENT_SECRET: ${GITHUB_OAUTH_CLIENT_SECRET}
      
      # Security
      ENABLE_RATE_LIMITING: true
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS:-5}
      
    ports:
      - "${AUTH_PORT:-8081}:8081"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Frontend Service
  frontend:
    image: netra-frontend:${VERSION:-latest}
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      args:
        BUILD_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.netra.io}
        NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL:-https://auth.netra.io}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://api.netra.io}
    container_name: netra-frontend
    restart: unless-stopped
    environment:
      # API URLs
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.netra.io}
      NEXT_PUBLIC_AUTH_URL: ${NEXT_PUBLIC_AUTH_URL:-https://auth.netra.io}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-wss://api.netra.io}
      NEXT_PUBLIC_WEBSOCKET_URL: ${NEXT_PUBLIC_WEBSOCKET_URL:-wss://api.netra.io/ws}
      
      # Internal API URLs (for SSR)
      API_URL: http://backend:8000
      AUTH_URL: http://auth:8081
      
      # Next.js Config
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      
      # Feature Flags
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-production}
      NEXT_PUBLIC_ENABLE_ANALYTICS: ${ENABLE_ANALYTICS:-true}
      NEXT_PUBLIC_GTM_ID: ${GTM_ID}
      NEXT_PUBLIC_GA_MEASUREMENT_ID: ${GA_MEASUREMENT_ID}
      
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
      - auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: netra-nginx
    restart: unless-stopped
    profiles: ["proxy"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - auth
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: netra-prometheus
    profiles: ["monitoring"]
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: netra-grafana
    profiles: ["monitoring"]
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: ${GRAFANA_PLUGINS:-}
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - netra-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

networks:
  netra-network:
    driver: bridge
    name: netra-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    name: netra-postgres-data
  redis_data:
    name: netra-redis-data
  clickhouse_data:
    name: netra-clickhouse-data
  clickhouse_logs:
    name: netra-clickhouse-logs
  nginx_cache:
    name: netra-nginx-cache
  prometheus_data:
    name: netra-prometheus-data
  grafana_data:
    name: netra-grafana-data