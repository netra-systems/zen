<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="2" tests="36" time="0.935" timestamp="2025-08-27T09:24:58.227062-07:00" hostname="Anthony"><testcase classname="tests.test_auth_comprehensive.TestAuthConfiguration" name="test_environment_setup" time="0.207" /><testcase classname="tests.test_auth_comprehensive.TestAuthConfiguration" name="test_auth_config_initialization" time="0.002" /><testcase classname="tests.test_auth_comprehensive.TestAuthConfiguration" name="test_auth_provider_enum" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestDatabaseOperations" name="test_database_connection_initialization" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestDatabaseOperations" name="test_database_connection_parameters" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestJWTTokenHandling" name="test_jwt_token_structure_validation" time="0.005" /><testcase classname="tests.test_auth_comprehensive.TestJWTTokenHandling" name="test_jwt_secret_configuration" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestJWTTokenHandling" name="test_jwt_token_generation" time="0.007" /><testcase classname="tests.test_auth_comprehensive.TestJWTTokenHandling" name="test_jwt_token_expiration" time="0.007" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_google_oauth_initiation" time="0.025" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_oauth_redirect_uri_configuration" time="0.002" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_oauth_state_csrf_protection" time="0.015" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_oauth_callback_handling" time="0.026" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_oauth_error_scenarios" time="0.009" /><testcase classname="tests.test_auth_comprehensive.TestOAuthFlows" name="test_oauth_staging_configuration" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestAPIEndpoints" name="test_health_endpoint" time="0.005" /><testcase classname="tests.test_auth_comprehensive.TestAPIEndpoints" name="test_auth_endpoints_head_method_support" time="0.020" /><testcase classname="tests.test_auth_comprehensive.TestAPIEndpoints" name="test_cors_headers" time="0.004" /><testcase classname="tests.test_auth_comprehensive.TestAPIEndpoints" name="test_login_endpoint_validation" time="0.032" /><testcase classname="tests.test_auth_comprehensive.TestSecurityScenarios" name="test_sql_injection_protection" time="0.024" /><testcase classname="tests.test_auth_comprehensive.TestSecurityScenarios" name="test_rate_limiting_protection" time="0.066" /><testcase classname="tests.test_auth_comprehensive.TestSecurityScenarios" name="test_password_security_validation" time="0.015" /><testcase classname="tests.test_auth_comprehensive.TestRedisOperations" name="test_redis_connection_availability" time="0.001"><skipped type="pytest.skip" message="Redis not available in test environment">C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\auth_service\tests\test_auth_comprehensive.py:439: Redis not available in test environment</skipped></testcase><testcase classname="tests.test_auth_comprehensive.TestRedisOperations" name="test_redis_failover_graceful_degradation" time="0.006" /><testcase classname="tests.test_auth_comprehensive.TestErrorHandling" name="test_database_connection_error_handling" time="0.006" /><testcase classname="tests.test_auth_comprehensive.TestErrorHandling" name="test_invalid_jwt_token_handling" time="0.016" /><testcase classname="tests.test_auth_comprehensive.TestErrorHandling" name="test_malformed_request_handling" time="0.014" /><testcase classname="tests.test_auth_comprehensive.TestEnvironmentCompatibility" name="test_development_environment_features" time="0.001" /><testcase classname="tests.test_auth_comprehensive.TestEnvironmentCompatibility" name="test_staging_environment_features" time="0.001"><skipped type="pytest.skip" message="Test requires staging environment, current: test">C:\Users\antho\OneDrive\Desktop\Netra\netra-core-generation-1\auth_service\tests\test_auth_comprehensive.py:538: Test requires staging environment, current: test</skipped></testcase><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_port_configuration_sources_consistency" time="0.002" /><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_auth_service_startup_completion_with_correct_port" time="0.004" /><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_auth_port_environment_variable_precedence" time="0.008" /><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_auth_service_url_generation_with_port_validation" time="0.004" /><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_hardcoded_port_detection" time="0.003" /><testcase classname="tests.test_auth_port_configuration.TestAuthPortConfigurationConsistency" name="test_auth_service_port_binding_matches_url_configuration" time="0.006" /><testcase classname="tests.test_auth_port_configuration.TestAuthServiceConfigurationValidation" name="test_configuration_validation_detects_port_mismatch" time="0.007"><failure message="Failed: Configuration validation should catch port mismatches gracefully, but got exception: Configuration validation failed! Binding port None != URL port 8081. AuthConfig should validate port consistency.&#10;assert None == '8081'">E   AssertionError: Configuration validation failed! Binding port None != URL port 8081. AuthConfig should validate port consistency.
    assert None == '8081'

During handling of the above exception, another exception occurred:
E   Failed: Configuration validation should catch port mismatches gracefully, but got exception: Configuration validation failed! Binding port None != URL port 8081. AuthConfig should validate port consistency.
    assert None == '8081'</failure></testcase></testsuite></testsuites>