# Netra Staging Deployment Configuration
# CRITICAL: Staging Environment Must Match Production Exactly
# 
# This configuration is designed for:
# - 24-hour staging validation before production 
# - Complete request isolation testing
# - 100+ concurrent user simulation
# - Rollback validation procedures
# - Production parity verification
#
# Usage:
#   docker-compose -f docker-compose.staging.yml up -d
#   docker-compose -f docker-compose.staging.yml down

version: '3.8'

services:
  # ============================================
  # BACKEND SERVICE - Request Isolation Priority
  # ============================================
  backend:
    build:
      context: .
      dockerfile: docker/backend.staging.Dockerfile
      args:
        - ENVIRONMENT=staging
    environment:
      # Core Environment
      ENVIRONMENT: staging
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app
      
      # Request Isolation Configuration - CRITICAL
      ENABLE_REQUEST_ISOLATION: "true"
      MAX_CONCURRENT_REQUESTS: "200"
      REQUEST_TIMEOUT: "300"
      AGENT_CLEANUP_ENABLED: "true"
      
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: netra_staging
      POSTGRES_USER: netra_staging
      POSTGRES_PASSWORD: staging_secure_password_2024
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # ClickHouse Configuration
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 8123
      CLICKHOUSE_DB: netra_staging
      CLICKHOUSE_USER: staging_user
      CLICKHOUSE_PASSWORD: staging_clickhouse_password
      CLICKHOUSE_SECURE: "false"
      
      # Security Configuration
      SECRET_KEY: staging_secret_key_extremely_secure_32_chars_minimum_2024
      JWT_SECRET_KEY: staging_jwt_secret_key_secure_64_chars_minimum_for_production_2024
      FERNET_KEY: staging_fernet_key_base64_32_bytes_secure_2024_replace_this_value
      
      # Service Configuration
      SERVICE_ID: netra-backend
      SERVICE_SECRET: staging_service_secret_secure_32_chars_minimum_2024
      
      # Service URLs - Internal Container Communication
      AUTH_SERVICE_URL: http://auth:8081
      FRONTEND_URL: http://frontend:3000
      
      # LLM Configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      
      # WebSocket Configuration - Staging Timeouts
      WEBSOCKET_CONNECTION_TIMEOUT: "900"
      WEBSOCKET_HEARTBEAT_INTERVAL: "30"
      WEBSOCKET_CLEANUP_INTERVAL: "180"
      
      # Monitoring & Logging
      LOG_LEVEL: INFO
      ENABLE_METRICS: "true"
      ENABLE_TRACING: "true"
      
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
    volumes:
      # Logs for debugging
      - staging-backend-logs:/app/logs

  # ============================================
  # AUTH SERVICE - Isolation Validation
  # ============================================
  auth:
    build:
      context: .
      dockerfile: docker/auth.staging.Dockerfile
      args:
        - ENVIRONMENT=staging
    environment:
      # Core Environment
      ENVIRONMENT: staging
      PYTHONUNBUFFERED: "1"
      PYTHONPATH: /app
      
      # Database Configuration - Same as Backend
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: netra_staging
      POSTGRES_USER: netra_staging
      POSTGRES_PASSWORD: staging_secure_password_2024
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/1
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Configuration - MUST Match Backend
      JWT_SECRET_KEY: staging_jwt_secret_key_secure_64_chars_minimum_for_production_2024
      JWT_ALGORITHM: HS256
      JWT_ACCESS_EXPIRY_MINUTES: "15"
      JWT_REFRESH_EXPIRY_DAYS: "7"
      
      # Service Configuration
      SERVICE_ID: netra-auth
      SERVICE_SECRET: staging_service_secret_secure_32_chars_minimum_2024
      FRONTEND_URL: http://frontend:3000
      
      # OAuth Configuration - Staging Credentials
      GOOGLE_CLIENT_ID: ${GOOGLE_STAGING_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_STAGING_CLIENT_SECRET}
      
      # Security Configuration
      SECURE_HEADERS_ENABLED: "true"
      SESSION_TTL_HOURS: "24"
      
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    volumes:
      - staging-auth-logs:/app/logs

  # ============================================
  # FRONTEND SERVICE - Production Build
  # ============================================
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.staging.Dockerfile
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_ENVIRONMENT=staging
        - NEXT_PUBLIC_API_URL=http://backend:8000
        - NEXT_PUBLIC_AUTH_URL=http://auth:8081
        - NEXT_PUBLIC_WS_URL=ws://backend:8000
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_ENVIRONMENT: staging
      NEXT_PUBLIC_API_URL: http://backend:8000
      NEXT_PUBLIC_AUTH_URL: http://auth:8081
      NEXT_PUBLIC_WS_URL: ws://backend:8000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - auth
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M

  # ============================================
  # DATABASE SERVICES - Production-Like
  # ============================================
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: netra_staging
      POSTGRES_USER: netra_staging
      POSTGRES_PASSWORD: staging_secure_password_2024
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: "--data-checksums --auth-host=md5"
    ports:
      - "5434:5432"  # Avoid conflicts with dev
    volumes:
      - staging-postgres-data:/var/lib/postgresql/data
      - ./database_scripts/staging_init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netra_staging"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 500mb --maxmemory-policy allkeys-lru --save 60 100
    ports:
      - "6381:6379"  # Avoid conflicts with dev
    volumes:
      - staging-redis-data:/data
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M

  clickhouse:
    image: clickhouse/clickhouse-server:25.7.6.21-stable
    environment:
      CLICKHOUSE_DB: netra_staging
      CLICKHOUSE_USER: staging_user
      CLICKHOUSE_PASSWORD: staging_clickhouse_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8125:8123"  # Avoid conflicts with dev
      - "9002:9000"
    volumes:
      - staging-clickhouse-data:/var/lib/clickhouse
    networks:
      - staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M

  # ============================================
  # MONITORING & TESTING SERVICES
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - staging-prometheus-data:/prometheus
    networks:
      - staging-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_admin_password
    ports:
      - "3001:3000"
    volumes:
      - staging-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - staging-network
    restart: unless-stopped

  # Load Testing Service for Concurrent User Simulation
  load-tester:
    build:
      context: .
      dockerfile: docker/load-tester.Dockerfile
    environment:
      TARGET_URL: http://backend:8000
      MAX_USERS: 150
      SPAWN_RATE: 10
      RUN_TIME: 3600  # 1 hour
    depends_on:
      - backend
      - auth
    networks:
      - staging-network
    profiles:
      - testing
    volumes:
      - staging-load-test-results:/app/results

# ============================================
# NETWORKS & VOLUMES
# ============================================
networks:
  staging-network:
    driver: bridge
    name: staging-network

volumes:
  # Database Persistence
  staging-postgres-data:
    name: staging-postgres-data
  staging-redis-data:
    name: staging-redis-data
  staging-clickhouse-data:
    name: staging-clickhouse-data
  
  # Application Logs
  staging-backend-logs:
    name: staging-backend-logs
  staging-auth-logs:
    name: staging-auth-logs
  
  # Monitoring Data
  staging-prometheus-data:
    name: staging-prometheus-data
  staging-grafana-data:
    name: staging-grafana-data
  
  # Testing Results
  staging-load-test-results:
    name: staging-load-test-results