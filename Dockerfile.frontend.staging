# syntax=docker/dockerfile:1
# Optimized Frontend Dockerfile for Staging
# Designed to work from root directory with frontend context
# Requires Docker BuildKit: DOCKER_BUILDKIT=1
FROM node:20-alpine AS deps
WORKDIR /app

# Copy package files from frontend directory
COPY frontend/package*.json ./

# Install with optimized caching and cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm config set fetch-retries 10 && \
    npm config set fetch-retry-mintimeout 30000 && \
    npm config set fetch-retry-maxtimeout 180000 && \
    npm config set prefer-offline true && \
    npm config set audit false && \
    npm config set fund false && \
    npm config set cache /root/.npm && \
    npm ci --legacy-peer-deps --verbose || \
    (npm cache verify && npm ci --legacy-peer-deps --verbose)

# Builder stage
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy only necessary config files first (better caching)
COPY frontend/package*.json ./
COPY frontend/tsconfig.json ./
COPY frontend/next.config.ts ./
COPY frontend/tailwind.config.ts ./
COPY frontend/postcss.config.mjs ./
COPY frontend/eslint.config.mjs ./
COPY frontend/components.json ./

# Accept build args for API URL and other configs
ARG NEXT_PUBLIC_API_URL
ARG NEXT_PUBLIC_WS_URL
ARG NEXT_PUBLIC_AUTH_URL
ARG NEXT_PUBLIC_ENVIRONMENT=staging

ENV NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
ENV NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL}
ENV NEXT_PUBLIC_AUTH_URL=${NEXT_PUBLIC_AUTH_URL}
ENV NEXT_PUBLIC_ENVIRONMENT=${NEXT_PUBLIC_ENVIRONMENT}

# Copy source files in order of change frequency (least to most)
# Static assets and configs change less frequently
COPY frontend/public ./public
COPY frontend/lib ./lib

# Type definitions and utilities
COPY frontend/types ./types
COPY frontend/utils ./utils

# Services and state management
COPY frontend/services ./services
COPY frontend/store ./store
COPY frontend/hooks ./hooks
COPY frontend/auth ./auth

# Additional required directories
COPY frontend/config ./config
COPY frontend/providers ./providers
COPY frontend/styles ./styles

# UI components and pages (most frequently changed)
COPY frontend/components ./components
COPY frontend/app ./app

# Build the application with cache mount
RUN --mount=type=cache,target=/app/.next/cache \
    --mount=type=cache,target=/root/.npm \
    npm run build && \
    echo "Build cache size: $(du -sh /app/.next/cache 2>/dev/null || echo 'N/A')"

# Production stage
FROM node:20-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy standalone output (Next.js creates server.js at root)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Ensure server.js exists
RUN test -f server.js || (echo "Error: server.js not found in standalone output" && exit 1)

USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})" || exit 1

CMD ["node", "server.js"]