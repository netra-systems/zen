# Netra Complete Infrastructure - Test and Dev Database Services
# This file runs all 6 infrastructure services (3 test + 3 dev) simultaneously
# Backend, Auth, and Frontend services are run locally for development
# Usage: docker-compose -f docker-compose.all.yml up -d

version: '3.8'

services:
  # ============================================
  # TEST ENVIRONMENT (Default Ports)
  # ============================================
  
  # Test PostgreSQL
  test-postgres:
    image: postgres:15-alpine
    container_name: netra-test-postgres
    environment:
      POSTGRES_USER: netra_test
      POSTGRES_PASSWORD: netra_test
      POSTGRES_DB: netra_test
    ports:
      - "5432:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netra_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Test Redis
  test-redis:
    image: redis:7-alpine
    container_name: netra-test-redis
    ports:
      - "6379:6379"
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Test ClickHouse
  test-clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: netra-test-clickhouse
    environment:
      CLICKHOUSE_DB: netra_analytics
      CLICKHOUSE_USER: netra
      CLICKHOUSE_PASSWORD: netra123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - test_clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Note: Backend, Auth, and Frontend services are run locally during development
  # To run them locally:
  # - Backend: cd netra_backend && uvicorn app.main:app --reload --port 8000
  # - Auth: cd auth_service && uvicorn main:app --reload --port 8081
  # - Frontend: cd frontend && npm run dev (port 3000)

  # ============================================
  # DEV ENVIRONMENT (Alternative Ports)
  # ============================================
  
  # Dev PostgreSQL
  dev-postgres:
    image: postgres:15-alpine
    container_name: netra-dev-postgres
    environment:
      POSTGRES_USER: netra_dev
      POSTGRES_PASSWORD: netra_dev
      POSTGRES_DB: netra_dev
    ports:
      - "5433:5432"
    volumes:
      - dev_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U netra_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Dev Redis
  dev-redis:
    image: redis:7-alpine
    container_name: netra-dev-redis
    ports:
      - "6380:6379"
    volumes:
      - dev_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Dev ClickHouse
  dev-clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: netra-dev-clickhouse
    environment:
      CLICKHOUSE_DB: netra_analytics
      CLICKHOUSE_USER: netra
      CLICKHOUSE_PASSWORD: netra123
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8124:8123"
      - "9001:9000"
    volumes:
      - dev_clickhouse_data:/var/lib/clickhouse
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - netra-network

  # Note: Backend, Auth, and Frontend services are run locally during development
  # To run them locally:
  # - Backend: cd netra_backend && uvicorn app.main:app --reload --port 8001
  # - Auth: cd auth_service && uvicorn main:app --reload --port 8082  
  # - Frontend: cd frontend && npm run dev -- --port 3001

# Networks
networks:
  netra-network:
    driver: bridge

# Volumes
volumes:
  # Test volumes
  test_postgres_data:
  test_redis_data:
  test_clickhouse_data:
  # Dev volumes
  dev_postgres_data:
  dev_redis_data:
  dev_clickhouse_data: